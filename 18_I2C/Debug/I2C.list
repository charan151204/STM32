
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004adc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004c6c  08004c6c  00005c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cfc  08004cfc  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004cfc  08004cfc  00005cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d04  08004d04  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d04  08004d04  00005d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d08  08004d08  00005d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004d0c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000006c  08004d78  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08004d78  00006300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5b8  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6c  00000000  00000000  00013654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  000152c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000932  00000000  00000000  00015e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002631c  00000000  00000000  000167ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecc1  00000000  00000000  0003cae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea8bf  00000000  00000000  0004b7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f8  00000000  00000000  001360ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001396a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c54 	.word	0x08004c54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08004c54 	.word	0x08004c54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ADXL345_Init>:
static void MX_USART2_UART_Init(void); // Initializes UART2
static void MX_I2C1_Init(void);  // Initializes I2C1

/* Initializes ADXL345 for measurement mode */
void ADXL345_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af04      	add	r7, sp, #16
    uint8_t data;

    data = 0x08; // Measurement mode
 80005b2:	2308      	movs	r3, #8
 80005b4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR, 0x2D, 1, &data, 1, HAL_MAX_DELAY);
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	2301      	movs	r3, #1
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2301      	movs	r3, #1
 80005c6:	222d      	movs	r2, #45	@ 0x2d
 80005c8:	21d0      	movs	r1, #208	@ 0xd0
 80005ca:	480b      	ldr	r0, [pc, #44]	@ (80005f8 <ADXL345_Init+0x4c>)
 80005cc:	f001 f83a 	bl	8001644 <HAL_I2C_Mem_Write>

    data = 0x08; // Full resolution, ±2g range
 80005d0:	2308      	movs	r3, #8
 80005d2:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR, 0x31, 1, &data, 1, HAL_MAX_DELAY);
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
 80005d8:	9302      	str	r3, [sp, #8]
 80005da:	2301      	movs	r3, #1
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	2231      	movs	r2, #49	@ 0x31
 80005e6:	21d0      	movs	r1, #208	@ 0xd0
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <ADXL345_Init+0x4c>)
 80005ea:	f001 f82b 	bl	8001644 <HAL_I2C_Mem_Write>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000d4 	.word	0x200000d4

080005fc <ADXL345_Read>:

/* Reads acceleration data from ADXL345 */
void ADXL345_Read(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af04      	add	r7, sp, #16
    HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR, 0x32, 1, accel_data, 6, HAL_MAX_DELAY);
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	9302      	str	r3, [sp, #8]
 8000608:	2306      	movs	r3, #6
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <ADXL345_Read+0x70>)
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	2232      	movs	r2, #50	@ 0x32
 8000614:	21d0      	movs	r1, #208	@ 0xd0
 8000616:	4816      	ldr	r0, [pc, #88]	@ (8000670 <ADXL345_Read+0x74>)
 8000618:	f001 f928 	bl	800186c <HAL_I2C_Mem_Read>

    x = (int16_t)(accel_data[1] << 8 | accel_data[0]); // Combine X high/low
 800061c:	4b13      	ldr	r3, [pc, #76]	@ (800066c <ADXL345_Read+0x70>)
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	b21b      	sxth	r3, r3
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	b21a      	sxth	r2, r3
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <ADXL345_Read+0x70>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b21b      	sxth	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	b21a      	sxth	r2, r3
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <ADXL345_Read+0x78>)
 8000632:	801a      	strh	r2, [r3, #0]
    y = (int16_t)(accel_data[3] << 8 | accel_data[2]); // Combine Y high/low
 8000634:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <ADXL345_Read+0x70>)
 8000636:	78db      	ldrb	r3, [r3, #3]
 8000638:	b21b      	sxth	r3, r3
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	b21a      	sxth	r2, r3
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <ADXL345_Read+0x70>)
 8000640:	789b      	ldrb	r3, [r3, #2]
 8000642:	b21b      	sxth	r3, r3
 8000644:	4313      	orrs	r3, r2
 8000646:	b21a      	sxth	r2, r3
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <ADXL345_Read+0x7c>)
 800064a:	801a      	strh	r2, [r3, #0]
    z = (int16_t)(accel_data[5] << 8 | accel_data[4]); // Combine Z high/low
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <ADXL345_Read+0x70>)
 800064e:	795b      	ldrb	r3, [r3, #5]
 8000650:	b21b      	sxth	r3, r3
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	b21a      	sxth	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <ADXL345_Read+0x70>)
 8000658:	791b      	ldrb	r3, [r3, #4]
 800065a:	b21b      	sxth	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b21a      	sxth	r2, r3
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <ADXL345_Read+0x80>)
 8000662:	801a      	strh	r2, [r3, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000088 	.word	0x20000088
 8000670:	200000d4 	.word	0x200000d4
 8000674:	2000008e 	.word	0x2000008e
 8000678:	20000090 	.word	0x20000090
 800067c:	20000092 	.word	0x20000092

08000680 <main>:

int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af02      	add	r7, sp, #8
  HAL_Init();               // Initialize HAL library
 8000686:	f000 fae1 	bl	8000c4c <HAL_Init>
  SystemClock_Config();     // Configure system clock
 800068a:	f000 f857 	bl	800073c <SystemClock_Config>
  MX_GPIO_Init();           // Initialize GPIO
 800068e:	f000 f8f1 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();    // Initialize UART2
 8000692:	f000 f8c5 	bl	8000820 <MX_USART2_UART_Init>
  MX_I2C1_Init();           // Initialize I2C1
 8000696:	f000 f893 	bl	80007c0 <MX_I2C1_Init>

  // Send test message to ADXL345
  if (HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDR, txData, sizeof(txData)-1, HAL_MAX_DELAY) == HAL_OK)
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	230e      	movs	r3, #14
 80006a2:	4a1e      	ldr	r2, [pc, #120]	@ (800071c <main+0x9c>)
 80006a4:	21d0      	movs	r1, #208	@ 0xd0
 80006a6:	481e      	ldr	r0, [pc, #120]	@ (8000720 <main+0xa0>)
 80006a8:	f000 feb4 	bl	8001414 <HAL_I2C_Master_Transmit>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d106      	bne.n	80006c0 <main+0x40>
  {
      HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET); // Turn LED ON if success
 80006b2:	2201      	movs	r2, #1
 80006b4:	2120      	movs	r1, #32
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f000 fdf7 	bl	80012ac <HAL_GPIO_WritePin>
 80006be:	e005      	b.n	80006cc <main+0x4c>
  }
  else
  {
      HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET); // Turn LED OFF if fail
 80006c0:	2200      	movs	r2, #0
 80006c2:	2120      	movs	r1, #32
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c8:	f000 fdf0 	bl	80012ac <HAL_GPIO_WritePin>
  }
   ADXL345_Init(); // Configure ADXL345 sensor for measurement mode
 80006cc:	f7ff ff6e 	bl	80005ac <ADXL345_Init>

  while (1) // Infinite loop to continuously read and send data
  {
      ADXL345_Read(); // Read X, Y, Z acceleration values from ADXL345
 80006d0:	f7ff ff94 	bl	80005fc <ADXL345_Read>

      // Format acceleration data into a text string for UART transmission
      snprintf(msg, sizeof(msg), "X=%d, Y=%d, Z=%d\r\n", x, y, z);
 80006d4:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <main+0xa4>)
 80006d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006da:	4619      	mov	r1, r3
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <main+0xa8>)
 80006de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <main+0xac>)
 80006e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	460b      	mov	r3, r1
 80006f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000730 <main+0xb0>)
 80006f2:	2140      	movs	r1, #64	@ 0x40
 80006f4:	480f      	ldr	r0, [pc, #60]	@ (8000734 <main+0xb4>)
 80006f6:	f003 fdf9 	bl	80042ec <sniprintf>

      // Send the formatted acceleration data over UART
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <main+0xb4>)
 80006fc:	f7ff fd68 	bl	80001d0 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	490a      	ldr	r1, [pc, #40]	@ (8000734 <main+0xb4>)
 800070a:	480b      	ldr	r0, [pc, #44]	@ (8000738 <main+0xb8>)
 800070c:	f003 f890 	bl	8003830 <HAL_UART_Transmit>

      HAL_Delay(500); // Wait for 500 ms before next reading
 8000710:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000714:	f000 fb16 	bl	8000d44 <HAL_Delay>
      ADXL345_Read(); // Read X, Y, Z acceleration values from ADXL345
 8000718:	bf00      	nop
 800071a:	e7d9      	b.n	80006d0 <main+0x50>
 800071c:	20000000 	.word	0x20000000
 8000720:	200000d4 	.word	0x200000d4
 8000724:	2000008e 	.word	0x2000008e
 8000728:	20000090 	.word	0x20000090
 800072c:	20000092 	.word	0x20000092
 8000730:	08004c6c 	.word	0x08004c6c
 8000734:	20000094 	.word	0x20000094
 8000738:	20000128 	.word	0x20000128

0800073c <SystemClock_Config>:

}

/* Configures HSI oscillator, PLL, and clock dividers */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b096      	sub	sp, #88	@ 0x58
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2244      	movs	r2, #68	@ 0x44
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fe04 	bl	8004358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	463b      	mov	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000762:	f001 fd05 	bl	8002170 <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000766:	2302      	movs	r3, #2
 8000768:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2310      	movs	r3, #16
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000780:	230a      	movs	r3, #10
 8000782:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000784:	2307      	movs	r3, #7
 8000786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	657b      	str	r3, [r7, #84]	@ 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fd41 	bl	800221c <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800079a:	230f      	movs	r3, #15
 800079c:	603b      	str	r3, [r7, #0]
                              | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2303      	movs	r3, #3
 80007a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80007ae:	463b      	mov	r3, r7
 80007b0:	2104      	movs	r1, #4
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 f90e 	bl	80029d4 <HAL_RCC_ClockConfig>
}
 80007b8:	bf00      	nop
 80007ba:	3758      	adds	r7, #88	@ 0x58
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <MX_I2C1_Init>:

/* Initializes I2C1 for 7-bit addressing */
static void MX_I2C1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007c6:	4a14      	ldr	r2, [pc, #80]	@ (8000818 <MX_I2C1_Init+0x58>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80007ca:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007cc:	4a13      	ldr	r2, [pc, #76]	@ (800081c <MX_I2C1_Init+0x5c>)
 80007ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007d8:	2201      	movs	r2, #1
 80007da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c1);
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <MX_I2C1_Init+0x54>)
 80007fc:	f000 fd6e 	bl	80012dc <HAL_I2C_Init>

  HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 8000800:	2100      	movs	r1, #0
 8000802:	4804      	ldr	r0, [pc, #16]	@ (8000814 <MX_I2C1_Init+0x54>)
 8000804:	f001 fc0e 	bl	8002024 <HAL_I2CEx_ConfigAnalogFilter>
  HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 8000808:	2100      	movs	r1, #0
 800080a:	4802      	ldr	r0, [pc, #8]	@ (8000814 <MX_I2C1_Init+0x54>)
 800080c:	f001 fc55 	bl	80020ba <HAL_I2CEx_ConfigDigitalFilter>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000d4 	.word	0x200000d4
 8000818:	40005400 	.word	0x40005400
 800081c:	10d19ce4 	.word	0x10d19ce4

08000820 <MX_USART2_UART_Init>:

/* Initializes UART2 for 115200 baud communication */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b05      	ldr	r3, [pc, #20]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	4b03      	ldr	r3, [pc, #12]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_UART_Init(&huart2);
 8000862:	4802      	ldr	r0, [pc, #8]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000864:	f002 ff96 	bl	8003794 <HAL_UART_Init>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000128 	.word	0x20000128
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:

/* Initializes GPIO for LED and button */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	4a2a      	ldr	r2, [pc, #168]	@ (8000938 <MX_GPIO_Init+0xc4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	4a24      	ldr	r2, [pc, #144]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a1e      	ldr	r2, [pc, #120]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	4a18      	ldr	r2, [pc, #96]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_GPIO_Init+0xc4>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f2:	f000 fcdb 	bl	80012ac <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LD2_Pin;
 80008f6:	2320      	movs	r3, #32
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000910:	f000 fb22 	bl	8000f58 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = B1_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_GPIO_Init+0xc8>)
 800092c:	f000 fb14 	bl	8000f58 <HAL_GPIO_Init>
}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	@ 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	48000800 	.word	0x48000800

08000940 <Error_Handler>:

/* Handles errors by stopping execution */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  __disable_irq();
  while (1) { }
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <HAL_MspInit+0x44>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6613      	str	r3, [r2, #96]	@ 0x60
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x44>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6593      	str	r3, [r2, #88]	@ 0x58
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0ac      	sub	sp, #176	@ 0xb0
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2288      	movs	r2, #136	@ 0x88
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 fccf 	bl	8004358 <memset>
  if(hi2c->Instance==I2C1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a21      	ldr	r2, [pc, #132]	@ (8000a44 <HAL_I2C_MspInit+0xb0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d13a      	bne.n	8000a3a <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009c4:	2340      	movs	r3, #64	@ 0x40
 80009c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fa23 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009dc:	f7ff ffb0 	bl	8000940 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e4:	4a18      	ldr	r2, [pc, #96]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009f8:	23c0      	movs	r3, #192	@ 0xc0
 80009fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fe:	2312      	movs	r3, #18
 8000a00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a10:	2304      	movs	r3, #4
 8000a12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <HAL_I2C_MspInit+0xb8>)
 8000a1e:	f000 fa9b 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a26:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 8000a28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a3a:	bf00      	nop
 8000a3c:	37b0      	adds	r7, #176	@ 0xb0
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40005400 	.word	0x40005400
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000400 	.word	0x48000400

08000a50 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0ac      	sub	sp, #176	@ 0xb0
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2288      	movs	r2, #136	@ 0x88
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 fc71 	bl	8004358 <memset>
  if(huart->Instance==USART2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <HAL_UART_MspInit+0xb0>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d13b      	bne.n	8000af8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 f9c5 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a98:	f7ff ff52 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9c:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa0:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac0:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000acc:	230c      	movs	r3, #12
 8000ace:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f000 fa30 	bl	8000f58 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000af8:	bf00      	nop
 8000afa:	37b0      	adds	r7, #176	@ 0xb0
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40021000 	.word	0x40021000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f8d1 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	@ (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f003 fbe6 	bl	8004368 <__errno>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <_sbrk+0x64>)
 8000bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20018000 	.word	0x20018000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	200001b0 	.word	0x200001b0
 8000bd0:	20000300 	.word	0x20000300

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bfc:	f7ff ffea 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	@ (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c26:	f003 fba5 	bl	8004374 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c2a:	f7ff fd29 	bl	8000680 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c3c:	08004d0c 	.word	0x08004d0c
  ldr r2, =_sbss
 8000c40:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c44:	20000300 	.word	0x20000300

08000c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_2_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <HAL_Init+0x3c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <HAL_Init+0x3c>)
 8000c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c62:	2003      	movs	r0, #3
 8000c64:	f000 f944 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f000 f80f 	bl	8000c8c <HAL_InitTick>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	e001      	b.n	8000c7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7a:	f7ff fe67 	bl	800094c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40022000 	.word	0x40022000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d023      	beq.n	8000ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_InitTick+0x70>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f941 	bl	8000f3e <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10f      	bne.n	8000ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d809      	bhi.n	8000cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f000 f919 	bl	8000f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_InitTick+0x74>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e007      	b.n	8000cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e004      	b.n	8000cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e001      	b.n	8000cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000018 	.word	0x20000018
 8000cfc:	20000010 	.word	0x20000010
 8000d00:	20000014 	.word	0x20000014

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000018 	.word	0x20000018
 8000d28:	200001b4 	.word	0x200001b4

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200001b4 	.word	0x200001b4

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000018 	.word	0x20000018

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	@ (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff47 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff5c 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffb0 	bl	8000eac <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e17f      	b.n	8001268 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8171 	beq.w	8001262 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d005      	beq.n	8000f98 <HAL_GPIO_Init+0x40>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d130      	bne.n	8000ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	f003 0201 	and.w	r2, r3, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b03      	cmp	r3, #3
 8001004:	d118      	bne.n	8001038 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800100c:	2201      	movs	r2, #1
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	f003 0201 	and.w	r2, r3, #1
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b03      	cmp	r3, #3
 8001042:	d017      	beq.n	8001074 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d123      	bne.n	80010c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3208      	adds	r2, #8
 8001088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	6939      	ldr	r1, [r7, #16]
 80010c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0203 	and.w	r2, r3, #3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80ac 	beq.w	8001262 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b5f      	ldr	r3, [pc, #380]	@ (8001288 <HAL_GPIO_Init+0x330>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110e:	4a5e      	ldr	r2, [pc, #376]	@ (8001288 <HAL_GPIO_Init+0x330>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6613      	str	r3, [r2, #96]	@ 0x60
 8001116:	4b5c      	ldr	r3, [pc, #368]	@ (8001288 <HAL_GPIO_Init+0x330>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001122:	4a5a      	ldr	r2, [pc, #360]	@ (800128c <HAL_GPIO_Init+0x334>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800114c:	d025      	beq.n	800119a <HAL_GPIO_Init+0x242>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	@ (8001290 <HAL_GPIO_Init+0x338>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01f      	beq.n	8001196 <HAL_GPIO_Init+0x23e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4e      	ldr	r2, [pc, #312]	@ (8001294 <HAL_GPIO_Init+0x33c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x23a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4d      	ldr	r2, [pc, #308]	@ (8001298 <HAL_GPIO_Init+0x340>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x236>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4c      	ldr	r2, [pc, #304]	@ (800129c <HAL_GPIO_Init+0x344>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x232>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4b      	ldr	r2, [pc, #300]	@ (80012a0 <HAL_GPIO_Init+0x348>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x22e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4a      	ldr	r2, [pc, #296]	@ (80012a4 <HAL_GPIO_Init+0x34c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x22a>
 800117e:	2306      	movs	r3, #6
 8001180:	e00c      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001182:	2307      	movs	r3, #7
 8001184:	e00a      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001186:	2305      	movs	r3, #5
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x244>
 800118a:	2304      	movs	r3, #4
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x244>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x244>
 800119a:	2300      	movs	r3, #0
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ac:	4937      	ldr	r1, [pc, #220]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ba:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011de:	4a32      	ldr	r2, [pc, #200]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011e4:	4b30      	ldr	r3, [pc, #192]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001208:	4a27      	ldr	r2, [pc, #156]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001232:	4a1d      	ldr	r2, [pc, #116]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800125c:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f ae78 	bne.w	8000f68 <HAL_GPIO_Init+0x10>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	48000c00 	.word	0x48000c00
 800129c:	48001000 	.word	0x48001000
 80012a0:	48001400 	.word	0x48001400
 80012a4:	48001800 	.word	0x48001800
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e08d      	b.n	800140a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fb46 	bl	8000994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2224      	movs	r2, #36	@ 0x24
 800130c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800132c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800133c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d107      	bne.n	8001356 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	e006      	b.n	8001364 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001362:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d108      	bne.n	800137e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	e007      	b.n	800138e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800138c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800139c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69d9      	ldr	r1, [r3, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2220      	movs	r2, #32
 80013f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af02      	add	r7, sp, #8
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	817b      	strh	r3, [r7, #10]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b20      	cmp	r3, #32
 8001432:	f040 80fd 	bne.w	8001630 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_I2C_Master_Transmit+0x30>
 8001440:	2302      	movs	r3, #2
 8001442:	e0f6      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800144c:	f7ff fc6e 	bl	8000d2c <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2319      	movs	r3, #25
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 fbea 	bl	8001c38 <I2C_WaitOnFlagUntilTimeout>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e0e1      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2221      	movs	r2, #33	@ 0x21
 8001472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2210      	movs	r2, #16
 800147a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	893a      	ldrh	r2, [r7, #8]
 800148e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800149a:	b29b      	uxth	r3, r3
 800149c:	2bff      	cmp	r3, #255	@ 0xff
 800149e:	d906      	bls.n	80014ae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	22ff      	movs	r2, #255	@ 0xff
 80014a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80014a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e007      	b.n	80014be <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80014b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d024      	beq.n	8001510 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	8979      	ldrh	r1, [r7, #10]
 8001502:	4b4e      	ldr	r3, [pc, #312]	@ (800163c <HAL_I2C_Master_Transmit+0x228>)
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fd59 	bl	8001fc0 <I2C_TransferConfig>
 800150e:	e066      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001514:	b2da      	uxtb	r2, r3
 8001516:	8979      	ldrh	r1, [r7, #10]
 8001518:	4b48      	ldr	r3, [pc, #288]	@ (800163c <HAL_I2C_Master_Transmit+0x228>)
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fd4e 	bl	8001fc0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001524:	e05b      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	6a39      	ldr	r1, [r7, #32]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 fbdd 	bl	8001cea <I2C_WaitOnTXISFlagUntilTimeout>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e07b      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001554:	b29b      	uxth	r3, r3
 8001556:	3b01      	subs	r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800156e:	b29b      	uxth	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d034      	beq.n	80015de <HAL_I2C_Master_Transmit+0x1ca>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001578:	2b00      	cmp	r3, #0
 800157a:	d130      	bne.n	80015de <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	2200      	movs	r2, #0
 8001584:	2180      	movs	r1, #128	@ 0x80
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fb56 	bl	8001c38 <I2C_WaitOnFlagUntilTimeout>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e04d      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800159a:	b29b      	uxth	r3, r3
 800159c:	2bff      	cmp	r3, #255	@ 0xff
 800159e:	d90e      	bls.n	80015be <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	22ff      	movs	r2, #255	@ 0xff
 80015a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	8979      	ldrh	r1, [r7, #10]
 80015ae:	2300      	movs	r3, #0
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 fd02 	bl	8001fc0 <I2C_TransferConfig>
 80015bc:	e00f      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	8979      	ldrh	r1, [r7, #10]
 80015d0:	2300      	movs	r3, #0
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fcf1 	bl	8001fc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d19e      	bne.n	8001526 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	6a39      	ldr	r1, [r7, #32]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 fbc3 	bl	8001d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e01a      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2220      	movs	r2, #32
 8001602:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6859      	ldr	r1, [r3, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <HAL_I2C_Master_Transmit+0x22c>)
 8001610:	400b      	ands	r3, r1
 8001612:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2220      	movs	r2, #32
 8001618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	e000      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001630:	2302      	movs	r3, #2
  }
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	80002000 	.word	0x80002000
 8001640:	fe00e800 	.word	0xfe00e800

08001644 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4603      	mov	r3, r0
 8001654:	817b      	strh	r3, [r7, #10]
 8001656:	460b      	mov	r3, r1
 8001658:	813b      	strh	r3, [r7, #8]
 800165a:	4613      	mov	r3, r2
 800165c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b20      	cmp	r3, #32
 8001668:	f040 80f9 	bne.w	800185e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <HAL_I2C_Mem_Write+0x34>
 8001672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800167e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0ed      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_I2C_Mem_Write+0x4e>
 800168e:	2302      	movs	r3, #2
 8001690:	e0e6      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800169a:	f7ff fb47 	bl	8000d2c <HAL_GetTick>
 800169e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2319      	movs	r3, #25
 80016a6:	2201      	movs	r2, #1
 80016a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 fac3 	bl	8001c38 <I2C_WaitOnFlagUntilTimeout>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0d1      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2221      	movs	r2, #33	@ 0x21
 80016c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2240      	movs	r2, #64	@ 0x40
 80016c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a3a      	ldr	r2, [r7, #32]
 80016d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016e4:	88f8      	ldrh	r0, [r7, #6]
 80016e6:	893a      	ldrh	r2, [r7, #8]
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	4603      	mov	r3, r0
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f9d3 	bl	8001aa0 <I2C_RequestMemoryWrite>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0a9      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	2bff      	cmp	r3, #255	@ 0xff
 8001714:	d90e      	bls.n	8001734 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	22ff      	movs	r2, #255	@ 0xff
 800171a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001720:	b2da      	uxtb	r2, r3
 8001722:	8979      	ldrh	r1, [r7, #10]
 8001724:	2300      	movs	r3, #0
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 fc47 	bl	8001fc0 <I2C_TransferConfig>
 8001732:	e00f      	b.n	8001754 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001742:	b2da      	uxtb	r2, r3
 8001744:	8979      	ldrh	r1, [r7, #10]
 8001746:	2300      	movs	r3, #0
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fc36 	bl	8001fc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 fac6 	bl	8001cea <I2C_WaitOnTXISFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e07b      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d034      	beq.n	800180c <HAL_I2C_Mem_Write+0x1c8>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d130      	bne.n	800180c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b0:	2200      	movs	r2, #0
 80017b2:	2180      	movs	r1, #128	@ 0x80
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fa3f 	bl	8001c38 <I2C_WaitOnFlagUntilTimeout>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e04d      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	2bff      	cmp	r3, #255	@ 0xff
 80017cc:	d90e      	bls.n	80017ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	22ff      	movs	r2, #255	@ 0xff
 80017d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	8979      	ldrh	r1, [r7, #10]
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 fbeb 	bl	8001fc0 <I2C_TransferConfig>
 80017ea:	e00f      	b.n	800180c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	8979      	ldrh	r1, [r7, #10]
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 fbda 	bl	8001fc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001810:	b29b      	uxth	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d19e      	bne.n	8001754 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 faac 	bl	8001d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e01a      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2220      	movs	r2, #32
 8001830:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_I2C_Mem_Write+0x224>)
 800183e:	400b      	ands	r3, r1
 8001840:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
  }
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	fe00e800 	.word	0xfe00e800

0800186c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	4608      	mov	r0, r1
 8001876:	4611      	mov	r1, r2
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	817b      	strh	r3, [r7, #10]
 800187e:	460b      	mov	r3, r1
 8001880:	813b      	strh	r3, [r7, #8]
 8001882:	4613      	mov	r3, r2
 8001884:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b20      	cmp	r3, #32
 8001890:	f040 80fd 	bne.w	8001a8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <HAL_I2C_Mem_Read+0x34>
 800189a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0f1      	b.n	8001a90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_I2C_Mem_Read+0x4e>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e0ea      	b.n	8001a90 <HAL_I2C_Mem_Read+0x224>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018c2:	f7ff fa33 	bl	8000d2c <HAL_GetTick>
 80018c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2319      	movs	r3, #25
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f9af 	bl	8001c38 <I2C_WaitOnFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0d5      	b.n	8001a90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2222      	movs	r2, #34	@ 0x22
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2240      	movs	r2, #64	@ 0x40
 80018f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a3a      	ldr	r2, [r7, #32]
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001904:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800190c:	88f8      	ldrh	r0, [r7, #6]
 800190e:	893a      	ldrh	r2, [r7, #8]
 8001910:	8979      	ldrh	r1, [r7, #10]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	4603      	mov	r3, r0
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f000 f913 	bl	8001b48 <I2C_RequestMemoryRead>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0ad      	b.n	8001a90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001938:	b29b      	uxth	r3, r3
 800193a:	2bff      	cmp	r3, #255	@ 0xff
 800193c:	d90e      	bls.n	800195c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001948:	b2da      	uxtb	r2, r3
 800194a:	8979      	ldrh	r1, [r7, #10]
 800194c:	4b52      	ldr	r3, [pc, #328]	@ (8001a98 <HAL_I2C_Mem_Read+0x22c>)
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 fb33 	bl	8001fc0 <I2C_TransferConfig>
 800195a:	e00f      	b.n	800197c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196a:	b2da      	uxtb	r2, r3
 800196c:	8979      	ldrh	r1, [r7, #10]
 800196e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a98 <HAL_I2C_Mem_Read+0x22c>)
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fb22 	bl	8001fc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001982:	2200      	movs	r2, #0
 8001984:	2104      	movs	r1, #4
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f956 	bl	8001c38 <I2C_WaitOnFlagUntilTimeout>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07c      	b.n	8001a90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b2:	3b01      	subs	r3, #1
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3b01      	subs	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d034      	beq.n	8001a3c <HAL_I2C_Mem_Read+0x1d0>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d130      	bne.n	8001a3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e0:	2200      	movs	r2, #0
 80019e2:	2180      	movs	r1, #128	@ 0x80
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f927 	bl	8001c38 <I2C_WaitOnFlagUntilTimeout>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e04d      	b.n	8001a90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	2bff      	cmp	r3, #255	@ 0xff
 80019fc:	d90e      	bls.n	8001a1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	8979      	ldrh	r1, [r7, #10]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 fad3 	bl	8001fc0 <I2C_TransferConfig>
 8001a1a:	e00f      	b.n	8001a3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	8979      	ldrh	r1, [r7, #10]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 fac2 	bl	8001fc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d19a      	bne.n	800197c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 f994 	bl	8001d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e01a      	b.n	8001a90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <HAL_I2C_Mem_Read+0x230>)
 8001a6e:	400b      	ands	r3, r1
 8001a70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2220      	movs	r2, #32
 8001a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
  }
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	80002400 	.word	0x80002400
 8001a9c:	fe00e800 	.word	0xfe00e800

08001aa0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	4608      	mov	r0, r1
 8001aaa:	4611      	mov	r1, r2
 8001aac:	461a      	mov	r2, r3
 8001aae:	4603      	mov	r3, r0
 8001ab0:	817b      	strh	r3, [r7, #10]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	813b      	strh	r3, [r7, #8]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	8979      	ldrh	r1, [r7, #10]
 8001ac0:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <I2C_RequestMemoryWrite+0xa4>)
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 fa79 	bl	8001fc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	69b9      	ldr	r1, [r7, #24]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 f909 	bl	8001cea <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e02c      	b.n	8001b3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ae8:	893b      	ldrh	r3, [r7, #8]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001af2:	e015      	b.n	8001b20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001af4:	893b      	ldrh	r3, [r7, #8]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b02:	69fa      	ldr	r2, [r7, #28]
 8001b04:	69b9      	ldr	r1, [r7, #24]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f8ef 	bl	8001cea <I2C_WaitOnTXISFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e012      	b.n	8001b3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b16:	893b      	ldrh	r3, [r7, #8]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2200      	movs	r2, #0
 8001b28:	2180      	movs	r1, #128	@ 0x80
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f884 	bl	8001c38 <I2C_WaitOnFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	80002000 	.word	0x80002000

08001b48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	817b      	strh	r3, [r7, #10]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	813b      	strh	r3, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	8979      	ldrh	r1, [r7, #10]
 8001b68:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <I2C_RequestMemoryRead+0xa4>)
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fa26 	bl	8001fc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 f8b6 	bl	8001cea <I2C_WaitOnTXISFlagUntilTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e02c      	b.n	8001be2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d105      	bne.n	8001b9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b8e:	893b      	ldrh	r3, [r7, #8]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b98:	e015      	b.n	8001bc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b9a:	893b      	ldrh	r3, [r7, #8]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	69b9      	ldr	r1, [r7, #24]
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f89c 	bl	8001cea <I2C_WaitOnTXISFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e012      	b.n	8001be2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001bbc:	893b      	ldrh	r3, [r7, #8]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2140      	movs	r1, #64	@ 0x40
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f831 	bl	8001c38 <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	80002000 	.word	0x80002000

08001bf0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d103      	bne.n	8001c0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d007      	beq.n	8001c2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	619a      	str	r2, [r3, #24]
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c48:	e03b      	b.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	6839      	ldr	r1, [r7, #0]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f8d6 	bl	8001e00 <I2C_IsErrorOccurred>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e041      	b.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d02d      	beq.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c66:	f7ff f861 	bl	8000d2c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d302      	bcc.n	8001c7c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d122      	bne.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	4013      	ands	r3, r2
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d113      	bne.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	f043 0220 	orr.w	r2, r3, #32
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	bf0c      	ite	eq
 8001cd2:	2301      	moveq	r3, #1
 8001cd4:	2300      	movne	r3, #0
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d0b4      	beq.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cf6:	e033      	b.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	68b9      	ldr	r1, [r7, #8]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 f87f 	bl	8001e00 <I2C_IsErrorOccurred>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e031      	b.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d12:	d025      	beq.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d14:	f7ff f80a 	bl	8000d2c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d302      	bcc.n	8001d2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d11a      	bne.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d013      	beq.n	8001d60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3c:	f043 0220 	orr.w	r2, r3, #32
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e007      	b.n	8001d70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d1c4      	bne.n	8001cf8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d84:	e02f      	b.n	8001de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 f838 	bl	8001e00 <I2C_IsErrorOccurred>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e02d      	b.n	8001df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7fe ffc7 	bl	8000d2c <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d11a      	bne.n	8001de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d013      	beq.n	8001de6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f043 0220 	orr.w	r2, r3, #32
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e007      	b.n	8001df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d1c8      	bne.n	8001d86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	@ 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d068      	beq.n	8001efe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2210      	movs	r2, #16
 8001e32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e34:	e049      	b.n	8001eca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d045      	beq.n	8001eca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e3e:	f7fe ff75 	bl	8000d2c <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d302      	bcc.n	8001e54 <I2C_IsErrorOccurred+0x54>
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d13a      	bne.n	8001eca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e76:	d121      	bne.n	8001ebc <I2C_IsErrorOccurred+0xbc>
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e7e:	d01d      	beq.n	8001ebc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001e80:	7cfb      	ldrb	r3, [r7, #19]
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d01a      	beq.n	8001ebc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e96:	f7fe ff49 	bl	8000d2c <HAL_GetTick>
 8001e9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e9c:	e00e      	b.n	8001ebc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e9e:	f7fe ff45 	bl	8000d2c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b19      	cmp	r3, #25
 8001eaa:	d907      	bls.n	8001ebc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f043 0320 	orr.w	r3, r3, #32
 8001eb2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001eba:	e006      	b.n	8001eca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d1e9      	bne.n	8001e9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d003      	beq.n	8001ee0 <I2C_IsErrorOccurred+0xe0>
 8001ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0aa      	beq.n	8001e36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d103      	bne.n	8001ef0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2220      	movs	r2, #32
 8001eee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00b      	beq.n	8001f28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01c      	beq.n	8001fae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7ff fe3b 	bl	8001bf0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6859      	ldr	r1, [r3, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <I2C_IsErrorOccurred+0x1bc>)
 8001f86:	400b      	ands	r3, r1
 8001f88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001fae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3728      	adds	r7, #40	@ 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	fe00e800 	.word	0xfe00e800

08001fc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	817b      	strh	r3, [r7, #10]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fd2:	897b      	ldrh	r3, [r7, #10]
 8001fd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fd8:	7a7b      	ldrb	r3, [r7, #9]
 8001fda:	041b      	lsls	r3, r3, #16
 8001fdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fe0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	0d5b      	lsrs	r3, r3, #21
 8001ffa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <I2C_TransferConfig+0x60>)
 8002000:	430b      	orrs	r3, r1
 8002002:	43db      	mvns	r3, r3
 8002004:	ea02 0103 	and.w	r1, r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	03ff63ff 	.word	0x03ff63ff

08002024 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b20      	cmp	r3, #32
 8002038:	d138      	bne.n	80020ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002044:	2302      	movs	r3, #2
 8002046:	e032      	b.n	80020ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002076:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d139      	bne.n	8002144 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020da:	2302      	movs	r3, #2
 80020dc:	e033      	b.n	8002146 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2224      	movs	r2, #36	@ 0x24
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800210c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	021b      	lsls	r3, r3, #8
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002158:	4b04      	ldr	r3, [pc, #16]	@ (800216c <HAL_PWREx_GetVoltageRange+0x18>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40007000 	.word	0x40007000

08002170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800217e:	d130      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002180:	4b23      	ldr	r3, [pc, #140]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800218c:	d038      	beq.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800218e:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002196:	4a1e      	ldr	r2, [pc, #120]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002198:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2232      	movs	r2, #50	@ 0x32
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	3301      	adds	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b4:	e002      	b.n	80021bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c8:	d102      	bne.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f2      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021dc:	d110      	bne.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e00f      	b.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021ee:	d007      	beq.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021f0:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021f8:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40007000 	.word	0x40007000
 8002214:	20000010 	.word	0x20000010
 8002218:	431bde83 	.word	0x431bde83

0800221c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e3ca      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222e:	4b97      	ldr	r3, [pc, #604]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002238:	4b94      	ldr	r3, [pc, #592]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80e4 	beq.w	8002418 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <HAL_RCC_OscConfig+0x4a>
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b0c      	cmp	r3, #12
 800225a:	f040 808b 	bne.w	8002374 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b01      	cmp	r3, #1
 8002262:	f040 8087 	bne.w	8002374 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002266:	4b89      	ldr	r3, [pc, #548]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x62>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e3a2      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1a      	ldr	r2, [r3, #32]
 8002282:	4b82      	ldr	r3, [pc, #520]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <HAL_RCC_OscConfig+0x7c>
 800228e:	4b7f      	ldr	r3, [pc, #508]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002296:	e005      	b.n	80022a4 <HAL_RCC_OscConfig+0x88>
 8002298:	4b7c      	ldr	r3, [pc, #496]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800229a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d223      	bcs.n	80022f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fd55 	bl	8002d5c <RCC_SetFlashLatencyFromMSIRange>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e383      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022bc:	4b73      	ldr	r3, [pc, #460]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a72      	ldr	r2, [pc, #456]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022c2:	f043 0308 	orr.w	r3, r3, #8
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b70      	ldr	r3, [pc, #448]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	496d      	ldr	r1, [pc, #436]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022da:	4b6c      	ldr	r3, [pc, #432]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	4968      	ldr	r1, [pc, #416]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
 80022ee:	e025      	b.n	800233c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f0:	4b66      	ldr	r3, [pc, #408]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a65      	ldr	r2, [pc, #404]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b63      	ldr	r3, [pc, #396]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4960      	ldr	r1, [pc, #384]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800230e:	4b5f      	ldr	r3, [pc, #380]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	495b      	ldr	r1, [pc, #364]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fd15 	bl	8002d5c <RCC_SetFlashLatencyFromMSIRange>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e343      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800233c:	f000 fc4a 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b52      	ldr	r3, [pc, #328]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	4950      	ldr	r1, [pc, #320]	@ (8002490 <HAL_RCC_OscConfig+0x274>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	4a4e      	ldr	r2, [pc, #312]	@ (8002494 <HAL_RCC_OscConfig+0x278>)
 800235a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800235c:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <HAL_RCC_OscConfig+0x27c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fc93 	bl	8000c8c <HAL_InitTick>
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d052      	beq.n	8002416 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	e327      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d032      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800237c:	4b43      	ldr	r3, [pc, #268]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a42      	ldr	r2, [pc, #264]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002388:	f7fe fcd0 	bl	8000d2c <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002390:	f7fe fccc 	bl	8000d2c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e310      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023a2:	4b3a      	ldr	r3, [pc, #232]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ae:	4b37      	ldr	r3, [pc, #220]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a36      	ldr	r2, [pc, #216]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023b4:	f043 0308 	orr.w	r3, r3, #8
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b34      	ldr	r3, [pc, #208]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4931      	ldr	r1, [pc, #196]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023cc:	4b2f      	ldr	r3, [pc, #188]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	492c      	ldr	r1, [pc, #176]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
 80023e0:	e01a      	b.n	8002418 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023e2:	4b2a      	ldr	r3, [pc, #168]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a29      	ldr	r2, [pc, #164]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023ee:	f7fe fc9d 	bl	8000d2c <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f6:	f7fe fc99 	bl	8000d2c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e2dd      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002408:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x1da>
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002416:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d074      	beq.n	800250e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	2b08      	cmp	r3, #8
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x21a>
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b0c      	cmp	r3, #12
 800242e:	d10e      	bne.n	800244e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d10b      	bne.n	800244e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d064      	beq.n	800250c <HAL_RCC_OscConfig+0x2f0>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d160      	bne.n	800250c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e2ba      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x24a>
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0b      	ldr	r2, [pc, #44]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e026      	b.n	80024b4 <HAL_RCC_OscConfig+0x298>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800246e:	d115      	bne.n	800249c <HAL_RCC_OscConfig+0x280>
 8002470:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a05      	ldr	r2, [pc, #20]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002476:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a02      	ldr	r2, [pc, #8]	@ (800248c <HAL_RCC_OscConfig+0x270>)
 8002482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	e014      	b.n	80024b4 <HAL_RCC_OscConfig+0x298>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	08004c80 	.word	0x08004c80
 8002494:	20000010 	.word	0x20000010
 8002498:	20000014 	.word	0x20000014
 800249c:	4ba0      	ldr	r3, [pc, #640]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a9f      	ldr	r2, [pc, #636]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80024a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b9d      	ldr	r3, [pc, #628]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a9c      	ldr	r2, [pc, #624]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80024ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fc36 	bl	8000d2c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7fe fc32 	bl	8000d2c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	@ 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e276      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d6:	4b92      	ldr	r3, [pc, #584]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x2a8>
 80024e2:	e014      	b.n	800250e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe fc22 	bl	8000d2c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7fe fc1e 	bl	8000d2c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	@ 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e262      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024fe:	4b88      	ldr	r3, [pc, #544]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x2d0>
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d060      	beq.n	80025dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d005      	beq.n	800252c <HAL_RCC_OscConfig+0x310>
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d119      	bne.n	800255a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d116      	bne.n	800255a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800252c:	4b7c      	ldr	r3, [pc, #496]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_OscConfig+0x328>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e23f      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b76      	ldr	r3, [pc, #472]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	4973      	ldr	r1, [pc, #460]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002558:	e040      	b.n	80025dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d023      	beq.n	80025aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002562:	4b6f      	ldr	r3, [pc, #444]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6e      	ldr	r2, [pc, #440]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7fe fbdd 	bl	8000d2c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7fe fbd9 	bl	8000d2c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e21d      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002588:	4b65      	ldr	r3, [pc, #404]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b62      	ldr	r3, [pc, #392]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	495f      	ldr	r1, [pc, #380]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
 80025a8:	e018      	b.n	80025dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a5c      	ldr	r2, [pc, #368]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7fe fbb9 	bl	8000d2c <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025be:	f7fe fbb5 	bl	8000d2c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1f9      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d0:	4b53      	ldr	r3, [pc, #332]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d03c      	beq.n	8002662 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01c      	beq.n	800262a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f6:	4a4a      	ldr	r2, [pc, #296]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fb94 	bl	8000d2c <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002608:	f7fe fb90 	bl	8000d2c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1d4      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800261a:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ef      	beq.n	8002608 <HAL_RCC_OscConfig+0x3ec>
 8002628:	e01b      	b.n	8002662 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262a:	4b3d      	ldr	r3, [pc, #244]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800262c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002630:	4a3b      	ldr	r2, [pc, #236]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263a:	f7fe fb77 	bl	8000d2c <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002642:	f7fe fb73 	bl	8000d2c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1b7      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002654:	4b32      	ldr	r3, [pc, #200]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002656:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ef      	bne.n	8002642 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80a6 	beq.w	80027bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002670:	2300      	movs	r3, #0
 8002672:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002674:	4b2a      	ldr	r3, [pc, #168]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002680:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	4a26      	ldr	r2, [pc, #152]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268a:	6593      	str	r3, [r2, #88]	@ 0x58
 800268c:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002698:	2301      	movs	r3, #1
 800269a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269c:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <HAL_RCC_OscConfig+0x508>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d118      	bne.n	80026da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002724 <HAL_RCC_OscConfig+0x508>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002724 <HAL_RCC_OscConfig+0x508>)
 80026ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b4:	f7fe fb3a 	bl	8000d2c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026bc:	f7fe fb36 	bl	8000d2c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e17a      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_RCC_OscConfig+0x508>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d108      	bne.n	80026f4 <HAL_RCC_OscConfig+0x4d8>
 80026e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f2:	e029      	b.n	8002748 <HAL_RCC_OscConfig+0x52c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d115      	bne.n	8002728 <HAL_RCC_OscConfig+0x50c>
 80026fc:	4b08      	ldr	r3, [pc, #32]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002702:	4a07      	ldr	r2, [pc, #28]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002712:	4a03      	ldr	r2, [pc, #12]	@ (8002720 <HAL_RCC_OscConfig+0x504>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800271c:	e014      	b.n	8002748 <HAL_RCC_OscConfig+0x52c>
 800271e:	bf00      	nop
 8002720:	40021000 	.word	0x40021000
 8002724:	40007000 	.word	0x40007000
 8002728:	4b9c      	ldr	r3, [pc, #624]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272e:	4a9b      	ldr	r2, [pc, #620]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002738:	4b98      	ldr	r3, [pc, #608]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	4a97      	ldr	r2, [pc, #604]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fe faec 	bl	8000d2c <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7fe fae8 	bl	8000d2c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e12a      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276e:	4b8b      	ldr	r3, [pc, #556]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ed      	beq.n	8002758 <HAL_RCC_OscConfig+0x53c>
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7fe fad5 	bl	8000d2c <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7fe fad1 	bl	8000d2c <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e113      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800279c:	4b7f      	ldr	r3, [pc, #508]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ed      	bne.n	8002786 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b7a      	ldr	r3, [pc, #488]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b4:	4a79      	ldr	r2, [pc, #484]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80fe 	beq.w	80029c2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	f040 80d0 	bne.w	8002970 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027d0:	4b72      	ldr	r3, [pc, #456]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d130      	bne.n	8002846 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	3b01      	subs	r3, #1
 80027f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d127      	bne.n	8002846 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002800:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d11f      	bne.n	8002846 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002810:	2a07      	cmp	r2, #7
 8002812:	bf14      	ite	ne
 8002814:	2201      	movne	r2, #1
 8002816:	2200      	moveq	r2, #0
 8002818:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800281a:	4293      	cmp	r3, r2
 800281c:	d113      	bne.n	8002846 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	3b01      	subs	r3, #1
 800282c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d109      	bne.n	8002846 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	085b      	lsrs	r3, r3, #1
 800283e:	3b01      	subs	r3, #1
 8002840:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d06e      	beq.n	8002924 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	2b0c      	cmp	r3, #12
 800284a:	d069      	beq.n	8002920 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800284c:	4b53      	ldr	r3, [pc, #332]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002858:	4b50      	ldr	r3, [pc, #320]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0ad      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002868:	4b4c      	ldr	r3, [pc, #304]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a4b      	ldr	r2, [pc, #300]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 800286e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002872:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002874:	f7fe fa5a 	bl	8000d2c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fa56 	bl	8000d2c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e09a      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288e:	4b43      	ldr	r3, [pc, #268]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289a:	4b40      	ldr	r3, [pc, #256]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	4b40      	ldr	r3, [pc, #256]	@ (80029a0 <HAL_RCC_OscConfig+0x784>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028aa:	3a01      	subs	r2, #1
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	4311      	orrs	r1, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028b4:	0212      	lsls	r2, r2, #8
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028bc:	0852      	lsrs	r2, r2, #1
 80028be:	3a01      	subs	r2, #1
 80028c0:	0552      	lsls	r2, r2, #21
 80028c2:	4311      	orrs	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028c8:	0852      	lsrs	r2, r2, #1
 80028ca:	3a01      	subs	r2, #1
 80028cc:	0652      	lsls	r2, r2, #25
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028d4:	0912      	lsrs	r2, r2, #4
 80028d6:	0452      	lsls	r2, r2, #17
 80028d8:	430a      	orrs	r2, r1
 80028da:	4930      	ldr	r1, [pc, #192]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028e0:	4b2e      	ldr	r3, [pc, #184]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a2d      	ldr	r2, [pc, #180]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	4b2b      	ldr	r3, [pc, #172]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a2a      	ldr	r2, [pc, #168]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f8:	f7fe fa18 	bl	8000d2c <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fa14 	bl	8000d2c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e058      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800291e:	e050      	b.n	80029c2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e04f      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002924:	4b1d      	ldr	r3, [pc, #116]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d148      	bne.n	80029c2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002930:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800293a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800293c:	4b17      	ldr	r3, [pc, #92]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a16      	ldr	r2, [pc, #88]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002942:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002946:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002948:	f7fe f9f0 	bl	8000d2c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe f9ec 	bl	8000d2c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e030      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x734>
 800296e:	e028      	b.n	80029c2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d023      	beq.n	80029be <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b09      	ldr	r3, [pc, #36]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a08      	ldr	r2, [pc, #32]	@ (800299c <HAL_RCC_OscConfig+0x780>)
 800297c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe f9d3 	bl	8000d2c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002988:	e00c      	b.n	80029a4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298a:	f7fe f9cf 	bl	8000d2c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d905      	bls.n	80029a4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e013      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
 800299c:	40021000 	.word	0x40021000
 80029a0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a4:	4b09      	ldr	r3, [pc, #36]	@ (80029cc <HAL_RCC_OscConfig+0x7b0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1ec      	bne.n	800298a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029b0:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_OscConfig+0x7b0>)
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	4905      	ldr	r1, [pc, #20]	@ (80029cc <HAL_RCC_OscConfig+0x7b0>)
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_RCC_OscConfig+0x7b4>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	60cb      	str	r3, [r1, #12]
 80029bc:	e001      	b.n	80029c2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	feeefffc 	.word	0xfeeefffc

080029d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0e7      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b75      	ldr	r3, [pc, #468]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1ec>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b72      	ldr	r3, [pc, #456]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1ec>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4970      	ldr	r1, [pc, #448]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b6e      	ldr	r3, [pc, #440]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0cf      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d010      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	4b66      	ldr	r3, [pc, #408]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d908      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b63      	ldr	r3, [pc, #396]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4960      	ldr	r1, [pc, #384]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d04c      	beq.n	8002aec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5a:	4b5a      	ldr	r3, [pc, #360]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d121      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0a6      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a72:	4b54      	ldr	r3, [pc, #336]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d115      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e09a      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e08e      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e086      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b46      	ldr	r3, [pc, #280]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4943      	ldr	r1, [pc, #268]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abc:	f7fe f936 	bl	8000d2c <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fe f932 	bl	8000d2c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e06e      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d010      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	4b31      	ldr	r3, [pc, #196]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d208      	bcs.n	8002b1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	492b      	ldr	r1, [pc, #172]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1a:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d210      	bcs.n	8002b4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b28:	4b25      	ldr	r3, [pc, #148]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 0207 	bic.w	r2, r3, #7
 8002b30:	4923      	ldr	r1, [pc, #140]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b38:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e036      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b56:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4918      	ldr	r1, [pc, #96]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b74:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4910      	ldr	r1, [pc, #64]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b88:	f000 f824 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	490b      	ldr	r1, [pc, #44]	@ (8002bc8 <HAL_RCC_ClockConfig+0x1f4>)
 8002b9a:	5ccb      	ldrb	r3, [r1, r3]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	4a09      	ldr	r2, [pc, #36]	@ (8002bcc <HAL_RCC_ClockConfig+0x1f8>)
 8002ba6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ba8:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_RCC_ClockConfig+0x1fc>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe f86d 	bl	8000c8c <HAL_InitTick>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bb6:	7afb      	ldrb	r3, [r7, #11]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40022000 	.word	0x40022000
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08004c80 	.word	0x08004c80
 8002bcc:	20000010 	.word	0x20000010
 8002bd0:	20000014 	.word	0x20000014

08002bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	@ 0x24
 8002bd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bec:	4b3b      	ldr	r3, [pc, #236]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x34>
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d121      	bne.n	8002c46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d11e      	bne.n	8002c46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c08:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c14:	4b31      	ldr	r3, [pc, #196]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	e005      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c24:	4b2d      	ldr	r3, [pc, #180]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c30:	4a2b      	ldr	r2, [pc, #172]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10d      	bne.n	8002c5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d102      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	e004      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c58:	4b23      	ldr	r3, [pc, #140]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b0c      	cmp	r3, #12
 8002c60:	d134      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c62:	4b1e      	ldr	r3, [pc, #120]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d003      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0xac>
 8002c78:	e005      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c7c:	617b      	str	r3, [r7, #20]
      break;
 8002c7e:	e005      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c80:	4b19      	ldr	r3, [pc, #100]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c82:	617b      	str	r3, [r7, #20]
      break;
 8002c84:	e002      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	617b      	str	r3, [r7, #20]
      break;
 8002c8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c8c:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	3301      	adds	r3, #1
 8002c98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	fb03 f202 	mul.w	r2, r3, r2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	0e5b      	lsrs	r3, r3, #25
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	@ 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08004c98 	.word	0x08004c98
 8002ce4:	00f42400 	.word	0x00f42400
 8002ce8:	007a1200 	.word	0x007a1200

08002cec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	@ (8002d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000010 	.word	0x20000010

08002d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d08:	f7ff fff0 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4904      	ldr	r1, [pc, #16]	@ (8002d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08004c90 	.word	0x08004c90

08002d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d34:	f7ff ffda 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0adb      	lsrs	r3, r3, #11
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4904      	ldr	r1, [pc, #16]	@ (8002d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08004c90 	.word	0x08004c90

08002d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d64:	2300      	movs	r3, #0
 8002d66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d68:	4b2a      	ldr	r3, [pc, #168]	@ (8002e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d74:	f7ff f9ee 	bl	8002154 <HAL_PWREx_GetVoltageRange>
 8002d78:	6178      	str	r0, [r7, #20]
 8002d7a:	e014      	b.n	8002da6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b25      	ldr	r3, [pc, #148]	@ (8002e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	4a24      	ldr	r2, [pc, #144]	@ (8002e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d88:	4b22      	ldr	r3, [pc, #136]	@ (8002e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d94:	f7ff f9de 	bl	8002154 <HAL_PWREx_GetVoltageRange>
 8002d98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dac:	d10b      	bne.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b80      	cmp	r3, #128	@ 0x80
 8002db2:	d919      	bls.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002db8:	d902      	bls.n	8002dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dba:	2302      	movs	r3, #2
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	e013      	b.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	e010      	b.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b80      	cmp	r3, #128	@ 0x80
 8002dca:	d902      	bls.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dcc:	2303      	movs	r3, #3
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	e00a      	b.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b80      	cmp	r3, #128	@ 0x80
 8002dd6:	d102      	bne.n	8002dde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dd8:	2302      	movs	r3, #2
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	e004      	b.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b70      	cmp	r3, #112	@ 0x70
 8002de2:	d101      	bne.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002de4:	2301      	movs	r3, #1
 8002de6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 0207 	bic.w	r2, r3, #7
 8002df0:	4909      	ldr	r1, [pc, #36]	@ (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002df8:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d001      	beq.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40022000 	.word	0x40022000

08002e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e24:	2300      	movs	r3, #0
 8002e26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e28:	2300      	movs	r3, #0
 8002e2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d041      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e40:	d02a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e46:	d824      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e4c:	d008      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e52:	d81e      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e5c:	d010      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e5e:	e018      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e60:	4b86      	ldr	r3, [pc, #536]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a85      	ldr	r2, [pc, #532]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e6c:	e015      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3304      	adds	r3, #4
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fabb 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e7e:	e00c      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3320      	adds	r3, #32
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fba6 	bl	80035d8 <RCCEx_PLLSAI2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e90:	e003      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	74fb      	strb	r3, [r7, #19]
      break;
 8002e96:	e000      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ea0:	4b76      	ldr	r3, [pc, #472]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eae:	4973      	ldr	r1, [pc, #460]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002eb6:	e001      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d041      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ecc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ed0:	d02a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ed2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ed6:	d824      	bhi.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ed8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ede:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ee2:	d81e      	bhi.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eec:	d010      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eee:	e018      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ef0:	4b62      	ldr	r3, [pc, #392]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a61      	ldr	r2, [pc, #388]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002efc:	e015      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fa73 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f0e:	e00c      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3320      	adds	r3, #32
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fb5e 	bl	80035d8 <RCCEx_PLLSAI2_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f20:	e003      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	74fb      	strb	r3, [r7, #19]
      break;
 8002f26:	e000      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f30:	4b52      	ldr	r3, [pc, #328]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f3e:	494f      	ldr	r1, [pc, #316]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f46:	e001      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a0 	beq.w	800309a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f5e:	4b47      	ldr	r3, [pc, #284]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f74:	4b41      	ldr	r3, [pc, #260]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f78:	4a40      	ldr	r2, [pc, #256]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f80:	4b3e      	ldr	r3, [pc, #248]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	60bb      	str	r3, [r7, #8]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f90:	4b3b      	ldr	r3, [pc, #236]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3a      	ldr	r2, [pc, #232]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f9c:	f7fd fec6 	bl	8000d2c <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fa2:	e009      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa4:	f7fd fec2 	bl	8000d2c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d902      	bls.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	74fb      	strb	r3, [r7, #19]
        break;
 8002fb6:	e005      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fb8:	4b31      	ldr	r3, [pc, #196]	@ (8003080 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ef      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d15c      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fca:	4b2c      	ldr	r3, [pc, #176]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01f      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d019      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fe8:	4b24      	ldr	r3, [pc, #144]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ff4:	4b21      	ldr	r3, [pc, #132]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffa:	4a20      	ldr	r2, [pc, #128]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003004:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300a:	4a1c      	ldr	r2, [pc, #112]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003010:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003014:	4a19      	ldr	r2, [pc, #100]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fd fe81 	bl	8000d2c <HAL_GetTick>
 800302a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302c:	e00b      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fd fe7d 	bl	8000d2c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d902      	bls.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	74fb      	strb	r3, [r7, #19]
            break;
 8003044:	e006      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003046:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ec      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10c      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800305a:	4b08      	ldr	r3, [pc, #32]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003060:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800306a:	4904      	ldr	r1, [pc, #16]	@ (800307c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003072:	e009      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	74bb      	strb	r3, [r7, #18]
 8003078:	e006      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003088:	7c7b      	ldrb	r3, [r7, #17]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b9e      	ldr	r3, [pc, #632]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	4a9d      	ldr	r2, [pc, #628]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003098:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030a6:	4b98      	ldr	r3, [pc, #608]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ac:	f023 0203 	bic.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b4:	4994      	ldr	r1, [pc, #592]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	f023 020c 	bic.w	r2, r3, #12
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d6:	498c      	ldr	r1, [pc, #560]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030ea:	4b87      	ldr	r3, [pc, #540]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	4983      	ldr	r1, [pc, #524]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800310c:	4b7e      	ldr	r3, [pc, #504]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003112:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	497b      	ldr	r1, [pc, #492]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800312e:	4b76      	ldr	r3, [pc, #472]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003134:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800313c:	4972      	ldr	r1, [pc, #456]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003150:	4b6d      	ldr	r3, [pc, #436]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003156:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315e:	496a      	ldr	r1, [pc, #424]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003172:	4b65      	ldr	r3, [pc, #404]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003178:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	4961      	ldr	r1, [pc, #388]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003194:	4b5c      	ldr	r3, [pc, #368]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a2:	4959      	ldr	r1, [pc, #356]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b6:	4b54      	ldr	r3, [pc, #336]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c4:	4950      	ldr	r1, [pc, #320]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e6:	4948      	ldr	r1, [pc, #288]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031fa:	4b43      	ldr	r3, [pc, #268]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003200:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	493f      	ldr	r1, [pc, #252]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d028      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800321c:	4b3a      	ldr	r3, [pc, #232]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322a:	4937      	ldr	r1, [pc, #220]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003236:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800323a:	d106      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800323c:	4b32      	ldr	r3, [pc, #200]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a31      	ldr	r2, [pc, #196]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003246:	60d3      	str	r3, [r2, #12]
 8003248:	e011      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800324e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003252:	d10c      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3304      	adds	r3, #4
 8003258:	2101      	movs	r1, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f8c8 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800326a:	7cfb      	ldrb	r3, [r7, #19]
 800326c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d028      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800327a:	4b23      	ldr	r3, [pc, #140]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003280:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003288:	491f      	ldr	r1, [pc, #124]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003298:	d106      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800329a:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	4a1a      	ldr	r2, [pc, #104]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032a4:	60d3      	str	r3, [r2, #12]
 80032a6:	e011      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2101      	movs	r1, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f899 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032c8:	7cfb      	ldrb	r3, [r7, #19]
 80032ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d02b      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e6:	4908      	ldr	r1, [pc, #32]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032f6:	d109      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f8:	4b03      	ldr	r3, [pc, #12]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a02      	ldr	r2, [pc, #8]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003302:	60d3      	str	r3, [r2, #12]
 8003304:	e014      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003310:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003314:	d10c      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3304      	adds	r3, #4
 800331a:	2101      	movs	r1, #1
 800331c:	4618      	mov	r0, r3
 800331e:	f000 f867 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8003322:	4603      	mov	r3, r0
 8003324:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800332c:	7cfb      	ldrb	r3, [r7, #19]
 800332e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d02f      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800333c:	4b2b      	ldr	r3, [pc, #172]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003342:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800334a:	4928      	ldr	r1, [pc, #160]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800335a:	d10d      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3304      	adds	r3, #4
 8003360:	2102      	movs	r1, #2
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f844 	bl	80033f0 <RCCEx_PLLSAI1_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d014      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	74bb      	strb	r3, [r7, #18]
 8003376:	e011      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800337c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003380:	d10c      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3320      	adds	r3, #32
 8003386:	2102      	movs	r1, #2
 8003388:	4618      	mov	r0, r3
 800338a:	f000 f925 	bl	80035d8 <RCCEx_PLLSAI2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033a8:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033b6:	490d      	ldr	r1, [pc, #52]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033da:	4904      	ldr	r1, [pc, #16]	@ (80033ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000

080033f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033fe:	4b75      	ldr	r3, [pc, #468]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d018      	beq.n	800343c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800340a:	4b72      	ldr	r3, [pc, #456]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0203 	and.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d10d      	bne.n	8003436 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
       ||
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003422:	4b6c      	ldr	r3, [pc, #432]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
       ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d047      	beq.n	80034c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
 800343a:	e044      	b.n	80034c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d018      	beq.n	8003476 <RCCEx_PLLSAI1_Config+0x86>
 8003444:	2b03      	cmp	r3, #3
 8003446:	d825      	bhi.n	8003494 <RCCEx_PLLSAI1_Config+0xa4>
 8003448:	2b01      	cmp	r3, #1
 800344a:	d002      	beq.n	8003452 <RCCEx_PLLSAI1_Config+0x62>
 800344c:	2b02      	cmp	r3, #2
 800344e:	d009      	beq.n	8003464 <RCCEx_PLLSAI1_Config+0x74>
 8003450:	e020      	b.n	8003494 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003452:	4b60      	ldr	r3, [pc, #384]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d11d      	bne.n	800349a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003462:	e01a      	b.n	800349a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003464:	4b5b      	ldr	r3, [pc, #364]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346c:	2b00      	cmp	r3, #0
 800346e:	d116      	bne.n	800349e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003474:	e013      	b.n	800349e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003476:	4b57      	ldr	r3, [pc, #348]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10f      	bne.n	80034a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003482:	4b54      	ldr	r3, [pc, #336]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003492:	e006      	b.n	80034a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      break;
 8003498:	e004      	b.n	80034a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10d      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034aa:	4b4a      	ldr	r3, [pc, #296]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6819      	ldr	r1, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	430b      	orrs	r3, r1
 80034c0:	4944      	ldr	r1, [pc, #272]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d17d      	bne.n	80035c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034cc:	4b41      	ldr	r3, [pc, #260]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a40      	ldr	r2, [pc, #256]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d8:	f7fd fc28 	bl	8000d2c <HAL_GetTick>
 80034dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034de:	e009      	b.n	80034f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034e0:	f7fd fc24 	bl	8000d2c <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d902      	bls.n	80034f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	73fb      	strb	r3, [r7, #15]
        break;
 80034f2:	e005      	b.n	8003500 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034f4:	4b37      	ldr	r3, [pc, #220]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ef      	bne.n	80034e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d160      	bne.n	80035c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d111      	bne.n	8003530 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800350c:	4b31      	ldr	r3, [pc, #196]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6892      	ldr	r2, [r2, #8]
 800351c:	0211      	lsls	r1, r2, #8
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68d2      	ldr	r2, [r2, #12]
 8003522:	0912      	lsrs	r2, r2, #4
 8003524:	0452      	lsls	r2, r2, #17
 8003526:	430a      	orrs	r2, r1
 8003528:	492a      	ldr	r1, [pc, #168]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	610b      	str	r3, [r1, #16]
 800352e:	e027      	b.n	8003580 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d112      	bne.n	800355c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003536:	4b27      	ldr	r3, [pc, #156]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800353e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	0211      	lsls	r1, r2, #8
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6912      	ldr	r2, [r2, #16]
 800354c:	0852      	lsrs	r2, r2, #1
 800354e:	3a01      	subs	r2, #1
 8003550:	0552      	lsls	r2, r2, #21
 8003552:	430a      	orrs	r2, r1
 8003554:	491f      	ldr	r1, [pc, #124]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	610b      	str	r3, [r1, #16]
 800355a:	e011      	b.n	8003580 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800355c:	4b1d      	ldr	r3, [pc, #116]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003564:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6892      	ldr	r2, [r2, #8]
 800356c:	0211      	lsls	r1, r2, #8
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6952      	ldr	r2, [r2, #20]
 8003572:	0852      	lsrs	r2, r2, #1
 8003574:	3a01      	subs	r2, #1
 8003576:	0652      	lsls	r2, r2, #25
 8003578:	430a      	orrs	r2, r1
 800357a:	4916      	ldr	r1, [pc, #88]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800357c:	4313      	orrs	r3, r2
 800357e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003580:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a13      	ldr	r2, [pc, #76]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003586:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800358a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fd fbce 	bl	8000d2c <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003592:	e009      	b.n	80035a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003594:	f7fd fbca 	bl	8000d2c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d902      	bls.n	80035a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	73fb      	strb	r3, [r7, #15]
          break;
 80035a6:	e005      	b.n	80035b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035a8:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ef      	beq.n	8003594 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	4904      	ldr	r1, [pc, #16]	@ (80035d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000

080035d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d018      	beq.n	8003624 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035f2:	4b67      	ldr	r3, [pc, #412]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0203 	and.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d10d      	bne.n	800361e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
       ||
 8003606:	2b00      	cmp	r3, #0
 8003608:	d009      	beq.n	800361e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800360a:	4b61      	ldr	r3, [pc, #388]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
       ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d047      	beq.n	80036ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	e044      	b.n	80036ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d018      	beq.n	800365e <RCCEx_PLLSAI2_Config+0x86>
 800362c:	2b03      	cmp	r3, #3
 800362e:	d825      	bhi.n	800367c <RCCEx_PLLSAI2_Config+0xa4>
 8003630:	2b01      	cmp	r3, #1
 8003632:	d002      	beq.n	800363a <RCCEx_PLLSAI2_Config+0x62>
 8003634:	2b02      	cmp	r3, #2
 8003636:	d009      	beq.n	800364c <RCCEx_PLLSAI2_Config+0x74>
 8003638:	e020      	b.n	800367c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800363a:	4b55      	ldr	r3, [pc, #340]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d11d      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800364a:	e01a      	b.n	8003682 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800364c:	4b50      	ldr	r3, [pc, #320]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d116      	bne.n	8003686 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365c:	e013      	b.n	8003686 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800365e:	4b4c      	ldr	r3, [pc, #304]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800366a:	4b49      	ldr	r3, [pc, #292]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800367a:	e006      	b.n	800368a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	73fb      	strb	r3, [r7, #15]
      break;
 8003680:	e004      	b.n	800368c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003682:	bf00      	nop
 8003684:	e002      	b.n	800368c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800368a:	bf00      	nop
    }

    if(status == HAL_OK)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10d      	bne.n	80036ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003692:	4b3f      	ldr	r3, [pc, #252]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	430b      	orrs	r3, r1
 80036a8:	4939      	ldr	r1, [pc, #228]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d167      	bne.n	8003784 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036b4:	4b36      	ldr	r3, [pc, #216]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a35      	ldr	r2, [pc, #212]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c0:	f7fd fb34 	bl	8000d2c <HAL_GetTick>
 80036c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036c6:	e009      	b.n	80036dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036c8:	f7fd fb30 	bl	8000d2c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d902      	bls.n	80036dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	73fb      	strb	r3, [r7, #15]
        break;
 80036da:	e005      	b.n	80036e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ef      	bne.n	80036c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d14a      	bne.n	8003784 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d111      	bne.n	8003718 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036f4:	4b26      	ldr	r3, [pc, #152]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80036fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6892      	ldr	r2, [r2, #8]
 8003704:	0211      	lsls	r1, r2, #8
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68d2      	ldr	r2, [r2, #12]
 800370a:	0912      	lsrs	r2, r2, #4
 800370c:	0452      	lsls	r2, r2, #17
 800370e:	430a      	orrs	r2, r1
 8003710:	491f      	ldr	r1, [pc, #124]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003712:	4313      	orrs	r3, r2
 8003714:	614b      	str	r3, [r1, #20]
 8003716:	e011      	b.n	800373c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003718:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003720:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6892      	ldr	r2, [r2, #8]
 8003728:	0211      	lsls	r1, r2, #8
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6912      	ldr	r2, [r2, #16]
 800372e:	0852      	lsrs	r2, r2, #1
 8003730:	3a01      	subs	r2, #1
 8003732:	0652      	lsls	r2, r2, #25
 8003734:	430a      	orrs	r2, r1
 8003736:	4916      	ldr	r1, [pc, #88]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003738:	4313      	orrs	r3, r2
 800373a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800373c:	4b14      	ldr	r3, [pc, #80]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a13      	ldr	r2, [pc, #76]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fd faf0 	bl	8000d2c <HAL_GetTick>
 800374c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800374e:	e009      	b.n	8003764 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003750:	f7fd faec 	bl	8000d2c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d902      	bls.n	8003764 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	73fb      	strb	r3, [r7, #15]
          break;
 8003762:	e005      	b.n	8003770 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003764:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ef      	beq.n	8003750 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003776:	4b06      	ldr	r3, [pc, #24]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4904      	ldr	r1, [pc, #16]	@ (8003790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000

08003794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e040      	b.n	8003828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd f94a 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2224      	movs	r2, #36	@ 0x24
 80037c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fb6a 	bl	8003eb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f8af 	bl	8003944 <UART_SetConfig>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e01b      	b.n	8003828 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800380e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fbe9 	bl	8003ff8 <UART_CheckIdleState>
 8003826:	4603      	mov	r3, r0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	@ 0x28
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003844:	2b20      	cmp	r3, #32
 8003846:	d177      	bne.n	8003938 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_UART_Transmit+0x24>
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e070      	b.n	800393a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2221      	movs	r2, #33	@ 0x21
 8003864:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003866:	f7fd fa61 	bl	8000d2c <HAL_GetTick>
 800386a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	88fa      	ldrh	r2, [r7, #6]
 8003878:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003884:	d108      	bne.n	8003898 <HAL_UART_Transmit+0x68>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d104      	bne.n	8003898 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	e003      	b.n	80038a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038a0:	e02f      	b.n	8003902 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2200      	movs	r2, #0
 80038aa:	2180      	movs	r1, #128	@ 0x80
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fc4b 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e03b      	b.n	800393a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	881a      	ldrh	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038d4:	b292      	uxth	r2, r2
 80038d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	3302      	adds	r3, #2
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e007      	b.n	80038f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3301      	adds	r3, #1
 80038ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1c9      	bne.n	80038a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2200      	movs	r2, #0
 8003916:	2140      	movs	r1, #64	@ 0x40
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fc15 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2220      	movs	r2, #32
 8003928:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e005      	b.n	800393a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	e000      	b.n	800393a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003938:	2302      	movs	r3, #2
  }
}
 800393a:	4618      	mov	r0, r3
 800393c:	3720      	adds	r7, #32
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b08a      	sub	sp, #40	@ 0x28
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	431a      	orrs	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	431a      	orrs	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	4313      	orrs	r3, r2
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4ba4      	ldr	r3, [pc, #656]	@ (8003c04 <UART_SetConfig+0x2c0>)
 8003974:	4013      	ands	r3, r2
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800397c:	430b      	orrs	r3, r1
 800397e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a99      	ldr	r2, [pc, #612]	@ (8003c08 <UART_SetConfig+0x2c4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d004      	beq.n	80039b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ac:	4313      	orrs	r3, r2
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c0:	430a      	orrs	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a90      	ldr	r2, [pc, #576]	@ (8003c0c <UART_SetConfig+0x2c8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d126      	bne.n	8003a1c <UART_SetConfig+0xd8>
 80039ce:	4b90      	ldr	r3, [pc, #576]	@ (8003c10 <UART_SetConfig+0x2cc>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d81b      	bhi.n	8003a14 <UART_SetConfig+0xd0>
 80039dc:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <UART_SetConfig+0xa0>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a05 	.word	0x08003a05
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a0d 	.word	0x08003a0d
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039fa:	e116      	b.n	8003c2a <UART_SetConfig+0x2e6>
 80039fc:	2302      	movs	r3, #2
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a02:	e112      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003a04:	2304      	movs	r3, #4
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a0a:	e10e      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a12:	e10a      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003a14:	2310      	movs	r3, #16
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a1a:	e106      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a7c      	ldr	r2, [pc, #496]	@ (8003c14 <UART_SetConfig+0x2d0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d138      	bne.n	8003a98 <UART_SetConfig+0x154>
 8003a26:	4b7a      	ldr	r3, [pc, #488]	@ (8003c10 <UART_SetConfig+0x2cc>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b0c      	cmp	r3, #12
 8003a32:	d82d      	bhi.n	8003a90 <UART_SetConfig+0x14c>
 8003a34:	a201      	add	r2, pc, #4	@ (adr r2, 8003a3c <UART_SetConfig+0xf8>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a71 	.word	0x08003a71
 8003a40:	08003a91 	.word	0x08003a91
 8003a44:	08003a91 	.word	0x08003a91
 8003a48:	08003a91 	.word	0x08003a91
 8003a4c:	08003a81 	.word	0x08003a81
 8003a50:	08003a91 	.word	0x08003a91
 8003a54:	08003a91 	.word	0x08003a91
 8003a58:	08003a91 	.word	0x08003a91
 8003a5c:	08003a79 	.word	0x08003a79
 8003a60:	08003a91 	.word	0x08003a91
 8003a64:	08003a91 	.word	0x08003a91
 8003a68:	08003a91 	.word	0x08003a91
 8003a6c:	08003a89 	.word	0x08003a89
 8003a70:	2300      	movs	r3, #0
 8003a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a76:	e0d8      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7e:	e0d4      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003a80:	2304      	movs	r3, #4
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a86:	e0d0      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003a88:	2308      	movs	r3, #8
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8e:	e0cc      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003a90:	2310      	movs	r3, #16
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a96:	e0c8      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a5e      	ldr	r2, [pc, #376]	@ (8003c18 <UART_SetConfig+0x2d4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d125      	bne.n	8003aee <UART_SetConfig+0x1aa>
 8003aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8003c10 <UART_SetConfig+0x2cc>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003aac:	2b30      	cmp	r3, #48	@ 0x30
 8003aae:	d016      	beq.n	8003ade <UART_SetConfig+0x19a>
 8003ab0:	2b30      	cmp	r3, #48	@ 0x30
 8003ab2:	d818      	bhi.n	8003ae6 <UART_SetConfig+0x1a2>
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d00a      	beq.n	8003ace <UART_SetConfig+0x18a>
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d814      	bhi.n	8003ae6 <UART_SetConfig+0x1a2>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <UART_SetConfig+0x182>
 8003ac0:	2b10      	cmp	r3, #16
 8003ac2:	d008      	beq.n	8003ad6 <UART_SetConfig+0x192>
 8003ac4:	e00f      	b.n	8003ae6 <UART_SetConfig+0x1a2>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003acc:	e0ad      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad4:	e0a9      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003adc:	e0a5      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae4:	e0a1      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003ae6:	2310      	movs	r3, #16
 8003ae8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aec:	e09d      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a4a      	ldr	r2, [pc, #296]	@ (8003c1c <UART_SetConfig+0x2d8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d125      	bne.n	8003b44 <UART_SetConfig+0x200>
 8003af8:	4b45      	ldr	r3, [pc, #276]	@ (8003c10 <UART_SetConfig+0x2cc>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b04:	d016      	beq.n	8003b34 <UART_SetConfig+0x1f0>
 8003b06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b08:	d818      	bhi.n	8003b3c <UART_SetConfig+0x1f8>
 8003b0a:	2b80      	cmp	r3, #128	@ 0x80
 8003b0c:	d00a      	beq.n	8003b24 <UART_SetConfig+0x1e0>
 8003b0e:	2b80      	cmp	r3, #128	@ 0x80
 8003b10:	d814      	bhi.n	8003b3c <UART_SetConfig+0x1f8>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <UART_SetConfig+0x1d8>
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d008      	beq.n	8003b2c <UART_SetConfig+0x1e8>
 8003b1a:	e00f      	b.n	8003b3c <UART_SetConfig+0x1f8>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b22:	e082      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003b24:	2302      	movs	r3, #2
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2a:	e07e      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b32:	e07a      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003b34:	2308      	movs	r3, #8
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3a:	e076      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b42:	e072      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a35      	ldr	r2, [pc, #212]	@ (8003c20 <UART_SetConfig+0x2dc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d12a      	bne.n	8003ba4 <UART_SetConfig+0x260>
 8003b4e:	4b30      	ldr	r3, [pc, #192]	@ (8003c10 <UART_SetConfig+0x2cc>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b5c:	d01a      	beq.n	8003b94 <UART_SetConfig+0x250>
 8003b5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b62:	d81b      	bhi.n	8003b9c <UART_SetConfig+0x258>
 8003b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b68:	d00c      	beq.n	8003b84 <UART_SetConfig+0x240>
 8003b6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b6e:	d815      	bhi.n	8003b9c <UART_SetConfig+0x258>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <UART_SetConfig+0x238>
 8003b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b78:	d008      	beq.n	8003b8c <UART_SetConfig+0x248>
 8003b7a:	e00f      	b.n	8003b9c <UART_SetConfig+0x258>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b82:	e052      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003b84:	2302      	movs	r3, #2
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8a:	e04e      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b92:	e04a      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003b94:	2308      	movs	r3, #8
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	e046      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba2:	e042      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <UART_SetConfig+0x2c4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d13a      	bne.n	8003c24 <UART_SetConfig+0x2e0>
 8003bae:	4b18      	ldr	r3, [pc, #96]	@ (8003c10 <UART_SetConfig+0x2cc>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bbc:	d01a      	beq.n	8003bf4 <UART_SetConfig+0x2b0>
 8003bbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bc2:	d81b      	bhi.n	8003bfc <UART_SetConfig+0x2b8>
 8003bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc8:	d00c      	beq.n	8003be4 <UART_SetConfig+0x2a0>
 8003bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bce:	d815      	bhi.n	8003bfc <UART_SetConfig+0x2b8>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <UART_SetConfig+0x298>
 8003bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd8:	d008      	beq.n	8003bec <UART_SetConfig+0x2a8>
 8003bda:	e00f      	b.n	8003bfc <UART_SetConfig+0x2b8>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be2:	e022      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003be4:	2302      	movs	r3, #2
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bea:	e01e      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003bec:	2304      	movs	r3, #4
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf2:	e01a      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfa:	e016      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c02:	e012      	b.n	8003c2a <UART_SetConfig+0x2e6>
 8003c04:	efff69f3 	.word	0xefff69f3
 8003c08:	40008000 	.word	0x40008000
 8003c0c:	40013800 	.word	0x40013800
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40004400 	.word	0x40004400
 8003c18:	40004800 	.word	0x40004800
 8003c1c:	40004c00 	.word	0x40004c00
 8003c20:	40005000 	.word	0x40005000
 8003c24:	2310      	movs	r3, #16
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a9f      	ldr	r2, [pc, #636]	@ (8003eac <UART_SetConfig+0x568>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d17a      	bne.n	8003d2a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d824      	bhi.n	8003c86 <UART_SetConfig+0x342>
 8003c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <UART_SetConfig+0x300>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c87 	.word	0x08003c87
 8003c4c:	08003c71 	.word	0x08003c71
 8003c50:	08003c87 	.word	0x08003c87
 8003c54:	08003c77 	.word	0x08003c77
 8003c58:	08003c87 	.word	0x08003c87
 8003c5c:	08003c87 	.word	0x08003c87
 8003c60:	08003c87 	.word	0x08003c87
 8003c64:	08003c7f 	.word	0x08003c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c68:	f7ff f84c 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8003c6c:	61f8      	str	r0, [r7, #28]
        break;
 8003c6e:	e010      	b.n	8003c92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c70:	4b8f      	ldr	r3, [pc, #572]	@ (8003eb0 <UART_SetConfig+0x56c>)
 8003c72:	61fb      	str	r3, [r7, #28]
        break;
 8003c74:	e00d      	b.n	8003c92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c76:	f7fe ffad 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 8003c7a:	61f8      	str	r0, [r7, #28]
        break;
 8003c7c:	e009      	b.n	8003c92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c82:	61fb      	str	r3, [r7, #28]
        break;
 8003c84:	e005      	b.n	8003c92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80fb 	beq.w	8003e90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d305      	bcc.n	8003cb6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d903      	bls.n	8003cbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cbc:	e0e8      	b.n	8003e90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	461c      	mov	r4, r3
 8003cc4:	4615      	mov	r5, r2
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	022b      	lsls	r3, r5, #8
 8003cd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cd4:	0222      	lsls	r2, r4, #8
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	6849      	ldr	r1, [r1, #4]
 8003cda:	0849      	lsrs	r1, r1, #1
 8003cdc:	2000      	movs	r0, #0
 8003cde:	4688      	mov	r8, r1
 8003ce0:	4681      	mov	r9, r0
 8003ce2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ce6:	eb43 0b09 	adc.w	fp, r3, r9
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	603b      	str	r3, [r7, #0]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cf8:	4650      	mov	r0, sl
 8003cfa:	4659      	mov	r1, fp
 8003cfc:	f7fc fac0 	bl	8000280 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4613      	mov	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d0e:	d308      	bcc.n	8003d22 <UART_SetConfig+0x3de>
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d16:	d204      	bcs.n	8003d22 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	60da      	str	r2, [r3, #12]
 8003d20:	e0b6      	b.n	8003e90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d28:	e0b2      	b.n	8003e90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d32:	d15e      	bne.n	8003df2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d828      	bhi.n	8003d8e <UART_SetConfig+0x44a>
 8003d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d44 <UART_SetConfig+0x400>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d71 	.word	0x08003d71
 8003d4c:	08003d79 	.word	0x08003d79
 8003d50:	08003d8f 	.word	0x08003d8f
 8003d54:	08003d7f 	.word	0x08003d7f
 8003d58:	08003d8f 	.word	0x08003d8f
 8003d5c:	08003d8f 	.word	0x08003d8f
 8003d60:	08003d8f 	.word	0x08003d8f
 8003d64:	08003d87 	.word	0x08003d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d68:	f7fe ffcc 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	61f8      	str	r0, [r7, #28]
        break;
 8003d6e:	e014      	b.n	8003d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7fe ffde 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8003d74:	61f8      	str	r0, [r7, #28]
        break;
 8003d76:	e010      	b.n	8003d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d78:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb0 <UART_SetConfig+0x56c>)
 8003d7a:	61fb      	str	r3, [r7, #28]
        break;
 8003d7c:	e00d      	b.n	8003d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7e:	f7fe ff29 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 8003d82:	61f8      	str	r0, [r7, #28]
        break;
 8003d84:	e009      	b.n	8003d9a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d8a:	61fb      	str	r3, [r7, #28]
        break;
 8003d8c:	e005      	b.n	8003d9a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d077      	beq.n	8003e90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	005a      	lsls	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	441a      	add	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b0f      	cmp	r3, #15
 8003dba:	d916      	bls.n	8003dea <UART_SetConfig+0x4a6>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dc2:	d212      	bcs.n	8003dea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f023 030f 	bic.w	r3, r3, #15
 8003dcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	8afb      	ldrh	r3, [r7, #22]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	8afa      	ldrh	r2, [r7, #22]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	e052      	b.n	8003e90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003df0:	e04e      	b.n	8003e90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003df2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d827      	bhi.n	8003e4a <UART_SetConfig+0x506>
 8003dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003e00 <UART_SetConfig+0x4bc>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e2d 	.word	0x08003e2d
 8003e08:	08003e35 	.word	0x08003e35
 8003e0c:	08003e4b 	.word	0x08003e4b
 8003e10:	08003e3b 	.word	0x08003e3b
 8003e14:	08003e4b 	.word	0x08003e4b
 8003e18:	08003e4b 	.word	0x08003e4b
 8003e1c:	08003e4b 	.word	0x08003e4b
 8003e20:	08003e43 	.word	0x08003e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7fe ff6e 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8003e28:	61f8      	str	r0, [r7, #28]
        break;
 8003e2a:	e014      	b.n	8003e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7fe ff80 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8003e30:	61f8      	str	r0, [r7, #28]
        break;
 8003e32:	e010      	b.n	8003e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e34:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb0 <UART_SetConfig+0x56c>)
 8003e36:	61fb      	str	r3, [r7, #28]
        break;
 8003e38:	e00d      	b.n	8003e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3a:	f7fe fecb 	bl	8002bd4 <HAL_RCC_GetSysClockFreq>
 8003e3e:	61f8      	str	r0, [r7, #28]
        break;
 8003e40:	e009      	b.n	8003e56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e46:	61fb      	str	r3, [r7, #28]
        break;
 8003e48:	e005      	b.n	8003e56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e54:	bf00      	nop
    }

    if (pclk != 0U)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d019      	beq.n	8003e90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	085a      	lsrs	r2, r3, #1
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	441a      	add	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b0f      	cmp	r3, #15
 8003e74:	d909      	bls.n	8003e8a <UART_SetConfig+0x546>
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e7c:	d205      	bcs.n	8003e8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60da      	str	r2, [r3, #12]
 8003e88:	e002      	b.n	8003e90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e9c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3728      	adds	r7, #40	@ 0x28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eaa:	bf00      	nop
 8003eac:	40008000 	.word	0x40008000
 8003eb0:	00f42400 	.word	0x00f42400

08003eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01a      	beq.n	8003fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fb2:	d10a      	bne.n	8003fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b098      	sub	sp, #96	@ 0x60
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004008:	f7fc fe90 	bl	8000d2c <HAL_GetTick>
 800400c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b08      	cmp	r3, #8
 800401a:	d12e      	bne.n	800407a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800401c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004024:	2200      	movs	r2, #0
 8004026:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f88c 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d021      	beq.n	800407a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403e:	e853 3f00 	ldrex	r3, [r3]
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800404a:	653b      	str	r3, [r7, #80]	@ 0x50
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004054:	647b      	str	r3, [r7, #68]	@ 0x44
 8004056:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004058:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800405a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800405c:	e841 2300 	strex	r3, r2, [r1]
 8004060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1e6      	bne.n	8004036 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e062      	b.n	8004140 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b04      	cmp	r3, #4
 8004086:	d149      	bne.n	800411c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004090:	2200      	movs	r2, #0
 8004092:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f856 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d03c      	beq.n	800411c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	623b      	str	r3, [r7, #32]
   return(result);
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80040c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e6      	bne.n	80040a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3308      	adds	r3, #8
 80040f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f4:	61fa      	str	r2, [r7, #28]
 80040f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	69b9      	ldr	r1, [r7, #24]
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	617b      	str	r3, [r7, #20]
   return(result);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e5      	bne.n	80040d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e011      	b.n	8004140 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3758      	adds	r7, #88	@ 0x58
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004158:	e04f      	b.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d04b      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7fc fde3 	bl	8000d2c <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <UART_WaitOnFlagUntilTimeout+0x30>
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e04e      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d037      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b80      	cmp	r3, #128	@ 0x80
 800418e:	d034      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b40      	cmp	r3, #64	@ 0x40
 8004194:	d031      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d110      	bne.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2208      	movs	r2, #8
 80041aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f838 	bl	8004222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2208      	movs	r2, #8
 80041b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e029      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041d4:	d111      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f81e 	bl	8004222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e00f      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	429a      	cmp	r2, r3
 8004216:	d0a0      	beq.n	800415a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004222:	b480      	push	{r7}
 8004224:	b095      	sub	sp, #84	@ 0x54
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800423e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004248:	643b      	str	r3, [r7, #64]	@ 0x40
 800424a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800424e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e6      	bne.n	800422a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	61fb      	str	r3, [r7, #28]
   return(result);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800427c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800427e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004294:	2b01      	cmp	r3, #1
 8004296:	d118      	bne.n	80042ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f023 0310 	bic.w	r3, r3, #16
 80042ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6979      	ldr	r1, [r7, #20]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	613b      	str	r3, [r7, #16]
   return(result);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e6      	bne.n	8004298 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042de:	bf00      	nop
 80042e0:	3754      	adds	r7, #84	@ 0x54
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <sniprintf>:
 80042ec:	b40c      	push	{r2, r3}
 80042ee:	b530      	push	{r4, r5, lr}
 80042f0:	4b18      	ldr	r3, [pc, #96]	@ (8004354 <sniprintf+0x68>)
 80042f2:	1e0c      	subs	r4, r1, #0
 80042f4:	681d      	ldr	r5, [r3, #0]
 80042f6:	b09d      	sub	sp, #116	@ 0x74
 80042f8:	da08      	bge.n	800430c <sniprintf+0x20>
 80042fa:	238b      	movs	r3, #139	@ 0x8b
 80042fc:	602b      	str	r3, [r5, #0]
 80042fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004302:	b01d      	add	sp, #116	@ 0x74
 8004304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004308:	b002      	add	sp, #8
 800430a:	4770      	bx	lr
 800430c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004310:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	931b      	str	r3, [sp, #108]	@ 0x6c
 800431a:	bf14      	ite	ne
 800431c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004320:	4623      	moveq	r3, r4
 8004322:	9304      	str	r3, [sp, #16]
 8004324:	9307      	str	r3, [sp, #28]
 8004326:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800432a:	9002      	str	r0, [sp, #8]
 800432c:	9006      	str	r0, [sp, #24]
 800432e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004332:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004334:	ab21      	add	r3, sp, #132	@ 0x84
 8004336:	a902      	add	r1, sp, #8
 8004338:	4628      	mov	r0, r5
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	f000 f994 	bl	8004668 <_svfiprintf_r>
 8004340:	1c43      	adds	r3, r0, #1
 8004342:	bfbc      	itt	lt
 8004344:	238b      	movlt	r3, #139	@ 0x8b
 8004346:	602b      	strlt	r3, [r5, #0]
 8004348:	2c00      	cmp	r4, #0
 800434a:	d0da      	beq.n	8004302 <sniprintf+0x16>
 800434c:	9b02      	ldr	r3, [sp, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e7d6      	b.n	8004302 <sniprintf+0x16>
 8004354:	2000001c 	.word	0x2000001c

08004358 <memset>:
 8004358:	4402      	add	r2, r0
 800435a:	4603      	mov	r3, r0
 800435c:	4293      	cmp	r3, r2
 800435e:	d100      	bne.n	8004362 <memset+0xa>
 8004360:	4770      	bx	lr
 8004362:	f803 1b01 	strb.w	r1, [r3], #1
 8004366:	e7f9      	b.n	800435c <memset+0x4>

08004368 <__errno>:
 8004368:	4b01      	ldr	r3, [pc, #4]	@ (8004370 <__errno+0x8>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	2000001c 	.word	0x2000001c

08004374 <__libc_init_array>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	4d0d      	ldr	r5, [pc, #52]	@ (80043ac <__libc_init_array+0x38>)
 8004378:	4c0d      	ldr	r4, [pc, #52]	@ (80043b0 <__libc_init_array+0x3c>)
 800437a:	1b64      	subs	r4, r4, r5
 800437c:	10a4      	asrs	r4, r4, #2
 800437e:	2600      	movs	r6, #0
 8004380:	42a6      	cmp	r6, r4
 8004382:	d109      	bne.n	8004398 <__libc_init_array+0x24>
 8004384:	4d0b      	ldr	r5, [pc, #44]	@ (80043b4 <__libc_init_array+0x40>)
 8004386:	4c0c      	ldr	r4, [pc, #48]	@ (80043b8 <__libc_init_array+0x44>)
 8004388:	f000 fc64 	bl	8004c54 <_init>
 800438c:	1b64      	subs	r4, r4, r5
 800438e:	10a4      	asrs	r4, r4, #2
 8004390:	2600      	movs	r6, #0
 8004392:	42a6      	cmp	r6, r4
 8004394:	d105      	bne.n	80043a2 <__libc_init_array+0x2e>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	f855 3b04 	ldr.w	r3, [r5], #4
 800439c:	4798      	blx	r3
 800439e:	3601      	adds	r6, #1
 80043a0:	e7ee      	b.n	8004380 <__libc_init_array+0xc>
 80043a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a6:	4798      	blx	r3
 80043a8:	3601      	adds	r6, #1
 80043aa:	e7f2      	b.n	8004392 <__libc_init_array+0x1e>
 80043ac:	08004d04 	.word	0x08004d04
 80043b0:	08004d04 	.word	0x08004d04
 80043b4:	08004d04 	.word	0x08004d04
 80043b8:	08004d08 	.word	0x08004d08

080043bc <__retarget_lock_acquire_recursive>:
 80043bc:	4770      	bx	lr

080043be <__retarget_lock_release_recursive>:
 80043be:	4770      	bx	lr

080043c0 <_free_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4605      	mov	r5, r0
 80043c4:	2900      	cmp	r1, #0
 80043c6:	d041      	beq.n	800444c <_free_r+0x8c>
 80043c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043cc:	1f0c      	subs	r4, r1, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bfb8      	it	lt
 80043d2:	18e4      	addlt	r4, r4, r3
 80043d4:	f000 f8e0 	bl	8004598 <__malloc_lock>
 80043d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004450 <_free_r+0x90>)
 80043da:	6813      	ldr	r3, [r2, #0]
 80043dc:	b933      	cbnz	r3, 80043ec <_free_r+0x2c>
 80043de:	6063      	str	r3, [r4, #4]
 80043e0:	6014      	str	r4, [r2, #0]
 80043e2:	4628      	mov	r0, r5
 80043e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043e8:	f000 b8dc 	b.w	80045a4 <__malloc_unlock>
 80043ec:	42a3      	cmp	r3, r4
 80043ee:	d908      	bls.n	8004402 <_free_r+0x42>
 80043f0:	6820      	ldr	r0, [r4, #0]
 80043f2:	1821      	adds	r1, r4, r0
 80043f4:	428b      	cmp	r3, r1
 80043f6:	bf01      	itttt	eq
 80043f8:	6819      	ldreq	r1, [r3, #0]
 80043fa:	685b      	ldreq	r3, [r3, #4]
 80043fc:	1809      	addeq	r1, r1, r0
 80043fe:	6021      	streq	r1, [r4, #0]
 8004400:	e7ed      	b.n	80043de <_free_r+0x1e>
 8004402:	461a      	mov	r2, r3
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	b10b      	cbz	r3, 800440c <_free_r+0x4c>
 8004408:	42a3      	cmp	r3, r4
 800440a:	d9fa      	bls.n	8004402 <_free_r+0x42>
 800440c:	6811      	ldr	r1, [r2, #0]
 800440e:	1850      	adds	r0, r2, r1
 8004410:	42a0      	cmp	r0, r4
 8004412:	d10b      	bne.n	800442c <_free_r+0x6c>
 8004414:	6820      	ldr	r0, [r4, #0]
 8004416:	4401      	add	r1, r0
 8004418:	1850      	adds	r0, r2, r1
 800441a:	4283      	cmp	r3, r0
 800441c:	6011      	str	r1, [r2, #0]
 800441e:	d1e0      	bne.n	80043e2 <_free_r+0x22>
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	6053      	str	r3, [r2, #4]
 8004426:	4408      	add	r0, r1
 8004428:	6010      	str	r0, [r2, #0]
 800442a:	e7da      	b.n	80043e2 <_free_r+0x22>
 800442c:	d902      	bls.n	8004434 <_free_r+0x74>
 800442e:	230c      	movs	r3, #12
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	e7d6      	b.n	80043e2 <_free_r+0x22>
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	1821      	adds	r1, r4, r0
 8004438:	428b      	cmp	r3, r1
 800443a:	bf04      	itt	eq
 800443c:	6819      	ldreq	r1, [r3, #0]
 800443e:	685b      	ldreq	r3, [r3, #4]
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	bf04      	itt	eq
 8004444:	1809      	addeq	r1, r1, r0
 8004446:	6021      	streq	r1, [r4, #0]
 8004448:	6054      	str	r4, [r2, #4]
 800444a:	e7ca      	b.n	80043e2 <_free_r+0x22>
 800444c:	bd38      	pop	{r3, r4, r5, pc}
 800444e:	bf00      	nop
 8004450:	200002fc 	.word	0x200002fc

08004454 <sbrk_aligned>:
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	4e0f      	ldr	r6, [pc, #60]	@ (8004494 <sbrk_aligned+0x40>)
 8004458:	460c      	mov	r4, r1
 800445a:	6831      	ldr	r1, [r6, #0]
 800445c:	4605      	mov	r5, r0
 800445e:	b911      	cbnz	r1, 8004466 <sbrk_aligned+0x12>
 8004460:	f000 fba4 	bl	8004bac <_sbrk_r>
 8004464:	6030      	str	r0, [r6, #0]
 8004466:	4621      	mov	r1, r4
 8004468:	4628      	mov	r0, r5
 800446a:	f000 fb9f 	bl	8004bac <_sbrk_r>
 800446e:	1c43      	adds	r3, r0, #1
 8004470:	d103      	bne.n	800447a <sbrk_aligned+0x26>
 8004472:	f04f 34ff 	mov.w	r4, #4294967295
 8004476:	4620      	mov	r0, r4
 8004478:	bd70      	pop	{r4, r5, r6, pc}
 800447a:	1cc4      	adds	r4, r0, #3
 800447c:	f024 0403 	bic.w	r4, r4, #3
 8004480:	42a0      	cmp	r0, r4
 8004482:	d0f8      	beq.n	8004476 <sbrk_aligned+0x22>
 8004484:	1a21      	subs	r1, r4, r0
 8004486:	4628      	mov	r0, r5
 8004488:	f000 fb90 	bl	8004bac <_sbrk_r>
 800448c:	3001      	adds	r0, #1
 800448e:	d1f2      	bne.n	8004476 <sbrk_aligned+0x22>
 8004490:	e7ef      	b.n	8004472 <sbrk_aligned+0x1e>
 8004492:	bf00      	nop
 8004494:	200002f8 	.word	0x200002f8

08004498 <_malloc_r>:
 8004498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800449c:	1ccd      	adds	r5, r1, #3
 800449e:	f025 0503 	bic.w	r5, r5, #3
 80044a2:	3508      	adds	r5, #8
 80044a4:	2d0c      	cmp	r5, #12
 80044a6:	bf38      	it	cc
 80044a8:	250c      	movcc	r5, #12
 80044aa:	2d00      	cmp	r5, #0
 80044ac:	4606      	mov	r6, r0
 80044ae:	db01      	blt.n	80044b4 <_malloc_r+0x1c>
 80044b0:	42a9      	cmp	r1, r5
 80044b2:	d904      	bls.n	80044be <_malloc_r+0x26>
 80044b4:	230c      	movs	r3, #12
 80044b6:	6033      	str	r3, [r6, #0]
 80044b8:	2000      	movs	r0, #0
 80044ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004594 <_malloc_r+0xfc>
 80044c2:	f000 f869 	bl	8004598 <__malloc_lock>
 80044c6:	f8d8 3000 	ldr.w	r3, [r8]
 80044ca:	461c      	mov	r4, r3
 80044cc:	bb44      	cbnz	r4, 8004520 <_malloc_r+0x88>
 80044ce:	4629      	mov	r1, r5
 80044d0:	4630      	mov	r0, r6
 80044d2:	f7ff ffbf 	bl	8004454 <sbrk_aligned>
 80044d6:	1c43      	adds	r3, r0, #1
 80044d8:	4604      	mov	r4, r0
 80044da:	d158      	bne.n	800458e <_malloc_r+0xf6>
 80044dc:	f8d8 4000 	ldr.w	r4, [r8]
 80044e0:	4627      	mov	r7, r4
 80044e2:	2f00      	cmp	r7, #0
 80044e4:	d143      	bne.n	800456e <_malloc_r+0xd6>
 80044e6:	2c00      	cmp	r4, #0
 80044e8:	d04b      	beq.n	8004582 <_malloc_r+0xea>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	4639      	mov	r1, r7
 80044ee:	4630      	mov	r0, r6
 80044f0:	eb04 0903 	add.w	r9, r4, r3
 80044f4:	f000 fb5a 	bl	8004bac <_sbrk_r>
 80044f8:	4581      	cmp	r9, r0
 80044fa:	d142      	bne.n	8004582 <_malloc_r+0xea>
 80044fc:	6821      	ldr	r1, [r4, #0]
 80044fe:	1a6d      	subs	r5, r5, r1
 8004500:	4629      	mov	r1, r5
 8004502:	4630      	mov	r0, r6
 8004504:	f7ff ffa6 	bl	8004454 <sbrk_aligned>
 8004508:	3001      	adds	r0, #1
 800450a:	d03a      	beq.n	8004582 <_malloc_r+0xea>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	442b      	add	r3, r5
 8004510:	6023      	str	r3, [r4, #0]
 8004512:	f8d8 3000 	ldr.w	r3, [r8]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	bb62      	cbnz	r2, 8004574 <_malloc_r+0xdc>
 800451a:	f8c8 7000 	str.w	r7, [r8]
 800451e:	e00f      	b.n	8004540 <_malloc_r+0xa8>
 8004520:	6822      	ldr	r2, [r4, #0]
 8004522:	1b52      	subs	r2, r2, r5
 8004524:	d420      	bmi.n	8004568 <_malloc_r+0xd0>
 8004526:	2a0b      	cmp	r2, #11
 8004528:	d917      	bls.n	800455a <_malloc_r+0xc2>
 800452a:	1961      	adds	r1, r4, r5
 800452c:	42a3      	cmp	r3, r4
 800452e:	6025      	str	r5, [r4, #0]
 8004530:	bf18      	it	ne
 8004532:	6059      	strne	r1, [r3, #4]
 8004534:	6863      	ldr	r3, [r4, #4]
 8004536:	bf08      	it	eq
 8004538:	f8c8 1000 	streq.w	r1, [r8]
 800453c:	5162      	str	r2, [r4, r5]
 800453e:	604b      	str	r3, [r1, #4]
 8004540:	4630      	mov	r0, r6
 8004542:	f000 f82f 	bl	80045a4 <__malloc_unlock>
 8004546:	f104 000b 	add.w	r0, r4, #11
 800454a:	1d23      	adds	r3, r4, #4
 800454c:	f020 0007 	bic.w	r0, r0, #7
 8004550:	1ac2      	subs	r2, r0, r3
 8004552:	bf1c      	itt	ne
 8004554:	1a1b      	subne	r3, r3, r0
 8004556:	50a3      	strne	r3, [r4, r2]
 8004558:	e7af      	b.n	80044ba <_malloc_r+0x22>
 800455a:	6862      	ldr	r2, [r4, #4]
 800455c:	42a3      	cmp	r3, r4
 800455e:	bf0c      	ite	eq
 8004560:	f8c8 2000 	streq.w	r2, [r8]
 8004564:	605a      	strne	r2, [r3, #4]
 8004566:	e7eb      	b.n	8004540 <_malloc_r+0xa8>
 8004568:	4623      	mov	r3, r4
 800456a:	6864      	ldr	r4, [r4, #4]
 800456c:	e7ae      	b.n	80044cc <_malloc_r+0x34>
 800456e:	463c      	mov	r4, r7
 8004570:	687f      	ldr	r7, [r7, #4]
 8004572:	e7b6      	b.n	80044e2 <_malloc_r+0x4a>
 8004574:	461a      	mov	r2, r3
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	42a3      	cmp	r3, r4
 800457a:	d1fb      	bne.n	8004574 <_malloc_r+0xdc>
 800457c:	2300      	movs	r3, #0
 800457e:	6053      	str	r3, [r2, #4]
 8004580:	e7de      	b.n	8004540 <_malloc_r+0xa8>
 8004582:	230c      	movs	r3, #12
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	4630      	mov	r0, r6
 8004588:	f000 f80c 	bl	80045a4 <__malloc_unlock>
 800458c:	e794      	b.n	80044b8 <_malloc_r+0x20>
 800458e:	6005      	str	r5, [r0, #0]
 8004590:	e7d6      	b.n	8004540 <_malloc_r+0xa8>
 8004592:	bf00      	nop
 8004594:	200002fc 	.word	0x200002fc

08004598 <__malloc_lock>:
 8004598:	4801      	ldr	r0, [pc, #4]	@ (80045a0 <__malloc_lock+0x8>)
 800459a:	f7ff bf0f 	b.w	80043bc <__retarget_lock_acquire_recursive>
 800459e:	bf00      	nop
 80045a0:	200002f4 	.word	0x200002f4

080045a4 <__malloc_unlock>:
 80045a4:	4801      	ldr	r0, [pc, #4]	@ (80045ac <__malloc_unlock+0x8>)
 80045a6:	f7ff bf0a 	b.w	80043be <__retarget_lock_release_recursive>
 80045aa:	bf00      	nop
 80045ac:	200002f4 	.word	0x200002f4

080045b0 <__ssputs_r>:
 80045b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b4:	688e      	ldr	r6, [r1, #8]
 80045b6:	461f      	mov	r7, r3
 80045b8:	42be      	cmp	r6, r7
 80045ba:	680b      	ldr	r3, [r1, #0]
 80045bc:	4682      	mov	sl, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	4690      	mov	r8, r2
 80045c2:	d82d      	bhi.n	8004620 <__ssputs_r+0x70>
 80045c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045cc:	d026      	beq.n	800461c <__ssputs_r+0x6c>
 80045ce:	6965      	ldr	r5, [r4, #20]
 80045d0:	6909      	ldr	r1, [r1, #16]
 80045d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045d6:	eba3 0901 	sub.w	r9, r3, r1
 80045da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045de:	1c7b      	adds	r3, r7, #1
 80045e0:	444b      	add	r3, r9
 80045e2:	106d      	asrs	r5, r5, #1
 80045e4:	429d      	cmp	r5, r3
 80045e6:	bf38      	it	cc
 80045e8:	461d      	movcc	r5, r3
 80045ea:	0553      	lsls	r3, r2, #21
 80045ec:	d527      	bpl.n	800463e <__ssputs_r+0x8e>
 80045ee:	4629      	mov	r1, r5
 80045f0:	f7ff ff52 	bl	8004498 <_malloc_r>
 80045f4:	4606      	mov	r6, r0
 80045f6:	b360      	cbz	r0, 8004652 <__ssputs_r+0xa2>
 80045f8:	6921      	ldr	r1, [r4, #16]
 80045fa:	464a      	mov	r2, r9
 80045fc:	f000 fae6 	bl	8004bcc <memcpy>
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004606:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800460a:	81a3      	strh	r3, [r4, #12]
 800460c:	6126      	str	r6, [r4, #16]
 800460e:	6165      	str	r5, [r4, #20]
 8004610:	444e      	add	r6, r9
 8004612:	eba5 0509 	sub.w	r5, r5, r9
 8004616:	6026      	str	r6, [r4, #0]
 8004618:	60a5      	str	r5, [r4, #8]
 800461a:	463e      	mov	r6, r7
 800461c:	42be      	cmp	r6, r7
 800461e:	d900      	bls.n	8004622 <__ssputs_r+0x72>
 8004620:	463e      	mov	r6, r7
 8004622:	6820      	ldr	r0, [r4, #0]
 8004624:	4632      	mov	r2, r6
 8004626:	4641      	mov	r1, r8
 8004628:	f000 faa6 	bl	8004b78 <memmove>
 800462c:	68a3      	ldr	r3, [r4, #8]
 800462e:	1b9b      	subs	r3, r3, r6
 8004630:	60a3      	str	r3, [r4, #8]
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	4433      	add	r3, r6
 8004636:	6023      	str	r3, [r4, #0]
 8004638:	2000      	movs	r0, #0
 800463a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463e:	462a      	mov	r2, r5
 8004640:	f000 fad2 	bl	8004be8 <_realloc_r>
 8004644:	4606      	mov	r6, r0
 8004646:	2800      	cmp	r0, #0
 8004648:	d1e0      	bne.n	800460c <__ssputs_r+0x5c>
 800464a:	6921      	ldr	r1, [r4, #16]
 800464c:	4650      	mov	r0, sl
 800464e:	f7ff feb7 	bl	80043c0 <_free_r>
 8004652:	230c      	movs	r3, #12
 8004654:	f8ca 3000 	str.w	r3, [sl]
 8004658:	89a3      	ldrh	r3, [r4, #12]
 800465a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800465e:	81a3      	strh	r3, [r4, #12]
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	e7e9      	b.n	800463a <__ssputs_r+0x8a>
	...

08004668 <_svfiprintf_r>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	4698      	mov	r8, r3
 800466e:	898b      	ldrh	r3, [r1, #12]
 8004670:	061b      	lsls	r3, r3, #24
 8004672:	b09d      	sub	sp, #116	@ 0x74
 8004674:	4607      	mov	r7, r0
 8004676:	460d      	mov	r5, r1
 8004678:	4614      	mov	r4, r2
 800467a:	d510      	bpl.n	800469e <_svfiprintf_r+0x36>
 800467c:	690b      	ldr	r3, [r1, #16]
 800467e:	b973      	cbnz	r3, 800469e <_svfiprintf_r+0x36>
 8004680:	2140      	movs	r1, #64	@ 0x40
 8004682:	f7ff ff09 	bl	8004498 <_malloc_r>
 8004686:	6028      	str	r0, [r5, #0]
 8004688:	6128      	str	r0, [r5, #16]
 800468a:	b930      	cbnz	r0, 800469a <_svfiprintf_r+0x32>
 800468c:	230c      	movs	r3, #12
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	b01d      	add	sp, #116	@ 0x74
 8004696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469a:	2340      	movs	r3, #64	@ 0x40
 800469c:	616b      	str	r3, [r5, #20]
 800469e:	2300      	movs	r3, #0
 80046a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046a2:	2320      	movs	r3, #32
 80046a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80046ac:	2330      	movs	r3, #48	@ 0x30
 80046ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800484c <_svfiprintf_r+0x1e4>
 80046b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046b6:	f04f 0901 	mov.w	r9, #1
 80046ba:	4623      	mov	r3, r4
 80046bc:	469a      	mov	sl, r3
 80046be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046c2:	b10a      	cbz	r2, 80046c8 <_svfiprintf_r+0x60>
 80046c4:	2a25      	cmp	r2, #37	@ 0x25
 80046c6:	d1f9      	bne.n	80046bc <_svfiprintf_r+0x54>
 80046c8:	ebba 0b04 	subs.w	fp, sl, r4
 80046cc:	d00b      	beq.n	80046e6 <_svfiprintf_r+0x7e>
 80046ce:	465b      	mov	r3, fp
 80046d0:	4622      	mov	r2, r4
 80046d2:	4629      	mov	r1, r5
 80046d4:	4638      	mov	r0, r7
 80046d6:	f7ff ff6b 	bl	80045b0 <__ssputs_r>
 80046da:	3001      	adds	r0, #1
 80046dc:	f000 80a7 	beq.w	800482e <_svfiprintf_r+0x1c6>
 80046e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046e2:	445a      	add	r2, fp
 80046e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80046e6:	f89a 3000 	ldrb.w	r3, [sl]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 809f 	beq.w	800482e <_svfiprintf_r+0x1c6>
 80046f0:	2300      	movs	r3, #0
 80046f2:	f04f 32ff 	mov.w	r2, #4294967295
 80046f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046fa:	f10a 0a01 	add.w	sl, sl, #1
 80046fe:	9304      	str	r3, [sp, #16]
 8004700:	9307      	str	r3, [sp, #28]
 8004702:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004706:	931a      	str	r3, [sp, #104]	@ 0x68
 8004708:	4654      	mov	r4, sl
 800470a:	2205      	movs	r2, #5
 800470c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004710:	484e      	ldr	r0, [pc, #312]	@ (800484c <_svfiprintf_r+0x1e4>)
 8004712:	f7fb fd65 	bl	80001e0 <memchr>
 8004716:	9a04      	ldr	r2, [sp, #16]
 8004718:	b9d8      	cbnz	r0, 8004752 <_svfiprintf_r+0xea>
 800471a:	06d0      	lsls	r0, r2, #27
 800471c:	bf44      	itt	mi
 800471e:	2320      	movmi	r3, #32
 8004720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004724:	0711      	lsls	r1, r2, #28
 8004726:	bf44      	itt	mi
 8004728:	232b      	movmi	r3, #43	@ 0x2b
 800472a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800472e:	f89a 3000 	ldrb.w	r3, [sl]
 8004732:	2b2a      	cmp	r3, #42	@ 0x2a
 8004734:	d015      	beq.n	8004762 <_svfiprintf_r+0xfa>
 8004736:	9a07      	ldr	r2, [sp, #28]
 8004738:	4654      	mov	r4, sl
 800473a:	2000      	movs	r0, #0
 800473c:	f04f 0c0a 	mov.w	ip, #10
 8004740:	4621      	mov	r1, r4
 8004742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004746:	3b30      	subs	r3, #48	@ 0x30
 8004748:	2b09      	cmp	r3, #9
 800474a:	d94b      	bls.n	80047e4 <_svfiprintf_r+0x17c>
 800474c:	b1b0      	cbz	r0, 800477c <_svfiprintf_r+0x114>
 800474e:	9207      	str	r2, [sp, #28]
 8004750:	e014      	b.n	800477c <_svfiprintf_r+0x114>
 8004752:	eba0 0308 	sub.w	r3, r0, r8
 8004756:	fa09 f303 	lsl.w	r3, r9, r3
 800475a:	4313      	orrs	r3, r2
 800475c:	9304      	str	r3, [sp, #16]
 800475e:	46a2      	mov	sl, r4
 8004760:	e7d2      	b.n	8004708 <_svfiprintf_r+0xa0>
 8004762:	9b03      	ldr	r3, [sp, #12]
 8004764:	1d19      	adds	r1, r3, #4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	9103      	str	r1, [sp, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	bfbb      	ittet	lt
 800476e:	425b      	neglt	r3, r3
 8004770:	f042 0202 	orrlt.w	r2, r2, #2
 8004774:	9307      	strge	r3, [sp, #28]
 8004776:	9307      	strlt	r3, [sp, #28]
 8004778:	bfb8      	it	lt
 800477a:	9204      	strlt	r2, [sp, #16]
 800477c:	7823      	ldrb	r3, [r4, #0]
 800477e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004780:	d10a      	bne.n	8004798 <_svfiprintf_r+0x130>
 8004782:	7863      	ldrb	r3, [r4, #1]
 8004784:	2b2a      	cmp	r3, #42	@ 0x2a
 8004786:	d132      	bne.n	80047ee <_svfiprintf_r+0x186>
 8004788:	9b03      	ldr	r3, [sp, #12]
 800478a:	1d1a      	adds	r2, r3, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	9203      	str	r2, [sp, #12]
 8004790:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004794:	3402      	adds	r4, #2
 8004796:	9305      	str	r3, [sp, #20]
 8004798:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800485c <_svfiprintf_r+0x1f4>
 800479c:	7821      	ldrb	r1, [r4, #0]
 800479e:	2203      	movs	r2, #3
 80047a0:	4650      	mov	r0, sl
 80047a2:	f7fb fd1d 	bl	80001e0 <memchr>
 80047a6:	b138      	cbz	r0, 80047b8 <_svfiprintf_r+0x150>
 80047a8:	9b04      	ldr	r3, [sp, #16]
 80047aa:	eba0 000a 	sub.w	r0, r0, sl
 80047ae:	2240      	movs	r2, #64	@ 0x40
 80047b0:	4082      	lsls	r2, r0
 80047b2:	4313      	orrs	r3, r2
 80047b4:	3401      	adds	r4, #1
 80047b6:	9304      	str	r3, [sp, #16]
 80047b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047bc:	4824      	ldr	r0, [pc, #144]	@ (8004850 <_svfiprintf_r+0x1e8>)
 80047be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047c2:	2206      	movs	r2, #6
 80047c4:	f7fb fd0c 	bl	80001e0 <memchr>
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d036      	beq.n	800483a <_svfiprintf_r+0x1d2>
 80047cc:	4b21      	ldr	r3, [pc, #132]	@ (8004854 <_svfiprintf_r+0x1ec>)
 80047ce:	bb1b      	cbnz	r3, 8004818 <_svfiprintf_r+0x1b0>
 80047d0:	9b03      	ldr	r3, [sp, #12]
 80047d2:	3307      	adds	r3, #7
 80047d4:	f023 0307 	bic.w	r3, r3, #7
 80047d8:	3308      	adds	r3, #8
 80047da:	9303      	str	r3, [sp, #12]
 80047dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047de:	4433      	add	r3, r6
 80047e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80047e2:	e76a      	b.n	80046ba <_svfiprintf_r+0x52>
 80047e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80047e8:	460c      	mov	r4, r1
 80047ea:	2001      	movs	r0, #1
 80047ec:	e7a8      	b.n	8004740 <_svfiprintf_r+0xd8>
 80047ee:	2300      	movs	r3, #0
 80047f0:	3401      	adds	r4, #1
 80047f2:	9305      	str	r3, [sp, #20]
 80047f4:	4619      	mov	r1, r3
 80047f6:	f04f 0c0a 	mov.w	ip, #10
 80047fa:	4620      	mov	r0, r4
 80047fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004800:	3a30      	subs	r2, #48	@ 0x30
 8004802:	2a09      	cmp	r2, #9
 8004804:	d903      	bls.n	800480e <_svfiprintf_r+0x1a6>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0c6      	beq.n	8004798 <_svfiprintf_r+0x130>
 800480a:	9105      	str	r1, [sp, #20]
 800480c:	e7c4      	b.n	8004798 <_svfiprintf_r+0x130>
 800480e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004812:	4604      	mov	r4, r0
 8004814:	2301      	movs	r3, #1
 8004816:	e7f0      	b.n	80047fa <_svfiprintf_r+0x192>
 8004818:	ab03      	add	r3, sp, #12
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	462a      	mov	r2, r5
 800481e:	4b0e      	ldr	r3, [pc, #56]	@ (8004858 <_svfiprintf_r+0x1f0>)
 8004820:	a904      	add	r1, sp, #16
 8004822:	4638      	mov	r0, r7
 8004824:	f3af 8000 	nop.w
 8004828:	1c42      	adds	r2, r0, #1
 800482a:	4606      	mov	r6, r0
 800482c:	d1d6      	bne.n	80047dc <_svfiprintf_r+0x174>
 800482e:	89ab      	ldrh	r3, [r5, #12]
 8004830:	065b      	lsls	r3, r3, #25
 8004832:	f53f af2d 	bmi.w	8004690 <_svfiprintf_r+0x28>
 8004836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004838:	e72c      	b.n	8004694 <_svfiprintf_r+0x2c>
 800483a:	ab03      	add	r3, sp, #12
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	462a      	mov	r2, r5
 8004840:	4b05      	ldr	r3, [pc, #20]	@ (8004858 <_svfiprintf_r+0x1f0>)
 8004842:	a904      	add	r1, sp, #16
 8004844:	4638      	mov	r0, r7
 8004846:	f000 f879 	bl	800493c <_printf_i>
 800484a:	e7ed      	b.n	8004828 <_svfiprintf_r+0x1c0>
 800484c:	08004cc8 	.word	0x08004cc8
 8004850:	08004cd2 	.word	0x08004cd2
 8004854:	00000000 	.word	0x00000000
 8004858:	080045b1 	.word	0x080045b1
 800485c:	08004cce 	.word	0x08004cce

08004860 <_printf_common>:
 8004860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004864:	4616      	mov	r6, r2
 8004866:	4698      	mov	r8, r3
 8004868:	688a      	ldr	r2, [r1, #8]
 800486a:	690b      	ldr	r3, [r1, #16]
 800486c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004870:	4293      	cmp	r3, r2
 8004872:	bfb8      	it	lt
 8004874:	4613      	movlt	r3, r2
 8004876:	6033      	str	r3, [r6, #0]
 8004878:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800487c:	4607      	mov	r7, r0
 800487e:	460c      	mov	r4, r1
 8004880:	b10a      	cbz	r2, 8004886 <_printf_common+0x26>
 8004882:	3301      	adds	r3, #1
 8004884:	6033      	str	r3, [r6, #0]
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	0699      	lsls	r1, r3, #26
 800488a:	bf42      	ittt	mi
 800488c:	6833      	ldrmi	r3, [r6, #0]
 800488e:	3302      	addmi	r3, #2
 8004890:	6033      	strmi	r3, [r6, #0]
 8004892:	6825      	ldr	r5, [r4, #0]
 8004894:	f015 0506 	ands.w	r5, r5, #6
 8004898:	d106      	bne.n	80048a8 <_printf_common+0x48>
 800489a:	f104 0a19 	add.w	sl, r4, #25
 800489e:	68e3      	ldr	r3, [r4, #12]
 80048a0:	6832      	ldr	r2, [r6, #0]
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	42ab      	cmp	r3, r5
 80048a6:	dc26      	bgt.n	80048f6 <_printf_common+0x96>
 80048a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048ac:	6822      	ldr	r2, [r4, #0]
 80048ae:	3b00      	subs	r3, #0
 80048b0:	bf18      	it	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	0692      	lsls	r2, r2, #26
 80048b6:	d42b      	bmi.n	8004910 <_printf_common+0xb0>
 80048b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048bc:	4641      	mov	r1, r8
 80048be:	4638      	mov	r0, r7
 80048c0:	47c8      	blx	r9
 80048c2:	3001      	adds	r0, #1
 80048c4:	d01e      	beq.n	8004904 <_printf_common+0xa4>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	6922      	ldr	r2, [r4, #16]
 80048ca:	f003 0306 	and.w	r3, r3, #6
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	bf02      	ittt	eq
 80048d2:	68e5      	ldreq	r5, [r4, #12]
 80048d4:	6833      	ldreq	r3, [r6, #0]
 80048d6:	1aed      	subeq	r5, r5, r3
 80048d8:	68a3      	ldr	r3, [r4, #8]
 80048da:	bf0c      	ite	eq
 80048dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048e0:	2500      	movne	r5, #0
 80048e2:	4293      	cmp	r3, r2
 80048e4:	bfc4      	itt	gt
 80048e6:	1a9b      	subgt	r3, r3, r2
 80048e8:	18ed      	addgt	r5, r5, r3
 80048ea:	2600      	movs	r6, #0
 80048ec:	341a      	adds	r4, #26
 80048ee:	42b5      	cmp	r5, r6
 80048f0:	d11a      	bne.n	8004928 <_printf_common+0xc8>
 80048f2:	2000      	movs	r0, #0
 80048f4:	e008      	b.n	8004908 <_printf_common+0xa8>
 80048f6:	2301      	movs	r3, #1
 80048f8:	4652      	mov	r2, sl
 80048fa:	4641      	mov	r1, r8
 80048fc:	4638      	mov	r0, r7
 80048fe:	47c8      	blx	r9
 8004900:	3001      	adds	r0, #1
 8004902:	d103      	bne.n	800490c <_printf_common+0xac>
 8004904:	f04f 30ff 	mov.w	r0, #4294967295
 8004908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490c:	3501      	adds	r5, #1
 800490e:	e7c6      	b.n	800489e <_printf_common+0x3e>
 8004910:	18e1      	adds	r1, r4, r3
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	2030      	movs	r0, #48	@ 0x30
 8004916:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800491a:	4422      	add	r2, r4
 800491c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004920:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004924:	3302      	adds	r3, #2
 8004926:	e7c7      	b.n	80048b8 <_printf_common+0x58>
 8004928:	2301      	movs	r3, #1
 800492a:	4622      	mov	r2, r4
 800492c:	4641      	mov	r1, r8
 800492e:	4638      	mov	r0, r7
 8004930:	47c8      	blx	r9
 8004932:	3001      	adds	r0, #1
 8004934:	d0e6      	beq.n	8004904 <_printf_common+0xa4>
 8004936:	3601      	adds	r6, #1
 8004938:	e7d9      	b.n	80048ee <_printf_common+0x8e>
	...

0800493c <_printf_i>:
 800493c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	7e0f      	ldrb	r7, [r1, #24]
 8004942:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004944:	2f78      	cmp	r7, #120	@ 0x78
 8004946:	4691      	mov	r9, r2
 8004948:	4680      	mov	r8, r0
 800494a:	460c      	mov	r4, r1
 800494c:	469a      	mov	sl, r3
 800494e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004952:	d807      	bhi.n	8004964 <_printf_i+0x28>
 8004954:	2f62      	cmp	r7, #98	@ 0x62
 8004956:	d80a      	bhi.n	800496e <_printf_i+0x32>
 8004958:	2f00      	cmp	r7, #0
 800495a:	f000 80d1 	beq.w	8004b00 <_printf_i+0x1c4>
 800495e:	2f58      	cmp	r7, #88	@ 0x58
 8004960:	f000 80b8 	beq.w	8004ad4 <_printf_i+0x198>
 8004964:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004968:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800496c:	e03a      	b.n	80049e4 <_printf_i+0xa8>
 800496e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004972:	2b15      	cmp	r3, #21
 8004974:	d8f6      	bhi.n	8004964 <_printf_i+0x28>
 8004976:	a101      	add	r1, pc, #4	@ (adr r1, 800497c <_printf_i+0x40>)
 8004978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800497c:	080049d5 	.word	0x080049d5
 8004980:	080049e9 	.word	0x080049e9
 8004984:	08004965 	.word	0x08004965
 8004988:	08004965 	.word	0x08004965
 800498c:	08004965 	.word	0x08004965
 8004990:	08004965 	.word	0x08004965
 8004994:	080049e9 	.word	0x080049e9
 8004998:	08004965 	.word	0x08004965
 800499c:	08004965 	.word	0x08004965
 80049a0:	08004965 	.word	0x08004965
 80049a4:	08004965 	.word	0x08004965
 80049a8:	08004ae7 	.word	0x08004ae7
 80049ac:	08004a13 	.word	0x08004a13
 80049b0:	08004aa1 	.word	0x08004aa1
 80049b4:	08004965 	.word	0x08004965
 80049b8:	08004965 	.word	0x08004965
 80049bc:	08004b09 	.word	0x08004b09
 80049c0:	08004965 	.word	0x08004965
 80049c4:	08004a13 	.word	0x08004a13
 80049c8:	08004965 	.word	0x08004965
 80049cc:	08004965 	.word	0x08004965
 80049d0:	08004aa9 	.word	0x08004aa9
 80049d4:	6833      	ldr	r3, [r6, #0]
 80049d6:	1d1a      	adds	r2, r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6032      	str	r2, [r6, #0]
 80049dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049e4:	2301      	movs	r3, #1
 80049e6:	e09c      	b.n	8004b22 <_printf_i+0x1e6>
 80049e8:	6833      	ldr	r3, [r6, #0]
 80049ea:	6820      	ldr	r0, [r4, #0]
 80049ec:	1d19      	adds	r1, r3, #4
 80049ee:	6031      	str	r1, [r6, #0]
 80049f0:	0606      	lsls	r6, r0, #24
 80049f2:	d501      	bpl.n	80049f8 <_printf_i+0xbc>
 80049f4:	681d      	ldr	r5, [r3, #0]
 80049f6:	e003      	b.n	8004a00 <_printf_i+0xc4>
 80049f8:	0645      	lsls	r5, r0, #25
 80049fa:	d5fb      	bpl.n	80049f4 <_printf_i+0xb8>
 80049fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a00:	2d00      	cmp	r5, #0
 8004a02:	da03      	bge.n	8004a0c <_printf_i+0xd0>
 8004a04:	232d      	movs	r3, #45	@ 0x2d
 8004a06:	426d      	negs	r5, r5
 8004a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a0c:	4858      	ldr	r0, [pc, #352]	@ (8004b70 <_printf_i+0x234>)
 8004a0e:	230a      	movs	r3, #10
 8004a10:	e011      	b.n	8004a36 <_printf_i+0xfa>
 8004a12:	6821      	ldr	r1, [r4, #0]
 8004a14:	6833      	ldr	r3, [r6, #0]
 8004a16:	0608      	lsls	r0, r1, #24
 8004a18:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a1c:	d402      	bmi.n	8004a24 <_printf_i+0xe8>
 8004a1e:	0649      	lsls	r1, r1, #25
 8004a20:	bf48      	it	mi
 8004a22:	b2ad      	uxthmi	r5, r5
 8004a24:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a26:	4852      	ldr	r0, [pc, #328]	@ (8004b70 <_printf_i+0x234>)
 8004a28:	6033      	str	r3, [r6, #0]
 8004a2a:	bf14      	ite	ne
 8004a2c:	230a      	movne	r3, #10
 8004a2e:	2308      	moveq	r3, #8
 8004a30:	2100      	movs	r1, #0
 8004a32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a36:	6866      	ldr	r6, [r4, #4]
 8004a38:	60a6      	str	r6, [r4, #8]
 8004a3a:	2e00      	cmp	r6, #0
 8004a3c:	db05      	blt.n	8004a4a <_printf_i+0x10e>
 8004a3e:	6821      	ldr	r1, [r4, #0]
 8004a40:	432e      	orrs	r6, r5
 8004a42:	f021 0104 	bic.w	r1, r1, #4
 8004a46:	6021      	str	r1, [r4, #0]
 8004a48:	d04b      	beq.n	8004ae2 <_printf_i+0x1a6>
 8004a4a:	4616      	mov	r6, r2
 8004a4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a50:	fb03 5711 	mls	r7, r3, r1, r5
 8004a54:	5dc7      	ldrb	r7, [r0, r7]
 8004a56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a5a:	462f      	mov	r7, r5
 8004a5c:	42bb      	cmp	r3, r7
 8004a5e:	460d      	mov	r5, r1
 8004a60:	d9f4      	bls.n	8004a4c <_printf_i+0x110>
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d10b      	bne.n	8004a7e <_printf_i+0x142>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	07df      	lsls	r7, r3, #31
 8004a6a:	d508      	bpl.n	8004a7e <_printf_i+0x142>
 8004a6c:	6923      	ldr	r3, [r4, #16]
 8004a6e:	6861      	ldr	r1, [r4, #4]
 8004a70:	4299      	cmp	r1, r3
 8004a72:	bfde      	ittt	le
 8004a74:	2330      	movle	r3, #48	@ 0x30
 8004a76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a7a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a7e:	1b92      	subs	r2, r2, r6
 8004a80:	6122      	str	r2, [r4, #16]
 8004a82:	f8cd a000 	str.w	sl, [sp]
 8004a86:	464b      	mov	r3, r9
 8004a88:	aa03      	add	r2, sp, #12
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	f7ff fee7 	bl	8004860 <_printf_common>
 8004a92:	3001      	adds	r0, #1
 8004a94:	d14a      	bne.n	8004b2c <_printf_i+0x1f0>
 8004a96:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9a:	b004      	add	sp, #16
 8004a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	f043 0320 	orr.w	r3, r3, #32
 8004aa6:	6023      	str	r3, [r4, #0]
 8004aa8:	4832      	ldr	r0, [pc, #200]	@ (8004b74 <_printf_i+0x238>)
 8004aaa:	2778      	movs	r7, #120	@ 0x78
 8004aac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	6831      	ldr	r1, [r6, #0]
 8004ab4:	061f      	lsls	r7, r3, #24
 8004ab6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004aba:	d402      	bmi.n	8004ac2 <_printf_i+0x186>
 8004abc:	065f      	lsls	r7, r3, #25
 8004abe:	bf48      	it	mi
 8004ac0:	b2ad      	uxthmi	r5, r5
 8004ac2:	6031      	str	r1, [r6, #0]
 8004ac4:	07d9      	lsls	r1, r3, #31
 8004ac6:	bf44      	itt	mi
 8004ac8:	f043 0320 	orrmi.w	r3, r3, #32
 8004acc:	6023      	strmi	r3, [r4, #0]
 8004ace:	b11d      	cbz	r5, 8004ad8 <_printf_i+0x19c>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	e7ad      	b.n	8004a30 <_printf_i+0xf4>
 8004ad4:	4826      	ldr	r0, [pc, #152]	@ (8004b70 <_printf_i+0x234>)
 8004ad6:	e7e9      	b.n	8004aac <_printf_i+0x170>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	f023 0320 	bic.w	r3, r3, #32
 8004ade:	6023      	str	r3, [r4, #0]
 8004ae0:	e7f6      	b.n	8004ad0 <_printf_i+0x194>
 8004ae2:	4616      	mov	r6, r2
 8004ae4:	e7bd      	b.n	8004a62 <_printf_i+0x126>
 8004ae6:	6833      	ldr	r3, [r6, #0]
 8004ae8:	6825      	ldr	r5, [r4, #0]
 8004aea:	6961      	ldr	r1, [r4, #20]
 8004aec:	1d18      	adds	r0, r3, #4
 8004aee:	6030      	str	r0, [r6, #0]
 8004af0:	062e      	lsls	r6, r5, #24
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	d501      	bpl.n	8004afa <_printf_i+0x1be>
 8004af6:	6019      	str	r1, [r3, #0]
 8004af8:	e002      	b.n	8004b00 <_printf_i+0x1c4>
 8004afa:	0668      	lsls	r0, r5, #25
 8004afc:	d5fb      	bpl.n	8004af6 <_printf_i+0x1ba>
 8004afe:	8019      	strh	r1, [r3, #0]
 8004b00:	2300      	movs	r3, #0
 8004b02:	6123      	str	r3, [r4, #16]
 8004b04:	4616      	mov	r6, r2
 8004b06:	e7bc      	b.n	8004a82 <_printf_i+0x146>
 8004b08:	6833      	ldr	r3, [r6, #0]
 8004b0a:	1d1a      	adds	r2, r3, #4
 8004b0c:	6032      	str	r2, [r6, #0]
 8004b0e:	681e      	ldr	r6, [r3, #0]
 8004b10:	6862      	ldr	r2, [r4, #4]
 8004b12:	2100      	movs	r1, #0
 8004b14:	4630      	mov	r0, r6
 8004b16:	f7fb fb63 	bl	80001e0 <memchr>
 8004b1a:	b108      	cbz	r0, 8004b20 <_printf_i+0x1e4>
 8004b1c:	1b80      	subs	r0, r0, r6
 8004b1e:	6060      	str	r0, [r4, #4]
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	6123      	str	r3, [r4, #16]
 8004b24:	2300      	movs	r3, #0
 8004b26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b2a:	e7aa      	b.n	8004a82 <_printf_i+0x146>
 8004b2c:	6923      	ldr	r3, [r4, #16]
 8004b2e:	4632      	mov	r2, r6
 8004b30:	4649      	mov	r1, r9
 8004b32:	4640      	mov	r0, r8
 8004b34:	47d0      	blx	sl
 8004b36:	3001      	adds	r0, #1
 8004b38:	d0ad      	beq.n	8004a96 <_printf_i+0x15a>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	079b      	lsls	r3, r3, #30
 8004b3e:	d413      	bmi.n	8004b68 <_printf_i+0x22c>
 8004b40:	68e0      	ldr	r0, [r4, #12]
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	4298      	cmp	r0, r3
 8004b46:	bfb8      	it	lt
 8004b48:	4618      	movlt	r0, r3
 8004b4a:	e7a6      	b.n	8004a9a <_printf_i+0x15e>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4632      	mov	r2, r6
 8004b50:	4649      	mov	r1, r9
 8004b52:	4640      	mov	r0, r8
 8004b54:	47d0      	blx	sl
 8004b56:	3001      	adds	r0, #1
 8004b58:	d09d      	beq.n	8004a96 <_printf_i+0x15a>
 8004b5a:	3501      	adds	r5, #1
 8004b5c:	68e3      	ldr	r3, [r4, #12]
 8004b5e:	9903      	ldr	r1, [sp, #12]
 8004b60:	1a5b      	subs	r3, r3, r1
 8004b62:	42ab      	cmp	r3, r5
 8004b64:	dcf2      	bgt.n	8004b4c <_printf_i+0x210>
 8004b66:	e7eb      	b.n	8004b40 <_printf_i+0x204>
 8004b68:	2500      	movs	r5, #0
 8004b6a:	f104 0619 	add.w	r6, r4, #25
 8004b6e:	e7f5      	b.n	8004b5c <_printf_i+0x220>
 8004b70:	08004cd9 	.word	0x08004cd9
 8004b74:	08004cea 	.word	0x08004cea

08004b78 <memmove>:
 8004b78:	4288      	cmp	r0, r1
 8004b7a:	b510      	push	{r4, lr}
 8004b7c:	eb01 0402 	add.w	r4, r1, r2
 8004b80:	d902      	bls.n	8004b88 <memmove+0x10>
 8004b82:	4284      	cmp	r4, r0
 8004b84:	4623      	mov	r3, r4
 8004b86:	d807      	bhi.n	8004b98 <memmove+0x20>
 8004b88:	1e43      	subs	r3, r0, #1
 8004b8a:	42a1      	cmp	r1, r4
 8004b8c:	d008      	beq.n	8004ba0 <memmove+0x28>
 8004b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b96:	e7f8      	b.n	8004b8a <memmove+0x12>
 8004b98:	4402      	add	r2, r0
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	428a      	cmp	r2, r1
 8004b9e:	d100      	bne.n	8004ba2 <memmove+0x2a>
 8004ba0:	bd10      	pop	{r4, pc}
 8004ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004baa:	e7f7      	b.n	8004b9c <memmove+0x24>

08004bac <_sbrk_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4d06      	ldr	r5, [pc, #24]	@ (8004bc8 <_sbrk_r+0x1c>)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	602b      	str	r3, [r5, #0]
 8004bb8:	f7fb ffd6 	bl	8000b68 <_sbrk>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_sbrk_r+0x1a>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_sbrk_r+0x1a>
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	200002f0 	.word	0x200002f0

08004bcc <memcpy>:
 8004bcc:	440a      	add	r2, r1
 8004bce:	4291      	cmp	r1, r2
 8004bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bd4:	d100      	bne.n	8004bd8 <memcpy+0xc>
 8004bd6:	4770      	bx	lr
 8004bd8:	b510      	push	{r4, lr}
 8004bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004be2:	4291      	cmp	r1, r2
 8004be4:	d1f9      	bne.n	8004bda <memcpy+0xe>
 8004be6:	bd10      	pop	{r4, pc}

08004be8 <_realloc_r>:
 8004be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bec:	4607      	mov	r7, r0
 8004bee:	4614      	mov	r4, r2
 8004bf0:	460d      	mov	r5, r1
 8004bf2:	b921      	cbnz	r1, 8004bfe <_realloc_r+0x16>
 8004bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	f7ff bc4d 	b.w	8004498 <_malloc_r>
 8004bfe:	b92a      	cbnz	r2, 8004c0c <_realloc_r+0x24>
 8004c00:	f7ff fbde 	bl	80043c0 <_free_r>
 8004c04:	4625      	mov	r5, r4
 8004c06:	4628      	mov	r0, r5
 8004c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c0c:	f000 f81a 	bl	8004c44 <_malloc_usable_size_r>
 8004c10:	4284      	cmp	r4, r0
 8004c12:	4606      	mov	r6, r0
 8004c14:	d802      	bhi.n	8004c1c <_realloc_r+0x34>
 8004c16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c1a:	d8f4      	bhi.n	8004c06 <_realloc_r+0x1e>
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	4638      	mov	r0, r7
 8004c20:	f7ff fc3a 	bl	8004498 <_malloc_r>
 8004c24:	4680      	mov	r8, r0
 8004c26:	b908      	cbnz	r0, 8004c2c <_realloc_r+0x44>
 8004c28:	4645      	mov	r5, r8
 8004c2a:	e7ec      	b.n	8004c06 <_realloc_r+0x1e>
 8004c2c:	42b4      	cmp	r4, r6
 8004c2e:	4622      	mov	r2, r4
 8004c30:	4629      	mov	r1, r5
 8004c32:	bf28      	it	cs
 8004c34:	4632      	movcs	r2, r6
 8004c36:	f7ff ffc9 	bl	8004bcc <memcpy>
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f7ff fbbf 	bl	80043c0 <_free_r>
 8004c42:	e7f1      	b.n	8004c28 <_realloc_r+0x40>

08004c44 <_malloc_usable_size_r>:
 8004c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c48:	1f18      	subs	r0, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bfbc      	itt	lt
 8004c4e:	580b      	ldrlt	r3, [r1, r0]
 8004c50:	18c0      	addlt	r0, r0, r3
 8004c52:	4770      	bx	lr

08004c54 <_init>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	bf00      	nop
 8004c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5a:	bc08      	pop	{r3}
 8004c5c:	469e      	mov	lr, r3
 8004c5e:	4770      	bx	lr

08004c60 <_fini>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr
