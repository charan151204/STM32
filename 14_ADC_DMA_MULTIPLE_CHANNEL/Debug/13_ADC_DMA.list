
13_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005c1c  08005c1c  00006c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cac  08005cac  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005cac  08005cac  00006cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb4  08005cb4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb4  08005cb4  00006cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cb8  08005cb8  00006cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005cbc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000068  08005d24  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005d24  00007310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f968  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ec  00000000  00000000  00016a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00018cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab6  00000000  00000000  00019ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286b1  00000000  00000000  0001a596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc8b  00000000  00000000  00042c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcb49  00000000  00000000  000528d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f41b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a0  00000000  00000000  0014f460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00153600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c04 	.word	0x08005c04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005c04 	.word	0x08005c04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f003 fe9d 	bl	80042ec <HAL_UART_Transmit>
	return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000130 	.word	0x20000130

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fbe0 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f820 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f934 	bl	8000838 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 f914 	bl	80007fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d4:	f000 f8e2 	bl	800079c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005d8:	f000 f86a 	bl	80006b0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &sensor_value, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4908      	ldr	r1, [pc, #32]	@ (8000600 <main+0x40>)
 80005e0:	4808      	ldr	r0, [pc, #32]	@ (8000604 <main+0x44>)
 80005e2:	f000 ff97 	bl	8001514 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		  printf("Sensor value : %d\n",(int)sensor_value);
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <main+0x40>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4619      	mov	r1, r3
 80005ec:	4806      	ldr	r0, [pc, #24]	@ (8000608 <main+0x48>)
 80005ee:	f004 fc9d 	bl	8004f2c <iprintf>
		  HAL_Delay(500);
 80005f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f6:	f000 fc43 	bl	8000e80 <HAL_Delay>
		  printf("Sensor value : %d\n",(int)sensor_value);
 80005fa:	bf00      	nop
 80005fc:	e7f3      	b.n	80005e6 <main+0x26>
 80005fe:	bf00      	nop
 8000600:	200001b8 	.word	0x200001b8
 8000604:	20000084 	.word	0x20000084
 8000608:	08005c1c 	.word	0x08005c1c

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2244      	movs	r2, #68	@ 0x44
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fcdb 	bl	8004fd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	463b      	mov	r3, r7
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000632:	f002 fafb 	bl	8002c2c <HAL_PWREx_ControlVoltageScaling>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800063c:	f000 f96c 	bl	8000918 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	2302      	movs	r3, #2
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000648:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800065a:	230a      	movs	r3, #10
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fb32 	bl	8002cd8 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067a:	f000 f94d 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	2104      	movs	r1, #4
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fefa 	bl	8003490 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a2:	f000 f939 	bl	8000918 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3758      	adds	r7, #88	@ 0x58
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000790 <MX_ADC1_Init+0xe0>)
 80006d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000794 <MX_ADC1_Init+0xe4>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000790 <MX_ADC1_Init+0xe0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006de:	4b2c      	ldr	r3, [pc, #176]	@ (8000790 <MX_ADC1_Init+0xe0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000790 <MX_ADC1_Init+0xe0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ea:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <MX_ADC1_Init+0xe0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <MX_ADC1_Init+0xe0>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <MX_ADC1_Init+0xe0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_ADC1_Init+0xe0>)
 80006fe:	2201      	movs	r2, #1
 8000700:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000702:	4b23      	ldr	r3, [pc, #140]	@ (8000790 <MX_ADC1_Init+0xe0>)
 8000704:	2201      	movs	r2, #1
 8000706:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000708:	4b21      	ldr	r3, [pc, #132]	@ (8000790 <MX_ADC1_Init+0xe0>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000710:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <MX_ADC1_Init+0xe0>)
 8000712:	2200      	movs	r2, #0
 8000714:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000716:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ADC1_Init+0xe0>)
 8000718:	2200      	movs	r2, #0
 800071a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800071c:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <MX_ADC1_Init+0xe0>)
 800071e:	2201      	movs	r2, #1
 8000720:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000724:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_ADC1_Init+0xe0>)
 8000726:	2200      	movs	r2, #0
 8000728:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ADC1_Init+0xe0>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000732:	4817      	ldr	r0, [pc, #92]	@ (8000790 <MX_ADC1_Init+0xe0>)
 8000734:	f000 fd9e 	bl	8001274 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800073e:	f000 f8eb 	bl	8000918 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	4810      	ldr	r0, [pc, #64]	@ (8000790 <MX_ADC1_Init+0xe0>)
 800074e:	f001 fce3 	bl	8002118 <HAL_ADCEx_MultiModeConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000758:	f000 f8de 	bl	8000918 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075c:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800075e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000760:	2306      	movs	r3, #6
 8000762:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000768:	237f      	movs	r3, #127	@ 0x7f
 800076a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076c:	2304      	movs	r3, #4
 800076e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_ADC1_Init+0xe0>)
 800077a:	f000 ff9b 	bl	80016b4 <HAL_ADC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000784:	f000 f8c8 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000084 	.word	0x20000084
 8000794:	50040000 	.word	0x50040000
 8000798:	04300002 	.word	0x04300002

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a2:	4a15      	ldr	r2, [pc, #84]	@ (80007f8 <MX_USART2_UART_Init+0x5c>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007e0:	f003 fd36 	bl	8004250 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ea:	f000 f895 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000130 	.word	0x20000130
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_DMA_Init+0x38>)
 8000804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000806:	4a0b      	ldr	r2, [pc, #44]	@ (8000834 <MX_DMA_Init+0x38>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6493      	str	r3, [r2, #72]	@ 0x48
 800080e:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_DMA_Init+0x38>)
 8000810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	200b      	movs	r0, #11
 8000820:	f001 fe05 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000824:	200b      	movs	r0, #11
 8000826:	f001 fe1e 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <MX_GPIO_Init+0xc4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a2a      	ldr	r2, [pc, #168]	@ (80008fc <MX_GPIO_Init+0xc4>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b28      	ldr	r3, [pc, #160]	@ (80008fc <MX_GPIO_Init+0xc4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4b25      	ldr	r3, [pc, #148]	@ (80008fc <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a24      	ldr	r2, [pc, #144]	@ (80008fc <MX_GPIO_Init+0xc4>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b22      	ldr	r3, [pc, #136]	@ (80008fc <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000882:	4a1e      	ldr	r2, [pc, #120]	@ (80008fc <MX_GPIO_Init+0xc4>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a18      	ldr	r2, [pc, #96]	@ (80008fc <MX_GPIO_Init+0xc4>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f002 f993 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <MX_GPIO_Init+0xc8>)
 80008d2:	f001 ffdb 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d6:	2320      	movs	r3, #32
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f0:	f001 ffcc 	bl	800288c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	@ 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000
 8000900:	48000800 	.word	0x48000800

08000904 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	    {
//	        sensor_value = HAL_ADC_GetValue(hadc1);

//	        HAL_ADC_Start_IT(hadc1);
	    }
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6613      	str	r3, [r2, #96]	@ 0x60
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_MspInit+0x44>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6593      	str	r3, [r2, #88]	@ 0x58
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0ac      	sub	sp, #176	@ 0xb0
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2288      	movs	r2, #136	@ 0x88
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f004 fb22 	bl	8004fd6 <memset>
  if(hadc->Instance==ADC1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a3c      	ldr	r2, [pc, #240]	@ (8000a88 <HAL_ADC_MspInit+0x11c>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d171      	bne.n	8000a80 <HAL_ADC_MspInit+0x114>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800099c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80009b2:	2308      	movs	r3, #8
 80009b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80009b6:	2307      	movs	r3, #7
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009be:	2302      	movs	r3, #2
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80009c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009c6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 ff83 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80009d8:	f7ff ff9e 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009dc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e0:	4a2a      	ldr	r2, [pc, #168]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 80009e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e8:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f4:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	4a24      	ldr	r2, [pc, #144]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a00:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <HAL_ADC_MspInit+0x120>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a12:	230b      	movs	r3, #11
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a22:	4619      	mov	r1, r3
 8000a24:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <HAL_ADC_MspInit+0x124>)
 8000a26:	f001 ff31 	bl	800288c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a98 <HAL_ADC_MspInit+0x12c>)
 8000a2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a5a:	2220      	movs	r2, #32
 8000a5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a64:	480b      	ldr	r0, [pc, #44]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a66:	f001 fd19 	bl	800249c <HAL_DMA_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000a70:	f7ff ff52 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a78:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a7a:	4a06      	ldr	r2, [pc, #24]	@ (8000a94 <HAL_ADC_MspInit+0x128>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a80:	bf00      	nop
 8000a82:	37b0      	adds	r7, #176	@ 0xb0
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	50040000 	.word	0x50040000
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000800 	.word	0x48000800
 8000a94:	200000e8 	.word	0x200000e8
 8000a98:	40020008 	.word	0x40020008

08000a9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2288      	movs	r2, #136	@ 0x88
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 fa8a 	bl	8004fd6 <memset>
  if(huart->Instance==USART2)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <HAL_UART_MspInit+0xb0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d13b      	bne.n	8000b44 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f002 fefd 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ae4:	f7ff ff18 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_UART_MspInit+0xb4>)
 8000aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aec:	4a18      	ldr	r2, [pc, #96]	@ (8000b50 <HAL_UART_MspInit+0xb4>)
 8000aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HAL_UART_MspInit+0xb4>)
 8000af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <HAL_UART_MspInit+0xb4>)
 8000b02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b04:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <HAL_UART_MspInit+0xb4>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0c:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <HAL_UART_MspInit+0xb4>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b30:	2307      	movs	r3, #7
 8000b32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b40:	f001 fea4 	bl	800288c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b44:	bf00      	nop
 8000b46:	37b0      	adds	r7, #176	@ 0xb0
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40021000 	.word	0x40021000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000baa:	f000 f949 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bb8:	4802      	ldr	r0, [pc, #8]	@ (8000bc4 <DMA1_Channel1_IRQHandler+0x10>)
 8000bba:	f001 fd87 	bl	80026cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000e8 	.word	0x200000e8

08000bc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e00a      	b.n	8000bf0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bda:	f3af 8000 	nop.w
 8000bde:	4601      	mov	r1, r0
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1c5a      	adds	r2, r3, #1
 8000be4:	60ba      	str	r2, [r7, #8]
 8000be6:	b2ca      	uxtb	r2, r1
 8000be8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf0      	blt.n	8000bda <_read+0x12>
  }

  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e009      	b.n	8000c28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fcbd 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf1      	blt.n	8000c14 <_write+0x12>
  }
  return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_close>:

int _close(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c62:	605a      	str	r2, [r3, #4]
  return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <_isatty>:

int _isatty(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	@ (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	@ (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	@ (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d207      	bcs.n	8000ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd4:	f004 f9ce 	bl	8005074 <__errno>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	220c      	movs	r2, #12
 8000cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	e009      	b.n	8000cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <_sbrk+0x64>)
 8000cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20018000 	.word	0x20018000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	200001bc 	.word	0x200001bc
 8000d0c:	20000310 	.word	0x20000310

08000d10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <SystemInit+0x20>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1a:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <SystemInit+0x20>)
 8000d1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d38:	f7ff ffea 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	@ (8000d74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <LoopForever+0xe>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	@ (8000d80 <LoopForever+0x16>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d62:	f004 f98d 	bl	8005080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d66:	f7ff fc2b 	bl	80005c0 <main>

08000d6a <LoopForever>:

LoopForever:
    b LoopForever
 8000d6a:	e7fe      	b.n	8000d6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d74:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d78:	08005cbc 	.word	0x08005cbc
  ldr r2, =_sbss
 8000d7c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d80:	20000310 	.word	0x20000310

08000d84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_2_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d92:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <HAL_Init+0x3c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <HAL_Init+0x3c>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f001 fb3a 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 f80f 	bl	8000dc8 <HAL_InitTick>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	71fb      	strb	r3, [r7, #7]
 8000db4:	e001      	b.n	8000dba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db6:	f7ff fdb5 	bl	8000924 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <HAL_InitTick+0x6c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d023      	beq.n	8000e24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ddc:	4b16      	ldr	r3, [pc, #88]	@ (8000e38 <HAL_InitTick+0x70>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <HAL_InitTick+0x6c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 fb45 	bl	8002482 <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10f      	bne.n	8000e1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d809      	bhi.n	8000e18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f001 fb0f 	bl	800242e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e10:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <HAL_InitTick+0x74>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e007      	b.n	8000e28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	e004      	b.n	8000e28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	73fb      	strb	r3, [r7, #15]
 8000e22:	e001      	b.n	8000e28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	200001c0 	.word	0x200001c0

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200001c0 	.word	0x200001c0

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff ffee 	bl	8000e68 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea6:	bf00      	nop
 8000ea8:	f7ff ffde 	bl	8000e68 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	609a      	str	r2, [r3, #8]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
 8000f3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3360      	adds	r3, #96	@ 0x60
 8000f42:	461a      	mov	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <LL_ADC_SetOffset+0x44>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f68:	bf00      	nop
 8000f6a:	371c      	adds	r7, #28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	03fff000 	.word	0x03fff000

08000f78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3360      	adds	r3, #96	@ 0x60
 8000f86:	461a      	mov	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3360      	adds	r3, #96	@ 0x60
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fce:	bf00      	nop
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3330      	adds	r3, #48	@ 0x30
 8001010:	461a      	mov	r2, r3
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	4413      	add	r3, r2
 800101e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	f003 031f 	and.w	r3, r3, #31
 800102a:	211f      	movs	r1, #31
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	0e9b      	lsrs	r3, r3, #26
 8001038:	f003 011f 	and.w	r1, r3, #31
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	431a      	orrs	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800104c:	bf00      	nop
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001058:	b480      	push	{r7}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3314      	adds	r3, #20
 8001068:	461a      	mov	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	0e5b      	lsrs	r3, r3, #25
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	0d1b      	lsrs	r3, r3, #20
 8001080:	f003 031f 	and.w	r3, r3, #31
 8001084:	2107      	movs	r1, #7
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	401a      	ands	r2, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	0d1b      	lsrs	r3, r3, #20
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	431a      	orrs	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80010a2:	bf00      	nop
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010c8:	43db      	mvns	r3, r3
 80010ca:	401a      	ands	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0318 	and.w	r3, r3, #24
 80010d2:	4908      	ldr	r1, [pc, #32]	@ (80010f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010d4:	40d9      	lsrs	r1, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	400b      	ands	r3, r1
 80010da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010de:	431a      	orrs	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	0007ffff 	.word	0x0007ffff

080010f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 031f 	and.w	r3, r3, #31
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001124:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6093      	str	r3, [r2, #8]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800114c:	d101      	bne.n	8001152 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001170:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001174:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800119c:	d101      	bne.n	80011a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80011c4:	f043 0201 	orr.w	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <LL_ADC_IsEnabled+0x18>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <LL_ADC_IsEnabled+0x1a>
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800120e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001212:	f043 0204 	orr.w	r2, r3, #4
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	2b04      	cmp	r3, #4
 8001238:	d101      	bne.n	800123e <LL_ADC_REG_IsConversionOngoing+0x18>
 800123a:	2301      	movs	r3, #1
 800123c:	e000      	b.n	8001240 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b08      	cmp	r3, #8
 800125e:	d101      	bne.n	8001264 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b089      	sub	sp, #36	@ 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e130      	b.n	80014f0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fb65 	bl	800096c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff3f 	bl	8001138 <LL_ADC_IsDeepPowerDownEnabled>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d004      	beq.n	80012ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff25 	bl	8001114 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff5a 	bl	8001188 <LL_ADC_IsInternalRegulatorEnabled>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d115      	bne.n	8001306 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff3e 	bl	8001160 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012e4:	4b84      	ldr	r3, [pc, #528]	@ (80014f8 <HAL_ADC_Init+0x284>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	4a84      	ldr	r2, [pc, #528]	@ (80014fc <HAL_ADC_Init+0x288>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	099b      	lsrs	r3, r3, #6
 80012f2:	3301      	adds	r3, #1
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012f8:	e002      	b.n	8001300 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f9      	bne.n	80012fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff3c 	bl	8001188 <LL_ADC_IsInternalRegulatorEnabled>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10d      	bne.n	8001332 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800131a:	f043 0210 	orr.w	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	f043 0201 	orr.w	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff75 	bl	8001226 <LL_ADC_REG_IsConversionOngoing>
 800133c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 80c9 	bne.w	80014de <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f040 80c5 	bne.w	80014de <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001358:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800135c:	f043 0202 	orr.w	r2, r3, #2
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff35 	bl	80011d8 <LL_ADC_IsEnabled>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d115      	bne.n	80013a0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001374:	4862      	ldr	r0, [pc, #392]	@ (8001500 <HAL_ADC_Init+0x28c>)
 8001376:	f7ff ff2f 	bl	80011d8 <LL_ADC_IsEnabled>
 800137a:	4604      	mov	r4, r0
 800137c:	4861      	ldr	r0, [pc, #388]	@ (8001504 <HAL_ADC_Init+0x290>)
 800137e:	f7ff ff2b 	bl	80011d8 <LL_ADC_IsEnabled>
 8001382:	4603      	mov	r3, r0
 8001384:	431c      	orrs	r4, r3
 8001386:	4860      	ldr	r0, [pc, #384]	@ (8001508 <HAL_ADC_Init+0x294>)
 8001388:	f7ff ff26 	bl	80011d8 <LL_ADC_IsEnabled>
 800138c:	4603      	mov	r3, r0
 800138e:	4323      	orrs	r3, r4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d105      	bne.n	80013a0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4619      	mov	r1, r3
 800139a:	485c      	ldr	r0, [pc, #368]	@ (800150c <HAL_ADC_Init+0x298>)
 800139c:	f7ff fd94 	bl	8000ec8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7e5b      	ldrb	r3, [r3, #25]
 80013a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80013b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80013b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d106      	bne.n	80013dc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d2:	3b01      	subs	r3, #1
 80013d4:	045b      	lsls	r3, r3, #17
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d009      	beq.n	80013f8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	4b44      	ldr	r3, [pc, #272]	@ (8001510 <HAL_ADC_Init+0x29c>)
 8001400:	4013      	ands	r3, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	69b9      	ldr	r1, [r7, #24]
 8001408:	430b      	orrs	r3, r1
 800140a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff1b 	bl	800124c <LL_ADC_INJ_IsConversionOngoing>
 8001416:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d13d      	bne.n	800149a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d13a      	bne.n	800149a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001428:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001430:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001440:	f023 0302 	bic.w	r3, r3, #2
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	69b9      	ldr	r1, [r7, #24]
 800144a:	430b      	orrs	r3, r1
 800144c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001454:	2b01      	cmp	r3, #1
 8001456:	d118      	bne.n	800148a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001462:	f023 0304 	bic.w	r3, r3, #4
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800146e:	4311      	orrs	r1, r2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001474:	4311      	orrs	r1, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800147a:	430a      	orrs	r2, r1
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0201 	orr.w	r2, r2, #1
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	e007      	b.n	800149a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0201 	bic.w	r2, r2, #1
 8001498:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d10c      	bne.n	80014bc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a8:	f023 010f 	bic.w	r1, r3, #15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80014ba:	e007      	b.n	80014cc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 020f 	bic.w	r2, r2, #15
 80014ca:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d0:	f023 0303 	bic.w	r3, r3, #3
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	655a      	str	r2, [r3, #84]	@ 0x54
 80014dc:	e007      	b.n	80014ee <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3724      	adds	r7, #36	@ 0x24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd90      	pop	{r4, r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	053e2d63 	.word	0x053e2d63
 8001500:	50040000 	.word	0x50040000
 8001504:	50040100 	.word	0x50040100
 8001508:	50040200 	.word	0x50040200
 800150c:	50040300 	.word	0x50040300
 8001510:	fff0c007 	.word	0xfff0c007

08001514 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001520:	4853      	ldr	r0, [pc, #332]	@ (8001670 <HAL_ADC_Start_DMA+0x15c>)
 8001522:	f7ff fde9 	bl	80010f8 <LL_ADC_GetMultimode>
 8001526:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fe7a 	bl	8001226 <LL_ADC_REG_IsConversionOngoing>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	f040 8093 	bne.w	8001660 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_ADC_Start_DMA+0x34>
 8001544:	2302      	movs	r3, #2
 8001546:	e08e      	b.n	8001666 <HAL_ADC_Start_DMA+0x152>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a47      	ldr	r2, [pc, #284]	@ (8001674 <HAL_ADC_Start_DMA+0x160>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d008      	beq.n	800156c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	2b05      	cmp	r3, #5
 8001564:	d002      	beq.n	800156c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	2b09      	cmp	r3, #9
 800156a:	d172      	bne.n	8001652 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 fc93 	bl	8001e98 <ADC_Enable>
 8001572:	4603      	mov	r3, r0
 8001574:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d165      	bne.n	8001648 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001580:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a38      	ldr	r2, [pc, #224]	@ (8001678 <HAL_ADC_Start_DMA+0x164>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d002      	beq.n	80015a0 <HAL_ADC_Start_DMA+0x8c>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	e000      	b.n	80015a2 <HAL_ADC_Start_DMA+0x8e>
 80015a0:	4b36      	ldr	r3, [pc, #216]	@ (800167c <HAL_ADC_Start_DMA+0x168>)
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d002      	beq.n	80015b0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d105      	bne.n	80015bc <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015cc:	f023 0206 	bic.w	r2, r3, #6
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80015d4:	e002      	b.n	80015dc <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	4a27      	ldr	r2, [pc, #156]	@ (8001680 <HAL_ADC_Start_DMA+0x16c>)
 80015e2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	4a26      	ldr	r2, [pc, #152]	@ (8001684 <HAL_ADC_Start_DMA+0x170>)
 80015ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	4a25      	ldr	r2, [pc, #148]	@ (8001688 <HAL_ADC_Start_DMA+0x174>)
 80015f2:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	221c      	movs	r2, #28
 80015fa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0210 	orr.w	r2, r2, #16
 8001612:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3340      	adds	r3, #64	@ 0x40
 800162e:	4619      	mov	r1, r3
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f000 ffea 	bl	800260c <HAL_DMA_Start_IT>
 8001638:	4603      	mov	r3, r0
 800163a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fddc 	bl	80011fe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001646:	e00d      	b.n	8001664 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001650:	e008      	b.n	8001664 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800165e:	e001      	b.n	8001664 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001660:	2302      	movs	r3, #2
 8001662:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001664:	7dfb      	ldrb	r3, [r7, #23]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	50040300 	.word	0x50040300
 8001674:	50040200 	.word	0x50040200
 8001678:	50040100 	.word	0x50040100
 800167c:	50040000 	.word	0x50040000
 8001680:	08001fa5 	.word	0x08001fa5
 8001684:	0800207d 	.word	0x0800207d
 8001688:	08002099 	.word	0x08002099

0800168c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0b6      	sub	sp, #216	@ 0xd8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_ConfigChannel+0x22>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e3c9      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x7b6>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fd9f 	bl	8001226 <LL_ADC_REG_IsConversionOngoing>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 83aa 	bne.w	8001e44 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d824      	bhi.n	800174a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	3b02      	subs	r3, #2
 8001706:	2b03      	cmp	r3, #3
 8001708:	d81b      	bhi.n	8001742 <HAL_ADC_ConfigChannel+0x8e>
 800170a:	a201      	add	r2, pc, #4	@ (adr r2, 8001710 <HAL_ADC_ConfigChannel+0x5c>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	08001721 	.word	0x08001721
 8001714:	08001729 	.word	0x08001729
 8001718:	08001731 	.word	0x08001731
 800171c:	08001739 	.word	0x08001739
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001720:	230c      	movs	r3, #12
 8001722:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001726:	e010      	b.n	800174a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001728:	2312      	movs	r3, #18
 800172a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800172e:	e00c      	b.n	800174a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001730:	2318      	movs	r3, #24
 8001732:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001736:	e008      	b.n	800174a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800173c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001740:	e003      	b.n	800174a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001742:	2306      	movs	r3, #6
 8001744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001748:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001758:	f7ff fc52 	bl	8001000 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fd60 	bl	8001226 <LL_ADC_REG_IsConversionOngoing>
 8001766:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fd6c 	bl	800124c <LL_ADC_INJ_IsConversionOngoing>
 8001774:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001778:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800177c:	2b00      	cmp	r3, #0
 800177e:	f040 81a4 	bne.w	8001aca <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 819f 	bne.w	8001aca <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	6819      	ldr	r1, [r3, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	461a      	mov	r2, r3
 800179a:	f7ff fc5d 	bl	8001058 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d00a      	beq.n	80017d6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6919      	ldr	r1, [r3, #16]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017d0:	f7ff fbae 	bl	8000f30 <LL_ADC_SetOffset>
 80017d4:	e179      	b.n	8001aca <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fbcb 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10a      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x14e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fbc0 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	0e9b      	lsrs	r3, r3, #26
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	e01e      	b.n	8001840 <HAL_ADC_ConfigChannel+0x18c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fbb5 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001820:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001830:	2320      	movs	r3, #32
 8001832:	e004      	b.n	800183e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001834:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001848:	2b00      	cmp	r3, #0
 800184a:	d105      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1a4>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0e9b      	lsrs	r3, r3, #26
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	e018      	b.n	800188a <HAL_ADC_ConfigChannel+0x1d6>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800186c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001874:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800187c:	2320      	movs	r3, #32
 800187e:	e004      	b.n	800188a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001880:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800188a:	429a      	cmp	r2, r3
 800188c:	d106      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fb84 	bl	8000fa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fb68 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10a      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x214>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2101      	movs	r1, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fb5d 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	0e9b      	lsrs	r3, r3, #26
 80018c2:	f003 021f 	and.w	r2, r3, #31
 80018c6:	e01e      	b.n	8001906 <HAL_ADC_ConfigChannel+0x252>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2101      	movs	r1, #1
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fb52 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80018e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80018ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80018ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80018f6:	2320      	movs	r3, #32
 80018f8:	e004      	b.n	8001904 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80018fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190e:	2b00      	cmp	r3, #0
 8001910:	d105      	bne.n	800191e <HAL_ADC_ConfigChannel+0x26a>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	0e9b      	lsrs	r3, r3, #26
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	e018      	b.n	8001950 <HAL_ADC_ConfigChannel+0x29c>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001932:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001936:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800193a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001942:	2320      	movs	r3, #32
 8001944:	e004      	b.n	8001950 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001946:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001950:	429a      	cmp	r2, r3
 8001952:	d106      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2200      	movs	r2, #0
 800195a:	2101      	movs	r1, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fb21 	bl	8000fa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2102      	movs	r1, #2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fb05 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10a      	bne.n	800198e <HAL_ADC_ConfigChannel+0x2da>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fafa 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	0e9b      	lsrs	r3, r3, #26
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	e01e      	b.n	80019cc <HAL_ADC_ConfigChannel+0x318>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2102      	movs	r1, #2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff faef 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80019ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80019b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80019bc:	2320      	movs	r3, #32
 80019be:	e004      	b.n	80019ca <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80019c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x330>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0e9b      	lsrs	r3, r3, #26
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	e014      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x35a>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80019f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80019f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a00:	2320      	movs	r3, #32
 8001a02:	e004      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d106      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2200      	movs	r2, #0
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fac2 	bl	8000fa4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2103      	movs	r1, #3
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff faa6 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10a      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x398>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fa9b 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 8001a42:	4603      	mov	r3, r0
 8001a44:	0e9b      	lsrs	r3, r3, #26
 8001a46:	f003 021f 	and.w	r2, r3, #31
 8001a4a:	e017      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x3c8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2103      	movs	r1, #3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fa90 	bl	8000f78 <LL_ADC_GetOffsetChannel>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a5e:	fa93 f3a3 	rbit	r3, r3
 8001a62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001a64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a66:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001a68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001a6e:	2320      	movs	r3, #32
 8001a70:	e003      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a74:	fab3 f383 	clz	r3, r3
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x3e0>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0e9b      	lsrs	r3, r3, #26
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	e011      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x404>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001aa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001aa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e003      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001ab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d106      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fa6d 	bl	8000fa4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fb82 	bl	80011d8 <LL_ADC_IsEnabled>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 8140 	bne.w	8001d5c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f7ff fae1 	bl	80010b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	4a8f      	ldr	r2, [pc, #572]	@ (8001d30 <HAL_ADC_ConfigChannel+0x67c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	f040 8131 	bne.w	8001d5c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10b      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x46e>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0e9b      	lsrs	r3, r3, #26
 8001b10:	3301      	adds	r3, #1
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2b09      	cmp	r3, #9
 8001b18:	bf94      	ite	ls
 8001b1a:	2301      	movls	r3, #1
 8001b1c:	2300      	movhi	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	e019      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x4a2>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b32:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e003      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001b3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	3301      	adds	r3, #1
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	bf94      	ite	ls
 8001b50:	2301      	movls	r3, #1
 8001b52:	2300      	movhi	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d079      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d107      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x4c2>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	0e9b      	lsrs	r3, r3, #26
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	069b      	lsls	r3, r3, #26
 8001b70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b74:	e015      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x4ee>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b7e:	fa93 f3a3 	rbit	r3, r3
 8001b82:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001b84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b86:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001b8e:	2320      	movs	r3, #32
 8001b90:	e003      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b94:	fab3 f383 	clz	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	069b      	lsls	r3, r3, #26
 8001b9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x50e>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	2101      	movs	r1, #1
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	e017      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x53e>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001bd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bd2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	e003      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	2101      	movs	r1, #1
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	ea42 0103 	orr.w	r1, r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x564>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0e9b      	lsrs	r3, r3, #26
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f003 021f 	and.w	r2, r3, #31
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	051b      	lsls	r3, r3, #20
 8001c16:	e018      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x596>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c28:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001c30:	2320      	movs	r3, #32
 8001c32:	e003      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f003 021f 	and.w	r2, r3, #31
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	e081      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d107      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x5b6>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	3301      	adds	r3, #1
 8001c62:	069b      	lsls	r3, r3, #26
 8001c64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c68:	e015      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x5e2>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001c82:	2320      	movs	r3, #32
 8001c84:	e003      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	069b      	lsls	r3, r3, #26
 8001c92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x602>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	0e9b      	lsrs	r3, r3, #26
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	2101      	movs	r1, #1
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	e017      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x632>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	61bb      	str	r3, [r7, #24]
  return result;
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	e003      	b.n	8001cda <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f003 031f 	and.w	r3, r3, #31
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	ea42 0103 	orr.w	r1, r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10d      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x65e>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	0e9b      	lsrs	r3, r3, #26
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f003 021f 	and.w	r2, r3, #31
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	3b1e      	subs	r3, #30
 8001d0a:	051b      	lsls	r3, r3, #20
 8001d0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d10:	e01e      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x69c>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	60fb      	str	r3, [r7, #12]
  return result;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d104      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e006      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x688>
 8001d2e:	bf00      	nop
 8001d30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f003 021f 	and.w	r2, r3, #31
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	3b1e      	subs	r3, #30
 8001d4a:	051b      	lsls	r3, r3, #20
 8001d4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7ff f97e 	bl	8001058 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b44      	ldr	r3, [pc, #272]	@ (8001e74 <HAL_ADC_ConfigChannel+0x7c0>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d07a      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d68:	4843      	ldr	r0, [pc, #268]	@ (8001e78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001d6a:	f7ff f8d3 	bl	8000f14 <LL_ADC_GetCommonPathInternalCh>
 8001d6e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a41      	ldr	r2, [pc, #260]	@ (8001e7c <HAL_ADC_ConfigChannel+0x7c8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d12c      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d126      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e80 <HAL_ADC_ConfigChannel+0x7cc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_ADC_ConfigChannel+0x6e8>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a3b      	ldr	r2, [pc, #236]	@ (8001e84 <HAL_ADC_ConfigChannel+0x7d0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d15d      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001da0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001da4:	4619      	mov	r1, r3
 8001da6:	4834      	ldr	r0, [pc, #208]	@ (8001e78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001da8:	f7ff f8a1 	bl	8000eee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dac:	4b36      	ldr	r3, [pc, #216]	@ (8001e88 <HAL_ADC_ConfigChannel+0x7d4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	099b      	lsrs	r3, r3, #6
 8001db2:	4a36      	ldr	r2, [pc, #216]	@ (8001e8c <HAL_ADC_ConfigChannel+0x7d8>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001dc6:	e002      	b.n	8001dce <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f9      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dd4:	e040      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a2d      	ldr	r2, [pc, #180]	@ (8001e90 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d118      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001de0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001de4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d112      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a23      	ldr	r2, [pc, #140]	@ (8001e80 <HAL_ADC_ConfigChannel+0x7cc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_ADC_ConfigChannel+0x74c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a22      	ldr	r2, [pc, #136]	@ (8001e84 <HAL_ADC_ConfigChannel+0x7d0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d12d      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e08:	4619      	mov	r1, r3
 8001e0a:	481b      	ldr	r0, [pc, #108]	@ (8001e78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e0c:	f7ff f86f 	bl	8000eee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e10:	e024      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1f      	ldr	r2, [pc, #124]	@ (8001e94 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d120      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11a      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a14      	ldr	r2, [pc, #80]	@ (8001e80 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d115      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480e      	ldr	r0, [pc, #56]	@ (8001e78 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e3e:	f7ff f856 	bl	8000eee <LL_ADC_SetCommonPathInternalCh>
 8001e42:	e00c      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001e56:	e002      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e58:	bf00      	nop
 8001e5a:	e000      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e66:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	37d8      	adds	r7, #216	@ 0xd8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	80080000 	.word	0x80080000
 8001e78:	50040300 	.word	0x50040300
 8001e7c:	c7520000 	.word	0xc7520000
 8001e80:	50040000 	.word	0x50040000
 8001e84:	50040200 	.word	0x50040200
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	053e2d63 	.word	0x053e2d63
 8001e90:	cb840000 	.word	0xcb840000
 8001e94:	80000001 	.word	0x80000001

08001e98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff f995 	bl	80011d8 <LL_ADC_IsEnabled>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d169      	bne.n	8001f88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	4b36      	ldr	r3, [pc, #216]	@ (8001f94 <ADC_Enable+0xfc>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00d      	beq.n	8001ede <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec6:	f043 0210 	orr.w	r2, r3, #16
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	f043 0201 	orr.w	r2, r3, #1
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e055      	b.n	8001f8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f964 	bl	80011b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ee8:	482b      	ldr	r0, [pc, #172]	@ (8001f98 <ADC_Enable+0x100>)
 8001eea:	f7ff f813 	bl	8000f14 <LL_ADC_GetCommonPathInternalCh>
 8001eee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ef0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef8:	4b28      	ldr	r3, [pc, #160]	@ (8001f9c <ADC_Enable+0x104>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	4a28      	ldr	r2, [pc, #160]	@ (8001fa0 <ADC_Enable+0x108>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	099b      	lsrs	r3, r3, #6
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f12:	e002      	b.n	8001f1a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f9      	bne.n	8001f14 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f20:	f7fe ffa2 	bl	8000e68 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f26:	e028      	b.n	8001f7a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff f953 	bl	80011d8 <LL_ADC_IsEnabled>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d104      	bne.n	8001f42 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f937 	bl	80011b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f42:	f7fe ff91 	bl	8000e68 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d914      	bls.n	8001f7a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d00d      	beq.n	8001f7a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f62:	f043 0210 	orr.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e007      	b.n	8001f8a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d1cf      	bne.n	8001f28 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	8000003f 	.word	0x8000003f
 8001f98:	50040300 	.word	0x50040300
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	053e2d63 	.word	0x053e2d63

08001fa4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d14b      	bne.n	8002056 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d021      	beq.n	800201c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fffc 	bl	8000fda <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d032      	beq.n	800204e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d12b      	bne.n	800204e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11f      	bne.n	800204e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54
 800201a:	e018      	b.n	800204e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d111      	bne.n	800204e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d105      	bne.n	800204e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7fe fc58 	bl	8000904 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002054:	e00e      	b.n	8002074 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff fb1c 	bl	80016a0 <HAL_ADC_ErrorCallback>
}
 8002068:	e004      	b.n	8002074 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	4798      	blx	r3
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f7ff fafe 	bl	800168c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002090:	bf00      	nop
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	f043 0204 	orr.w	r2, r3, #4
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f7ff faee 	bl	80016a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <LL_ADC_IsEnabled>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <LL_ADC_IsEnabled+0x18>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <LL_ADC_IsEnabled+0x1a>
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_ADC_REG_IsConversionOngoing>:
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b04      	cmp	r3, #4
 8002104:	d101      	bne.n	800210a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b09f      	sub	sp, #124	@ 0x7c
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002132:	2302      	movs	r3, #2
 8002134:	e093      	b.n	800225e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800213e:	2300      	movs	r3, #0
 8002140:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002142:	2300      	movs	r3, #0
 8002144:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a47      	ldr	r2, [pc, #284]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d102      	bne.n	8002156 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002150:	4b46      	ldr	r3, [pc, #280]	@ (800226c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	e001      	b.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10b      	bne.n	8002178 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002164:	f043 0220 	orr.w	r2, r3, #32
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e072      	b.n	800225e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ffb9 	bl	80020f2 <LL_ADC_REG_IsConversionOngoing>
 8002180:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ffb3 	bl	80020f2 <LL_ADC_REG_IsConversionOngoing>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d154      	bne.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002192:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002194:	2b00      	cmp	r3, #0
 8002196:	d151      	bne.n	800223c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002198:	4b35      	ldr	r3, [pc, #212]	@ (8002270 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800219a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d02c      	beq.n	80021fe <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80021a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021b6:	035b      	lsls	r3, r3, #13
 80021b8:	430b      	orrs	r3, r1
 80021ba:	431a      	orrs	r2, r3
 80021bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021c0:	4829      	ldr	r0, [pc, #164]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021c2:	f7ff ff83 	bl	80020cc <LL_ADC_IsEnabled>
 80021c6:	4604      	mov	r4, r0
 80021c8:	4828      	ldr	r0, [pc, #160]	@ (800226c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021ca:	f7ff ff7f 	bl	80020cc <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	431c      	orrs	r4, r3
 80021d2:	4828      	ldr	r0, [pc, #160]	@ (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80021d4:	f7ff ff7a 	bl	80020cc <LL_ADC_IsEnabled>
 80021d8:	4603      	mov	r3, r0
 80021da:	4323      	orrs	r3, r4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d137      	bne.n	8002250 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021e8:	f023 030f 	bic.w	r3, r3, #15
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	6811      	ldr	r1, [r2, #0]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	6892      	ldr	r2, [r2, #8]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021fa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021fc:	e028      	b.n	8002250 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80021fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002208:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800220a:	4817      	ldr	r0, [pc, #92]	@ (8002268 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800220c:	f7ff ff5e 	bl	80020cc <LL_ADC_IsEnabled>
 8002210:	4604      	mov	r4, r0
 8002212:	4816      	ldr	r0, [pc, #88]	@ (800226c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002214:	f7ff ff5a 	bl	80020cc <LL_ADC_IsEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	431c      	orrs	r4, r3
 800221c:	4815      	ldr	r0, [pc, #84]	@ (8002274 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800221e:	f7ff ff55 	bl	80020cc <LL_ADC_IsEnabled>
 8002222:	4603      	mov	r3, r0
 8002224:	4323      	orrs	r3, r4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d112      	bne.n	8002250 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800222a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002232:	f023 030f 	bic.w	r3, r3, #15
 8002236:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002238:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800223a:	e009      	b.n	8002250 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002240:	f043 0220 	orr.w	r2, r3, #32
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800224e:	e000      	b.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002250:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800225a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800225e:	4618      	mov	r0, r3
 8002260:	377c      	adds	r7, #124	@ 0x7c
 8002262:	46bd      	mov	sp, r7
 8002264:	bd90      	pop	{r4, r7, pc}
 8002266:	bf00      	nop
 8002268:	50040000 	.word	0x50040000
 800226c:	50040100 	.word	0x50040100
 8002270:	50040300 	.word	0x50040300
 8002274:	50040200 	.word	0x50040200

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	@ (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	@ (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	@ (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	@ 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	@ 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff8e 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff29 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff3e 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff8e 	bl	800236c <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff31 	bl	80022dc <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e098      	b.n	80025e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b4d      	ldr	r3, [pc, #308]	@ (80025ec <HAL_DMA_Init+0x150>)
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d80f      	bhi.n	80024da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b4b      	ldr	r3, [pc, #300]	@ (80025f0 <HAL_DMA_Init+0x154>)
 80024c2:	4413      	add	r3, r2
 80024c4:	4a4b      	ldr	r2, [pc, #300]	@ (80025f4 <HAL_DMA_Init+0x158>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	009a      	lsls	r2, r3, #2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a48      	ldr	r2, [pc, #288]	@ (80025f8 <HAL_DMA_Init+0x15c>)
 80024d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80024d8:	e00e      	b.n	80024f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	4b46      	ldr	r3, [pc, #280]	@ (80025fc <HAL_DMA_Init+0x160>)
 80024e2:	4413      	add	r3, r2
 80024e4:	4a43      	ldr	r2, [pc, #268]	@ (80025f4 <HAL_DMA_Init+0x158>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	009a      	lsls	r2, r3, #2
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a42      	ldr	r2, [pc, #264]	@ (8002600 <HAL_DMA_Init+0x164>)
 80024f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800250e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002512:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002552:	d039      	beq.n	80025c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	4a27      	ldr	r2, [pc, #156]	@ (80025f8 <HAL_DMA_Init+0x15c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d11a      	bne.n	8002594 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800255e:	4b29      	ldr	r3, [pc, #164]	@ (8002604 <HAL_DMA_Init+0x168>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f003 031c 	and.w	r3, r3, #28
 800256a:	210f      	movs	r1, #15
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	4924      	ldr	r1, [pc, #144]	@ (8002604 <HAL_DMA_Init+0x168>)
 8002574:	4013      	ands	r3, r2
 8002576:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002578:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <HAL_DMA_Init+0x168>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002584:	f003 031c 	and.w	r3, r3, #28
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	491d      	ldr	r1, [pc, #116]	@ (8002604 <HAL_DMA_Init+0x168>)
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
 8002592:	e019      	b.n	80025c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002594:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <HAL_DMA_Init+0x16c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259c:	f003 031c 	and.w	r3, r3, #28
 80025a0:	210f      	movs	r1, #15
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	4917      	ldr	r1, [pc, #92]	@ (8002608 <HAL_DMA_Init+0x16c>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <HAL_DMA_Init+0x16c>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	f003 031c 	and.w	r3, r3, #28
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	4911      	ldr	r1, [pc, #68]	@ (8002608 <HAL_DMA_Init+0x16c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40020407 	.word	0x40020407
 80025f0:	bffdfff8 	.word	0xbffdfff8
 80025f4:	cccccccd 	.word	0xcccccccd
 80025f8:	40020000 	.word	0x40020000
 80025fc:	bffdfbf8 	.word	0xbffdfbf8
 8002600:	40020400 	.word	0x40020400
 8002604:	400200a8 	.word	0x400200a8
 8002608:	400204a8 	.word	0x400204a8

0800260c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_DMA_Start_IT+0x20>
 8002628:	2302      	movs	r3, #2
 800262a:	e04b      	b.n	80026c4 <HAL_DMA_Start_IT+0xb8>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d13a      	bne.n	80026b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 f8e0 	bl	800282a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 020e 	orr.w	r2, r2, #14
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e00f      	b.n	80026a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 020a 	orr.w	r2, r2, #10
 80026a2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e005      	b.n	80026c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026be:	2302      	movs	r3, #2
 80026c0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e8:	f003 031c 	and.w	r3, r3, #28
 80026ec:	2204      	movs	r2, #4
 80026ee:	409a      	lsls	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d026      	beq.n	8002746 <HAL_DMA_IRQHandler+0x7a>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d021      	beq.n	8002746 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d107      	bne.n	8002720 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002724:	f003 021c 	and.w	r2, r3, #28
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	2104      	movs	r1, #4
 800272e:	fa01 f202 	lsl.w	r2, r1, r2
 8002732:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002738:	2b00      	cmp	r3, #0
 800273a:	d071      	beq.n	8002820 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002744:	e06c      	b.n	8002820 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f003 031c 	and.w	r3, r3, #28
 800274e:	2202      	movs	r2, #2
 8002750:	409a      	lsls	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d02e      	beq.n	80027b8 <HAL_DMA_IRQHandler+0xec>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d029      	beq.n	80027b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10b      	bne.n	800278a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 020a 	bic.w	r2, r2, #10
 8002780:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	f003 021c 	and.w	r2, r3, #28
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	2102      	movs	r1, #2
 8002798:	fa01 f202 	lsl.w	r2, r1, r2
 800279c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d038      	beq.n	8002820 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80027b6:	e033      	b.n	8002820 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027bc:	f003 031c 	and.w	r3, r3, #28
 80027c0:	2208      	movs	r2, #8
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d02a      	beq.n	8002822 <HAL_DMA_IRQHandler+0x156>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d025      	beq.n	8002822 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 020e 	bic.w	r2, r2, #14
 80027e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f003 021c 	and.w	r2, r3, #28
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f202 	lsl.w	r2, r1, r2
 80027f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002814:	2b00      	cmp	r3, #0
 8002816:	d004      	beq.n	8002822 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002820:	bf00      	nop
 8002822:	bf00      	nop
}
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	f003 021c 	and.w	r2, r3, #28
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	2101      	movs	r1, #1
 8002846:	fa01 f202 	lsl.w	r2, r1, r2
 800284a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b10      	cmp	r3, #16
 800285a:	d108      	bne.n	800286e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800286c:	e007      	b.n	800287e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	60da      	str	r2, [r3, #12]
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800289a:	e17f      	b.n	8002b9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 8171 	beq.w	8002b96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d005      	beq.n	80028cc <HAL_GPIO_Init+0x40>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d130      	bne.n	800292e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002902:	2201      	movs	r2, #1
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 0201 	and.w	r2, r3, #1
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b03      	cmp	r3, #3
 8002938:	d118      	bne.n	800296c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002940:	2201      	movs	r2, #1
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	08db      	lsrs	r3, r3, #3
 8002956:	f003 0201 	and.w	r2, r3, #1
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	2b03      	cmp	r3, #3
 8002976:	d017      	beq.n	80029a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	2203      	movs	r2, #3
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d123      	bne.n	80029fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	08da      	lsrs	r2, r3, #3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3208      	adds	r2, #8
 80029bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	220f      	movs	r2, #15
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	08da      	lsrs	r2, r3, #3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3208      	adds	r2, #8
 80029f6:	6939      	ldr	r1, [r7, #16]
 80029f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	2203      	movs	r2, #3
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0203 	and.w	r2, r3, #3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80ac 	beq.w	8002b96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	4b5f      	ldr	r3, [pc, #380]	@ (8002bbc <HAL_GPIO_Init+0x330>)
 8002a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a42:	4a5e      	ldr	r2, [pc, #376]	@ (8002bbc <HAL_GPIO_Init+0x330>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a4a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bbc <HAL_GPIO_Init+0x330>)
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a56:	4a5a      	ldr	r2, [pc, #360]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a80:	d025      	beq.n	8002ace <HAL_GPIO_Init+0x242>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4f      	ldr	r2, [pc, #316]	@ (8002bc4 <HAL_GPIO_Init+0x338>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01f      	beq.n	8002aca <HAL_GPIO_Init+0x23e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8002bc8 <HAL_GPIO_Init+0x33c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d019      	beq.n	8002ac6 <HAL_GPIO_Init+0x23a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4d      	ldr	r2, [pc, #308]	@ (8002bcc <HAL_GPIO_Init+0x340>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x236>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd0 <HAL_GPIO_Init+0x344>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00d      	beq.n	8002abe <HAL_GPIO_Init+0x232>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4b      	ldr	r2, [pc, #300]	@ (8002bd4 <HAL_GPIO_Init+0x348>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <HAL_GPIO_Init+0x22e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd8 <HAL_GPIO_Init+0x34c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_GPIO_Init+0x22a>
 8002ab2:	2306      	movs	r3, #6
 8002ab4:	e00c      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	e00a      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002aba:	2305      	movs	r3, #5
 8002abc:	e008      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002abe:	2304      	movs	r3, #4
 8002ac0:	e006      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e004      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e002      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_GPIO_Init+0x244>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	f002 0203 	and.w	r2, r2, #3
 8002ad6:	0092      	lsls	r2, r2, #2
 8002ad8:	4093      	lsls	r3, r2
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ae0:	4937      	ldr	r1, [pc, #220]	@ (8002bc0 <HAL_GPIO_Init+0x334>)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aee:	4b3b      	ldr	r3, [pc, #236]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b12:	4a32      	ldr	r2, [pc, #200]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b18:	4b30      	ldr	r3, [pc, #192]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b3c:	4a27      	ldr	r2, [pc, #156]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b42:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b66:	4a1d      	ldr	r2, [pc, #116]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b90:	4a12      	ldr	r2, [pc, #72]	@ (8002bdc <HAL_GPIO_Init+0x350>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f47f ae78 	bne.w	800289c <HAL_GPIO_Init+0x10>
  }
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	48000400 	.word	0x48000400
 8002bc8:	48000800 	.word	0x48000800
 8002bcc:	48000c00 	.word	0x48000c00
 8002bd0:	48001000 	.word	0x48001000
 8002bd4:	48001400 	.word	0x48001400
 8002bd8:	48001800 	.word	0x48001800
 8002bdc:	40010400 	.word	0x40010400

08002be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bfe:	887a      	ldrh	r2, [r7, #2]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c14:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40007000 	.word	0x40007000

08002c2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c3a:	d130      	bne.n	8002c9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3c:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c48:	d038      	beq.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c4a:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2232      	movs	r2, #50	@ 0x32
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0c9b      	lsrs	r3, r3, #18
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c70:	e002      	b.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c84:	d102      	bne.n	8002c8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f2      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c98:	d110      	bne.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e00f      	b.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002caa:	d007      	beq.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cac:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cb4:	4a05      	ldr	r2, [pc, #20]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40007000 	.word	0x40007000
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	431bde83 	.word	0x431bde83

08002cd8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e3ca      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cea:	4b97      	ldr	r3, [pc, #604]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cf4:	4b94      	ldr	r3, [pc, #592]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 80e4 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <HAL_RCC_OscConfig+0x4a>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	f040 808b 	bne.w	8002e30 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f040 8087 	bne.w	8002e30 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d22:	4b89      	ldr	r3, [pc, #548]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_RCC_OscConfig+0x62>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e3a2      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	4b82      	ldr	r3, [pc, #520]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_RCC_OscConfig+0x7c>
 8002d4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d52:	e005      	b.n	8002d60 <HAL_RCC_OscConfig+0x88>
 8002d54:	4b7c      	ldr	r3, [pc, #496]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d223      	bcs.n	8002dac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fd55 	bl	8003818 <RCC_SetFlashLatencyFromMSIRange>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e383      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d78:	4b73      	ldr	r3, [pc, #460]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a72      	ldr	r2, [pc, #456]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b70      	ldr	r3, [pc, #448]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	496d      	ldr	r1, [pc, #436]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d96:	4b6c      	ldr	r3, [pc, #432]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	4968      	ldr	r1, [pc, #416]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
 8002daa:	e025      	b.n	8002df8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dac:	4b66      	ldr	r3, [pc, #408]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a65      	ldr	r2, [pc, #404]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	4b63      	ldr	r3, [pc, #396]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4960      	ldr	r1, [pc, #384]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dca:	4b5f      	ldr	r3, [pc, #380]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	495b      	ldr	r1, [pc, #364]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fd15 	bl	8003818 <RCC_SetFlashLatencyFromMSIRange>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e343      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df8:	f000 fc4a 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b52      	ldr	r3, [pc, #328]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	4950      	ldr	r1, [pc, #320]	@ (8002f4c <HAL_RCC_OscConfig+0x274>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
 8002e14:	4a4e      	ldr	r2, [pc, #312]	@ (8002f50 <HAL_RCC_OscConfig+0x278>)
 8002e16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e18:	4b4e      	ldr	r3, [pc, #312]	@ (8002f54 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd ffd3 	bl	8000dc8 <HAL_InitTick>
 8002e22:	4603      	mov	r3, r0
 8002e24:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d052      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	e327      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d032      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e38:	4b43      	ldr	r3, [pc, #268]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a42      	ldr	r2, [pc, #264]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e44:	f7fe f810 	bl	8000e68 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e4c:	f7fe f80c 	bl	8000e68 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e310      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e6a:	4b37      	ldr	r3, [pc, #220]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a36      	ldr	r2, [pc, #216]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b34      	ldr	r3, [pc, #208]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4931      	ldr	r1, [pc, #196]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e88:	4b2f      	ldr	r3, [pc, #188]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	492c      	ldr	r1, [pc, #176]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	e01a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a29      	ldr	r2, [pc, #164]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eaa:	f7fd ffdd 	bl	8000e68 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb2:	f7fd ffd9 	bl	8000e68 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e2dd      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ec4:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1f0      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x1da>
 8002ed0:	e000      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ed2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d074      	beq.n	8002fca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x21a>
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b0c      	cmp	r3, #12
 8002eea:	d10e      	bne.n	8002f0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef2:	4b15      	ldr	r3, [pc, #84]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d064      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x2f0>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d160      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e2ba      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x24a>
 8002f14:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0b      	ldr	r2, [pc, #44]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e026      	b.n	8002f70 <HAL_RCC_OscConfig+0x298>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f2a:	d115      	bne.n	8002f58 <HAL_RCC_OscConfig+0x280>
 8002f2c:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a05      	ldr	r2, [pc, #20]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a02      	ldr	r2, [pc, #8]	@ (8002f48 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e014      	b.n	8002f70 <HAL_RCC_OscConfig+0x298>
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08005c30 	.word	0x08005c30
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004
 8002f58:	4ba0      	ldr	r3, [pc, #640]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a9f      	ldr	r2, [pc, #636]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b9d      	ldr	r3, [pc, #628]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a9c      	ldr	r2, [pc, #624]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fd ff76 	bl	8000e68 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fd ff72 	bl	8000e68 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e276      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f92:	4b92      	ldr	r3, [pc, #584]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x2a8>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fd ff62 	bl	8000e68 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fd ff5e 	bl	8000e68 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	@ 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e262      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fba:	4b88      	ldr	r3, [pc, #544]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x2d0>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d060      	beq.n	8003098 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b04      	cmp	r3, #4
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x310>
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d119      	bne.n	8003016 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d116      	bne.n	8003016 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe8:	4b7c      	ldr	r3, [pc, #496]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_OscConfig+0x328>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e23f      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b76      	ldr	r3, [pc, #472]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	4973      	ldr	r1, [pc, #460]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003014:	e040      	b.n	8003098 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d023      	beq.n	8003066 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301e:	4b6f      	ldr	r3, [pc, #444]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a6e      	ldr	r2, [pc, #440]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fd ff1d 	bl	8000e68 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003032:	f7fd ff19 	bl	8000e68 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e21d      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003044:	4b65      	ldr	r3, [pc, #404]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b62      	ldr	r3, [pc, #392]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	495f      	ldr	r1, [pc, #380]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
 8003064:	e018      	b.n	8003098 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b5d      	ldr	r3, [pc, #372]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5c      	ldr	r2, [pc, #368]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 800306c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fd fef9 	bl	8000e68 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307a:	f7fd fef5 	bl	8000e68 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1f9      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800308c:	4b53      	ldr	r3, [pc, #332]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d03c      	beq.n	800311e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01c      	beq.n	80030e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ac:	4b4b      	ldr	r3, [pc, #300]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80030ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b2:	4a4a      	ldr	r2, [pc, #296]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fd fed4 	bl	8000e68 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c4:	f7fd fed0 	bl	8000e68 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1d4      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030d6:	4b41      	ldr	r3, [pc, #260]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80030d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ef      	beq.n	80030c4 <HAL_RCC_OscConfig+0x3ec>
 80030e4:	e01b      	b.n	800311e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e6:	4b3d      	ldr	r3, [pc, #244]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80030e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ec:	4a3b      	ldr	r2, [pc, #236]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fd feb7 	bl	8000e68 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fd feb3 	bl	8000e68 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e1b7      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003110:	4b32      	ldr	r3, [pc, #200]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ef      	bne.n	80030fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80a6 	beq.w	8003278 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003130:	4b2a      	ldr	r3, [pc, #168]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10d      	bne.n	8003158 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b27      	ldr	r3, [pc, #156]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	4a26      	ldr	r2, [pc, #152]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	@ 0x58
 8003148:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003154:	2301      	movs	r3, #1
 8003156:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003158:	4b21      	ldr	r3, [pc, #132]	@ (80031e0 <HAL_RCC_OscConfig+0x508>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d118      	bne.n	8003196 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003164:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <HAL_RCC_OscConfig+0x508>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1d      	ldr	r2, [pc, #116]	@ (80031e0 <HAL_RCC_OscConfig+0x508>)
 800316a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800316e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003170:	f7fd fe7a 	bl	8000e68 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003178:	f7fd fe76 	bl	8000e68 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e17a      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318a:	4b15      	ldr	r3, [pc, #84]	@ (80031e0 <HAL_RCC_OscConfig+0x508>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d108      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4d8>
 800319e:	4b0f      	ldr	r3, [pc, #60]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031a4:	4a0d      	ldr	r2, [pc, #52]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031ae:	e029      	b.n	8003204 <HAL_RCC_OscConfig+0x52c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b05      	cmp	r3, #5
 80031b6:	d115      	bne.n	80031e4 <HAL_RCC_OscConfig+0x50c>
 80031b8:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031be:	4a07      	ldr	r2, [pc, #28]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031c8:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	4a03      	ldr	r2, [pc, #12]	@ (80031dc <HAL_RCC_OscConfig+0x504>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d8:	e014      	b.n	8003204 <HAL_RCC_OscConfig+0x52c>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40007000 	.word	0x40007000
 80031e4:	4b9c      	ldr	r3, [pc, #624]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ea:	4a9b      	ldr	r2, [pc, #620]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031f4:	4b98      	ldr	r3, [pc, #608]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fa:	4a97      	ldr	r2, [pc, #604]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80031fc:	f023 0304 	bic.w	r3, r3, #4
 8003200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d016      	beq.n	800323a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7fd fe2c 	bl	8000e68 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fd fe28 	bl	8000e68 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e12a      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800322a:	4b8b      	ldr	r3, [pc, #556]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ed      	beq.n	8003214 <HAL_RCC_OscConfig+0x53c>
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323a:	f7fd fe15 	bl	8000e68 <HAL_GetTick>
 800323e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003240:	e00a      	b.n	8003258 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003242:	f7fd fe11 	bl	8000e68 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003250:	4293      	cmp	r3, r2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e113      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003258:	4b7f      	ldr	r3, [pc, #508]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ed      	bne.n	8003242 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003266:	7ffb      	ldrb	r3, [r7, #31]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b7a      	ldr	r3, [pc, #488]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	4a79      	ldr	r2, [pc, #484]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003276:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80fe 	beq.w	800347e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	2b02      	cmp	r3, #2
 8003288:	f040 80d0 	bne.w	800342c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800328c:	4b72      	ldr	r3, [pc, #456]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f003 0203 	and.w	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329c:	429a      	cmp	r2, r3
 800329e:	d130      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	3b01      	subs	r3, #1
 80032ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d127      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d11f      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032cc:	2a07      	cmp	r2, #7
 80032ce:	bf14      	ite	ne
 80032d0:	2201      	movne	r2, #1
 80032d2:	2200      	moveq	r2, #0
 80032d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d113      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	085b      	lsrs	r3, r3, #1
 80032fa:	3b01      	subs	r3, #1
 80032fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d06e      	beq.n	80033e0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b0c      	cmp	r3, #12
 8003306:	d069      	beq.n	80033dc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003308:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003314:	4b50      	ldr	r3, [pc, #320]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0ad      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003324:	4b4c      	ldr	r3, [pc, #304]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a4b      	ldr	r2, [pc, #300]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 800332a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003330:	f7fd fd9a 	bl	8000e68 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fd fd96 	bl	8000e68 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e09a      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800334a:	4b43      	ldr	r3, [pc, #268]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003356:	4b40      	ldr	r3, [pc, #256]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	4b40      	ldr	r3, [pc, #256]	@ (800345c <HAL_RCC_OscConfig+0x784>)
 800335c:	4013      	ands	r3, r2
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003366:	3a01      	subs	r2, #1
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003370:	0212      	lsls	r2, r2, #8
 8003372:	4311      	orrs	r1, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003378:	0852      	lsrs	r2, r2, #1
 800337a:	3a01      	subs	r2, #1
 800337c:	0552      	lsls	r2, r2, #21
 800337e:	4311      	orrs	r1, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003384:	0852      	lsrs	r2, r2, #1
 8003386:	3a01      	subs	r2, #1
 8003388:	0652      	lsls	r2, r2, #25
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003390:	0912      	lsrs	r2, r2, #4
 8003392:	0452      	lsls	r2, r2, #17
 8003394:	430a      	orrs	r2, r1
 8003396:	4930      	ldr	r1, [pc, #192]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 8003398:	4313      	orrs	r3, r2
 800339a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800339c:	4b2e      	ldr	r3, [pc, #184]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80033a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80033ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033b4:	f7fd fd58 	bl	8000e68 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033bc:	f7fd fd54 	bl	8000e68 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e058      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ce:	4b22      	ldr	r3, [pc, #136]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033da:	e050      	b.n	800347e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e04f      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d148      	bne.n	800347e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a19      	ldr	r2, [pc, #100]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80033f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f8:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a16      	ldr	r2, [pc, #88]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 80033fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003402:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003404:	f7fd fd30 	bl	8000e68 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340c:	f7fd fd2c 	bl	8000e68 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e030      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800341e:	4b0e      	ldr	r3, [pc, #56]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x734>
 800342a:	e028      	b.n	800347e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d023      	beq.n	800347a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003432:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a08      	ldr	r2, [pc, #32]	@ (8003458 <HAL_RCC_OscConfig+0x780>)
 8003438:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800343c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fd fd13 	bl	8000e68 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003444:	e00c      	b.n	8003460 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7fd fd0f 	bl	8000e68 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d905      	bls.n	8003460 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e013      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
 8003458:	40021000 	.word	0x40021000
 800345c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003460:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <HAL_RCC_OscConfig+0x7b0>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ec      	bne.n	8003446 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_RCC_OscConfig+0x7b0>)
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	4905      	ldr	r1, [pc, #20]	@ (8003488 <HAL_RCC_OscConfig+0x7b0>)
 8003472:	4b06      	ldr	r3, [pc, #24]	@ (800348c <HAL_RCC_OscConfig+0x7b4>)
 8003474:	4013      	ands	r3, r2
 8003476:	60cb      	str	r3, [r1, #12]
 8003478:	e001      	b.n	800347e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	feeefffc 	.word	0xfeeefffc

08003490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0e7      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a4:	4b75      	ldr	r3, [pc, #468]	@ (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d910      	bls.n	80034d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b72      	ldr	r3, [pc, #456]	@ (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 0207 	bic.w	r2, r3, #7
 80034ba:	4970      	ldr	r1, [pc, #448]	@ (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c2:	4b6e      	ldr	r3, [pc, #440]	@ (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d001      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0cf      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b66      	ldr	r3, [pc, #408]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d908      	bls.n	8003502 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f0:	4b63      	ldr	r3, [pc, #396]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	4960      	ldr	r1, [pc, #384]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d04c      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003516:	4b5a      	ldr	r3, [pc, #360]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d121      	bne.n	8003566 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0a6      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d107      	bne.n	800353e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352e:	4b54      	ldr	r3, [pc, #336]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d115      	bne.n	8003566 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e09a      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003546:	4b4e      	ldr	r3, [pc, #312]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e08e      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003556:	4b4a      	ldr	r3, [pc, #296]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e086      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003566:	4b46      	ldr	r3, [pc, #280]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f023 0203 	bic.w	r2, r3, #3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4943      	ldr	r1, [pc, #268]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003574:	4313      	orrs	r3, r2
 8003576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003578:	f7fd fc76 	bl	8000e68 <HAL_GetTick>
 800357c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357e:	e00a      	b.n	8003596 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7fd fc72 	bl	8000e68 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e06e      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	4b3a      	ldr	r3, [pc, #232]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 020c 	and.w	r2, r3, #12
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d1eb      	bne.n	8003580 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	4b31      	ldr	r3, [pc, #196]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d208      	bcs.n	80035d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	492b      	ldr	r1, [pc, #172]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d6:	4b29      	ldr	r3, [pc, #164]	@ (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d210      	bcs.n	8003606 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e4:	4b25      	ldr	r3, [pc, #148]	@ (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 0207 	bic.w	r2, r3, #7
 80035ec:	4923      	ldr	r1, [pc, #140]	@ (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f4:	4b21      	ldr	r3, [pc, #132]	@ (800367c <HAL_RCC_ClockConfig+0x1ec>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d001      	beq.n	8003606 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e036      	b.n	8003674 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d008      	beq.n	8003624 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003612:	4b1b      	ldr	r3, [pc, #108]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4918      	ldr	r1, [pc, #96]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	4313      	orrs	r3, r2
 8003622:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003630:	4b13      	ldr	r3, [pc, #76]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4910      	ldr	r1, [pc, #64]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003644:	f000 f824 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b0d      	ldr	r3, [pc, #52]	@ (8003680 <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	091b      	lsrs	r3, r3, #4
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	490b      	ldr	r1, [pc, #44]	@ (8003684 <HAL_RCC_ClockConfig+0x1f4>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	4a09      	ldr	r2, [pc, #36]	@ (8003688 <HAL_RCC_ClockConfig+0x1f8>)
 8003662:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003664:	4b09      	ldr	r3, [pc, #36]	@ (800368c <HAL_RCC_ClockConfig+0x1fc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fd fbad 	bl	8000dc8 <HAL_InitTick>
 800366e:	4603      	mov	r3, r0
 8003670:	72fb      	strb	r3, [r7, #11]

  return status;
 8003672:	7afb      	ldrb	r3, [r7, #11]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40022000 	.word	0x40022000
 8003680:	40021000 	.word	0x40021000
 8003684:	08005c30 	.word	0x08005c30
 8003688:	20000000 	.word	0x20000000
 800368c:	20000004 	.word	0x20000004

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	@ 0x24
 8003694:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	2300      	movs	r3, #0
 800369c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369e:	4b3e      	ldr	r3, [pc, #248]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x34>
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d121      	bne.n	8003702 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d11e      	bne.n	8003702 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036c4:	4b34      	ldr	r3, [pc, #208]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036d0:	4b31      	ldr	r3, [pc, #196]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	61fb      	str	r3, [r7, #28]
 80036de:	e005      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036ec:	4a2b      	ldr	r2, [pc, #172]	@ (800379c <HAL_RCC_GetSysClockFreq+0x10c>)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10d      	bne.n	8003718 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d102      	bne.n	800370e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003708:	4b25      	ldr	r3, [pc, #148]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	e004      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d101      	bne.n	8003718 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003714:	4b23      	ldr	r3, [pc, #140]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003716:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b0c      	cmp	r3, #12
 800371c:	d134      	bne.n	8003788 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800371e:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d003      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0xa6>
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d003      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0xac>
 8003734:	e005      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003736:	4b1a      	ldr	r3, [pc, #104]	@ (80037a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003738:	617b      	str	r3, [r7, #20]
      break;
 800373a:	e005      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800373c:	4b19      	ldr	r3, [pc, #100]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800373e:	617b      	str	r3, [r7, #20]
      break;
 8003740:	e002      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	617b      	str	r3, [r7, #20]
      break;
 8003746:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003748:	4b13      	ldr	r3, [pc, #76]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	3301      	adds	r3, #1
 8003754:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003756:	4b10      	ldr	r3, [pc, #64]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	fb03 f202 	mul.w	r2, r3, r2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800376e:	4b0a      	ldr	r3, [pc, #40]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x108>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	0e5b      	lsrs	r3, r3, #25
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	3301      	adds	r3, #1
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003788:	69bb      	ldr	r3, [r7, #24]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3724      	adds	r7, #36	@ 0x24
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	08005c48 	.word	0x08005c48
 80037a0:	00f42400 	.word	0x00f42400
 80037a4:	007a1200 	.word	0x007a1200

080037a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ac:	4b03      	ldr	r3, [pc, #12]	@ (80037bc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000000 	.word	0x20000000

080037c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037c4:	f7ff fff0 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0a1b      	lsrs	r3, r3, #8
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4904      	ldr	r1, [pc, #16]	@ (80037e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	f003 031f 	and.w	r3, r3, #31
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	08005c40 	.word	0x08005c40

080037ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037f0:	f7ff ffda 	bl	80037a8 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	0adb      	lsrs	r3, r3, #11
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4904      	ldr	r1, [pc, #16]	@ (8003814 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800380c:	4618      	mov	r0, r3
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	08005c40 	.word	0x08005c40

08003818 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003824:	4b2a      	ldr	r3, [pc, #168]	@ (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003830:	f7ff f9ee 	bl	8002c10 <HAL_PWREx_GetVoltageRange>
 8003834:	6178      	str	r0, [r7, #20]
 8003836:	e014      	b.n	8003862 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003838:	4b25      	ldr	r3, [pc, #148]	@ (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800383c:	4a24      	ldr	r2, [pc, #144]	@ (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003842:	6593      	str	r3, [r2, #88]	@ 0x58
 8003844:	4b22      	ldr	r3, [pc, #136]	@ (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003850:	f7ff f9de 	bl	8002c10 <HAL_PWREx_GetVoltageRange>
 8003854:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b1e      	ldr	r3, [pc, #120]	@ (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385a:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003868:	d10b      	bne.n	8003882 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b80      	cmp	r3, #128	@ 0x80
 800386e:	d919      	bls.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2ba0      	cmp	r3, #160	@ 0xa0
 8003874:	d902      	bls.n	800387c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003876:	2302      	movs	r3, #2
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	e013      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800387c:	2301      	movs	r3, #1
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	e010      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b80      	cmp	r3, #128	@ 0x80
 8003886:	d902      	bls.n	800388e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003888:	2303      	movs	r3, #3
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	e00a      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b80      	cmp	r3, #128	@ 0x80
 8003892:	d102      	bne.n	800389a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003894:	2302      	movs	r3, #2
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	e004      	b.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b70      	cmp	r3, #112	@ 0x70
 800389e:	d101      	bne.n	80038a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a0:	2301      	movs	r3, #1
 80038a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038a4:	4b0b      	ldr	r3, [pc, #44]	@ (80038d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f023 0207 	bic.w	r2, r3, #7
 80038ac:	4909      	ldr	r1, [pc, #36]	@ (80038d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038b4:	4b07      	ldr	r3, [pc, #28]	@ (80038d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d001      	beq.n	80038c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40022000 	.word	0x40022000

080038d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038e0:	2300      	movs	r3, #0
 80038e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038e4:	2300      	movs	r3, #0
 80038e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d041      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038fc:	d02a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003902:	d824      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003904:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003908:	d008      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800390a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800390e:	d81e      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003914:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003918:	d010      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800391a:	e018      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800391c:	4b86      	ldr	r3, [pc, #536]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a85      	ldr	r2, [pc, #532]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003926:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003928:	e015      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fabb 	bl	8003eac <RCCEx_PLLSAI1_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800393a:	e00c      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3320      	adds	r3, #32
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fba6 	bl	8004094 <RCCEx_PLLSAI2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	74fb      	strb	r3, [r7, #19]
      break;
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003956:	7cfb      	ldrb	r3, [r7, #19]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800395c:	4b76      	ldr	r3, [pc, #472]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003962:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800396a:	4973      	ldr	r1, [pc, #460]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003972:	e001      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d041      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003988:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800398c:	d02a      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800398e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003992:	d824      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003994:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003998:	d008      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800399a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800399e:	d81e      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039a8:	d010      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039aa:	e018      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039ac:	4b62      	ldr	r3, [pc, #392]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a61      	ldr	r2, [pc, #388]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039b8:	e015      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3304      	adds	r3, #4
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fa73 	bl	8003eac <RCCEx_PLLSAI1_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039ca:	e00c      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3320      	adds	r3, #32
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fb5e 	bl	8004094 <RCCEx_PLLSAI2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	74fb      	strb	r3, [r7, #19]
      break;
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ec:	4b52      	ldr	r3, [pc, #328]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039fa:	494f      	ldr	r1, [pc, #316]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a02:	e001      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80a0 	beq.w	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a1a:	4b47      	ldr	r3, [pc, #284]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00d      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a30:	4b41      	ldr	r3, [pc, #260]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a34:	4a40      	ldr	r2, [pc, #256]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a3c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a3a      	ldr	r2, [pc, #232]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a58:	f7fd fa06 	bl	8000e68 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a5e:	e009      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a60:	f7fd fa02 	bl	8000e68 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d902      	bls.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	74fb      	strb	r3, [r7, #19]
        break;
 8003a72:	e005      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a74:	4b31      	ldr	r3, [pc, #196]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ef      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a80:	7cfb      	ldrb	r3, [r7, #19]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d15c      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a86:	4b2c      	ldr	r3, [pc, #176]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01f      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d019      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aa4:	4b24      	ldr	r3, [pc, #144]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab0:	4b21      	ldr	r3, [pc, #132]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab6:	4a20      	ldr	r2, [pc, #128]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ad0:	4a19      	ldr	r2, [pc, #100]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fd f9c1 	bl	8000e68 <HAL_GetTick>
 8003ae6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae8:	e00b      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aea:	f7fd f9bd 	bl	8000e68 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d902      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	74fb      	strb	r3, [r7, #19]
            break;
 8003b00:	e006      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ec      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b16:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b26:	4904      	ldr	r1, [pc, #16]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b2e:	e009      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	74bb      	strb	r3, [r7, #18]
 8003b34:	e006      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b44:	7c7b      	ldrb	r3, [r7, #17]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d105      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4a:	4b9e      	ldr	r3, [pc, #632]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4e:	4a9d      	ldr	r2, [pc, #628]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b62:	4b98      	ldr	r3, [pc, #608]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b68:	f023 0203 	bic.w	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b70:	4994      	ldr	r1, [pc, #592]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b84:	4b8f      	ldr	r3, [pc, #572]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8a:	f023 020c 	bic.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b92:	498c      	ldr	r1, [pc, #560]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ba6:	4b87      	ldr	r3, [pc, #540]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	4983      	ldr	r1, [pc, #524]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	497b      	ldr	r1, [pc, #492]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bea:	4b76      	ldr	r3, [pc, #472]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf8:	4972      	ldr	r1, [pc, #456]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c0c:	4b6d      	ldr	r3, [pc, #436]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1a:	496a      	ldr	r1, [pc, #424]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c2e:	4b65      	ldr	r3, [pc, #404]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	4961      	ldr	r1, [pc, #388]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c50:	4b5c      	ldr	r3, [pc, #368]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5e:	4959      	ldr	r1, [pc, #356]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c72:	4b54      	ldr	r3, [pc, #336]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c80:	4950      	ldr	r1, [pc, #320]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c94:	4b4b      	ldr	r3, [pc, #300]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca2:	4948      	ldr	r1, [pc, #288]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cb6:	4b43      	ldr	r3, [pc, #268]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc4:	493f      	ldr	r1, [pc, #252]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d028      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ce6:	4937      	ldr	r1, [pc, #220]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf8:	4b32      	ldr	r3, [pc, #200]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a31      	ldr	r2, [pc, #196]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d02:	60d3      	str	r3, [r2, #12]
 8003d04:	e011      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d0e:	d10c      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f8c8 	bl	8003eac <RCCEx_PLLSAI1_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d20:	7cfb      	ldrb	r3, [r7, #19]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d26:	7cfb      	ldrb	r3, [r7, #19]
 8003d28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d028      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d36:	4b23      	ldr	r3, [pc, #140]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d44:	491f      	ldr	r1, [pc, #124]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d54:	d106      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d56:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d60:	60d3      	str	r3, [r2, #12]
 8003d62:	e011      	b.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	3304      	adds	r3, #4
 8003d72:	2101      	movs	r1, #1
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f899 	bl	8003eac <RCCEx_PLLSAI1_Config>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d7e:	7cfb      	ldrb	r3, [r7, #19]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d84:	7cfb      	ldrb	r3, [r7, #19]
 8003d86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d02b      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d94:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da2:	4908      	ldr	r1, [pc, #32]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003db2:	d109      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db4:	4b03      	ldr	r3, [pc, #12]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a02      	ldr	r2, [pc, #8]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dbe:	60d3      	str	r3, [r2, #12]
 8003dc0:	e014      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 f867 	bl	8003eac <RCCEx_PLLSAI1_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d02f      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e06:	4928      	ldr	r1, [pc, #160]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e16:	d10d      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 f844 	bl	8003eac <RCCEx_PLLSAI1_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e28:	7cfb      	ldrb	r3, [r7, #19]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d014      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e2e:	7cfb      	ldrb	r3, [r7, #19]
 8003e30:	74bb      	strb	r3, [r7, #18]
 8003e32:	e011      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3320      	adds	r3, #32
 8003e42:	2102      	movs	r1, #2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 f925 	bl	8004094 <RCCEx_PLLSAI2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e64:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e72:	490d      	ldr	r1, [pc, #52]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e86:	4b08      	ldr	r3, [pc, #32]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e96:	4904      	ldr	r1, [pc, #16]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000

08003eac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eba:	4b75      	ldr	r3, [pc, #468]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d018      	beq.n	8003ef8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ec6:	4b72      	ldr	r3, [pc, #456]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0203 	and.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d10d      	bne.n	8003ef2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ede:	4b6c      	ldr	r3, [pc, #432]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
       ||
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d047      	beq.n	8003f82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	e044      	b.n	8003f82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d018      	beq.n	8003f32 <RCCEx_PLLSAI1_Config+0x86>
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d825      	bhi.n	8003f50 <RCCEx_PLLSAI1_Config+0xa4>
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d002      	beq.n	8003f0e <RCCEx_PLLSAI1_Config+0x62>
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d009      	beq.n	8003f20 <RCCEx_PLLSAI1_Config+0x74>
 8003f0c:	e020      	b.n	8003f50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f0e:	4b60      	ldr	r3, [pc, #384]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d11d      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1e:	e01a      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f20:	4b5b      	ldr	r3, [pc, #364]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d116      	bne.n	8003f5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f30:	e013      	b.n	8003f5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f32:	4b57      	ldr	r3, [pc, #348]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f3e:	4b54      	ldr	r3, [pc, #336]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f4e:	e006      	b.n	8003f5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      break;
 8003f54:	e004      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f56:	bf00      	nop
 8003f58:	e002      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10d      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f66:	4b4a      	ldr	r3, [pc, #296]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6819      	ldr	r1, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	4944      	ldr	r1, [pc, #272]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f82:	7bfb      	ldrb	r3, [r7, #15]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d17d      	bne.n	8004084 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f88:	4b41      	ldr	r3, [pc, #260]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a40      	ldr	r2, [pc, #256]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f94:	f7fc ff68 	bl	8000e68 <HAL_GetTick>
 8003f98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f9a:	e009      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f9c:	f7fc ff64 	bl	8000e68 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d902      	bls.n	8003fb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	73fb      	strb	r3, [r7, #15]
        break;
 8003fae:	e005      	b.n	8003fbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fb0:	4b37      	ldr	r3, [pc, #220]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ef      	bne.n	8003f9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d160      	bne.n	8004084 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d111      	bne.n	8003fec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fc8:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6892      	ldr	r2, [r2, #8]
 8003fd8:	0211      	lsls	r1, r2, #8
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	68d2      	ldr	r2, [r2, #12]
 8003fde:	0912      	lsrs	r2, r2, #4
 8003fe0:	0452      	lsls	r2, r2, #17
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	492a      	ldr	r1, [pc, #168]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	610b      	str	r3, [r1, #16]
 8003fea:	e027      	b.n	800403c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d112      	bne.n	8004018 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ff2:	4b27      	ldr	r3, [pc, #156]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003ffa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	0211      	lsls	r1, r2, #8
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6912      	ldr	r2, [r2, #16]
 8004008:	0852      	lsrs	r2, r2, #1
 800400a:	3a01      	subs	r2, #1
 800400c:	0552      	lsls	r2, r2, #21
 800400e:	430a      	orrs	r2, r1
 8004010:	491f      	ldr	r1, [pc, #124]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	610b      	str	r3, [r1, #16]
 8004016:	e011      	b.n	800403c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004018:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004020:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6892      	ldr	r2, [r2, #8]
 8004028:	0211      	lsls	r1, r2, #8
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6952      	ldr	r2, [r2, #20]
 800402e:	0852      	lsrs	r2, r2, #1
 8004030:	3a01      	subs	r2, #1
 8004032:	0652      	lsls	r2, r2, #25
 8004034:	430a      	orrs	r2, r1
 8004036:	4916      	ldr	r1, [pc, #88]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004038:	4313      	orrs	r3, r2
 800403a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800403c:	4b14      	ldr	r3, [pc, #80]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a13      	ldr	r2, [pc, #76]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004046:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fc ff0e 	bl	8000e68 <HAL_GetTick>
 800404c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800404e:	e009      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004050:	f7fc ff0a 	bl	8000e68 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d902      	bls.n	8004064 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	73fb      	strb	r3, [r7, #15]
          break;
 8004062:	e005      	b.n	8004070 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004064:	4b0a      	ldr	r3, [pc, #40]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ef      	beq.n	8004050 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004076:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	4904      	ldr	r1, [pc, #16]	@ (8004090 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000

08004094 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040a2:	4b6a      	ldr	r3, [pc, #424]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d018      	beq.n	80040e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040ae:	4b67      	ldr	r3, [pc, #412]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0203 	and.w	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d10d      	bne.n	80040da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
       ||
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040c6:	4b61      	ldr	r3, [pc, #388]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
       ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d047      	beq.n	800416a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
 80040de:	e044      	b.n	800416a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d018      	beq.n	800411a <RCCEx_PLLSAI2_Config+0x86>
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d825      	bhi.n	8004138 <RCCEx_PLLSAI2_Config+0xa4>
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d002      	beq.n	80040f6 <RCCEx_PLLSAI2_Config+0x62>
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d009      	beq.n	8004108 <RCCEx_PLLSAI2_Config+0x74>
 80040f4:	e020      	b.n	8004138 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040f6:	4b55      	ldr	r3, [pc, #340]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d11d      	bne.n	800413e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004106:	e01a      	b.n	800413e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004108:	4b50      	ldr	r3, [pc, #320]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004110:	2b00      	cmp	r3, #0
 8004112:	d116      	bne.n	8004142 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004118:	e013      	b.n	8004142 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800411a:	4b4c      	ldr	r3, [pc, #304]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004126:	4b49      	ldr	r3, [pc, #292]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004136:	e006      	b.n	8004146 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      break;
 800413c:	e004      	b.n	8004148 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800413e:	bf00      	nop
 8004140:	e002      	b.n	8004148 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004142:	bf00      	nop
 8004144:	e000      	b.n	8004148 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004146:	bf00      	nop
    }

    if(status == HAL_OK)
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10d      	bne.n	800416a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800414e:	4b3f      	ldr	r3, [pc, #252]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6819      	ldr	r1, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	3b01      	subs	r3, #1
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	430b      	orrs	r3, r1
 8004164:	4939      	ldr	r1, [pc, #228]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004166:	4313      	orrs	r3, r2
 8004168:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d167      	bne.n	8004240 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004170:	4b36      	ldr	r3, [pc, #216]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a35      	ldr	r2, [pc, #212]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004176:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800417a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417c:	f7fc fe74 	bl	8000e68 <HAL_GetTick>
 8004180:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004182:	e009      	b.n	8004198 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004184:	f7fc fe70 	bl	8000e68 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d902      	bls.n	8004198 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	73fb      	strb	r3, [r7, #15]
        break;
 8004196:	e005      	b.n	80041a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004198:	4b2c      	ldr	r3, [pc, #176]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ef      	bne.n	8004184 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d14a      	bne.n	8004240 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d111      	bne.n	80041d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041b0:	4b26      	ldr	r3, [pc, #152]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6892      	ldr	r2, [r2, #8]
 80041c0:	0211      	lsls	r1, r2, #8
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68d2      	ldr	r2, [r2, #12]
 80041c6:	0912      	lsrs	r2, r2, #4
 80041c8:	0452      	lsls	r2, r2, #17
 80041ca:	430a      	orrs	r2, r1
 80041cc:	491f      	ldr	r1, [pc, #124]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	614b      	str	r3, [r1, #20]
 80041d2:	e011      	b.n	80041f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041d4:	4b1d      	ldr	r3, [pc, #116]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6892      	ldr	r2, [r2, #8]
 80041e4:	0211      	lsls	r1, r2, #8
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6912      	ldr	r2, [r2, #16]
 80041ea:	0852      	lsrs	r2, r2, #1
 80041ec:	3a01      	subs	r2, #1
 80041ee:	0652      	lsls	r2, r2, #25
 80041f0:	430a      	orrs	r2, r1
 80041f2:	4916      	ldr	r1, [pc, #88]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041f8:	4b14      	ldr	r3, [pc, #80]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a13      	ldr	r2, [pc, #76]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004202:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004204:	f7fc fe30 	bl	8000e68 <HAL_GetTick>
 8004208:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800420a:	e009      	b.n	8004220 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800420c:	f7fc fe2c 	bl	8000e68 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d902      	bls.n	8004220 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	73fb      	strb	r3, [r7, #15]
          break;
 800421e:	e005      	b.n	800422c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004220:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0ef      	beq.n	800420c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004232:	4b06      	ldr	r3, [pc, #24]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	4904      	ldr	r1, [pc, #16]	@ (800424c <RCCEx_PLLSAI2_Config+0x1b8>)
 800423c:	4313      	orrs	r3, r2
 800423e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004240:	7bfb      	ldrb	r3, [r7, #15]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000

08004250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e040      	b.n	80042e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc fc12 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	@ 0x24
 800427c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fb6a 	bl	8004970 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f8af 	bl	8004400 <UART_SetConfig>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e01b      	b.n	80042e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fbe9 	bl	8004ab4 <UART_CheckIdleState>
 80042e2:	4603      	mov	r3, r0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	@ 0x28
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004300:	2b20      	cmp	r3, #32
 8004302:	d177      	bne.n	80043f4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Transmit+0x24>
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e070      	b.n	80043f6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2221      	movs	r2, #33	@ 0x21
 8004320:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004322:	f7fc fda1 	bl	8000e68 <HAL_GetTick>
 8004326:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004340:	d108      	bne.n	8004354 <HAL_UART_Transmit+0x68>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d104      	bne.n	8004354 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800434a:	2300      	movs	r3, #0
 800434c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	61bb      	str	r3, [r7, #24]
 8004352:	e003      	b.n	800435c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004358:	2300      	movs	r3, #0
 800435a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800435c:	e02f      	b.n	80043be <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	2180      	movs	r1, #128	@ 0x80
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fc4b 	bl	8004c04 <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e03b      	b.n	80043f6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	881a      	ldrh	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004390:	b292      	uxth	r2, r2
 8004392:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	3302      	adds	r3, #2
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e007      	b.n	80043ac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	3301      	adds	r3, #1
 80043aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1c9      	bne.n	800435e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	2140      	movs	r1, #64	@ 0x40
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fc15 	bl	8004c04 <UART_WaitOnFlagUntilTimeout>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e005      	b.n	80043f6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004404:	b08a      	sub	sp, #40	@ 0x28
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	431a      	orrs	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	431a      	orrs	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	4313      	orrs	r3, r2
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4ba4      	ldr	r3, [pc, #656]	@ (80046c0 <UART_SetConfig+0x2c0>)
 8004430:	4013      	ands	r3, r2
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004438:	430b      	orrs	r3, r1
 800443a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	68da      	ldr	r2, [r3, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a99      	ldr	r2, [pc, #612]	@ (80046c4 <UART_SetConfig+0x2c4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004468:	4313      	orrs	r3, r2
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800447c:	430a      	orrs	r2, r1
 800447e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a90      	ldr	r2, [pc, #576]	@ (80046c8 <UART_SetConfig+0x2c8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d126      	bne.n	80044d8 <UART_SetConfig+0xd8>
 800448a:	4b90      	ldr	r3, [pc, #576]	@ (80046cc <UART_SetConfig+0x2cc>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b03      	cmp	r3, #3
 8004496:	d81b      	bhi.n	80044d0 <UART_SetConfig+0xd0>
 8004498:	a201      	add	r2, pc, #4	@ (adr r2, 80044a0 <UART_SetConfig+0xa0>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044b1 	.word	0x080044b1
 80044a4:	080044c1 	.word	0x080044c1
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044c9 	.word	0x080044c9
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b6:	e116      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044be:	e112      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c6:	e10e      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80044c8:	2308      	movs	r3, #8
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ce:	e10a      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d6:	e106      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a7c      	ldr	r2, [pc, #496]	@ (80046d0 <UART_SetConfig+0x2d0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d138      	bne.n	8004554 <UART_SetConfig+0x154>
 80044e2:	4b7a      	ldr	r3, [pc, #488]	@ (80046cc <UART_SetConfig+0x2cc>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	d82d      	bhi.n	800454c <UART_SetConfig+0x14c>
 80044f0:	a201      	add	r2, pc, #4	@ (adr r2, 80044f8 <UART_SetConfig+0xf8>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	0800454d 	.word	0x0800454d
 8004500:	0800454d 	.word	0x0800454d
 8004504:	0800454d 	.word	0x0800454d
 8004508:	0800453d 	.word	0x0800453d
 800450c:	0800454d 	.word	0x0800454d
 8004510:	0800454d 	.word	0x0800454d
 8004514:	0800454d 	.word	0x0800454d
 8004518:	08004535 	.word	0x08004535
 800451c:	0800454d 	.word	0x0800454d
 8004520:	0800454d 	.word	0x0800454d
 8004524:	0800454d 	.word	0x0800454d
 8004528:	08004545 	.word	0x08004545
 800452c:	2300      	movs	r3, #0
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004532:	e0d8      	b.n	80046e6 <UART_SetConfig+0x2e6>
 8004534:	2302      	movs	r3, #2
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453a:	e0d4      	b.n	80046e6 <UART_SetConfig+0x2e6>
 800453c:	2304      	movs	r3, #4
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004542:	e0d0      	b.n	80046e6 <UART_SetConfig+0x2e6>
 8004544:	2308      	movs	r3, #8
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454a:	e0cc      	b.n	80046e6 <UART_SetConfig+0x2e6>
 800454c:	2310      	movs	r3, #16
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004552:	e0c8      	b.n	80046e6 <UART_SetConfig+0x2e6>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5e      	ldr	r2, [pc, #376]	@ (80046d4 <UART_SetConfig+0x2d4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d125      	bne.n	80045aa <UART_SetConfig+0x1aa>
 800455e:	4b5b      	ldr	r3, [pc, #364]	@ (80046cc <UART_SetConfig+0x2cc>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004564:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004568:	2b30      	cmp	r3, #48	@ 0x30
 800456a:	d016      	beq.n	800459a <UART_SetConfig+0x19a>
 800456c:	2b30      	cmp	r3, #48	@ 0x30
 800456e:	d818      	bhi.n	80045a2 <UART_SetConfig+0x1a2>
 8004570:	2b20      	cmp	r3, #32
 8004572:	d00a      	beq.n	800458a <UART_SetConfig+0x18a>
 8004574:	2b20      	cmp	r3, #32
 8004576:	d814      	bhi.n	80045a2 <UART_SetConfig+0x1a2>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <UART_SetConfig+0x182>
 800457c:	2b10      	cmp	r3, #16
 800457e:	d008      	beq.n	8004592 <UART_SetConfig+0x192>
 8004580:	e00f      	b.n	80045a2 <UART_SetConfig+0x1a2>
 8004582:	2300      	movs	r3, #0
 8004584:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004588:	e0ad      	b.n	80046e6 <UART_SetConfig+0x2e6>
 800458a:	2302      	movs	r3, #2
 800458c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004590:	e0a9      	b.n	80046e6 <UART_SetConfig+0x2e6>
 8004592:	2304      	movs	r3, #4
 8004594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004598:	e0a5      	b.n	80046e6 <UART_SetConfig+0x2e6>
 800459a:	2308      	movs	r3, #8
 800459c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a0:	e0a1      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80045a2:	2310      	movs	r3, #16
 80045a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a8:	e09d      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a4a      	ldr	r2, [pc, #296]	@ (80046d8 <UART_SetConfig+0x2d8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d125      	bne.n	8004600 <UART_SetConfig+0x200>
 80045b4:	4b45      	ldr	r3, [pc, #276]	@ (80046cc <UART_SetConfig+0x2cc>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045be:	2bc0      	cmp	r3, #192	@ 0xc0
 80045c0:	d016      	beq.n	80045f0 <UART_SetConfig+0x1f0>
 80045c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80045c4:	d818      	bhi.n	80045f8 <UART_SetConfig+0x1f8>
 80045c6:	2b80      	cmp	r3, #128	@ 0x80
 80045c8:	d00a      	beq.n	80045e0 <UART_SetConfig+0x1e0>
 80045ca:	2b80      	cmp	r3, #128	@ 0x80
 80045cc:	d814      	bhi.n	80045f8 <UART_SetConfig+0x1f8>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <UART_SetConfig+0x1d8>
 80045d2:	2b40      	cmp	r3, #64	@ 0x40
 80045d4:	d008      	beq.n	80045e8 <UART_SetConfig+0x1e8>
 80045d6:	e00f      	b.n	80045f8 <UART_SetConfig+0x1f8>
 80045d8:	2300      	movs	r3, #0
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e082      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80045e0:	2302      	movs	r3, #2
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e6:	e07e      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80045e8:	2304      	movs	r3, #4
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ee:	e07a      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80045f0:	2308      	movs	r3, #8
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e076      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80045f8:	2310      	movs	r3, #16
 80045fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045fe:	e072      	b.n	80046e6 <UART_SetConfig+0x2e6>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a35      	ldr	r2, [pc, #212]	@ (80046dc <UART_SetConfig+0x2dc>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d12a      	bne.n	8004660 <UART_SetConfig+0x260>
 800460a:	4b30      	ldr	r3, [pc, #192]	@ (80046cc <UART_SetConfig+0x2cc>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004614:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004618:	d01a      	beq.n	8004650 <UART_SetConfig+0x250>
 800461a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800461e:	d81b      	bhi.n	8004658 <UART_SetConfig+0x258>
 8004620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004624:	d00c      	beq.n	8004640 <UART_SetConfig+0x240>
 8004626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800462a:	d815      	bhi.n	8004658 <UART_SetConfig+0x258>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <UART_SetConfig+0x238>
 8004630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004634:	d008      	beq.n	8004648 <UART_SetConfig+0x248>
 8004636:	e00f      	b.n	8004658 <UART_SetConfig+0x258>
 8004638:	2300      	movs	r3, #0
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463e:	e052      	b.n	80046e6 <UART_SetConfig+0x2e6>
 8004640:	2302      	movs	r3, #2
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004646:	e04e      	b.n	80046e6 <UART_SetConfig+0x2e6>
 8004648:	2304      	movs	r3, #4
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464e:	e04a      	b.n	80046e6 <UART_SetConfig+0x2e6>
 8004650:	2308      	movs	r3, #8
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004656:	e046      	b.n	80046e6 <UART_SetConfig+0x2e6>
 8004658:	2310      	movs	r3, #16
 800465a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800465e:	e042      	b.n	80046e6 <UART_SetConfig+0x2e6>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a17      	ldr	r2, [pc, #92]	@ (80046c4 <UART_SetConfig+0x2c4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d13a      	bne.n	80046e0 <UART_SetConfig+0x2e0>
 800466a:	4b18      	ldr	r3, [pc, #96]	@ (80046cc <UART_SetConfig+0x2cc>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004670:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004674:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004678:	d01a      	beq.n	80046b0 <UART_SetConfig+0x2b0>
 800467a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800467e:	d81b      	bhi.n	80046b8 <UART_SetConfig+0x2b8>
 8004680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004684:	d00c      	beq.n	80046a0 <UART_SetConfig+0x2a0>
 8004686:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800468a:	d815      	bhi.n	80046b8 <UART_SetConfig+0x2b8>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <UART_SetConfig+0x298>
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004694:	d008      	beq.n	80046a8 <UART_SetConfig+0x2a8>
 8004696:	e00f      	b.n	80046b8 <UART_SetConfig+0x2b8>
 8004698:	2300      	movs	r3, #0
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469e:	e022      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80046a0:	2302      	movs	r3, #2
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a6:	e01e      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80046a8:	2304      	movs	r3, #4
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ae:	e01a      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80046b0:	2308      	movs	r3, #8
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b6:	e016      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80046b8:	2310      	movs	r3, #16
 80046ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046be:	e012      	b.n	80046e6 <UART_SetConfig+0x2e6>
 80046c0:	efff69f3 	.word	0xefff69f3
 80046c4:	40008000 	.word	0x40008000
 80046c8:	40013800 	.word	0x40013800
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40004400 	.word	0x40004400
 80046d4:	40004800 	.word	0x40004800
 80046d8:	40004c00 	.word	0x40004c00
 80046dc:	40005000 	.word	0x40005000
 80046e0:	2310      	movs	r3, #16
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a9f      	ldr	r2, [pc, #636]	@ (8004968 <UART_SetConfig+0x568>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d17a      	bne.n	80047e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d824      	bhi.n	8004742 <UART_SetConfig+0x342>
 80046f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <UART_SetConfig+0x300>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004725 	.word	0x08004725
 8004704:	08004743 	.word	0x08004743
 8004708:	0800472d 	.word	0x0800472d
 800470c:	08004743 	.word	0x08004743
 8004710:	08004733 	.word	0x08004733
 8004714:	08004743 	.word	0x08004743
 8004718:	08004743 	.word	0x08004743
 800471c:	08004743 	.word	0x08004743
 8004720:	0800473b 	.word	0x0800473b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004724:	f7ff f84c 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8004728:	61f8      	str	r0, [r7, #28]
        break;
 800472a:	e010      	b.n	800474e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800472c:	4b8f      	ldr	r3, [pc, #572]	@ (800496c <UART_SetConfig+0x56c>)
 800472e:	61fb      	str	r3, [r7, #28]
        break;
 8004730:	e00d      	b.n	800474e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004732:	f7fe ffad 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 8004736:	61f8      	str	r0, [r7, #28]
        break;
 8004738:	e009      	b.n	800474e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800473e:	61fb      	str	r3, [r7, #28]
        break;
 8004740:	e005      	b.n	800474e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800474c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80fb 	beq.w	800494c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	4413      	add	r3, r2
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	429a      	cmp	r2, r3
 8004764:	d305      	bcc.n	8004772 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	429a      	cmp	r2, r3
 8004770:	d903      	bls.n	800477a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004778:	e0e8      	b.n	800494c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2200      	movs	r2, #0
 800477e:	461c      	mov	r4, r3
 8004780:	4615      	mov	r5, r2
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	022b      	lsls	r3, r5, #8
 800478c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004790:	0222      	lsls	r2, r4, #8
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	6849      	ldr	r1, [r1, #4]
 8004796:	0849      	lsrs	r1, r1, #1
 8004798:	2000      	movs	r0, #0
 800479a:	4688      	mov	r8, r1
 800479c:	4681      	mov	r9, r0
 800479e:	eb12 0a08 	adds.w	sl, r2, r8
 80047a2:	eb43 0b09 	adc.w	fp, r3, r9
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	603b      	str	r3, [r7, #0]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b4:	4650      	mov	r0, sl
 80047b6:	4659      	mov	r1, fp
 80047b8:	f7fb fd5a 	bl	8000270 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4613      	mov	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ca:	d308      	bcc.n	80047de <UART_SetConfig+0x3de>
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d2:	d204      	bcs.n	80047de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	60da      	str	r2, [r3, #12]
 80047dc:	e0b6      	b.n	800494c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047e4:	e0b2      	b.n	800494c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ee:	d15e      	bne.n	80048ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d828      	bhi.n	800484a <UART_SetConfig+0x44a>
 80047f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004800 <UART_SetConfig+0x400>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004825 	.word	0x08004825
 8004804:	0800482d 	.word	0x0800482d
 8004808:	08004835 	.word	0x08004835
 800480c:	0800484b 	.word	0x0800484b
 8004810:	0800483b 	.word	0x0800483b
 8004814:	0800484b 	.word	0x0800484b
 8004818:	0800484b 	.word	0x0800484b
 800481c:	0800484b 	.word	0x0800484b
 8004820:	08004843 	.word	0x08004843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004824:	f7fe ffcc 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 8004828:	61f8      	str	r0, [r7, #28]
        break;
 800482a:	e014      	b.n	8004856 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800482c:	f7fe ffde 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8004830:	61f8      	str	r0, [r7, #28]
        break;
 8004832:	e010      	b.n	8004856 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004834:	4b4d      	ldr	r3, [pc, #308]	@ (800496c <UART_SetConfig+0x56c>)
 8004836:	61fb      	str	r3, [r7, #28]
        break;
 8004838:	e00d      	b.n	8004856 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483a:	f7fe ff29 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800483e:	61f8      	str	r0, [r7, #28]
        break;
 8004840:	e009      	b.n	8004856 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004846:	61fb      	str	r3, [r7, #28]
        break;
 8004848:	e005      	b.n	8004856 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d077      	beq.n	800494c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005a      	lsls	r2, r3, #1
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	441a      	add	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b0f      	cmp	r3, #15
 8004876:	d916      	bls.n	80048a6 <UART_SetConfig+0x4a6>
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800487e:	d212      	bcs.n	80048a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f023 030f 	bic.w	r3, r3, #15
 8004888:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	b29a      	uxth	r2, r3
 8004896:	8afb      	ldrh	r3, [r7, #22]
 8004898:	4313      	orrs	r3, r2
 800489a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	8afa      	ldrh	r2, [r7, #22]
 80048a2:	60da      	str	r2, [r3, #12]
 80048a4:	e052      	b.n	800494c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048ac:	e04e      	b.n	800494c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d827      	bhi.n	8004906 <UART_SetConfig+0x506>
 80048b6:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <UART_SetConfig+0x4bc>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048e1 	.word	0x080048e1
 80048c0:	080048e9 	.word	0x080048e9
 80048c4:	080048f1 	.word	0x080048f1
 80048c8:	08004907 	.word	0x08004907
 80048cc:	080048f7 	.word	0x080048f7
 80048d0:	08004907 	.word	0x08004907
 80048d4:	08004907 	.word	0x08004907
 80048d8:	08004907 	.word	0x08004907
 80048dc:	080048ff 	.word	0x080048ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e0:	f7fe ff6e 	bl	80037c0 <HAL_RCC_GetPCLK1Freq>
 80048e4:	61f8      	str	r0, [r7, #28]
        break;
 80048e6:	e014      	b.n	8004912 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048e8:	f7fe ff80 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 80048ec:	61f8      	str	r0, [r7, #28]
        break;
 80048ee:	e010      	b.n	8004912 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f0:	4b1e      	ldr	r3, [pc, #120]	@ (800496c <UART_SetConfig+0x56c>)
 80048f2:	61fb      	str	r3, [r7, #28]
        break;
 80048f4:	e00d      	b.n	8004912 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f6:	f7fe fecb 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 80048fa:	61f8      	str	r0, [r7, #28]
        break;
 80048fc:	e009      	b.n	8004912 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004902:	61fb      	str	r3, [r7, #28]
        break;
 8004904:	e005      	b.n	8004912 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004910:	bf00      	nop
    }

    if (pclk != 0U)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d019      	beq.n	800494c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	085a      	lsrs	r2, r3, #1
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	441a      	add	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	fbb2 f3f3 	udiv	r3, r2, r3
 800492a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2b0f      	cmp	r3, #15
 8004930:	d909      	bls.n	8004946 <UART_SetConfig+0x546>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004938:	d205      	bcs.n	8004946 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	e002      	b.n	800494c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004958:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800495c:	4618      	mov	r0, r3
 800495e:	3728      	adds	r7, #40	@ 0x28
 8004960:	46bd      	mov	sp, r7
 8004962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004966:	bf00      	nop
 8004968:	40008000 	.word	0x40008000
 800496c:	00f42400 	.word	0x00f42400

08004970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a6e:	d10a      	bne.n	8004a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b098      	sub	sp, #96	@ 0x60
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ac4:	f7fc f9d0 	bl	8000e68 <HAL_GetTick>
 8004ac8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d12e      	bne.n	8004b36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f88c 	bl	8004c04 <UART_WaitOnFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d021      	beq.n	8004b36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e6      	bne.n	8004af2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e062      	b.n	8004bfc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d149      	bne.n	8004bd8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f856 	bl	8004c04 <UART_WaitOnFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d03c      	beq.n	8004bd8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e6      	bne.n	8004b5e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3308      	adds	r3, #8
 8004b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0301 	bic.w	r3, r3, #1
 8004ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3308      	adds	r3, #8
 8004bae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bb0:	61fa      	str	r2, [r7, #28]
 8004bb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	69b9      	ldr	r1, [r7, #24]
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e5      	bne.n	8004b90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e011      	b.n	8004bfc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2220      	movs	r2, #32
 8004be2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3758      	adds	r7, #88	@ 0x58
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c14:	e04f      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d04b      	beq.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fc f923 	bl	8000e68 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e04e      	b.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d037      	beq.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2b80      	cmp	r3, #128	@ 0x80
 8004c4a:	d034      	beq.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b40      	cmp	r3, #64	@ 0x40
 8004c50:	d031      	beq.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d110      	bne.n	8004c82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2208      	movs	r2, #8
 8004c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f838 	bl	8004cde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2208      	movs	r2, #8
 8004c72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e029      	b.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c90:	d111      	bne.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f81e 	bl	8004cde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e00f      	b.n	8004cd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	bf0c      	ite	eq
 8004cc6:	2301      	moveq	r3, #1
 8004cc8:	2300      	movne	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d0a0      	beq.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b095      	sub	sp, #84	@ 0x54
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d06:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e6      	bne.n	8004ce6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3308      	adds	r3, #8
 8004d36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d118      	bne.n	8004d86 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f023 0310 	bic.w	r3, r3, #16
 8004d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d72:	61bb      	str	r3, [r7, #24]
 8004d74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6979      	ldr	r1, [r7, #20]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e6      	bne.n	8004d54 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d9a:	bf00      	nop
 8004d9c:	3754      	adds	r7, #84	@ 0x54
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <std>:
 8004da8:	2300      	movs	r3, #0
 8004daa:	b510      	push	{r4, lr}
 8004dac:	4604      	mov	r4, r0
 8004dae:	e9c0 3300 	strd	r3, r3, [r0]
 8004db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004db6:	6083      	str	r3, [r0, #8]
 8004db8:	8181      	strh	r1, [r0, #12]
 8004dba:	6643      	str	r3, [r0, #100]	@ 0x64
 8004dbc:	81c2      	strh	r2, [r0, #14]
 8004dbe:	6183      	str	r3, [r0, #24]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	305c      	adds	r0, #92	@ 0x5c
 8004dc6:	f000 f906 	bl	8004fd6 <memset>
 8004dca:	4b0d      	ldr	r3, [pc, #52]	@ (8004e00 <std+0x58>)
 8004dcc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004dce:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <std+0x5c>)
 8004dd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <std+0x60>)
 8004dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e0c <std+0x64>)
 8004dd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dda:	4b0d      	ldr	r3, [pc, #52]	@ (8004e10 <std+0x68>)
 8004ddc:	6224      	str	r4, [r4, #32]
 8004dde:	429c      	cmp	r4, r3
 8004de0:	d006      	beq.n	8004df0 <std+0x48>
 8004de2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004de6:	4294      	cmp	r4, r2
 8004de8:	d002      	beq.n	8004df0 <std+0x48>
 8004dea:	33d0      	adds	r3, #208	@ 0xd0
 8004dec:	429c      	cmp	r4, r3
 8004dee:	d105      	bne.n	8004dfc <std+0x54>
 8004df0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df8:	f000 b966 	b.w	80050c8 <__retarget_lock_init_recursive>
 8004dfc:	bd10      	pop	{r4, pc}
 8004dfe:	bf00      	nop
 8004e00:	08004f51 	.word	0x08004f51
 8004e04:	08004f73 	.word	0x08004f73
 8004e08:	08004fab 	.word	0x08004fab
 8004e0c:	08004fcf 	.word	0x08004fcf
 8004e10:	200001c4 	.word	0x200001c4

08004e14 <stdio_exit_handler>:
 8004e14:	4a02      	ldr	r2, [pc, #8]	@ (8004e20 <stdio_exit_handler+0xc>)
 8004e16:	4903      	ldr	r1, [pc, #12]	@ (8004e24 <stdio_exit_handler+0x10>)
 8004e18:	4803      	ldr	r0, [pc, #12]	@ (8004e28 <stdio_exit_handler+0x14>)
 8004e1a:	f000 b869 	b.w	8004ef0 <_fwalk_sglue>
 8004e1e:	bf00      	nop
 8004e20:	2000000c 	.word	0x2000000c
 8004e24:	08005965 	.word	0x08005965
 8004e28:	2000001c 	.word	0x2000001c

08004e2c <cleanup_stdio>:
 8004e2c:	6841      	ldr	r1, [r0, #4]
 8004e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e60 <cleanup_stdio+0x34>)
 8004e30:	4299      	cmp	r1, r3
 8004e32:	b510      	push	{r4, lr}
 8004e34:	4604      	mov	r4, r0
 8004e36:	d001      	beq.n	8004e3c <cleanup_stdio+0x10>
 8004e38:	f000 fd94 	bl	8005964 <_fflush_r>
 8004e3c:	68a1      	ldr	r1, [r4, #8]
 8004e3e:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <cleanup_stdio+0x38>)
 8004e40:	4299      	cmp	r1, r3
 8004e42:	d002      	beq.n	8004e4a <cleanup_stdio+0x1e>
 8004e44:	4620      	mov	r0, r4
 8004e46:	f000 fd8d 	bl	8005964 <_fflush_r>
 8004e4a:	68e1      	ldr	r1, [r4, #12]
 8004e4c:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <cleanup_stdio+0x3c>)
 8004e4e:	4299      	cmp	r1, r3
 8004e50:	d004      	beq.n	8004e5c <cleanup_stdio+0x30>
 8004e52:	4620      	mov	r0, r4
 8004e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e58:	f000 bd84 	b.w	8005964 <_fflush_r>
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	bf00      	nop
 8004e60:	200001c4 	.word	0x200001c4
 8004e64:	2000022c 	.word	0x2000022c
 8004e68:	20000294 	.word	0x20000294

08004e6c <global_stdio_init.part.0>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e9c <global_stdio_init.part.0+0x30>)
 8004e70:	4c0b      	ldr	r4, [pc, #44]	@ (8004ea0 <global_stdio_init.part.0+0x34>)
 8004e72:	4a0c      	ldr	r2, [pc, #48]	@ (8004ea4 <global_stdio_init.part.0+0x38>)
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	4620      	mov	r0, r4
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	f7ff ff94 	bl	8004da8 <std>
 8004e80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e84:	2201      	movs	r2, #1
 8004e86:	2109      	movs	r1, #9
 8004e88:	f7ff ff8e 	bl	8004da8 <std>
 8004e8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e90:	2202      	movs	r2, #2
 8004e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e96:	2112      	movs	r1, #18
 8004e98:	f7ff bf86 	b.w	8004da8 <std>
 8004e9c:	200002fc 	.word	0x200002fc
 8004ea0:	200001c4 	.word	0x200001c4
 8004ea4:	08004e15 	.word	0x08004e15

08004ea8 <__sfp_lock_acquire>:
 8004ea8:	4801      	ldr	r0, [pc, #4]	@ (8004eb0 <__sfp_lock_acquire+0x8>)
 8004eaa:	f000 b90e 	b.w	80050ca <__retarget_lock_acquire_recursive>
 8004eae:	bf00      	nop
 8004eb0:	20000305 	.word	0x20000305

08004eb4 <__sfp_lock_release>:
 8004eb4:	4801      	ldr	r0, [pc, #4]	@ (8004ebc <__sfp_lock_release+0x8>)
 8004eb6:	f000 b909 	b.w	80050cc <__retarget_lock_release_recursive>
 8004eba:	bf00      	nop
 8004ebc:	20000305 	.word	0x20000305

08004ec0 <__sinit>:
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	f7ff fff0 	bl	8004ea8 <__sfp_lock_acquire>
 8004ec8:	6a23      	ldr	r3, [r4, #32]
 8004eca:	b11b      	cbz	r3, 8004ed4 <__sinit+0x14>
 8004ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed0:	f7ff bff0 	b.w	8004eb4 <__sfp_lock_release>
 8004ed4:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <__sinit+0x28>)
 8004ed6:	6223      	str	r3, [r4, #32]
 8004ed8:	4b04      	ldr	r3, [pc, #16]	@ (8004eec <__sinit+0x2c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f5      	bne.n	8004ecc <__sinit+0xc>
 8004ee0:	f7ff ffc4 	bl	8004e6c <global_stdio_init.part.0>
 8004ee4:	e7f2      	b.n	8004ecc <__sinit+0xc>
 8004ee6:	bf00      	nop
 8004ee8:	08004e2d 	.word	0x08004e2d
 8004eec:	200002fc 	.word	0x200002fc

08004ef0 <_fwalk_sglue>:
 8004ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef4:	4607      	mov	r7, r0
 8004ef6:	4688      	mov	r8, r1
 8004ef8:	4614      	mov	r4, r2
 8004efa:	2600      	movs	r6, #0
 8004efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f00:	f1b9 0901 	subs.w	r9, r9, #1
 8004f04:	d505      	bpl.n	8004f12 <_fwalk_sglue+0x22>
 8004f06:	6824      	ldr	r4, [r4, #0]
 8004f08:	2c00      	cmp	r4, #0
 8004f0a:	d1f7      	bne.n	8004efc <_fwalk_sglue+0xc>
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f12:	89ab      	ldrh	r3, [r5, #12]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d907      	bls.n	8004f28 <_fwalk_sglue+0x38>
 8004f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	d003      	beq.n	8004f28 <_fwalk_sglue+0x38>
 8004f20:	4629      	mov	r1, r5
 8004f22:	4638      	mov	r0, r7
 8004f24:	47c0      	blx	r8
 8004f26:	4306      	orrs	r6, r0
 8004f28:	3568      	adds	r5, #104	@ 0x68
 8004f2a:	e7e9      	b.n	8004f00 <_fwalk_sglue+0x10>

08004f2c <iprintf>:
 8004f2c:	b40f      	push	{r0, r1, r2, r3}
 8004f2e:	b507      	push	{r0, r1, r2, lr}
 8004f30:	4906      	ldr	r1, [pc, #24]	@ (8004f4c <iprintf+0x20>)
 8004f32:	ab04      	add	r3, sp, #16
 8004f34:	6808      	ldr	r0, [r1, #0]
 8004f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f3a:	6881      	ldr	r1, [r0, #8]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f000 f9e9 	bl	8005314 <_vfiprintf_r>
 8004f42:	b003      	add	sp, #12
 8004f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f48:	b004      	add	sp, #16
 8004f4a:	4770      	bx	lr
 8004f4c:	20000018 	.word	0x20000018

08004f50 <__sread>:
 8004f50:	b510      	push	{r4, lr}
 8004f52:	460c      	mov	r4, r1
 8004f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f58:	f000 f868 	bl	800502c <_read_r>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	bfab      	itete	ge
 8004f60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f62:	89a3      	ldrhlt	r3, [r4, #12]
 8004f64:	181b      	addge	r3, r3, r0
 8004f66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f6a:	bfac      	ite	ge
 8004f6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f6e:	81a3      	strhlt	r3, [r4, #12]
 8004f70:	bd10      	pop	{r4, pc}

08004f72 <__swrite>:
 8004f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f76:	461f      	mov	r7, r3
 8004f78:	898b      	ldrh	r3, [r1, #12]
 8004f7a:	05db      	lsls	r3, r3, #23
 8004f7c:	4605      	mov	r5, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	4616      	mov	r6, r2
 8004f82:	d505      	bpl.n	8004f90 <__swrite+0x1e>
 8004f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f88:	2302      	movs	r3, #2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f000 f83c 	bl	8005008 <_lseek_r>
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f9a:	81a3      	strh	r3, [r4, #12]
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa6:	f000 b853 	b.w	8005050 <_write_r>

08004faa <__sseek>:
 8004faa:	b510      	push	{r4, lr}
 8004fac:	460c      	mov	r4, r1
 8004fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb2:	f000 f829 	bl	8005008 <_lseek_r>
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	bf15      	itete	ne
 8004fbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004fbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004fc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004fc6:	81a3      	strheq	r3, [r4, #12]
 8004fc8:	bf18      	it	ne
 8004fca:	81a3      	strhne	r3, [r4, #12]
 8004fcc:	bd10      	pop	{r4, pc}

08004fce <__sclose>:
 8004fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd2:	f000 b809 	b.w	8004fe8 <_close_r>

08004fd6 <memset>:
 8004fd6:	4402      	add	r2, r0
 8004fd8:	4603      	mov	r3, r0
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d100      	bne.n	8004fe0 <memset+0xa>
 8004fde:	4770      	bx	lr
 8004fe0:	f803 1b01 	strb.w	r1, [r3], #1
 8004fe4:	e7f9      	b.n	8004fda <memset+0x4>
	...

08004fe8 <_close_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4d06      	ldr	r5, [pc, #24]	@ (8005004 <_close_r+0x1c>)
 8004fec:	2300      	movs	r3, #0
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	602b      	str	r3, [r5, #0]
 8004ff4:	f7fb fe21 	bl	8000c3a <_close>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d102      	bne.n	8005002 <_close_r+0x1a>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	b103      	cbz	r3, 8005002 <_close_r+0x1a>
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	20000300 	.word	0x20000300

08005008 <_lseek_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4d07      	ldr	r5, [pc, #28]	@ (8005028 <_lseek_r+0x20>)
 800500c:	4604      	mov	r4, r0
 800500e:	4608      	mov	r0, r1
 8005010:	4611      	mov	r1, r2
 8005012:	2200      	movs	r2, #0
 8005014:	602a      	str	r2, [r5, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	f7fb fe36 	bl	8000c88 <_lseek>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_lseek_r+0x1e>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	b103      	cbz	r3, 8005026 <_lseek_r+0x1e>
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	20000300 	.word	0x20000300

0800502c <_read_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4d07      	ldr	r5, [pc, #28]	@ (800504c <_read_r+0x20>)
 8005030:	4604      	mov	r4, r0
 8005032:	4608      	mov	r0, r1
 8005034:	4611      	mov	r1, r2
 8005036:	2200      	movs	r2, #0
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f7fb fdc4 	bl	8000bc8 <_read>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_read_r+0x1e>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	b103      	cbz	r3, 800504a <_read_r+0x1e>
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	20000300 	.word	0x20000300

08005050 <_write_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4d07      	ldr	r5, [pc, #28]	@ (8005070 <_write_r+0x20>)
 8005054:	4604      	mov	r4, r0
 8005056:	4608      	mov	r0, r1
 8005058:	4611      	mov	r1, r2
 800505a:	2200      	movs	r2, #0
 800505c:	602a      	str	r2, [r5, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	f7fb fdcf 	bl	8000c02 <_write>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_write_r+0x1e>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	b103      	cbz	r3, 800506e <_write_r+0x1e>
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	20000300 	.word	0x20000300

08005074 <__errno>:
 8005074:	4b01      	ldr	r3, [pc, #4]	@ (800507c <__errno+0x8>)
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000018 	.word	0x20000018

08005080 <__libc_init_array>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	4d0d      	ldr	r5, [pc, #52]	@ (80050b8 <__libc_init_array+0x38>)
 8005084:	4c0d      	ldr	r4, [pc, #52]	@ (80050bc <__libc_init_array+0x3c>)
 8005086:	1b64      	subs	r4, r4, r5
 8005088:	10a4      	asrs	r4, r4, #2
 800508a:	2600      	movs	r6, #0
 800508c:	42a6      	cmp	r6, r4
 800508e:	d109      	bne.n	80050a4 <__libc_init_array+0x24>
 8005090:	4d0b      	ldr	r5, [pc, #44]	@ (80050c0 <__libc_init_array+0x40>)
 8005092:	4c0c      	ldr	r4, [pc, #48]	@ (80050c4 <__libc_init_array+0x44>)
 8005094:	f000 fdb6 	bl	8005c04 <_init>
 8005098:	1b64      	subs	r4, r4, r5
 800509a:	10a4      	asrs	r4, r4, #2
 800509c:	2600      	movs	r6, #0
 800509e:	42a6      	cmp	r6, r4
 80050a0:	d105      	bne.n	80050ae <__libc_init_array+0x2e>
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a8:	4798      	blx	r3
 80050aa:	3601      	adds	r6, #1
 80050ac:	e7ee      	b.n	800508c <__libc_init_array+0xc>
 80050ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b2:	4798      	blx	r3
 80050b4:	3601      	adds	r6, #1
 80050b6:	e7f2      	b.n	800509e <__libc_init_array+0x1e>
 80050b8:	08005cb4 	.word	0x08005cb4
 80050bc:	08005cb4 	.word	0x08005cb4
 80050c0:	08005cb4 	.word	0x08005cb4
 80050c4:	08005cb8 	.word	0x08005cb8

080050c8 <__retarget_lock_init_recursive>:
 80050c8:	4770      	bx	lr

080050ca <__retarget_lock_acquire_recursive>:
 80050ca:	4770      	bx	lr

080050cc <__retarget_lock_release_recursive>:
 80050cc:	4770      	bx	lr
	...

080050d0 <_free_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	4605      	mov	r5, r0
 80050d4:	2900      	cmp	r1, #0
 80050d6:	d041      	beq.n	800515c <_free_r+0x8c>
 80050d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050dc:	1f0c      	subs	r4, r1, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bfb8      	it	lt
 80050e2:	18e4      	addlt	r4, r4, r3
 80050e4:	f000 f8e0 	bl	80052a8 <__malloc_lock>
 80050e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005160 <_free_r+0x90>)
 80050ea:	6813      	ldr	r3, [r2, #0]
 80050ec:	b933      	cbnz	r3, 80050fc <_free_r+0x2c>
 80050ee:	6063      	str	r3, [r4, #4]
 80050f0:	6014      	str	r4, [r2, #0]
 80050f2:	4628      	mov	r0, r5
 80050f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050f8:	f000 b8dc 	b.w	80052b4 <__malloc_unlock>
 80050fc:	42a3      	cmp	r3, r4
 80050fe:	d908      	bls.n	8005112 <_free_r+0x42>
 8005100:	6820      	ldr	r0, [r4, #0]
 8005102:	1821      	adds	r1, r4, r0
 8005104:	428b      	cmp	r3, r1
 8005106:	bf01      	itttt	eq
 8005108:	6819      	ldreq	r1, [r3, #0]
 800510a:	685b      	ldreq	r3, [r3, #4]
 800510c:	1809      	addeq	r1, r1, r0
 800510e:	6021      	streq	r1, [r4, #0]
 8005110:	e7ed      	b.n	80050ee <_free_r+0x1e>
 8005112:	461a      	mov	r2, r3
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	b10b      	cbz	r3, 800511c <_free_r+0x4c>
 8005118:	42a3      	cmp	r3, r4
 800511a:	d9fa      	bls.n	8005112 <_free_r+0x42>
 800511c:	6811      	ldr	r1, [r2, #0]
 800511e:	1850      	adds	r0, r2, r1
 8005120:	42a0      	cmp	r0, r4
 8005122:	d10b      	bne.n	800513c <_free_r+0x6c>
 8005124:	6820      	ldr	r0, [r4, #0]
 8005126:	4401      	add	r1, r0
 8005128:	1850      	adds	r0, r2, r1
 800512a:	4283      	cmp	r3, r0
 800512c:	6011      	str	r1, [r2, #0]
 800512e:	d1e0      	bne.n	80050f2 <_free_r+0x22>
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	6053      	str	r3, [r2, #4]
 8005136:	4408      	add	r0, r1
 8005138:	6010      	str	r0, [r2, #0]
 800513a:	e7da      	b.n	80050f2 <_free_r+0x22>
 800513c:	d902      	bls.n	8005144 <_free_r+0x74>
 800513e:	230c      	movs	r3, #12
 8005140:	602b      	str	r3, [r5, #0]
 8005142:	e7d6      	b.n	80050f2 <_free_r+0x22>
 8005144:	6820      	ldr	r0, [r4, #0]
 8005146:	1821      	adds	r1, r4, r0
 8005148:	428b      	cmp	r3, r1
 800514a:	bf04      	itt	eq
 800514c:	6819      	ldreq	r1, [r3, #0]
 800514e:	685b      	ldreq	r3, [r3, #4]
 8005150:	6063      	str	r3, [r4, #4]
 8005152:	bf04      	itt	eq
 8005154:	1809      	addeq	r1, r1, r0
 8005156:	6021      	streq	r1, [r4, #0]
 8005158:	6054      	str	r4, [r2, #4]
 800515a:	e7ca      	b.n	80050f2 <_free_r+0x22>
 800515c:	bd38      	pop	{r3, r4, r5, pc}
 800515e:	bf00      	nop
 8005160:	2000030c 	.word	0x2000030c

08005164 <sbrk_aligned>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	4e0f      	ldr	r6, [pc, #60]	@ (80051a4 <sbrk_aligned+0x40>)
 8005168:	460c      	mov	r4, r1
 800516a:	6831      	ldr	r1, [r6, #0]
 800516c:	4605      	mov	r5, r0
 800516e:	b911      	cbnz	r1, 8005176 <sbrk_aligned+0x12>
 8005170:	f000 fcb4 	bl	8005adc <_sbrk_r>
 8005174:	6030      	str	r0, [r6, #0]
 8005176:	4621      	mov	r1, r4
 8005178:	4628      	mov	r0, r5
 800517a:	f000 fcaf 	bl	8005adc <_sbrk_r>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	d103      	bne.n	800518a <sbrk_aligned+0x26>
 8005182:	f04f 34ff 	mov.w	r4, #4294967295
 8005186:	4620      	mov	r0, r4
 8005188:	bd70      	pop	{r4, r5, r6, pc}
 800518a:	1cc4      	adds	r4, r0, #3
 800518c:	f024 0403 	bic.w	r4, r4, #3
 8005190:	42a0      	cmp	r0, r4
 8005192:	d0f8      	beq.n	8005186 <sbrk_aligned+0x22>
 8005194:	1a21      	subs	r1, r4, r0
 8005196:	4628      	mov	r0, r5
 8005198:	f000 fca0 	bl	8005adc <_sbrk_r>
 800519c:	3001      	adds	r0, #1
 800519e:	d1f2      	bne.n	8005186 <sbrk_aligned+0x22>
 80051a0:	e7ef      	b.n	8005182 <sbrk_aligned+0x1e>
 80051a2:	bf00      	nop
 80051a4:	20000308 	.word	0x20000308

080051a8 <_malloc_r>:
 80051a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051ac:	1ccd      	adds	r5, r1, #3
 80051ae:	f025 0503 	bic.w	r5, r5, #3
 80051b2:	3508      	adds	r5, #8
 80051b4:	2d0c      	cmp	r5, #12
 80051b6:	bf38      	it	cc
 80051b8:	250c      	movcc	r5, #12
 80051ba:	2d00      	cmp	r5, #0
 80051bc:	4606      	mov	r6, r0
 80051be:	db01      	blt.n	80051c4 <_malloc_r+0x1c>
 80051c0:	42a9      	cmp	r1, r5
 80051c2:	d904      	bls.n	80051ce <_malloc_r+0x26>
 80051c4:	230c      	movs	r3, #12
 80051c6:	6033      	str	r3, [r6, #0]
 80051c8:	2000      	movs	r0, #0
 80051ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052a4 <_malloc_r+0xfc>
 80051d2:	f000 f869 	bl	80052a8 <__malloc_lock>
 80051d6:	f8d8 3000 	ldr.w	r3, [r8]
 80051da:	461c      	mov	r4, r3
 80051dc:	bb44      	cbnz	r4, 8005230 <_malloc_r+0x88>
 80051de:	4629      	mov	r1, r5
 80051e0:	4630      	mov	r0, r6
 80051e2:	f7ff ffbf 	bl	8005164 <sbrk_aligned>
 80051e6:	1c43      	adds	r3, r0, #1
 80051e8:	4604      	mov	r4, r0
 80051ea:	d158      	bne.n	800529e <_malloc_r+0xf6>
 80051ec:	f8d8 4000 	ldr.w	r4, [r8]
 80051f0:	4627      	mov	r7, r4
 80051f2:	2f00      	cmp	r7, #0
 80051f4:	d143      	bne.n	800527e <_malloc_r+0xd6>
 80051f6:	2c00      	cmp	r4, #0
 80051f8:	d04b      	beq.n	8005292 <_malloc_r+0xea>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	4639      	mov	r1, r7
 80051fe:	4630      	mov	r0, r6
 8005200:	eb04 0903 	add.w	r9, r4, r3
 8005204:	f000 fc6a 	bl	8005adc <_sbrk_r>
 8005208:	4581      	cmp	r9, r0
 800520a:	d142      	bne.n	8005292 <_malloc_r+0xea>
 800520c:	6821      	ldr	r1, [r4, #0]
 800520e:	1a6d      	subs	r5, r5, r1
 8005210:	4629      	mov	r1, r5
 8005212:	4630      	mov	r0, r6
 8005214:	f7ff ffa6 	bl	8005164 <sbrk_aligned>
 8005218:	3001      	adds	r0, #1
 800521a:	d03a      	beq.n	8005292 <_malloc_r+0xea>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	442b      	add	r3, r5
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	f8d8 3000 	ldr.w	r3, [r8]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	bb62      	cbnz	r2, 8005284 <_malloc_r+0xdc>
 800522a:	f8c8 7000 	str.w	r7, [r8]
 800522e:	e00f      	b.n	8005250 <_malloc_r+0xa8>
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	1b52      	subs	r2, r2, r5
 8005234:	d420      	bmi.n	8005278 <_malloc_r+0xd0>
 8005236:	2a0b      	cmp	r2, #11
 8005238:	d917      	bls.n	800526a <_malloc_r+0xc2>
 800523a:	1961      	adds	r1, r4, r5
 800523c:	42a3      	cmp	r3, r4
 800523e:	6025      	str	r5, [r4, #0]
 8005240:	bf18      	it	ne
 8005242:	6059      	strne	r1, [r3, #4]
 8005244:	6863      	ldr	r3, [r4, #4]
 8005246:	bf08      	it	eq
 8005248:	f8c8 1000 	streq.w	r1, [r8]
 800524c:	5162      	str	r2, [r4, r5]
 800524e:	604b      	str	r3, [r1, #4]
 8005250:	4630      	mov	r0, r6
 8005252:	f000 f82f 	bl	80052b4 <__malloc_unlock>
 8005256:	f104 000b 	add.w	r0, r4, #11
 800525a:	1d23      	adds	r3, r4, #4
 800525c:	f020 0007 	bic.w	r0, r0, #7
 8005260:	1ac2      	subs	r2, r0, r3
 8005262:	bf1c      	itt	ne
 8005264:	1a1b      	subne	r3, r3, r0
 8005266:	50a3      	strne	r3, [r4, r2]
 8005268:	e7af      	b.n	80051ca <_malloc_r+0x22>
 800526a:	6862      	ldr	r2, [r4, #4]
 800526c:	42a3      	cmp	r3, r4
 800526e:	bf0c      	ite	eq
 8005270:	f8c8 2000 	streq.w	r2, [r8]
 8005274:	605a      	strne	r2, [r3, #4]
 8005276:	e7eb      	b.n	8005250 <_malloc_r+0xa8>
 8005278:	4623      	mov	r3, r4
 800527a:	6864      	ldr	r4, [r4, #4]
 800527c:	e7ae      	b.n	80051dc <_malloc_r+0x34>
 800527e:	463c      	mov	r4, r7
 8005280:	687f      	ldr	r7, [r7, #4]
 8005282:	e7b6      	b.n	80051f2 <_malloc_r+0x4a>
 8005284:	461a      	mov	r2, r3
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	42a3      	cmp	r3, r4
 800528a:	d1fb      	bne.n	8005284 <_malloc_r+0xdc>
 800528c:	2300      	movs	r3, #0
 800528e:	6053      	str	r3, [r2, #4]
 8005290:	e7de      	b.n	8005250 <_malloc_r+0xa8>
 8005292:	230c      	movs	r3, #12
 8005294:	6033      	str	r3, [r6, #0]
 8005296:	4630      	mov	r0, r6
 8005298:	f000 f80c 	bl	80052b4 <__malloc_unlock>
 800529c:	e794      	b.n	80051c8 <_malloc_r+0x20>
 800529e:	6005      	str	r5, [r0, #0]
 80052a0:	e7d6      	b.n	8005250 <_malloc_r+0xa8>
 80052a2:	bf00      	nop
 80052a4:	2000030c 	.word	0x2000030c

080052a8 <__malloc_lock>:
 80052a8:	4801      	ldr	r0, [pc, #4]	@ (80052b0 <__malloc_lock+0x8>)
 80052aa:	f7ff bf0e 	b.w	80050ca <__retarget_lock_acquire_recursive>
 80052ae:	bf00      	nop
 80052b0:	20000304 	.word	0x20000304

080052b4 <__malloc_unlock>:
 80052b4:	4801      	ldr	r0, [pc, #4]	@ (80052bc <__malloc_unlock+0x8>)
 80052b6:	f7ff bf09 	b.w	80050cc <__retarget_lock_release_recursive>
 80052ba:	bf00      	nop
 80052bc:	20000304 	.word	0x20000304

080052c0 <__sfputc_r>:
 80052c0:	6893      	ldr	r3, [r2, #8]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	b410      	push	{r4}
 80052c8:	6093      	str	r3, [r2, #8]
 80052ca:	da08      	bge.n	80052de <__sfputc_r+0x1e>
 80052cc:	6994      	ldr	r4, [r2, #24]
 80052ce:	42a3      	cmp	r3, r4
 80052d0:	db01      	blt.n	80052d6 <__sfputc_r+0x16>
 80052d2:	290a      	cmp	r1, #10
 80052d4:	d103      	bne.n	80052de <__sfputc_r+0x1e>
 80052d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052da:	f000 bb6b 	b.w	80059b4 <__swbuf_r>
 80052de:	6813      	ldr	r3, [r2, #0]
 80052e0:	1c58      	adds	r0, r3, #1
 80052e2:	6010      	str	r0, [r2, #0]
 80052e4:	7019      	strb	r1, [r3, #0]
 80052e6:	4608      	mov	r0, r1
 80052e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <__sfputs_r>:
 80052ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f0:	4606      	mov	r6, r0
 80052f2:	460f      	mov	r7, r1
 80052f4:	4614      	mov	r4, r2
 80052f6:	18d5      	adds	r5, r2, r3
 80052f8:	42ac      	cmp	r4, r5
 80052fa:	d101      	bne.n	8005300 <__sfputs_r+0x12>
 80052fc:	2000      	movs	r0, #0
 80052fe:	e007      	b.n	8005310 <__sfputs_r+0x22>
 8005300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005304:	463a      	mov	r2, r7
 8005306:	4630      	mov	r0, r6
 8005308:	f7ff ffda 	bl	80052c0 <__sfputc_r>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d1f3      	bne.n	80052f8 <__sfputs_r+0xa>
 8005310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005314 <_vfiprintf_r>:
 8005314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005318:	460d      	mov	r5, r1
 800531a:	b09d      	sub	sp, #116	@ 0x74
 800531c:	4614      	mov	r4, r2
 800531e:	4698      	mov	r8, r3
 8005320:	4606      	mov	r6, r0
 8005322:	b118      	cbz	r0, 800532c <_vfiprintf_r+0x18>
 8005324:	6a03      	ldr	r3, [r0, #32]
 8005326:	b90b      	cbnz	r3, 800532c <_vfiprintf_r+0x18>
 8005328:	f7ff fdca 	bl	8004ec0 <__sinit>
 800532c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800532e:	07d9      	lsls	r1, r3, #31
 8005330:	d405      	bmi.n	800533e <_vfiprintf_r+0x2a>
 8005332:	89ab      	ldrh	r3, [r5, #12]
 8005334:	059a      	lsls	r2, r3, #22
 8005336:	d402      	bmi.n	800533e <_vfiprintf_r+0x2a>
 8005338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800533a:	f7ff fec6 	bl	80050ca <__retarget_lock_acquire_recursive>
 800533e:	89ab      	ldrh	r3, [r5, #12]
 8005340:	071b      	lsls	r3, r3, #28
 8005342:	d501      	bpl.n	8005348 <_vfiprintf_r+0x34>
 8005344:	692b      	ldr	r3, [r5, #16]
 8005346:	b99b      	cbnz	r3, 8005370 <_vfiprintf_r+0x5c>
 8005348:	4629      	mov	r1, r5
 800534a:	4630      	mov	r0, r6
 800534c:	f000 fb70 	bl	8005a30 <__swsetup_r>
 8005350:	b170      	cbz	r0, 8005370 <_vfiprintf_r+0x5c>
 8005352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005354:	07dc      	lsls	r4, r3, #31
 8005356:	d504      	bpl.n	8005362 <_vfiprintf_r+0x4e>
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	b01d      	add	sp, #116	@ 0x74
 800535e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005362:	89ab      	ldrh	r3, [r5, #12]
 8005364:	0598      	lsls	r0, r3, #22
 8005366:	d4f7      	bmi.n	8005358 <_vfiprintf_r+0x44>
 8005368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800536a:	f7ff feaf 	bl	80050cc <__retarget_lock_release_recursive>
 800536e:	e7f3      	b.n	8005358 <_vfiprintf_r+0x44>
 8005370:	2300      	movs	r3, #0
 8005372:	9309      	str	r3, [sp, #36]	@ 0x24
 8005374:	2320      	movs	r3, #32
 8005376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800537a:	f8cd 800c 	str.w	r8, [sp, #12]
 800537e:	2330      	movs	r3, #48	@ 0x30
 8005380:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005530 <_vfiprintf_r+0x21c>
 8005384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005388:	f04f 0901 	mov.w	r9, #1
 800538c:	4623      	mov	r3, r4
 800538e:	469a      	mov	sl, r3
 8005390:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005394:	b10a      	cbz	r2, 800539a <_vfiprintf_r+0x86>
 8005396:	2a25      	cmp	r2, #37	@ 0x25
 8005398:	d1f9      	bne.n	800538e <_vfiprintf_r+0x7a>
 800539a:	ebba 0b04 	subs.w	fp, sl, r4
 800539e:	d00b      	beq.n	80053b8 <_vfiprintf_r+0xa4>
 80053a0:	465b      	mov	r3, fp
 80053a2:	4622      	mov	r2, r4
 80053a4:	4629      	mov	r1, r5
 80053a6:	4630      	mov	r0, r6
 80053a8:	f7ff ffa1 	bl	80052ee <__sfputs_r>
 80053ac:	3001      	adds	r0, #1
 80053ae:	f000 80a7 	beq.w	8005500 <_vfiprintf_r+0x1ec>
 80053b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053b4:	445a      	add	r2, fp
 80053b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80053b8:	f89a 3000 	ldrb.w	r3, [sl]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 809f 	beq.w	8005500 <_vfiprintf_r+0x1ec>
 80053c2:	2300      	movs	r3, #0
 80053c4:	f04f 32ff 	mov.w	r2, #4294967295
 80053c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053cc:	f10a 0a01 	add.w	sl, sl, #1
 80053d0:	9304      	str	r3, [sp, #16]
 80053d2:	9307      	str	r3, [sp, #28]
 80053d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80053da:	4654      	mov	r4, sl
 80053dc:	2205      	movs	r2, #5
 80053de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e2:	4853      	ldr	r0, [pc, #332]	@ (8005530 <_vfiprintf_r+0x21c>)
 80053e4:	f7fa fef4 	bl	80001d0 <memchr>
 80053e8:	9a04      	ldr	r2, [sp, #16]
 80053ea:	b9d8      	cbnz	r0, 8005424 <_vfiprintf_r+0x110>
 80053ec:	06d1      	lsls	r1, r2, #27
 80053ee:	bf44      	itt	mi
 80053f0:	2320      	movmi	r3, #32
 80053f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053f6:	0713      	lsls	r3, r2, #28
 80053f8:	bf44      	itt	mi
 80053fa:	232b      	movmi	r3, #43	@ 0x2b
 80053fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005400:	f89a 3000 	ldrb.w	r3, [sl]
 8005404:	2b2a      	cmp	r3, #42	@ 0x2a
 8005406:	d015      	beq.n	8005434 <_vfiprintf_r+0x120>
 8005408:	9a07      	ldr	r2, [sp, #28]
 800540a:	4654      	mov	r4, sl
 800540c:	2000      	movs	r0, #0
 800540e:	f04f 0c0a 	mov.w	ip, #10
 8005412:	4621      	mov	r1, r4
 8005414:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005418:	3b30      	subs	r3, #48	@ 0x30
 800541a:	2b09      	cmp	r3, #9
 800541c:	d94b      	bls.n	80054b6 <_vfiprintf_r+0x1a2>
 800541e:	b1b0      	cbz	r0, 800544e <_vfiprintf_r+0x13a>
 8005420:	9207      	str	r2, [sp, #28]
 8005422:	e014      	b.n	800544e <_vfiprintf_r+0x13a>
 8005424:	eba0 0308 	sub.w	r3, r0, r8
 8005428:	fa09 f303 	lsl.w	r3, r9, r3
 800542c:	4313      	orrs	r3, r2
 800542e:	9304      	str	r3, [sp, #16]
 8005430:	46a2      	mov	sl, r4
 8005432:	e7d2      	b.n	80053da <_vfiprintf_r+0xc6>
 8005434:	9b03      	ldr	r3, [sp, #12]
 8005436:	1d19      	adds	r1, r3, #4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	9103      	str	r1, [sp, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	bfbb      	ittet	lt
 8005440:	425b      	neglt	r3, r3
 8005442:	f042 0202 	orrlt.w	r2, r2, #2
 8005446:	9307      	strge	r3, [sp, #28]
 8005448:	9307      	strlt	r3, [sp, #28]
 800544a:	bfb8      	it	lt
 800544c:	9204      	strlt	r2, [sp, #16]
 800544e:	7823      	ldrb	r3, [r4, #0]
 8005450:	2b2e      	cmp	r3, #46	@ 0x2e
 8005452:	d10a      	bne.n	800546a <_vfiprintf_r+0x156>
 8005454:	7863      	ldrb	r3, [r4, #1]
 8005456:	2b2a      	cmp	r3, #42	@ 0x2a
 8005458:	d132      	bne.n	80054c0 <_vfiprintf_r+0x1ac>
 800545a:	9b03      	ldr	r3, [sp, #12]
 800545c:	1d1a      	adds	r2, r3, #4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	9203      	str	r2, [sp, #12]
 8005462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005466:	3402      	adds	r4, #2
 8005468:	9305      	str	r3, [sp, #20]
 800546a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005540 <_vfiprintf_r+0x22c>
 800546e:	7821      	ldrb	r1, [r4, #0]
 8005470:	2203      	movs	r2, #3
 8005472:	4650      	mov	r0, sl
 8005474:	f7fa feac 	bl	80001d0 <memchr>
 8005478:	b138      	cbz	r0, 800548a <_vfiprintf_r+0x176>
 800547a:	9b04      	ldr	r3, [sp, #16]
 800547c:	eba0 000a 	sub.w	r0, r0, sl
 8005480:	2240      	movs	r2, #64	@ 0x40
 8005482:	4082      	lsls	r2, r0
 8005484:	4313      	orrs	r3, r2
 8005486:	3401      	adds	r4, #1
 8005488:	9304      	str	r3, [sp, #16]
 800548a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548e:	4829      	ldr	r0, [pc, #164]	@ (8005534 <_vfiprintf_r+0x220>)
 8005490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005494:	2206      	movs	r2, #6
 8005496:	f7fa fe9b 	bl	80001d0 <memchr>
 800549a:	2800      	cmp	r0, #0
 800549c:	d03f      	beq.n	800551e <_vfiprintf_r+0x20a>
 800549e:	4b26      	ldr	r3, [pc, #152]	@ (8005538 <_vfiprintf_r+0x224>)
 80054a0:	bb1b      	cbnz	r3, 80054ea <_vfiprintf_r+0x1d6>
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	3307      	adds	r3, #7
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	3308      	adds	r3, #8
 80054ac:	9303      	str	r3, [sp, #12]
 80054ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054b0:	443b      	add	r3, r7
 80054b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80054b4:	e76a      	b.n	800538c <_vfiprintf_r+0x78>
 80054b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ba:	460c      	mov	r4, r1
 80054bc:	2001      	movs	r0, #1
 80054be:	e7a8      	b.n	8005412 <_vfiprintf_r+0xfe>
 80054c0:	2300      	movs	r3, #0
 80054c2:	3401      	adds	r4, #1
 80054c4:	9305      	str	r3, [sp, #20]
 80054c6:	4619      	mov	r1, r3
 80054c8:	f04f 0c0a 	mov.w	ip, #10
 80054cc:	4620      	mov	r0, r4
 80054ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054d2:	3a30      	subs	r2, #48	@ 0x30
 80054d4:	2a09      	cmp	r2, #9
 80054d6:	d903      	bls.n	80054e0 <_vfiprintf_r+0x1cc>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0c6      	beq.n	800546a <_vfiprintf_r+0x156>
 80054dc:	9105      	str	r1, [sp, #20]
 80054de:	e7c4      	b.n	800546a <_vfiprintf_r+0x156>
 80054e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e4:	4604      	mov	r4, r0
 80054e6:	2301      	movs	r3, #1
 80054e8:	e7f0      	b.n	80054cc <_vfiprintf_r+0x1b8>
 80054ea:	ab03      	add	r3, sp, #12
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	462a      	mov	r2, r5
 80054f0:	4b12      	ldr	r3, [pc, #72]	@ (800553c <_vfiprintf_r+0x228>)
 80054f2:	a904      	add	r1, sp, #16
 80054f4:	4630      	mov	r0, r6
 80054f6:	f3af 8000 	nop.w
 80054fa:	4607      	mov	r7, r0
 80054fc:	1c78      	adds	r0, r7, #1
 80054fe:	d1d6      	bne.n	80054ae <_vfiprintf_r+0x19a>
 8005500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005502:	07d9      	lsls	r1, r3, #31
 8005504:	d405      	bmi.n	8005512 <_vfiprintf_r+0x1fe>
 8005506:	89ab      	ldrh	r3, [r5, #12]
 8005508:	059a      	lsls	r2, r3, #22
 800550a:	d402      	bmi.n	8005512 <_vfiprintf_r+0x1fe>
 800550c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800550e:	f7ff fddd 	bl	80050cc <__retarget_lock_release_recursive>
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	065b      	lsls	r3, r3, #25
 8005516:	f53f af1f 	bmi.w	8005358 <_vfiprintf_r+0x44>
 800551a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800551c:	e71e      	b.n	800535c <_vfiprintf_r+0x48>
 800551e:	ab03      	add	r3, sp, #12
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	462a      	mov	r2, r5
 8005524:	4b05      	ldr	r3, [pc, #20]	@ (800553c <_vfiprintf_r+0x228>)
 8005526:	a904      	add	r1, sp, #16
 8005528:	4630      	mov	r0, r6
 800552a:	f000 f879 	bl	8005620 <_printf_i>
 800552e:	e7e4      	b.n	80054fa <_vfiprintf_r+0x1e6>
 8005530:	08005c78 	.word	0x08005c78
 8005534:	08005c82 	.word	0x08005c82
 8005538:	00000000 	.word	0x00000000
 800553c:	080052ef 	.word	0x080052ef
 8005540:	08005c7e 	.word	0x08005c7e

08005544 <_printf_common>:
 8005544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005548:	4616      	mov	r6, r2
 800554a:	4698      	mov	r8, r3
 800554c:	688a      	ldr	r2, [r1, #8]
 800554e:	690b      	ldr	r3, [r1, #16]
 8005550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005554:	4293      	cmp	r3, r2
 8005556:	bfb8      	it	lt
 8005558:	4613      	movlt	r3, r2
 800555a:	6033      	str	r3, [r6, #0]
 800555c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005560:	4607      	mov	r7, r0
 8005562:	460c      	mov	r4, r1
 8005564:	b10a      	cbz	r2, 800556a <_printf_common+0x26>
 8005566:	3301      	adds	r3, #1
 8005568:	6033      	str	r3, [r6, #0]
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	0699      	lsls	r1, r3, #26
 800556e:	bf42      	ittt	mi
 8005570:	6833      	ldrmi	r3, [r6, #0]
 8005572:	3302      	addmi	r3, #2
 8005574:	6033      	strmi	r3, [r6, #0]
 8005576:	6825      	ldr	r5, [r4, #0]
 8005578:	f015 0506 	ands.w	r5, r5, #6
 800557c:	d106      	bne.n	800558c <_printf_common+0x48>
 800557e:	f104 0a19 	add.w	sl, r4, #25
 8005582:	68e3      	ldr	r3, [r4, #12]
 8005584:	6832      	ldr	r2, [r6, #0]
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	42ab      	cmp	r3, r5
 800558a:	dc26      	bgt.n	80055da <_printf_common+0x96>
 800558c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005590:	6822      	ldr	r2, [r4, #0]
 8005592:	3b00      	subs	r3, #0
 8005594:	bf18      	it	ne
 8005596:	2301      	movne	r3, #1
 8005598:	0692      	lsls	r2, r2, #26
 800559a:	d42b      	bmi.n	80055f4 <_printf_common+0xb0>
 800559c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055a0:	4641      	mov	r1, r8
 80055a2:	4638      	mov	r0, r7
 80055a4:	47c8      	blx	r9
 80055a6:	3001      	adds	r0, #1
 80055a8:	d01e      	beq.n	80055e8 <_printf_common+0xa4>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	6922      	ldr	r2, [r4, #16]
 80055ae:	f003 0306 	and.w	r3, r3, #6
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	bf02      	ittt	eq
 80055b6:	68e5      	ldreq	r5, [r4, #12]
 80055b8:	6833      	ldreq	r3, [r6, #0]
 80055ba:	1aed      	subeq	r5, r5, r3
 80055bc:	68a3      	ldr	r3, [r4, #8]
 80055be:	bf0c      	ite	eq
 80055c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c4:	2500      	movne	r5, #0
 80055c6:	4293      	cmp	r3, r2
 80055c8:	bfc4      	itt	gt
 80055ca:	1a9b      	subgt	r3, r3, r2
 80055cc:	18ed      	addgt	r5, r5, r3
 80055ce:	2600      	movs	r6, #0
 80055d0:	341a      	adds	r4, #26
 80055d2:	42b5      	cmp	r5, r6
 80055d4:	d11a      	bne.n	800560c <_printf_common+0xc8>
 80055d6:	2000      	movs	r0, #0
 80055d8:	e008      	b.n	80055ec <_printf_common+0xa8>
 80055da:	2301      	movs	r3, #1
 80055dc:	4652      	mov	r2, sl
 80055de:	4641      	mov	r1, r8
 80055e0:	4638      	mov	r0, r7
 80055e2:	47c8      	blx	r9
 80055e4:	3001      	adds	r0, #1
 80055e6:	d103      	bne.n	80055f0 <_printf_common+0xac>
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f0:	3501      	adds	r5, #1
 80055f2:	e7c6      	b.n	8005582 <_printf_common+0x3e>
 80055f4:	18e1      	adds	r1, r4, r3
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	2030      	movs	r0, #48	@ 0x30
 80055fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055fe:	4422      	add	r2, r4
 8005600:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005604:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005608:	3302      	adds	r3, #2
 800560a:	e7c7      	b.n	800559c <_printf_common+0x58>
 800560c:	2301      	movs	r3, #1
 800560e:	4622      	mov	r2, r4
 8005610:	4641      	mov	r1, r8
 8005612:	4638      	mov	r0, r7
 8005614:	47c8      	blx	r9
 8005616:	3001      	adds	r0, #1
 8005618:	d0e6      	beq.n	80055e8 <_printf_common+0xa4>
 800561a:	3601      	adds	r6, #1
 800561c:	e7d9      	b.n	80055d2 <_printf_common+0x8e>
	...

08005620 <_printf_i>:
 8005620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005624:	7e0f      	ldrb	r7, [r1, #24]
 8005626:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005628:	2f78      	cmp	r7, #120	@ 0x78
 800562a:	4691      	mov	r9, r2
 800562c:	4680      	mov	r8, r0
 800562e:	460c      	mov	r4, r1
 8005630:	469a      	mov	sl, r3
 8005632:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005636:	d807      	bhi.n	8005648 <_printf_i+0x28>
 8005638:	2f62      	cmp	r7, #98	@ 0x62
 800563a:	d80a      	bhi.n	8005652 <_printf_i+0x32>
 800563c:	2f00      	cmp	r7, #0
 800563e:	f000 80d1 	beq.w	80057e4 <_printf_i+0x1c4>
 8005642:	2f58      	cmp	r7, #88	@ 0x58
 8005644:	f000 80b8 	beq.w	80057b8 <_printf_i+0x198>
 8005648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800564c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005650:	e03a      	b.n	80056c8 <_printf_i+0xa8>
 8005652:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005656:	2b15      	cmp	r3, #21
 8005658:	d8f6      	bhi.n	8005648 <_printf_i+0x28>
 800565a:	a101      	add	r1, pc, #4	@ (adr r1, 8005660 <_printf_i+0x40>)
 800565c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005660:	080056b9 	.word	0x080056b9
 8005664:	080056cd 	.word	0x080056cd
 8005668:	08005649 	.word	0x08005649
 800566c:	08005649 	.word	0x08005649
 8005670:	08005649 	.word	0x08005649
 8005674:	08005649 	.word	0x08005649
 8005678:	080056cd 	.word	0x080056cd
 800567c:	08005649 	.word	0x08005649
 8005680:	08005649 	.word	0x08005649
 8005684:	08005649 	.word	0x08005649
 8005688:	08005649 	.word	0x08005649
 800568c:	080057cb 	.word	0x080057cb
 8005690:	080056f7 	.word	0x080056f7
 8005694:	08005785 	.word	0x08005785
 8005698:	08005649 	.word	0x08005649
 800569c:	08005649 	.word	0x08005649
 80056a0:	080057ed 	.word	0x080057ed
 80056a4:	08005649 	.word	0x08005649
 80056a8:	080056f7 	.word	0x080056f7
 80056ac:	08005649 	.word	0x08005649
 80056b0:	08005649 	.word	0x08005649
 80056b4:	0800578d 	.word	0x0800578d
 80056b8:	6833      	ldr	r3, [r6, #0]
 80056ba:	1d1a      	adds	r2, r3, #4
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6032      	str	r2, [r6, #0]
 80056c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056c8:	2301      	movs	r3, #1
 80056ca:	e09c      	b.n	8005806 <_printf_i+0x1e6>
 80056cc:	6833      	ldr	r3, [r6, #0]
 80056ce:	6820      	ldr	r0, [r4, #0]
 80056d0:	1d19      	adds	r1, r3, #4
 80056d2:	6031      	str	r1, [r6, #0]
 80056d4:	0606      	lsls	r6, r0, #24
 80056d6:	d501      	bpl.n	80056dc <_printf_i+0xbc>
 80056d8:	681d      	ldr	r5, [r3, #0]
 80056da:	e003      	b.n	80056e4 <_printf_i+0xc4>
 80056dc:	0645      	lsls	r5, r0, #25
 80056de:	d5fb      	bpl.n	80056d8 <_printf_i+0xb8>
 80056e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056e4:	2d00      	cmp	r5, #0
 80056e6:	da03      	bge.n	80056f0 <_printf_i+0xd0>
 80056e8:	232d      	movs	r3, #45	@ 0x2d
 80056ea:	426d      	negs	r5, r5
 80056ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056f0:	4858      	ldr	r0, [pc, #352]	@ (8005854 <_printf_i+0x234>)
 80056f2:	230a      	movs	r3, #10
 80056f4:	e011      	b.n	800571a <_printf_i+0xfa>
 80056f6:	6821      	ldr	r1, [r4, #0]
 80056f8:	6833      	ldr	r3, [r6, #0]
 80056fa:	0608      	lsls	r0, r1, #24
 80056fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005700:	d402      	bmi.n	8005708 <_printf_i+0xe8>
 8005702:	0649      	lsls	r1, r1, #25
 8005704:	bf48      	it	mi
 8005706:	b2ad      	uxthmi	r5, r5
 8005708:	2f6f      	cmp	r7, #111	@ 0x6f
 800570a:	4852      	ldr	r0, [pc, #328]	@ (8005854 <_printf_i+0x234>)
 800570c:	6033      	str	r3, [r6, #0]
 800570e:	bf14      	ite	ne
 8005710:	230a      	movne	r3, #10
 8005712:	2308      	moveq	r3, #8
 8005714:	2100      	movs	r1, #0
 8005716:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800571a:	6866      	ldr	r6, [r4, #4]
 800571c:	60a6      	str	r6, [r4, #8]
 800571e:	2e00      	cmp	r6, #0
 8005720:	db05      	blt.n	800572e <_printf_i+0x10e>
 8005722:	6821      	ldr	r1, [r4, #0]
 8005724:	432e      	orrs	r6, r5
 8005726:	f021 0104 	bic.w	r1, r1, #4
 800572a:	6021      	str	r1, [r4, #0]
 800572c:	d04b      	beq.n	80057c6 <_printf_i+0x1a6>
 800572e:	4616      	mov	r6, r2
 8005730:	fbb5 f1f3 	udiv	r1, r5, r3
 8005734:	fb03 5711 	mls	r7, r3, r1, r5
 8005738:	5dc7      	ldrb	r7, [r0, r7]
 800573a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800573e:	462f      	mov	r7, r5
 8005740:	42bb      	cmp	r3, r7
 8005742:	460d      	mov	r5, r1
 8005744:	d9f4      	bls.n	8005730 <_printf_i+0x110>
 8005746:	2b08      	cmp	r3, #8
 8005748:	d10b      	bne.n	8005762 <_printf_i+0x142>
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	07df      	lsls	r7, r3, #31
 800574e:	d508      	bpl.n	8005762 <_printf_i+0x142>
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	6861      	ldr	r1, [r4, #4]
 8005754:	4299      	cmp	r1, r3
 8005756:	bfde      	ittt	le
 8005758:	2330      	movle	r3, #48	@ 0x30
 800575a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800575e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005762:	1b92      	subs	r2, r2, r6
 8005764:	6122      	str	r2, [r4, #16]
 8005766:	f8cd a000 	str.w	sl, [sp]
 800576a:	464b      	mov	r3, r9
 800576c:	aa03      	add	r2, sp, #12
 800576e:	4621      	mov	r1, r4
 8005770:	4640      	mov	r0, r8
 8005772:	f7ff fee7 	bl	8005544 <_printf_common>
 8005776:	3001      	adds	r0, #1
 8005778:	d14a      	bne.n	8005810 <_printf_i+0x1f0>
 800577a:	f04f 30ff 	mov.w	r0, #4294967295
 800577e:	b004      	add	sp, #16
 8005780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	f043 0320 	orr.w	r3, r3, #32
 800578a:	6023      	str	r3, [r4, #0]
 800578c:	4832      	ldr	r0, [pc, #200]	@ (8005858 <_printf_i+0x238>)
 800578e:	2778      	movs	r7, #120	@ 0x78
 8005790:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	6831      	ldr	r1, [r6, #0]
 8005798:	061f      	lsls	r7, r3, #24
 800579a:	f851 5b04 	ldr.w	r5, [r1], #4
 800579e:	d402      	bmi.n	80057a6 <_printf_i+0x186>
 80057a0:	065f      	lsls	r7, r3, #25
 80057a2:	bf48      	it	mi
 80057a4:	b2ad      	uxthmi	r5, r5
 80057a6:	6031      	str	r1, [r6, #0]
 80057a8:	07d9      	lsls	r1, r3, #31
 80057aa:	bf44      	itt	mi
 80057ac:	f043 0320 	orrmi.w	r3, r3, #32
 80057b0:	6023      	strmi	r3, [r4, #0]
 80057b2:	b11d      	cbz	r5, 80057bc <_printf_i+0x19c>
 80057b4:	2310      	movs	r3, #16
 80057b6:	e7ad      	b.n	8005714 <_printf_i+0xf4>
 80057b8:	4826      	ldr	r0, [pc, #152]	@ (8005854 <_printf_i+0x234>)
 80057ba:	e7e9      	b.n	8005790 <_printf_i+0x170>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	f023 0320 	bic.w	r3, r3, #32
 80057c2:	6023      	str	r3, [r4, #0]
 80057c4:	e7f6      	b.n	80057b4 <_printf_i+0x194>
 80057c6:	4616      	mov	r6, r2
 80057c8:	e7bd      	b.n	8005746 <_printf_i+0x126>
 80057ca:	6833      	ldr	r3, [r6, #0]
 80057cc:	6825      	ldr	r5, [r4, #0]
 80057ce:	6961      	ldr	r1, [r4, #20]
 80057d0:	1d18      	adds	r0, r3, #4
 80057d2:	6030      	str	r0, [r6, #0]
 80057d4:	062e      	lsls	r6, r5, #24
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	d501      	bpl.n	80057de <_printf_i+0x1be>
 80057da:	6019      	str	r1, [r3, #0]
 80057dc:	e002      	b.n	80057e4 <_printf_i+0x1c4>
 80057de:	0668      	lsls	r0, r5, #25
 80057e0:	d5fb      	bpl.n	80057da <_printf_i+0x1ba>
 80057e2:	8019      	strh	r1, [r3, #0]
 80057e4:	2300      	movs	r3, #0
 80057e6:	6123      	str	r3, [r4, #16]
 80057e8:	4616      	mov	r6, r2
 80057ea:	e7bc      	b.n	8005766 <_printf_i+0x146>
 80057ec:	6833      	ldr	r3, [r6, #0]
 80057ee:	1d1a      	adds	r2, r3, #4
 80057f0:	6032      	str	r2, [r6, #0]
 80057f2:	681e      	ldr	r6, [r3, #0]
 80057f4:	6862      	ldr	r2, [r4, #4]
 80057f6:	2100      	movs	r1, #0
 80057f8:	4630      	mov	r0, r6
 80057fa:	f7fa fce9 	bl	80001d0 <memchr>
 80057fe:	b108      	cbz	r0, 8005804 <_printf_i+0x1e4>
 8005800:	1b80      	subs	r0, r0, r6
 8005802:	6060      	str	r0, [r4, #4]
 8005804:	6863      	ldr	r3, [r4, #4]
 8005806:	6123      	str	r3, [r4, #16]
 8005808:	2300      	movs	r3, #0
 800580a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800580e:	e7aa      	b.n	8005766 <_printf_i+0x146>
 8005810:	6923      	ldr	r3, [r4, #16]
 8005812:	4632      	mov	r2, r6
 8005814:	4649      	mov	r1, r9
 8005816:	4640      	mov	r0, r8
 8005818:	47d0      	blx	sl
 800581a:	3001      	adds	r0, #1
 800581c:	d0ad      	beq.n	800577a <_printf_i+0x15a>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	079b      	lsls	r3, r3, #30
 8005822:	d413      	bmi.n	800584c <_printf_i+0x22c>
 8005824:	68e0      	ldr	r0, [r4, #12]
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	4298      	cmp	r0, r3
 800582a:	bfb8      	it	lt
 800582c:	4618      	movlt	r0, r3
 800582e:	e7a6      	b.n	800577e <_printf_i+0x15e>
 8005830:	2301      	movs	r3, #1
 8005832:	4632      	mov	r2, r6
 8005834:	4649      	mov	r1, r9
 8005836:	4640      	mov	r0, r8
 8005838:	47d0      	blx	sl
 800583a:	3001      	adds	r0, #1
 800583c:	d09d      	beq.n	800577a <_printf_i+0x15a>
 800583e:	3501      	adds	r5, #1
 8005840:	68e3      	ldr	r3, [r4, #12]
 8005842:	9903      	ldr	r1, [sp, #12]
 8005844:	1a5b      	subs	r3, r3, r1
 8005846:	42ab      	cmp	r3, r5
 8005848:	dcf2      	bgt.n	8005830 <_printf_i+0x210>
 800584a:	e7eb      	b.n	8005824 <_printf_i+0x204>
 800584c:	2500      	movs	r5, #0
 800584e:	f104 0619 	add.w	r6, r4, #25
 8005852:	e7f5      	b.n	8005840 <_printf_i+0x220>
 8005854:	08005c89 	.word	0x08005c89
 8005858:	08005c9a 	.word	0x08005c9a

0800585c <__sflush_r>:
 800585c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005864:	0716      	lsls	r6, r2, #28
 8005866:	4605      	mov	r5, r0
 8005868:	460c      	mov	r4, r1
 800586a:	d454      	bmi.n	8005916 <__sflush_r+0xba>
 800586c:	684b      	ldr	r3, [r1, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	dc02      	bgt.n	8005878 <__sflush_r+0x1c>
 8005872:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	dd48      	ble.n	800590a <__sflush_r+0xae>
 8005878:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800587a:	2e00      	cmp	r6, #0
 800587c:	d045      	beq.n	800590a <__sflush_r+0xae>
 800587e:	2300      	movs	r3, #0
 8005880:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005884:	682f      	ldr	r7, [r5, #0]
 8005886:	6a21      	ldr	r1, [r4, #32]
 8005888:	602b      	str	r3, [r5, #0]
 800588a:	d030      	beq.n	80058ee <__sflush_r+0x92>
 800588c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	0759      	lsls	r1, r3, #29
 8005892:	d505      	bpl.n	80058a0 <__sflush_r+0x44>
 8005894:	6863      	ldr	r3, [r4, #4]
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800589a:	b10b      	cbz	r3, 80058a0 <__sflush_r+0x44>
 800589c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800589e:	1ad2      	subs	r2, r2, r3
 80058a0:	2300      	movs	r3, #0
 80058a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058a4:	6a21      	ldr	r1, [r4, #32]
 80058a6:	4628      	mov	r0, r5
 80058a8:	47b0      	blx	r6
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	d106      	bne.n	80058be <__sflush_r+0x62>
 80058b0:	6829      	ldr	r1, [r5, #0]
 80058b2:	291d      	cmp	r1, #29
 80058b4:	d82b      	bhi.n	800590e <__sflush_r+0xb2>
 80058b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005960 <__sflush_r+0x104>)
 80058b8:	40ca      	lsrs	r2, r1
 80058ba:	07d6      	lsls	r6, r2, #31
 80058bc:	d527      	bpl.n	800590e <__sflush_r+0xb2>
 80058be:	2200      	movs	r2, #0
 80058c0:	6062      	str	r2, [r4, #4]
 80058c2:	04d9      	lsls	r1, r3, #19
 80058c4:	6922      	ldr	r2, [r4, #16]
 80058c6:	6022      	str	r2, [r4, #0]
 80058c8:	d504      	bpl.n	80058d4 <__sflush_r+0x78>
 80058ca:	1c42      	adds	r2, r0, #1
 80058cc:	d101      	bne.n	80058d2 <__sflush_r+0x76>
 80058ce:	682b      	ldr	r3, [r5, #0]
 80058d0:	b903      	cbnz	r3, 80058d4 <__sflush_r+0x78>
 80058d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80058d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058d6:	602f      	str	r7, [r5, #0]
 80058d8:	b1b9      	cbz	r1, 800590a <__sflush_r+0xae>
 80058da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058de:	4299      	cmp	r1, r3
 80058e0:	d002      	beq.n	80058e8 <__sflush_r+0x8c>
 80058e2:	4628      	mov	r0, r5
 80058e4:	f7ff fbf4 	bl	80050d0 <_free_r>
 80058e8:	2300      	movs	r3, #0
 80058ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80058ec:	e00d      	b.n	800590a <__sflush_r+0xae>
 80058ee:	2301      	movs	r3, #1
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b0      	blx	r6
 80058f4:	4602      	mov	r2, r0
 80058f6:	1c50      	adds	r0, r2, #1
 80058f8:	d1c9      	bne.n	800588e <__sflush_r+0x32>
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0c6      	beq.n	800588e <__sflush_r+0x32>
 8005900:	2b1d      	cmp	r3, #29
 8005902:	d001      	beq.n	8005908 <__sflush_r+0xac>
 8005904:	2b16      	cmp	r3, #22
 8005906:	d11e      	bne.n	8005946 <__sflush_r+0xea>
 8005908:	602f      	str	r7, [r5, #0]
 800590a:	2000      	movs	r0, #0
 800590c:	e022      	b.n	8005954 <__sflush_r+0xf8>
 800590e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005912:	b21b      	sxth	r3, r3
 8005914:	e01b      	b.n	800594e <__sflush_r+0xf2>
 8005916:	690f      	ldr	r7, [r1, #16]
 8005918:	2f00      	cmp	r7, #0
 800591a:	d0f6      	beq.n	800590a <__sflush_r+0xae>
 800591c:	0793      	lsls	r3, r2, #30
 800591e:	680e      	ldr	r6, [r1, #0]
 8005920:	bf08      	it	eq
 8005922:	694b      	ldreq	r3, [r1, #20]
 8005924:	600f      	str	r7, [r1, #0]
 8005926:	bf18      	it	ne
 8005928:	2300      	movne	r3, #0
 800592a:	eba6 0807 	sub.w	r8, r6, r7
 800592e:	608b      	str	r3, [r1, #8]
 8005930:	f1b8 0f00 	cmp.w	r8, #0
 8005934:	dde9      	ble.n	800590a <__sflush_r+0xae>
 8005936:	6a21      	ldr	r1, [r4, #32]
 8005938:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800593a:	4643      	mov	r3, r8
 800593c:	463a      	mov	r2, r7
 800593e:	4628      	mov	r0, r5
 8005940:	47b0      	blx	r6
 8005942:	2800      	cmp	r0, #0
 8005944:	dc08      	bgt.n	8005958 <__sflush_r+0xfc>
 8005946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800594e:	81a3      	strh	r3, [r4, #12]
 8005950:	f04f 30ff 	mov.w	r0, #4294967295
 8005954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005958:	4407      	add	r7, r0
 800595a:	eba8 0800 	sub.w	r8, r8, r0
 800595e:	e7e7      	b.n	8005930 <__sflush_r+0xd4>
 8005960:	20400001 	.word	0x20400001

08005964 <_fflush_r>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	690b      	ldr	r3, [r1, #16]
 8005968:	4605      	mov	r5, r0
 800596a:	460c      	mov	r4, r1
 800596c:	b913      	cbnz	r3, 8005974 <_fflush_r+0x10>
 800596e:	2500      	movs	r5, #0
 8005970:	4628      	mov	r0, r5
 8005972:	bd38      	pop	{r3, r4, r5, pc}
 8005974:	b118      	cbz	r0, 800597e <_fflush_r+0x1a>
 8005976:	6a03      	ldr	r3, [r0, #32]
 8005978:	b90b      	cbnz	r3, 800597e <_fflush_r+0x1a>
 800597a:	f7ff faa1 	bl	8004ec0 <__sinit>
 800597e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f3      	beq.n	800596e <_fflush_r+0xa>
 8005986:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005988:	07d0      	lsls	r0, r2, #31
 800598a:	d404      	bmi.n	8005996 <_fflush_r+0x32>
 800598c:	0599      	lsls	r1, r3, #22
 800598e:	d402      	bmi.n	8005996 <_fflush_r+0x32>
 8005990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005992:	f7ff fb9a 	bl	80050ca <__retarget_lock_acquire_recursive>
 8005996:	4628      	mov	r0, r5
 8005998:	4621      	mov	r1, r4
 800599a:	f7ff ff5f 	bl	800585c <__sflush_r>
 800599e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059a0:	07da      	lsls	r2, r3, #31
 80059a2:	4605      	mov	r5, r0
 80059a4:	d4e4      	bmi.n	8005970 <_fflush_r+0xc>
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	059b      	lsls	r3, r3, #22
 80059aa:	d4e1      	bmi.n	8005970 <_fflush_r+0xc>
 80059ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059ae:	f7ff fb8d 	bl	80050cc <__retarget_lock_release_recursive>
 80059b2:	e7dd      	b.n	8005970 <_fflush_r+0xc>

080059b4 <__swbuf_r>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	460e      	mov	r6, r1
 80059b8:	4614      	mov	r4, r2
 80059ba:	4605      	mov	r5, r0
 80059bc:	b118      	cbz	r0, 80059c6 <__swbuf_r+0x12>
 80059be:	6a03      	ldr	r3, [r0, #32]
 80059c0:	b90b      	cbnz	r3, 80059c6 <__swbuf_r+0x12>
 80059c2:	f7ff fa7d 	bl	8004ec0 <__sinit>
 80059c6:	69a3      	ldr	r3, [r4, #24]
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	071a      	lsls	r2, r3, #28
 80059ce:	d501      	bpl.n	80059d4 <__swbuf_r+0x20>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	b943      	cbnz	r3, 80059e6 <__swbuf_r+0x32>
 80059d4:	4621      	mov	r1, r4
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 f82a 	bl	8005a30 <__swsetup_r>
 80059dc:	b118      	cbz	r0, 80059e6 <__swbuf_r+0x32>
 80059de:	f04f 37ff 	mov.w	r7, #4294967295
 80059e2:	4638      	mov	r0, r7
 80059e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	6922      	ldr	r2, [r4, #16]
 80059ea:	1a98      	subs	r0, r3, r2
 80059ec:	6963      	ldr	r3, [r4, #20]
 80059ee:	b2f6      	uxtb	r6, r6
 80059f0:	4283      	cmp	r3, r0
 80059f2:	4637      	mov	r7, r6
 80059f4:	dc05      	bgt.n	8005a02 <__swbuf_r+0x4e>
 80059f6:	4621      	mov	r1, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	f7ff ffb3 	bl	8005964 <_fflush_r>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d1ed      	bne.n	80059de <__swbuf_r+0x2a>
 8005a02:	68a3      	ldr	r3, [r4, #8]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	60a3      	str	r3, [r4, #8]
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	6022      	str	r2, [r4, #0]
 8005a0e:	701e      	strb	r6, [r3, #0]
 8005a10:	6962      	ldr	r2, [r4, #20]
 8005a12:	1c43      	adds	r3, r0, #1
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d004      	beq.n	8005a22 <__swbuf_r+0x6e>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	07db      	lsls	r3, r3, #31
 8005a1c:	d5e1      	bpl.n	80059e2 <__swbuf_r+0x2e>
 8005a1e:	2e0a      	cmp	r6, #10
 8005a20:	d1df      	bne.n	80059e2 <__swbuf_r+0x2e>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	f7ff ff9d 	bl	8005964 <_fflush_r>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d0d9      	beq.n	80059e2 <__swbuf_r+0x2e>
 8005a2e:	e7d6      	b.n	80059de <__swbuf_r+0x2a>

08005a30 <__swsetup_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4b29      	ldr	r3, [pc, #164]	@ (8005ad8 <__swsetup_r+0xa8>)
 8005a34:	4605      	mov	r5, r0
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	460c      	mov	r4, r1
 8005a3a:	b118      	cbz	r0, 8005a44 <__swsetup_r+0x14>
 8005a3c:	6a03      	ldr	r3, [r0, #32]
 8005a3e:	b90b      	cbnz	r3, 8005a44 <__swsetup_r+0x14>
 8005a40:	f7ff fa3e 	bl	8004ec0 <__sinit>
 8005a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a48:	0719      	lsls	r1, r3, #28
 8005a4a:	d422      	bmi.n	8005a92 <__swsetup_r+0x62>
 8005a4c:	06da      	lsls	r2, r3, #27
 8005a4e:	d407      	bmi.n	8005a60 <__swsetup_r+0x30>
 8005a50:	2209      	movs	r2, #9
 8005a52:	602a      	str	r2, [r5, #0]
 8005a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a58:	81a3      	strh	r3, [r4, #12]
 8005a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5e:	e033      	b.n	8005ac8 <__swsetup_r+0x98>
 8005a60:	0758      	lsls	r0, r3, #29
 8005a62:	d512      	bpl.n	8005a8a <__swsetup_r+0x5a>
 8005a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a66:	b141      	cbz	r1, 8005a7a <__swsetup_r+0x4a>
 8005a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d002      	beq.n	8005a76 <__swsetup_r+0x46>
 8005a70:	4628      	mov	r0, r5
 8005a72:	f7ff fb2d 	bl	80050d0 <_free_r>
 8005a76:	2300      	movs	r3, #0
 8005a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	2300      	movs	r3, #0
 8005a84:	6063      	str	r3, [r4, #4]
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	f043 0308 	orr.w	r3, r3, #8
 8005a90:	81a3      	strh	r3, [r4, #12]
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	b94b      	cbnz	r3, 8005aaa <__swsetup_r+0x7a>
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aa0:	d003      	beq.n	8005aaa <__swsetup_r+0x7a>
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f000 f84f 	bl	8005b48 <__smakebuf_r>
 8005aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aae:	f013 0201 	ands.w	r2, r3, #1
 8005ab2:	d00a      	beq.n	8005aca <__swsetup_r+0x9a>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	60a2      	str	r2, [r4, #8]
 8005ab8:	6962      	ldr	r2, [r4, #20]
 8005aba:	4252      	negs	r2, r2
 8005abc:	61a2      	str	r2, [r4, #24]
 8005abe:	6922      	ldr	r2, [r4, #16]
 8005ac0:	b942      	cbnz	r2, 8005ad4 <__swsetup_r+0xa4>
 8005ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ac6:	d1c5      	bne.n	8005a54 <__swsetup_r+0x24>
 8005ac8:	bd38      	pop	{r3, r4, r5, pc}
 8005aca:	0799      	lsls	r1, r3, #30
 8005acc:	bf58      	it	pl
 8005ace:	6962      	ldrpl	r2, [r4, #20]
 8005ad0:	60a2      	str	r2, [r4, #8]
 8005ad2:	e7f4      	b.n	8005abe <__swsetup_r+0x8e>
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	e7f7      	b.n	8005ac8 <__swsetup_r+0x98>
 8005ad8:	20000018 	.word	0x20000018

08005adc <_sbrk_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d06      	ldr	r5, [pc, #24]	@ (8005af8 <_sbrk_r+0x1c>)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	602b      	str	r3, [r5, #0]
 8005ae8:	f7fb f8dc 	bl	8000ca4 <_sbrk>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_sbrk_r+0x1a>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_sbrk_r+0x1a>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	20000300 	.word	0x20000300

08005afc <__swhatbuf_r>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	460c      	mov	r4, r1
 8005b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b04:	2900      	cmp	r1, #0
 8005b06:	b096      	sub	sp, #88	@ 0x58
 8005b08:	4615      	mov	r5, r2
 8005b0a:	461e      	mov	r6, r3
 8005b0c:	da0d      	bge.n	8005b2a <__swhatbuf_r+0x2e>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b14:	f04f 0100 	mov.w	r1, #0
 8005b18:	bf14      	ite	ne
 8005b1a:	2340      	movne	r3, #64	@ 0x40
 8005b1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b20:	2000      	movs	r0, #0
 8005b22:	6031      	str	r1, [r6, #0]
 8005b24:	602b      	str	r3, [r5, #0]
 8005b26:	b016      	add	sp, #88	@ 0x58
 8005b28:	bd70      	pop	{r4, r5, r6, pc}
 8005b2a:	466a      	mov	r2, sp
 8005b2c:	f000 f848 	bl	8005bc0 <_fstat_r>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	dbec      	blt.n	8005b0e <__swhatbuf_r+0x12>
 8005b34:	9901      	ldr	r1, [sp, #4]
 8005b36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b3e:	4259      	negs	r1, r3
 8005b40:	4159      	adcs	r1, r3
 8005b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b46:	e7eb      	b.n	8005b20 <__swhatbuf_r+0x24>

08005b48 <__smakebuf_r>:
 8005b48:	898b      	ldrh	r3, [r1, #12]
 8005b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b4c:	079d      	lsls	r5, r3, #30
 8005b4e:	4606      	mov	r6, r0
 8005b50:	460c      	mov	r4, r1
 8005b52:	d507      	bpl.n	8005b64 <__smakebuf_r+0x1c>
 8005b54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	6123      	str	r3, [r4, #16]
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	6163      	str	r3, [r4, #20]
 8005b60:	b003      	add	sp, #12
 8005b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b64:	ab01      	add	r3, sp, #4
 8005b66:	466a      	mov	r2, sp
 8005b68:	f7ff ffc8 	bl	8005afc <__swhatbuf_r>
 8005b6c:	9f00      	ldr	r7, [sp, #0]
 8005b6e:	4605      	mov	r5, r0
 8005b70:	4639      	mov	r1, r7
 8005b72:	4630      	mov	r0, r6
 8005b74:	f7ff fb18 	bl	80051a8 <_malloc_r>
 8005b78:	b948      	cbnz	r0, 8005b8e <__smakebuf_r+0x46>
 8005b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b7e:	059a      	lsls	r2, r3, #22
 8005b80:	d4ee      	bmi.n	8005b60 <__smakebuf_r+0x18>
 8005b82:	f023 0303 	bic.w	r3, r3, #3
 8005b86:	f043 0302 	orr.w	r3, r3, #2
 8005b8a:	81a3      	strh	r3, [r4, #12]
 8005b8c:	e7e2      	b.n	8005b54 <__smakebuf_r+0xc>
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	6020      	str	r0, [r4, #0]
 8005b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	9b01      	ldr	r3, [sp, #4]
 8005b9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b9e:	b15b      	cbz	r3, 8005bb8 <__smakebuf_r+0x70>
 8005ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	f000 f81d 	bl	8005be4 <_isatty_r>
 8005baa:	b128      	cbz	r0, 8005bb8 <__smakebuf_r+0x70>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f023 0303 	bic.w	r3, r3, #3
 8005bb2:	f043 0301 	orr.w	r3, r3, #1
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	431d      	orrs	r5, r3
 8005bbc:	81a5      	strh	r5, [r4, #12]
 8005bbe:	e7cf      	b.n	8005b60 <__smakebuf_r+0x18>

08005bc0 <_fstat_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4d07      	ldr	r5, [pc, #28]	@ (8005be0 <_fstat_r+0x20>)
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	4608      	mov	r0, r1
 8005bca:	4611      	mov	r1, r2
 8005bcc:	602b      	str	r3, [r5, #0]
 8005bce:	f7fb f840 	bl	8000c52 <_fstat>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	d102      	bne.n	8005bdc <_fstat_r+0x1c>
 8005bd6:	682b      	ldr	r3, [r5, #0]
 8005bd8:	b103      	cbz	r3, 8005bdc <_fstat_r+0x1c>
 8005bda:	6023      	str	r3, [r4, #0]
 8005bdc:	bd38      	pop	{r3, r4, r5, pc}
 8005bde:	bf00      	nop
 8005be0:	20000300 	.word	0x20000300

08005be4 <_isatty_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4d06      	ldr	r5, [pc, #24]	@ (8005c00 <_isatty_r+0x1c>)
 8005be8:	2300      	movs	r3, #0
 8005bea:	4604      	mov	r4, r0
 8005bec:	4608      	mov	r0, r1
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	f7fb f83f 	bl	8000c72 <_isatty>
 8005bf4:	1c43      	adds	r3, r0, #1
 8005bf6:	d102      	bne.n	8005bfe <_isatty_r+0x1a>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	b103      	cbz	r3, 8005bfe <_isatty_r+0x1a>
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	bd38      	pop	{r3, r4, r5, pc}
 8005c00:	20000300 	.word	0x20000300

08005c04 <_init>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr

08005c10 <_fini>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr
