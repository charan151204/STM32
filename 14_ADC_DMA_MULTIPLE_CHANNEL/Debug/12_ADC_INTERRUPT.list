
12_ADC_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005c14  08005c14  00006c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca4  08005ca4  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ca4  08005ca4  00006ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cac  08005cac  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cac  08005cac  00006cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cb0  08005cb0  00006cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005cb4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000068  08005d1c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08005d1c  000072c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f62d  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000212d  00000000  00000000  000166c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000187f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  00019560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284e2  00000000  00000000  00019fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef1b  00000000  00000000  0004248e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc90e  00000000  00000000  000513a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014dcb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f74  00000000  00000000  0014dcfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00151c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bfc 	.word	0x08005bfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005bfc 	.word	0x08005bfc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f003 fe99 	bl	80042e4 <HAL_UART_Transmit>
	return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000e8 	.word	0x200000e8

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fba0 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f816 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f90c 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d0:	f000 f8da 	bl	8000788 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005d4:	f000 f862 	bl	800069c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80005d8:	4804      	ldr	r0, [pc, #16]	@ (80005ec <main+0x2c>)
 80005da:	f000 ff57 	bl	800148c <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		  printf("Sensor value : %d\n",(int)sensor_value);
 80005de:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <main+0x30>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <main+0x34>)
 80005e6:	f004 fc9d 	bl	8004f24 <iprintf>
 80005ea:	e7f8      	b.n	80005de <main+0x1e>
 80005ec:	20000084 	.word	0x20000084
 80005f0:	20000170 	.word	0x20000170
 80005f4:	08005c14 	.word	0x08005c14

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	@ 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	@ 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fce1 	bl	8004fce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f002 fb01 	bl	8002c24 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 f95c 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2310      	movs	r3, #16
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000642:	2301      	movs	r3, #1
 8000644:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000646:	230a      	movs	r3, #10
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800064a:	2307      	movs	r3, #7
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fb38 	bl	8002cd0 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000666:	f000 f93d 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2303      	movs	r3, #3
 8000670:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067e:	463b      	mov	r3, r7
 8000680:	2104      	movs	r1, #4
 8000682:	4618      	mov	r0, r3
 8000684:	f002 ff00 	bl	8003488 <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068e:	f000 f929 	bl	80008e4 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3758      	adds	r7, #88	@ 0x58
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006be:	4b2f      	ldr	r3, [pc, #188]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000780 <MX_ADC1_Init+0xe4>)
 80006c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c4:	4b2d      	ldr	r3, [pc, #180]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ca:	4b2c      	ldr	r3, [pc, #176]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d0:	4b2a      	ldr	r3, [pc, #168]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d6:	4b29      	ldr	r3, [pc, #164]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006dc:	4b27      	ldr	r3, [pc, #156]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006de:	2204      	movs	r2, #4
 80006e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006e2:	4b26      	ldr	r3, [pc, #152]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006e8:	4b24      	ldr	r3, [pc, #144]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006ee:	4b23      	ldr	r3, [pc, #140]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f4:	4b21      	ldr	r3, [pc, #132]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_ADC1_Init+0xe0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000702:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <MX_ADC1_Init+0xe0>)
 8000704:	2200      	movs	r2, #0
 8000706:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <MX_ADC1_Init+0xe0>)
 800070a:	2200      	movs	r2, #0
 800070c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_ADC1_Init+0xe0>)
 8000712:	2200      	movs	r2, #0
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <MX_ADC1_Init+0xe0>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071e:	4817      	ldr	r0, [pc, #92]	@ (800077c <MX_ADC1_Init+0xe0>)
 8000720:	f000 fd64 	bl	80011ec <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800072a:	f000 f8db 	bl	80008e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4810      	ldr	r0, [pc, #64]	@ (800077c <MX_ADC1_Init+0xe0>)
 800073a:	f001 fee1 	bl	8002500 <HAL_ADCEx_MultiModeConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000744:	f000 f8ce 	bl	80008e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_ADC1_Init+0xe8>)
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074c:	2306      	movs	r3, #6
 800074e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000750:	2306      	movs	r3, #6
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000754:	237f      	movs	r3, #127	@ 0x7f
 8000756:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000758:	2304      	movs	r3, #4
 800075a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	@ (800077c <MX_ADC1_Init+0xe0>)
 8000766:	f001 f9fb 	bl	8001b60 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000770:	f000 f8b8 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	@ 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000084 	.word	0x20000084
 8000780:	50040000 	.word	0x50040000
 8000784:	04300002 	.word	0x04300002

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	@ (80007e4 <MX_USART2_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_USART2_UART_Init+0x58>)
 80007cc:	f003 fd3c 	bl	8004248 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f885 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000e8 	.word	0x200000e8
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <MX_GPIO_Init+0xc4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a2a      	ldr	r2, [pc, #168]	@ (80008ac <MX_GPIO_Init+0xc4>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <MX_GPIO_Init+0xc4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_GPIO_Init+0xc4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a24      	ldr	r2, [pc, #144]	@ (80008ac <MX_GPIO_Init+0xc4>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b22      	ldr	r3, [pc, #136]	@ (80008ac <MX_GPIO_Init+0xc4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ac <MX_GPIO_Init+0xc4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a1e      	ldr	r2, [pc, #120]	@ (80008ac <MX_GPIO_Init+0xc4>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b1c      	ldr	r3, [pc, #112]	@ (80008ac <MX_GPIO_Init+0xc4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b19      	ldr	r3, [pc, #100]	@ (80008ac <MX_GPIO_Init+0xc4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a18      	ldr	r2, [pc, #96]	@ (80008ac <MX_GPIO_Init+0xc4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <MX_GPIO_Init+0xc4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000866:	f002 f9b7 	bl	8002bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000870:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <MX_GPIO_Init+0xc8>)
 8000882:	f001 ffff 	bl	8002884 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000886:	2320      	movs	r3, #32
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a0:	f001 fff0 	bl	8002884 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	@ 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48000800 	.word	0x48000800

080008b4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void  HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	 if (hadc1->Instance == ADC1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a06      	ldr	r2, [pc, #24]	@ (80008dc <HAL_ADC_ConvCpltCallback+0x28>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d105      	bne.n	80008d2 <HAL_ADC_ConvCpltCallback+0x1e>
	    {
	        sensor_value = HAL_ADC_GetValue(hadc1);
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 ff0e 	bl	80016e8 <HAL_ADC_GetValue>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80008d0:	6013      	str	r3, [r2, #0]

//	        HAL_ADC_Start_IT(hadc1);
	    }
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	50040000 	.word	0x50040000
 80008e0:	20000170 	.word	0x20000170

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <Error_Handler+0x8>

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_MspInit+0x44>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <HAL_MspInit+0x44>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6613      	str	r3, [r2, #96]	@ 0x60
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <HAL_MspInit+0x44>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000912:	4a08      	ldr	r2, [pc, #32]	@ (8000934 <HAL_MspInit+0x44>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000918:	6593      	str	r3, [r2, #88]	@ 0x58
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b0ac      	sub	sp, #176	@ 0xb0
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2288      	movs	r2, #136	@ 0x88
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f004 fb38 	bl	8004fce <memset>
  if(hadc->Instance==ADC1)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a2b      	ldr	r2, [pc, #172]	@ (8000a10 <HAL_ADC_MspInit+0xd8>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d14e      	bne.n	8000a06 <HAL_ADC_MspInit+0xce>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000968:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800096c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800096e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000972:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800097a:	2301      	movs	r3, #1
 800097c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800097e:	2308      	movs	r3, #8
 8000980:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000982:	2307      	movs	r3, #7
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000986:	2302      	movs	r3, #2
 8000988:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800098a:	2302      	movs	r3, #2
 800098c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800098e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000992:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4618      	mov	r0, r3
 800099a:	f002 ff99 	bl	80038d0 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80009a4:	f7ff ff9e 	bl	80008e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <HAL_ADC_MspInit+0xdc>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ac:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <HAL_ADC_MspInit+0xdc>)
 80009ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <HAL_ADC_MspInit+0xdc>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <HAL_ADC_MspInit+0xdc>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	4a13      	ldr	r2, [pc, #76]	@ (8000a14 <HAL_ADC_MspInit+0xdc>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <HAL_ADC_MspInit+0xdc>)
 80009ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009d8:	2301      	movs	r3, #1
 80009da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009de:	230b      	movs	r3, #11
 80009e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ee:	4619      	mov	r1, r3
 80009f0:	4809      	ldr	r0, [pc, #36]	@ (8000a18 <HAL_ADC_MspInit+0xe0>)
 80009f2:	f001 ff47 	bl	8002884 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2012      	movs	r0, #18
 80009fc:	f001 ff0b 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a00:	2012      	movs	r0, #18
 8000a02:	f001 ff24 	bl	800284e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a06:	bf00      	nop
 8000a08:	37b0      	adds	r7, #176	@ 0xb0
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	50040000 	.word	0x50040000
 8000a14:	40021000 	.word	0x40021000
 8000a18:	48000800 	.word	0x48000800

08000a1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0ac      	sub	sp, #176	@ 0xb0
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2288      	movs	r2, #136	@ 0x88
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 fac6 	bl	8004fce <memset>
  if(huart->Instance==USART2)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a21      	ldr	r2, [pc, #132]	@ (8000acc <HAL_UART_MspInit+0xb0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d13b      	bne.n	8000ac4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 ff39 	bl	80038d0 <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a64:	f7ff ff3e 	bl	80008e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a68:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <HAL_UART_MspInit+0xb4>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6c:	4a18      	ldr	r2, [pc, #96]	@ (8000ad0 <HAL_UART_MspInit+0xb4>)
 8000a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a72:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a74:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <HAL_UART_MspInit+0xb4>)
 8000a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b13      	ldr	r3, [pc, #76]	@ (8000ad0 <HAL_UART_MspInit+0xb4>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <HAL_UART_MspInit+0xb4>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <HAL_UART_MspInit+0xb4>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aba:	4619      	mov	r1, r3
 8000abc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac0:	f001 fee0 	bl	8002884 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ac4:	bf00      	nop
 8000ac6:	37b0      	adds	r7, #176	@ 0xb0
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2a:	f000 f949 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b38:	4802      	ldr	r0, [pc, #8]	@ (8000b44 <ADC1_2_IRQHandler+0x10>)
 8000b3a:	f000 fde3 	bl	8001704 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000084 	.word	0x20000084

08000b48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e00a      	b.n	8000b70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b5a:	f3af 8000 	nop.w
 8000b5e:	4601      	mov	r1, r0
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf0      	blt.n	8000b5a <_read+0x12>
  }

  return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e009      	b.n	8000ba8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fcfd 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf1      	blt.n	8000b94 <_write+0x12>
  }
  return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_close>:

int _close(int file)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be2:	605a      	str	r2, [r3, #4]
  return 0;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <_isatty>:

int _isatty(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	@ (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f004 fa0a 	bl	800506c <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20018000 	.word	0x20018000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	20000174 	.word	0x20000174
 8000c8c:	200002c8 	.word	0x200002c8

08000c90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	@ (8000cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d00 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f004 f9c9 	bl	8005078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ce6:	f7ff fc6b 	bl	80005c0 <main>

08000cea <LoopForever>:

LoopForever:
    b LoopForever
 8000cea:	e7fe      	b.n	8000cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cf8:	08005cb4 	.word	0x08005cb4
  ldr r2, =_sbss
 8000cfc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d00:	200002c8 	.word	0x200002c8

08000d04 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC3_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d12:	4b0c      	ldr	r3, [pc, #48]	@ (8000d44 <HAL_Init+0x3c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a0b      	ldr	r2, [pc, #44]	@ (8000d44 <HAL_Init+0x3c>)
 8000d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1e:	2003      	movs	r0, #3
 8000d20:	f001 fd6e 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 f80f 	bl	8000d48 <HAL_InitTick>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	e001      	b.n	8000d3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d36:	f7ff fddb 	bl	80008f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d54:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <HAL_InitTick+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d023      	beq.n	8000da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d5c:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <HAL_InitTick+0x70>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <HAL_InitTick+0x6c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fd79 	bl	800286a <HAL_SYSTICK_Config>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d10f      	bne.n	8000d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d809      	bhi.n	8000d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f001 fd43 	bl	8002816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d90:	4a0a      	ldr	r2, [pc, #40]	@ (8000dbc <HAL_InitTick+0x74>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e007      	b.n	8000da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e004      	b.n	8000da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
 8000da2:	e001      	b.n	8000da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000178 	.word	0x20000178

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000178 	.word	0x20000178

08000e00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	609a      	str	r2, [r3, #8]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3360      	adds	r3, #96	@ 0x60
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <LL_ADC_SetOffset+0x44>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	4313      	orrs	r3, r2
 8000e98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ea0:	bf00      	nop
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	03fff000 	.word	0x03fff000

08000eb0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3360      	adds	r3, #96	@ 0x60
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3360      	adds	r3, #96	@ 0x60
 8000eec:	461a      	mov	r2, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f06:	bf00      	nop
 8000f08:	371c      	adds	r7, #28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3330      	adds	r3, #48	@ 0x30
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	f003 030c 	and.w	r3, r3, #12
 8000f54:	4413      	add	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	211f      	movs	r1, #31
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	0e9b      	lsrs	r3, r3, #26
 8000f70:	f003 011f 	and.w	r1, r3, #31
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f003 031f 	and.w	r3, r3, #31
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f84:	bf00      	nop
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b087      	sub	sp, #28
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3314      	adds	r3, #20
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	0e5b      	lsrs	r3, r3, #25
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	4413      	add	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	0d1b      	lsrs	r3, r3, #20
 8000fde:	f003 031f 	and.w	r3, r3, #31
 8000fe2:	2107      	movs	r1, #7
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	401a      	ands	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	0d1b      	lsrs	r3, r3, #20
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001000:	bf00      	nop
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0318 	and.w	r3, r3, #24
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001030:	40d9      	lsrs	r1, r3
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	400b      	ands	r3, r1
 8001036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800103a:	431a      	orrs	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	0007ffff 	.word	0x0007ffff

08001054 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 031f 	and.w	r3, r3, #31
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800109c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6093      	str	r3, [r2, #8]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010c4:	d101      	bne.n	80010ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80010e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001114:	d101      	bne.n	800111a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001138:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800113c:	f043 0201 	orr.w	r2, r3, #1
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <LL_ADC_IsEnabled+0x18>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <LL_ADC_IsEnabled+0x1a>
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001186:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800118a:	f043 0204 	orr.w	r2, r3, #4
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d101      	bne.n	80011b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d101      	bne.n	80011dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b089      	sub	sp, #36	@ 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e130      	b.n	8001468 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001210:	2b00      	cmp	r3, #0
 8001212:	d109      	bne.n	8001228 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fb8f 	bl	8000938 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff3f 	bl	80010b0 <LL_ADC_IsDeepPowerDownEnabled>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff25 	bl	800108c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff5a 	bl	8001100 <LL_ADC_IsInternalRegulatorEnabled>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d115      	bne.n	800127e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff3e 	bl	80010d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800125c:	4b84      	ldr	r3, [pc, #528]	@ (8001470 <HAL_ADC_Init+0x284>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	099b      	lsrs	r3, r3, #6
 8001262:	4a84      	ldr	r2, [pc, #528]	@ (8001474 <HAL_ADC_Init+0x288>)
 8001264:	fba2 2303 	umull	r2, r3, r2, r3
 8001268:	099b      	lsrs	r3, r3, #6
 800126a:	3301      	adds	r3, #1
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001270:	e002      	b.n	8001278 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3b01      	subs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f9      	bne.n	8001272 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff3c 	bl	8001100 <LL_ADC_IsInternalRegulatorEnabled>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10d      	bne.n	80012aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001292:	f043 0210 	orr.w	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff75 	bl	800119e <LL_ADC_REG_IsConversionOngoing>
 80012b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f040 80c9 	bne.w	8001456 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 80c5 	bne.w	8001456 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80012d4:	f043 0202 	orr.w	r2, r3, #2
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff35 	bl	8001150 <LL_ADC_IsEnabled>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d115      	bne.n	8001318 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012ec:	4862      	ldr	r0, [pc, #392]	@ (8001478 <HAL_ADC_Init+0x28c>)
 80012ee:	f7ff ff2f 	bl	8001150 <LL_ADC_IsEnabled>
 80012f2:	4604      	mov	r4, r0
 80012f4:	4861      	ldr	r0, [pc, #388]	@ (800147c <HAL_ADC_Init+0x290>)
 80012f6:	f7ff ff2b 	bl	8001150 <LL_ADC_IsEnabled>
 80012fa:	4603      	mov	r3, r0
 80012fc:	431c      	orrs	r4, r3
 80012fe:	4860      	ldr	r0, [pc, #384]	@ (8001480 <HAL_ADC_Init+0x294>)
 8001300:	f7ff ff26 	bl	8001150 <LL_ADC_IsEnabled>
 8001304:	4603      	mov	r3, r0
 8001306:	4323      	orrs	r3, r4
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4619      	mov	r1, r3
 8001312:	485c      	ldr	r0, [pc, #368]	@ (8001484 <HAL_ADC_Init+0x298>)
 8001314:	f7ff fd74 	bl	8000e00 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7e5b      	ldrb	r3, [r3, #25]
 800131c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001322:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001328:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800132e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001336:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d106      	bne.n	8001354 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800134a:	3b01      	subs	r3, #1
 800134c:	045b      	lsls	r3, r3, #17
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001358:	2b00      	cmp	r3, #0
 800135a:	d009      	beq.n	8001370 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001360:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001368:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <HAL_ADC_Init+0x29c>)
 8001378:	4013      	ands	r3, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	430b      	orrs	r3, r1
 8001382:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff1b 	bl	80011c4 <LL_ADC_INJ_IsConversionOngoing>
 800138e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d13d      	bne.n	8001412 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d13a      	bne.n	8001412 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013a0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013a8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80013b8:	f023 0302 	bic.w	r3, r3, #2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	69b9      	ldr	r1, [r7, #24]
 80013c2:	430b      	orrs	r3, r1
 80013c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d118      	bne.n	8001402 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80013da:	f023 0304 	bic.w	r3, r3, #4
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80013e6:	4311      	orrs	r1, r2
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80013ec:	4311      	orrs	r1, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80013f2:	430a      	orrs	r2, r1
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	e007      	b.n	8001412 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691a      	ldr	r2, [r3, #16]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10c      	bne.n	8001434 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	f023 010f 	bic.w	r1, r3, #15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	1e5a      	subs	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	631a      	str	r2, [r3, #48]	@ 0x30
 8001432:	e007      	b.n	8001444 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 020f 	bic.w	r2, r2, #15
 8001442:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001448:	f023 0303 	bic.w	r3, r3, #3
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	655a      	str	r2, [r3, #84]	@ 0x54
 8001454:	e007      	b.n	8001466 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800145a:	f043 0210 	orr.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001466:	7ffb      	ldrb	r3, [r7, #31]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3724      	adds	r7, #36	@ 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	053e2d63 	.word	0x053e2d63
 8001478:	50040000 	.word	0x50040000
 800147c:	50040100 	.word	0x50040100
 8001480:	50040200 	.word	0x50040200
 8001484:	50040300 	.word	0x50040300
 8001488:	fff0c007 	.word	0xfff0c007

0800148c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001494:	4891      	ldr	r0, [pc, #580]	@ (80016dc <HAL_ADC_Start_IT+0x250>)
 8001496:	f7ff fddd 	bl	8001054 <LL_ADC_GetMultimode>
 800149a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe7c 	bl	800119e <LL_ADC_REG_IsConversionOngoing>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f040 8110 	bne.w	80016ce <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <HAL_ADC_Start_IT+0x30>
 80014b8:	2302      	movs	r3, #2
 80014ba:	e10b      	b.n	80016d4 <HAL_ADC_Start_IT+0x248>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 ff3d 	bl	8002344 <ADC_Enable>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f040 80f7 	bne.w	80016c4 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a7c      	ldr	r2, [pc, #496]	@ (80016e0 <HAL_ADC_Start_IT+0x254>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d002      	beq.n	80014fa <HAL_ADC_Start_IT+0x6e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	e000      	b.n	80014fc <HAL_ADC_Start_IT+0x70>
 80014fa:	4b7a      	ldr	r3, [pc, #488]	@ (80016e4 <HAL_ADC_Start_IT+0x258>)
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	4293      	cmp	r3, r2
 8001502:	d002      	beq.n	800150a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d105      	bne.n	8001516 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800150e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d006      	beq.n	8001530 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	f023 0206 	bic.w	r2, r3, #6
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	659a      	str	r2, [r3, #88]	@ 0x58
 800152e:	e002      	b.n	8001536 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	221c      	movs	r2, #28
 800153c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 021c 	bic.w	r2, r2, #28
 8001554:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	2b08      	cmp	r3, #8
 800155c:	d108      	bne.n	8001570 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 0208 	orr.w	r2, r2, #8
 800156c:	605a      	str	r2, [r3, #4]
          break;
 800156e:	e008      	b.n	8001582 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0204 	orr.w	r2, r2, #4
 800157e:	605a      	str	r2, [r3, #4]
          break;
 8001580:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001586:	2b00      	cmp	r3, #0
 8001588:	d107      	bne.n	800159a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 0210 	orr.w	r2, r2, #16
 8001598:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a50      	ldr	r2, [pc, #320]	@ (80016e0 <HAL_ADC_Start_IT+0x254>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d002      	beq.n	80015aa <HAL_ADC_Start_IT+0x11e>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	e000      	b.n	80015ac <HAL_ADC_Start_IT+0x120>
 80015aa:	4b4e      	ldr	r3, [pc, #312]	@ (80016e4 <HAL_ADC_Start_IT+0x258>)
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d008      	beq.n	80015c6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d002      	beq.n	80015c6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	2b09      	cmp	r3, #9
 80015c4:	d13a      	bne.n	800163c <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d02d      	beq.n	8001630 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d110      	bne.n	800160e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0220 	bic.w	r2, r2, #32
 80015fa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800160a:	605a      	str	r2, [r3, #4]
              break;
 800160c:	e010      	b.n	8001630 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800161c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	605a      	str	r2, [r3, #4]
              break;
 800162e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fd9e 	bl	8001176 <LL_ADC_REG_StartConversion>
 800163a:	e04a      	b.n	80016d2 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001640:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a24      	ldr	r2, [pc, #144]	@ (80016e0 <HAL_ADC_Start_IT+0x254>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d002      	beq.n	8001658 <HAL_ADC_Start_IT+0x1cc>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	e000      	b.n	800165a <HAL_ADC_Start_IT+0x1ce>
 8001658:	4b22      	ldr	r3, [pc, #136]	@ (80016e4 <HAL_ADC_Start_IT+0x258>)
 800165a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d034      	beq.n	80016d2 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001670:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	2b08      	cmp	r3, #8
 800167e:	d110      	bne.n	80016a2 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0220 	bic.w	r2, r2, #32
 800168e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800169e:	605a      	str	r2, [r3, #4]
              break;
 80016a0:	e017      	b.n	80016d2 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016b0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0220 	orr.w	r2, r2, #32
 80016c0:	605a      	str	r2, [r3, #4]
              break;
 80016c2:	e006      	b.n	80016d2 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80016cc:	e001      	b.n	80016d2 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016ce:	2302      	movs	r3, #2
 80016d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	50040300 	.word	0x50040300
 80016e0:	50040100 	.word	0x50040100
 80016e4:	50040000 	.word	0x50040000

080016e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001720:	4882      	ldr	r0, [pc, #520]	@ (800192c <HAL_ADC_IRQHandler+0x228>)
 8001722:	f7ff fc97 	bl	8001054 <LL_ADC_GetMultimode>
 8001726:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d017      	beq.n	8001762 <HAL_ADC_IRQHandler+0x5e>
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d012      	beq.n	8001762 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	d105      	bne.n	8001754 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 fec9 	bl	80024ec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2202      	movs	r2, #2
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_ADC_IRQHandler+0x72>
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10a      	bne.n	800178c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8083 	beq.w	8001888 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d07d      	beq.n	8001888 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800179c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fbb2 	bl	8000f12 <LL_ADC_REG_IsTriggerSourceSWStart>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d062      	beq.n	800187a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001930 <HAL_ADC_IRQHandler+0x22c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d002      	beq.n	80017c4 <HAL_ADC_IRQHandler+0xc0>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	e000      	b.n	80017c6 <HAL_ADC_IRQHandler+0xc2>
 80017c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001934 <HAL_ADC_IRQHandler+0x230>)
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d008      	beq.n	80017e0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b05      	cmp	r3, #5
 80017d8:	d002      	beq.n	80017e0 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d104      	bne.n	80017ea <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	e00c      	b.n	8001804 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a50      	ldr	r2, [pc, #320]	@ (8001930 <HAL_ADC_IRQHandler+0x22c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d002      	beq.n	80017fa <HAL_ADC_IRQHandler+0xf6>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	e000      	b.n	80017fc <HAL_ADC_IRQHandler+0xf8>
 80017fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001934 <HAL_ADC_IRQHandler+0x230>)
 80017fc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d135      	bne.n	800187a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b08      	cmp	r3, #8
 800181a:	d12e      	bne.n	800187a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fcbc 	bl	800119e <LL_ADC_REG_IsConversionOngoing>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11a      	bne.n	8001862 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020c 	bic.w	r2, r2, #12
 800183a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800184c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d112      	bne.n	800187a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001860:	e00b      	b.n	800187a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001866:	f043 0210 	orr.w	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff f81a 	bl	80008b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	220c      	movs	r2, #12
 8001886:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <HAL_ADC_IRQHandler+0x198>
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10b      	bne.n	80018b4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 809f 	beq.w	80019e6 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8099 	beq.w	80019e6 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fb5d 	bl	8000f90 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80018d6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fb18 	bl	8000f12 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018e2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a11      	ldr	r2, [pc, #68]	@ (8001930 <HAL_ADC_IRQHandler+0x22c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d002      	beq.n	80018f4 <HAL_ADC_IRQHandler+0x1f0>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e000      	b.n	80018f6 <HAL_ADC_IRQHandler+0x1f2>
 80018f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <HAL_ADC_IRQHandler+0x230>)
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d008      	beq.n	8001910 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2b06      	cmp	r3, #6
 8001908:	d002      	beq.n	8001910 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b07      	cmp	r3, #7
 800190e:	d104      	bne.n	800191a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	623b      	str	r3, [r7, #32]
 8001918:	e013      	b.n	8001942 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <HAL_ADC_IRQHandler+0x22c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d009      	beq.n	8001938 <HAL_ADC_IRQHandler+0x234>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	e007      	b.n	800193a <HAL_ADC_IRQHandler+0x236>
 800192a:	bf00      	nop
 800192c:	50040300 	.word	0x50040300
 8001930:	50040100 	.word	0x50040100
 8001934:	50040000 	.word	0x50040000
 8001938:	4b7d      	ldr	r3, [pc, #500]	@ (8001b30 <HAL_ADC_IRQHandler+0x42c>)
 800193a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d047      	beq.n	80019d8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_ADC_IRQHandler+0x25e>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d03f      	beq.n	80019d8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800195e:	2b00      	cmp	r3, #0
 8001960:	d13a      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800196c:	2b40      	cmp	r3, #64	@ 0x40
 800196e:	d133      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d12e      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff fc20 	bl	80011c4 <LL_ADC_INJ_IsConversionOngoing>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d11a      	bne.n	80019c0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001998:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800199e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d112      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	655a      	str	r2, [r3, #84]	@ 0x54
 80019be:	e00b      	b.n	80019d8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c4:	f043 0210 	orr.w	r2, r3, #16
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fd5f 	bl	800249c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2260      	movs	r2, #96	@ 0x60
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d011      	beq.n	8001a14 <HAL_ADC_IRQHandler+0x310>
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00c      	beq.n	8001a14 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f896 	bl	8001b38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2280      	movs	r2, #128	@ 0x80
 8001a12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d012      	beq.n	8001a44 <HAL_ADC_IRQHandler+0x340>
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00d      	beq.n	8001a44 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a2c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 fd45 	bl	80024c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d012      	beq.n	8001a74 <HAL_ADC_IRQHandler+0x370>
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fd37 	bl	80024d8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d036      	beq.n	8001aec <HAL_ADC_IRQHandler+0x3e8>
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d031      	beq.n	8001aec <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d102      	bne.n	8001a96 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001a90:	2301      	movs	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a94:	e014      	b.n	8001ac0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a9c:	4825      	ldr	r0, [pc, #148]	@ (8001b34 <HAL_ADC_IRQHandler+0x430>)
 8001a9e:	f7ff fae7 	bl	8001070 <LL_ADC_GetMultiDMATransfer>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00b      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aac:	e008      	b.n	8001ac0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001abc:	2301      	movs	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aca:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f834 	bl	8001b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2210      	movs	r2, #16
 8001aea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d018      	beq.n	8001b28 <HAL_ADC_IRQHandler+0x424>
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d013      	beq.n	8001b28 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b04:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b10:	f043 0208 	orr.w	r2, r3, #8
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b20:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fcc4 	bl	80024b0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	3728      	adds	r7, #40	@ 0x28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	50040000 	.word	0x50040000
 8001b34:	50040300 	.word	0x50040300

08001b38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0b6      	sub	sp, #216	@ 0xd8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x22>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e3c9      	b.n	8002316 <HAL_ADC_ConfigChannel+0x7b6>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fb05 	bl	800119e <LL_ADC_REG_IsConversionOngoing>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 83aa 	bne.w	80022f0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b05      	cmp	r3, #5
 8001baa:	d824      	bhi.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	3b02      	subs	r3, #2
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d81b      	bhi.n	8001bee <HAL_ADC_ConfigChannel+0x8e>
 8001bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <HAL_ADC_ConfigChannel+0x5c>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bd5 	.word	0x08001bd5
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001be5 	.word	0x08001be5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001bcc:	230c      	movs	r3, #12
 8001bce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bd2:	e010      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bda:	e00c      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001bdc:	2318      	movs	r3, #24
 8001bde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001be2:	e008      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bec:	e003      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001bee:	2306      	movs	r3, #6
 8001bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001bf4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001c04:	f7ff f998 	bl	8000f38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fac6 	bl	800119e <LL_ADC_REG_IsConversionOngoing>
 8001c12:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fad2 	bl	80011c4 <LL_ADC_INJ_IsConversionOngoing>
 8001c20:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 81a4 	bne.w	8001f76 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 819f 	bne.w	8001f76 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	461a      	mov	r2, r3
 8001c46:	f7ff f9b6 	bl	8000fb6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	695a      	ldr	r2, [r3, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d00a      	beq.n	8001c82 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6919      	ldr	r1, [r3, #16]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c7c:	f7ff f8f4 	bl	8000e68 <LL_ADC_SetOffset>
 8001c80:	e179      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f911 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10a      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x14e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f906 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	0e9b      	lsrs	r3, r3, #26
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	e01e      	b.n	8001cec <HAL_ADC_ConfigChannel+0x18c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f8fb 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ccc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001cdc:	2320      	movs	r3, #32
 8001cde:	e004      	b.n	8001cea <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001ce0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x1a4>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0e9b      	lsrs	r3, r3, #26
 8001cfe:	f003 031f 	and.w	r3, r3, #31
 8001d02:	e018      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1d6>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001d20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	e004      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001d2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d106      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff f8ca 	bl	8000edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f8ae 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10a      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x214>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f8a3 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	0e9b      	lsrs	r3, r3, #26
 8001d6e:	f003 021f 	and.w	r2, r3, #31
 8001d72:	e01e      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x252>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f898 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001da2:	2320      	movs	r3, #32
 8001da4:	e004      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d105      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x26a>
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0e9b      	lsrs	r3, r3, #26
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	e018      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x29c>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001de2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001de6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001dee:	2320      	movs	r3, #32
 8001df0:	e004      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001df2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d106      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2200      	movs	r2, #0
 8001e06:	2101      	movs	r1, #1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f867 	bl	8000edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2102      	movs	r1, #2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f84b 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10a      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x2da>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f840 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	0e9b      	lsrs	r3, r3, #26
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	e01e      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x318>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f835 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e004      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d105      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x330>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e9b      	lsrs	r3, r3, #26
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	e014      	b.n	8001eba <HAL_ADC_ConfigChannel+0x35a>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001e9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001eac:	2320      	movs	r3, #32
 8001eae:	e004      	b.n	8001eba <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d106      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f808 	bl	8000edc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2103      	movs	r1, #3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe ffec 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10a      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x398>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe ffe1 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	0e9b      	lsrs	r3, r3, #26
 8001ef2:	f003 021f 	and.w	r2, r3, #31
 8001ef6:	e017      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x3c8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2103      	movs	r1, #3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ffd6 	bl	8000eb0 <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f12:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001f14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	e003      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001f1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x3e0>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0e9b      	lsrs	r3, r3, #26
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	e011      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x404>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001f4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f50:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001f52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	e003      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f5e:	fab3 f383 	clz	r3, r3
 8001f62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d106      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2103      	movs	r1, #3
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe ffb3 	bl	8000edc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff f8e8 	bl	8001150 <LL_ADC_IsEnabled>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 8140 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6819      	ldr	r1, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	461a      	mov	r2, r3
 8001f96:	f7ff f839 	bl	800100c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	4a8f      	ldr	r2, [pc, #572]	@ (80021dc <HAL_ADC_ConfigChannel+0x67c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	f040 8131 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x46e>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0e9b      	lsrs	r3, r3, #26
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	2b09      	cmp	r3, #9
 8001fc4:	bf94      	ite	ls
 8001fc6:	2301      	movls	r3, #1
 8001fc8:	2300      	movhi	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	e019      	b.n	8002002 <HAL_ADC_ConfigChannel+0x4a2>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	e003      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2b09      	cmp	r3, #9
 8001ffa:	bf94      	ite	ls
 8001ffc:	2301      	movls	r3, #1
 8001ffe:	2300      	movhi	r3, #0
 8002000:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002002:	2b00      	cmp	r3, #0
 8002004:	d079      	beq.n	80020fa <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x4c2>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	3301      	adds	r3, #1
 800201a:	069b      	lsls	r3, r3, #26
 800201c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002020:	e015      	b.n	800204e <HAL_ADC_ConfigChannel+0x4ee>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002032:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800203a:	2320      	movs	r3, #32
 800203c:	e003      	b.n	8002046 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800203e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3301      	adds	r3, #1
 8002048:	069b      	lsls	r3, r3, #26
 800204a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_ADC_ConfigChannel+0x50e>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	3301      	adds	r3, #1
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	e017      	b.n	800209e <HAL_ADC_ConfigChannel+0x53e>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800207c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e003      	b.n	8002092 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800208a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	ea42 0103 	orr.w	r1, r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10a      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x564>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	0e9b      	lsrs	r3, r3, #26
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 021f 	and.w	r2, r3, #31
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	051b      	lsls	r3, r3, #20
 80020c2:	e018      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x596>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80020d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80020d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80020dc:	2320      	movs	r3, #32
 80020de:	e003      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80020e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e2:	fab3 f383 	clz	r3, r3
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	f003 021f 	and.w	r2, r3, #31
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f6:	430b      	orrs	r3, r1
 80020f8:	e081      	b.n	80021fe <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002102:	2b00      	cmp	r3, #0
 8002104:	d107      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x5b6>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	0e9b      	lsrs	r3, r3, #26
 800210c:	3301      	adds	r3, #1
 800210e:	069b      	lsls	r3, r3, #26
 8002110:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002114:	e015      	b.n	8002142 <HAL_ADC_ConfigChannel+0x5e2>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800212e:	2320      	movs	r3, #32
 8002130:	e003      	b.n	800213a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3301      	adds	r3, #1
 800213c:	069b      	lsls	r3, r3, #26
 800213e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x602>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	0e9b      	lsrs	r3, r3, #26
 8002154:	3301      	adds	r3, #1
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	e017      	b.n	8002192 <HAL_ADC_ConfigChannel+0x632>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	61bb      	str	r3, [r7, #24]
  return result;
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e003      	b.n	8002186 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	2101      	movs	r1, #1
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	ea42 0103 	orr.w	r1, r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10d      	bne.n	80021be <HAL_ADC_ConfigChannel+0x65e>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	0e9b      	lsrs	r3, r3, #26
 80021a8:	3301      	adds	r3, #1
 80021aa:	f003 021f 	and.w	r2, r3, #31
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	3b1e      	subs	r3, #30
 80021b6:	051b      	lsls	r3, r3, #20
 80021b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021bc:	e01e      	b.n	80021fc <HAL_ADC_ConfigChannel+0x69c>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	fa93 f3a3 	rbit	r3, r3
 80021ca:	60fb      	str	r3, [r7, #12]
  return result;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d104      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80021d6:	2320      	movs	r3, #32
 80021d8:	e006      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x688>
 80021da:	bf00      	nop
 80021dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	f003 021f 	and.w	r2, r3, #31
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	3b1e      	subs	r3, #30
 80021f6:	051b      	lsls	r3, r3, #20
 80021f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002202:	4619      	mov	r1, r3
 8002204:	f7fe fed7 	bl	8000fb6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b44      	ldr	r3, [pc, #272]	@ (8002320 <HAL_ADC_ConfigChannel+0x7c0>)
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d07a      	beq.n	800230a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002214:	4843      	ldr	r0, [pc, #268]	@ (8002324 <HAL_ADC_ConfigChannel+0x7c4>)
 8002216:	f7fe fe19 	bl	8000e4c <LL_ADC_GetCommonPathInternalCh>
 800221a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a41      	ldr	r2, [pc, #260]	@ (8002328 <HAL_ADC_ConfigChannel+0x7c8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d12c      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800222c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d126      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a3c      	ldr	r2, [pc, #240]	@ (800232c <HAL_ADC_ConfigChannel+0x7cc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_ADC_ConfigChannel+0x6e8>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a3b      	ldr	r2, [pc, #236]	@ (8002330 <HAL_ADC_ConfigChannel+0x7d0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d15d      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002248:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800224c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002250:	4619      	mov	r1, r3
 8002252:	4834      	ldr	r0, [pc, #208]	@ (8002324 <HAL_ADC_ConfigChannel+0x7c4>)
 8002254:	f7fe fde7 	bl	8000e26 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002258:	4b36      	ldr	r3, [pc, #216]	@ (8002334 <HAL_ADC_ConfigChannel+0x7d4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	4a36      	ldr	r2, [pc, #216]	@ (8002338 <HAL_ADC_ConfigChannel+0x7d8>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	4613      	mov	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002272:	e002      	b.n	800227a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	3b01      	subs	r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f9      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002280:	e040      	b.n	8002304 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2d      	ldr	r2, [pc, #180]	@ (800233c <HAL_ADC_ConfigChannel+0x7dc>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d118      	bne.n	80022be <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800228c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d112      	bne.n	80022be <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a23      	ldr	r2, [pc, #140]	@ (800232c <HAL_ADC_ConfigChannel+0x7cc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d004      	beq.n	80022ac <HAL_ADC_ConfigChannel+0x74c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a22      	ldr	r2, [pc, #136]	@ (8002330 <HAL_ADC_ConfigChannel+0x7d0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d12d      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022b4:	4619      	mov	r1, r3
 80022b6:	481b      	ldr	r0, [pc, #108]	@ (8002324 <HAL_ADC_ConfigChannel+0x7c4>)
 80022b8:	f7fe fdb5 	bl	8000e26 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022bc:	e024      	b.n	8002308 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002340 <HAL_ADC_ConfigChannel+0x7e0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d120      	bne.n	800230a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d11a      	bne.n	800230a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a14      	ldr	r2, [pc, #80]	@ (800232c <HAL_ADC_ConfigChannel+0x7cc>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d115      	bne.n	800230a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022e6:	4619      	mov	r1, r3
 80022e8:	480e      	ldr	r0, [pc, #56]	@ (8002324 <HAL_ADC_ConfigChannel+0x7c4>)
 80022ea:	f7fe fd9c 	bl	8000e26 <LL_ADC_SetCommonPathInternalCh>
 80022ee:	e00c      	b.n	800230a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f4:	f043 0220 	orr.w	r2, r3, #32
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002302:	e002      	b.n	800230a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002304:	bf00      	nop
 8002306:	e000      	b.n	800230a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002308:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002312:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002316:	4618      	mov	r0, r3
 8002318:	37d8      	adds	r7, #216	@ 0xd8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	80080000 	.word	0x80080000
 8002324:	50040300 	.word	0x50040300
 8002328:	c7520000 	.word	0xc7520000
 800232c:	50040000 	.word	0x50040000
 8002330:	50040200 	.word	0x50040200
 8002334:	20000000 	.word	0x20000000
 8002338:	053e2d63 	.word	0x053e2d63
 800233c:	cb840000 	.word	0xcb840000
 8002340:	80000001 	.word	0x80000001

08002344 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fefb 	bl	8001150 <LL_ADC_IsEnabled>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d169      	bne.n	8002434 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <ADC_Enable+0xfc>)
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00d      	beq.n	800238a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002372:	f043 0210 	orr.w	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e055      	b.n	8002436 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe feca 	bl	8001128 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002394:	482b      	ldr	r0, [pc, #172]	@ (8002444 <ADC_Enable+0x100>)
 8002396:	f7fe fd59 	bl	8000e4c <LL_ADC_GetCommonPathInternalCh>
 800239a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800239c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023a4:	4b28      	ldr	r3, [pc, #160]	@ (8002448 <ADC_Enable+0x104>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	4a28      	ldr	r2, [pc, #160]	@ (800244c <ADC_Enable+0x108>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023be:	e002      	b.n	80023c6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f9      	bne.n	80023c0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023cc:	f7fe fd0c 	bl	8000de8 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023d2:	e028      	b.n	8002426 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe feb9 	bl	8001150 <LL_ADC_IsEnabled>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d104      	bne.n	80023ee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fe9d 	bl	8001128 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ee:	f7fe fcfb 	bl	8000de8 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d914      	bls.n	8002426 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b01      	cmp	r3, #1
 8002408:	d00d      	beq.n	8002426 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800240e:	f043 0210 	orr.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e007      	b.n	8002436 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d1cf      	bne.n	80023d4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	8000003f 	.word	0x8000003f
 8002444:	50040300 	.word	0x50040300
 8002448:	20000000 	.word	0x20000000
 800244c:	053e2d63 	.word	0x053e2d63

08002450 <LL_ADC_IsEnabled>:
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <LL_ADC_IsEnabled+0x18>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <LL_ADC_IsEnabled+0x1a>
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_ADC_REG_IsConversionOngoing>:
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b04      	cmp	r3, #4
 8002488:	d101      	bne.n	800248e <LL_ADC_REG_IsConversionOngoing+0x18>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b09f      	sub	sp, #124	@ 0x7c
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800251a:	2302      	movs	r3, #2
 800251c:	e093      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002526:	2300      	movs	r3, #0
 8002528:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800252a:	2300      	movs	r3, #0
 800252c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a47      	ldr	r2, [pc, #284]	@ (8002650 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d102      	bne.n	800253e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002538:	4b46      	ldr	r3, [pc, #280]	@ (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	e001      	b.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e072      	b.n	8002646 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff87 	bl	8002476 <LL_ADC_REG_IsConversionOngoing>
 8002568:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff81 	bl	8002476 <LL_ADC_REG_IsConversionOngoing>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d154      	bne.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800257a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800257c:	2b00      	cmp	r3, #0
 800257e:	d151      	bne.n	8002624 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002580:	4b35      	ldr	r3, [pc, #212]	@ (8002658 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002582:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d02c      	beq.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800258c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800259e:	035b      	lsls	r3, r3, #13
 80025a0:	430b      	orrs	r3, r1
 80025a2:	431a      	orrs	r2, r3
 80025a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a8:	4829      	ldr	r0, [pc, #164]	@ (8002650 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025aa:	f7ff ff51 	bl	8002450 <LL_ADC_IsEnabled>
 80025ae:	4604      	mov	r4, r0
 80025b0:	4828      	ldr	r0, [pc, #160]	@ (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025b2:	f7ff ff4d 	bl	8002450 <LL_ADC_IsEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	431c      	orrs	r4, r3
 80025ba:	4828      	ldr	r0, [pc, #160]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80025bc:	f7ff ff48 	bl	8002450 <LL_ADC_IsEnabled>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4323      	orrs	r3, r4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d137      	bne.n	8002638 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80025d0:	f023 030f 	bic.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	6811      	ldr	r1, [r2, #0]
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	6892      	ldr	r2, [r2, #8]
 80025dc:	430a      	orrs	r2, r1
 80025de:	431a      	orrs	r2, r3
 80025e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025e2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025e4:	e028      	b.n	8002638 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f2:	4817      	ldr	r0, [pc, #92]	@ (8002650 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025f4:	f7ff ff2c 	bl	8002450 <LL_ADC_IsEnabled>
 80025f8:	4604      	mov	r4, r0
 80025fa:	4816      	ldr	r0, [pc, #88]	@ (8002654 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025fc:	f7ff ff28 	bl	8002450 <LL_ADC_IsEnabled>
 8002600:	4603      	mov	r3, r0
 8002602:	431c      	orrs	r4, r3
 8002604:	4815      	ldr	r0, [pc, #84]	@ (800265c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002606:	f7ff ff23 	bl	8002450 <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	4323      	orrs	r3, r4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d112      	bne.n	8002638 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002612:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800261a:	f023 030f 	bic.w	r3, r3, #15
 800261e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002620:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002622:	e009      	b.n	8002638 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002636:	e000      	b.n	800263a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002638:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002642:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002646:	4618      	mov	r0, r3
 8002648:	377c      	adds	r7, #124	@ 0x7c
 800264a:	46bd      	mov	sp, r7
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	bf00      	nop
 8002650:	50040000 	.word	0x50040000
 8002654:	50040100 	.word	0x50040100
 8002658:	50040300 	.word	0x50040300
 800265c:	50040200 	.word	0x50040200

08002660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002688:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800268c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	@ (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	@ (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4907      	ldr	r1, [pc, #28]	@ (80026fc <__NVIC_EnableIRQ+0x38>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000e100 	.word	0xe000e100

08002700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0a      	blt.n	800272a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	490c      	ldr	r1, [pc, #48]	@ (800274c <__NVIC_SetPriority+0x4c>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	440b      	add	r3, r1
 8002724:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002728:	e00a      	b.n	8002740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	4908      	ldr	r1, [pc, #32]	@ (8002750 <__NVIC_SetPriority+0x50>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	3b04      	subs	r3, #4
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	440b      	add	r3, r1
 800273e:	761a      	strb	r2, [r3, #24]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002754:	b480      	push	{r7}
 8002756:	b089      	sub	sp, #36	@ 0x24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f1c3 0307 	rsb	r3, r3, #7
 800276e:	2b04      	cmp	r3, #4
 8002770:	bf28      	it	cs
 8002772:	2304      	movcs	r3, #4
 8002774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3304      	adds	r3, #4
 800277a:	2b06      	cmp	r3, #6
 800277c:	d902      	bls.n	8002784 <NVIC_EncodePriority+0x30>
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3b03      	subs	r3, #3
 8002782:	e000      	b.n	8002786 <NVIC_EncodePriority+0x32>
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	401a      	ands	r2, r3
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800279c:	f04f 31ff 	mov.w	r1, #4294967295
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	43d9      	mvns	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	4313      	orrs	r3, r2
         );
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	@ 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff8e 	bl	8002700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	@ (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff29 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff3e 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff8e 	bl	8002754 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5d 	bl	8002700 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff31 	bl	80026c4 <__NVIC_EnableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffa2 	bl	80027bc <SysTick_Config>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002892:	e17f      	b.n	8002b94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa01 f303 	lsl.w	r3, r1, r3
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8171 	beq.w	8002b8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d005      	beq.n	80028c4 <HAL_GPIO_Init+0x40>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d130      	bne.n	8002926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028fa:	2201      	movs	r2, #1
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	f003 0201 	and.w	r2, r3, #1
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b03      	cmp	r3, #3
 8002930:	d118      	bne.n	8002964 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002938:	2201      	movs	r2, #1
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	08db      	lsrs	r3, r3, #3
 800294e:	f003 0201 	and.w	r2, r3, #1
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b03      	cmp	r3, #3
 800296e:	d017      	beq.n	80029a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d123      	bne.n	80029f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	08da      	lsrs	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3208      	adds	r2, #8
 80029b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3208      	adds	r2, #8
 80029ee:	6939      	ldr	r1, [r7, #16]
 80029f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0203 	and.w	r2, r3, #3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80ac 	beq.w	8002b8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	4b5f      	ldr	r3, [pc, #380]	@ (8002bb4 <HAL_GPIO_Init+0x330>)
 8002a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3a:	4a5e      	ldr	r2, [pc, #376]	@ (8002bb4 <HAL_GPIO_Init+0x330>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a42:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb4 <HAL_GPIO_Init+0x330>)
 8002a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a4e:	4a5a      	ldr	r2, [pc, #360]	@ (8002bb8 <HAL_GPIO_Init+0x334>)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a78:	d025      	beq.n	8002ac6 <HAL_GPIO_Init+0x242>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002bbc <HAL_GPIO_Init+0x338>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01f      	beq.n	8002ac2 <HAL_GPIO_Init+0x23e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4e      	ldr	r2, [pc, #312]	@ (8002bc0 <HAL_GPIO_Init+0x33c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d019      	beq.n	8002abe <HAL_GPIO_Init+0x23a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc4 <HAL_GPIO_Init+0x340>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_GPIO_Init+0x236>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4c      	ldr	r2, [pc, #304]	@ (8002bc8 <HAL_GPIO_Init+0x344>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00d      	beq.n	8002ab6 <HAL_GPIO_Init+0x232>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bcc <HAL_GPIO_Init+0x348>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x22e>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd0 <HAL_GPIO_Init+0x34c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_GPIO_Init+0x22a>
 8002aaa:	2306      	movs	r3, #6
 8002aac:	e00c      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002aae:	2307      	movs	r3, #7
 8002ab0:	e00a      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002ab2:	2305      	movs	r3, #5
 8002ab4:	e008      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002aba:	2303      	movs	r3, #3
 8002abc:	e004      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e002      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_GPIO_Init+0x244>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	f002 0203 	and.w	r2, r2, #3
 8002ace:	0092      	lsls	r2, r2, #2
 8002ad0:	4093      	lsls	r3, r2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ad8:	4937      	ldr	r1, [pc, #220]	@ (8002bb8 <HAL_GPIO_Init+0x334>)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	3302      	adds	r3, #2
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd4 <HAL_GPIO_Init+0x350>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b0a:	4a32      	ldr	r2, [pc, #200]	@ (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b10:	4b30      	ldr	r3, [pc, #192]	@ (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b34:	4a27      	ldr	r2, [pc, #156]	@ (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b3a:	4b26      	ldr	r3, [pc, #152]	@ (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4013      	ands	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b88:	4a12      	ldr	r2, [pc, #72]	@ (8002bd4 <HAL_GPIO_Init+0x350>)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3301      	adds	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f47f ae78 	bne.w	8002894 <HAL_GPIO_Init+0x10>
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	48000400 	.word	0x48000400
 8002bc0:	48000800 	.word	0x48000800
 8002bc4:	48000c00 	.word	0x48000c00
 8002bc8:	48001000 	.word	0x48001000
 8002bcc:	48001400 	.word	0x48001400
 8002bd0:	48001800 	.word	0x48001800
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40007000 	.word	0x40007000

08002c24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c32:	d130      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c34:	4b23      	ldr	r3, [pc, #140]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c40:	d038      	beq.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c42:	4b20      	ldr	r3, [pc, #128]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2232      	movs	r2, #50	@ 0x32
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0c9b      	lsrs	r3, r3, #18
 8002c64:	3301      	adds	r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c68:	e002      	b.n	8002c70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c70:	4b14      	ldr	r3, [pc, #80]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7c:	d102      	bne.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f2      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c84:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c90:	d110      	bne.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e00f      	b.n	8002cb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c96:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ca2:	d007      	beq.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ca4:	4b07      	ldr	r3, [pc, #28]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cac:	4a05      	ldr	r2, [pc, #20]	@ (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	431bde83 	.word	0x431bde83

08002cd0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e3ca      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce2:	4b97      	ldr	r3, [pc, #604]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cec:	4b94      	ldr	r3, [pc, #592]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0303 	and.w	r3, r3, #3
 8002cf4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80e4 	beq.w	8002ecc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_RCC_OscConfig+0x4a>
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	f040 808b 	bne.w	8002e28 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	f040 8087 	bne.w	8002e28 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d1a:	4b89      	ldr	r3, [pc, #548]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x62>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e3a2      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	4b82      	ldr	r3, [pc, #520]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_RCC_OscConfig+0x7c>
 8002d42:	4b7f      	ldr	r3, [pc, #508]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d4a:	e005      	b.n	8002d58 <HAL_RCC_OscConfig+0x88>
 8002d4c:	4b7c      	ldr	r3, [pc, #496]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d223      	bcs.n	8002da4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fd55 	bl	8003810 <RCC_SetFlashLatencyFromMSIRange>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e383      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d70:	4b73      	ldr	r3, [pc, #460]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a72      	ldr	r2, [pc, #456]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d76:	f043 0308 	orr.w	r3, r3, #8
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	4b70      	ldr	r3, [pc, #448]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	496d      	ldr	r1, [pc, #436]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	4968      	ldr	r1, [pc, #416]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
 8002da2:	e025      	b.n	8002df0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da4:	4b66      	ldr	r3, [pc, #408]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a65      	ldr	r2, [pc, #404]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002daa:	f043 0308 	orr.w	r3, r3, #8
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b63      	ldr	r3, [pc, #396]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4960      	ldr	r1, [pc, #384]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	495b      	ldr	r1, [pc, #364]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fd15 	bl	8003810 <RCC_SetFlashLatencyFromMSIRange>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e343      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df0:	f000 fc4a 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b52      	ldr	r3, [pc, #328]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	4950      	ldr	r1, [pc, #320]	@ (8002f44 <HAL_RCC_OscConfig+0x274>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0c:	4a4e      	ldr	r2, [pc, #312]	@ (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002e0e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e10:	4b4e      	ldr	r3, [pc, #312]	@ (8002f4c <HAL_RCC_OscConfig+0x27c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd ff97 	bl	8000d48 <HAL_InitTick>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d052      	beq.n	8002eca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	e327      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d032      	beq.n	8002e96 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e30:	4b43      	ldr	r3, [pc, #268]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a42      	ldr	r2, [pc, #264]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3c:	f7fd ffd4 	bl	8000de8 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e44:	f7fd ffd0 	bl	8000de8 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e310      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e56:	4b3a      	ldr	r3, [pc, #232]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e62:	4b37      	ldr	r3, [pc, #220]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a36      	ldr	r2, [pc, #216]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e68:	f043 0308 	orr.w	r3, r3, #8
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	4931      	ldr	r1, [pc, #196]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e80:	4b2f      	ldr	r3, [pc, #188]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	492c      	ldr	r1, [pc, #176]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
 8002e94:	e01a      	b.n	8002ecc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e96:	4b2a      	ldr	r3, [pc, #168]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a29      	ldr	r2, [pc, #164]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ea2:	f7fd ffa1 	bl	8000de8 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eaa:	f7fd ff9d 	bl	8000de8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e2dd      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ebc:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x1da>
 8002ec8:	e000      	b.n	8002ecc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002eca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d074      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d005      	beq.n	8002eea <HAL_RCC_OscConfig+0x21a>
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	2b0c      	cmp	r3, #12
 8002ee2:	d10e      	bne.n	8002f02 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b03      	cmp	r3, #3
 8002ee8:	d10b      	bne.n	8002f02 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eea:	4b15      	ldr	r3, [pc, #84]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d064      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x2f0>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d160      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e2ba      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x24a>
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0b      	ldr	r2, [pc, #44]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e026      	b.n	8002f68 <HAL_RCC_OscConfig+0x298>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f22:	d115      	bne.n	8002f50 <HAL_RCC_OscConfig+0x280>
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a05      	ldr	r2, [pc, #20]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a02      	ldr	r2, [pc, #8]	@ (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e014      	b.n	8002f68 <HAL_RCC_OscConfig+0x298>
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08005c28 	.word	0x08005c28
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000004 	.word	0x20000004
 8002f50:	4ba0      	ldr	r3, [pc, #640]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a9f      	ldr	r2, [pc, #636]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b9d      	ldr	r3, [pc, #628]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a9c      	ldr	r2, [pc, #624]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fd ff3a 	bl	8000de8 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fd ff36 	bl	8000de8 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	@ 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e276      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8a:	4b92      	ldr	r3, [pc, #584]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x2a8>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fd ff26 	bl	8000de8 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fd ff22 	bl	8000de8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	@ 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e262      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb2:	4b88      	ldr	r3, [pc, #544]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2d0>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d060      	beq.n	8003090 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x310>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d119      	bne.n	800300e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d116      	bne.n	800300e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	4b7c      	ldr	r3, [pc, #496]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x328>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e23f      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b76      	ldr	r3, [pc, #472]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	061b      	lsls	r3, r3, #24
 8003006:	4973      	ldr	r1, [pc, #460]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300c:	e040      	b.n	8003090 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d023      	beq.n	800305e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003016:	4b6f      	ldr	r3, [pc, #444]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6e      	ldr	r2, [pc, #440]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fd fee1 	bl	8000de8 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302a:	f7fd fedd 	bl	8000de8 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e21d      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303c:	4b65      	ldr	r3, [pc, #404]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b62      	ldr	r3, [pc, #392]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	061b      	lsls	r3, r3, #24
 8003056:	495f      	ldr	r1, [pc, #380]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
 800305c:	e018      	b.n	8003090 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b5d      	ldr	r3, [pc, #372]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5c      	ldr	r2, [pc, #368]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fd febd 	bl	8000de8 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003072:	f7fd feb9 	bl	8000de8 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e1f9      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003084:	4b53      	ldr	r3, [pc, #332]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d03c      	beq.n	8003116 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01c      	beq.n	80030de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a4:	4b4b      	ldr	r3, [pc, #300]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030aa:	4a4a      	ldr	r2, [pc, #296]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fd fe98 	bl	8000de8 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fd fe94 	bl	8000de8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e1d4      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ce:	4b41      	ldr	r3, [pc, #260]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ef      	beq.n	80030bc <HAL_RCC_OscConfig+0x3ec>
 80030dc:	e01b      	b.n	8003116 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030de:	4b3d      	ldr	r3, [pc, #244]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e4:	4a3b      	ldr	r2, [pc, #236]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fd fe7b 	bl	8000de8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fd fe77 	bl	8000de8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1b7      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003108:	4b32      	ldr	r3, [pc, #200]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ef      	bne.n	80030f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80a6 	beq.w	8003270 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003128:	4b2a      	ldr	r3, [pc, #168]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003134:	4b27      	ldr	r3, [pc, #156]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003138:	4a26      	ldr	r2, [pc, #152]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800313e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003140:	4b24      	ldr	r3, [pc, #144]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314c:	2301      	movs	r3, #1
 800314e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003150:	4b21      	ldr	r3, [pc, #132]	@ (80031d8 <HAL_RCC_OscConfig+0x508>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d118      	bne.n	800318e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800315c:	4b1e      	ldr	r3, [pc, #120]	@ (80031d8 <HAL_RCC_OscConfig+0x508>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1d      	ldr	r2, [pc, #116]	@ (80031d8 <HAL_RCC_OscConfig+0x508>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003166:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003168:	f7fd fe3e 	bl	8000de8 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fd fe3a 	bl	8000de8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e17a      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <HAL_RCC_OscConfig+0x508>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d108      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4d8>
 8003196:	4b0f      	ldr	r3, [pc, #60]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319c:	4a0d      	ldr	r2, [pc, #52]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031a6:	e029      	b.n	80031fc <HAL_RCC_OscConfig+0x52c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d115      	bne.n	80031dc <HAL_RCC_OscConfig+0x50c>
 80031b0:	4b08      	ldr	r3, [pc, #32]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b6:	4a07      	ldr	r2, [pc, #28]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031c0:	4b04      	ldr	r3, [pc, #16]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c6:	4a03      	ldr	r2, [pc, #12]	@ (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031d0:	e014      	b.n	80031fc <HAL_RCC_OscConfig+0x52c>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40007000 	.word	0x40007000
 80031dc:	4b9c      	ldr	r3, [pc, #624]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e2:	4a9b      	ldr	r2, [pc, #620]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031ec:	4b98      	ldr	r3, [pc, #608]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	4a97      	ldr	r2, [pc, #604]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d016      	beq.n	8003232 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fd fdf0 	bl	8000de8 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fd fdec 	bl	8000de8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e12a      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003222:	4b8b      	ldr	r3, [pc, #556]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ed      	beq.n	800320c <HAL_RCC_OscConfig+0x53c>
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fd fdd9 	bl	8000de8 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fd fdd5 	bl	8000de8 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e113      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003250:	4b7f      	ldr	r3, [pc, #508]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ed      	bne.n	800323a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800325e:	7ffb      	ldrb	r3, [r7, #31]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b7a      	ldr	r3, [pc, #488]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	4a79      	ldr	r2, [pc, #484]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800326e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80fe 	beq.w	8003476 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327e:	2b02      	cmp	r3, #2
 8003280:	f040 80d0 	bne.w	8003424 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003284:	4b72      	ldr	r3, [pc, #456]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0203 	and.w	r2, r3, #3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	429a      	cmp	r2, r3
 8003296:	d130      	bne.n	80032fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	3b01      	subs	r3, #1
 80032a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d127      	bne.n	80032fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d11f      	bne.n	80032fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032c4:	2a07      	cmp	r2, #7
 80032c6:	bf14      	ite	ne
 80032c8:	2201      	movne	r2, #1
 80032ca:	2200      	moveq	r2, #0
 80032cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d113      	bne.n	80032fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032dc:	085b      	lsrs	r3, r3, #1
 80032de:	3b01      	subs	r3, #1
 80032e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d109      	bne.n	80032fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	3b01      	subs	r3, #1
 80032f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d06e      	beq.n	80033d8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d069      	beq.n	80033d4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003300:	4b53      	ldr	r3, [pc, #332]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d105      	bne.n	8003318 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800330c:	4b50      	ldr	r3, [pc, #320]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0ad      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800331c:	4b4c      	ldr	r3, [pc, #304]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a4b      	ldr	r2, [pc, #300]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003326:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003328:	f7fd fd5e 	bl	8000de8 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003330:	f7fd fd5a 	bl	8000de8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e09a      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003342:	4b43      	ldr	r3, [pc, #268]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800334e:	4b40      	ldr	r3, [pc, #256]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	4b40      	ldr	r3, [pc, #256]	@ (8003454 <HAL_RCC_OscConfig+0x784>)
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800335e:	3a01      	subs	r2, #1
 8003360:	0112      	lsls	r2, r2, #4
 8003362:	4311      	orrs	r1, r2
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003368:	0212      	lsls	r2, r2, #8
 800336a:	4311      	orrs	r1, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003370:	0852      	lsrs	r2, r2, #1
 8003372:	3a01      	subs	r2, #1
 8003374:	0552      	lsls	r2, r2, #21
 8003376:	4311      	orrs	r1, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800337c:	0852      	lsrs	r2, r2, #1
 800337e:	3a01      	subs	r2, #1
 8003380:	0652      	lsls	r2, r2, #25
 8003382:	4311      	orrs	r1, r2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003388:	0912      	lsrs	r2, r2, #4
 800338a:	0452      	lsls	r2, r2, #17
 800338c:	430a      	orrs	r2, r1
 800338e:	4930      	ldr	r1, [pc, #192]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003390:	4313      	orrs	r3, r2
 8003392:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003394:	4b2e      	ldr	r3, [pc, #184]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2d      	ldr	r2, [pc, #180]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 800339a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800339e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80033a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033ac:	f7fd fd1c 	bl	8000de8 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fd fd18 	bl	8000de8 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e058      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c6:	4b22      	ldr	r3, [pc, #136]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033d2:	e050      	b.n	8003476 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e04f      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d148      	bne.n	8003476 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a19      	ldr	r2, [pc, #100]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033f0:	4b17      	ldr	r3, [pc, #92]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a16      	ldr	r2, [pc, #88]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 80033f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033fc:	f7fd fcf4 	bl	8000de8 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003404:	f7fd fcf0 	bl	8000de8 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e030      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003416:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x734>
 8003422:	e028      	b.n	8003476 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d023      	beq.n	8003472 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342a:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a08      	ldr	r2, [pc, #32]	@ (8003450 <HAL_RCC_OscConfig+0x780>)
 8003430:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fd fcd7 	bl	8000de8 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800343c:	e00c      	b.n	8003458 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343e:	f7fd fcd3 	bl	8000de8 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d905      	bls.n	8003458 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e013      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
 8003450:	40021000 	.word	0x40021000
 8003454:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003458:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <HAL_RCC_OscConfig+0x7b0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1ec      	bne.n	800343e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <HAL_RCC_OscConfig+0x7b0>)
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	4905      	ldr	r1, [pc, #20]	@ (8003480 <HAL_RCC_OscConfig+0x7b0>)
 800346a:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <HAL_RCC_OscConfig+0x7b4>)
 800346c:	4013      	ands	r3, r2
 800346e:	60cb      	str	r3, [r1, #12]
 8003470:	e001      	b.n	8003476 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3720      	adds	r7, #32
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40021000 	.word	0x40021000
 8003484:	feeefffc 	.word	0xfeeefffc

08003488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0e7      	b.n	800366c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800349c:	4b75      	ldr	r3, [pc, #468]	@ (8003674 <HAL_RCC_ClockConfig+0x1ec>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d910      	bls.n	80034cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b72      	ldr	r3, [pc, #456]	@ (8003674 <HAL_RCC_ClockConfig+0x1ec>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 0207 	bic.w	r2, r3, #7
 80034b2:	4970      	ldr	r1, [pc, #448]	@ (8003674 <HAL_RCC_ClockConfig+0x1ec>)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003674 <HAL_RCC_ClockConfig+0x1ec>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0cf      	b.n	800366c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d010      	beq.n	80034fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	4b66      	ldr	r3, [pc, #408]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d908      	bls.n	80034fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034e8:	4b63      	ldr	r3, [pc, #396]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4960      	ldr	r1, [pc, #384]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d04c      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b03      	cmp	r3, #3
 800350c:	d107      	bne.n	800351e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350e:	4b5a      	ldr	r3, [pc, #360]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d121      	bne.n	800355e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e0a6      	b.n	800366c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d107      	bne.n	8003536 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003526:	4b54      	ldr	r3, [pc, #336]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d115      	bne.n	800355e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e09a      	b.n	800366c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d107      	bne.n	800354e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800353e:	4b4e      	ldr	r3, [pc, #312]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e08e      	b.n	800366c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800354e:	4b4a      	ldr	r3, [pc, #296]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e086      	b.n	800366c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800355e:	4b46      	ldr	r3, [pc, #280]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f023 0203 	bic.w	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4943      	ldr	r1, [pc, #268]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003570:	f7fd fc3a 	bl	8000de8 <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003576:	e00a      	b.n	800358e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003578:	f7fd fc36 	bl	8000de8 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e06e      	b.n	800366c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358e:	4b3a      	ldr	r3, [pc, #232]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 020c 	and.w	r2, r3, #12
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	429a      	cmp	r2, r3
 800359e:	d1eb      	bne.n	8003578 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d010      	beq.n	80035ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	4b31      	ldr	r3, [pc, #196]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d208      	bcs.n	80035ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	492b      	ldr	r1, [pc, #172]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ce:	4b29      	ldr	r3, [pc, #164]	@ (8003674 <HAL_RCC_ClockConfig+0x1ec>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d210      	bcs.n	80035fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035dc:	4b25      	ldr	r3, [pc, #148]	@ (8003674 <HAL_RCC_ClockConfig+0x1ec>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f023 0207 	bic.w	r2, r3, #7
 80035e4:	4923      	ldr	r1, [pc, #140]	@ (8003674 <HAL_RCC_ClockConfig+0x1ec>)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ec:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <HAL_RCC_ClockConfig+0x1ec>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e036      	b.n	800366c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800360a:	4b1b      	ldr	r3, [pc, #108]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	4918      	ldr	r1, [pc, #96]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 8003618:	4313      	orrs	r3, r2
 800361a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003628:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4910      	ldr	r1, [pc, #64]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800363c:	f000 f824 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	490b      	ldr	r1, [pc, #44]	@ (800367c <HAL_RCC_ClockConfig+0x1f4>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
 8003658:	4a09      	ldr	r2, [pc, #36]	@ (8003680 <HAL_RCC_ClockConfig+0x1f8>)
 800365a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800365c:	4b09      	ldr	r3, [pc, #36]	@ (8003684 <HAL_RCC_ClockConfig+0x1fc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7fd fb71 	bl	8000d48 <HAL_InitTick>
 8003666:	4603      	mov	r3, r0
 8003668:	72fb      	strb	r3, [r7, #11]

  return status;
 800366a:	7afb      	ldrb	r3, [r7, #11]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40022000 	.word	0x40022000
 8003678:	40021000 	.word	0x40021000
 800367c:	08005c28 	.word	0x08005c28
 8003680:	20000000 	.word	0x20000000
 8003684:	20000004 	.word	0x20000004

08003688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003688:	b480      	push	{r7}
 800368a:	b089      	sub	sp, #36	@ 0x24
 800368c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	2300      	movs	r3, #0
 8003694:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003696:	4b3e      	ldr	r3, [pc, #248]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x108>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_GetSysClockFreq+0x34>
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d121      	bne.n	80036fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d11e      	bne.n	80036fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036bc:	4b34      	ldr	r3, [pc, #208]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x108>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036c8:	4b31      	ldr	r3, [pc, #196]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x108>)
 80036ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e005      	b.n	80036e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x108>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	091b      	lsrs	r3, r3, #4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80036e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003794 <HAL_RCC_GetSysClockFreq+0x10c>)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10d      	bne.n	8003710 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d102      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003700:	4b25      	ldr	r3, [pc, #148]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x110>)
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	e004      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b08      	cmp	r3, #8
 800370a:	d101      	bne.n	8003710 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800370c:	4b23      	ldr	r3, [pc, #140]	@ (800379c <HAL_RCC_GetSysClockFreq+0x114>)
 800370e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b0c      	cmp	r3, #12
 8003714:	d134      	bne.n	8003780 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003716:	4b1e      	ldr	r3, [pc, #120]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x108>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d003      	beq.n	800372e <HAL_RCC_GetSysClockFreq+0xa6>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d003      	beq.n	8003734 <HAL_RCC_GetSysClockFreq+0xac>
 800372c:	e005      	b.n	800373a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800372e:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <HAL_RCC_GetSysClockFreq+0x110>)
 8003730:	617b      	str	r3, [r7, #20]
      break;
 8003732:	e005      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003734:	4b19      	ldr	r3, [pc, #100]	@ (800379c <HAL_RCC_GetSysClockFreq+0x114>)
 8003736:	617b      	str	r3, [r7, #20]
      break;
 8003738:	e002      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	617b      	str	r3, [r7, #20]
      break;
 800373e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x108>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	3301      	adds	r3, #1
 800374c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800374e:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x108>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	fb03 f202 	mul.w	r2, r3, r2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	fbb2 f3f3 	udiv	r3, r2, r3
 8003764:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003766:	4b0a      	ldr	r3, [pc, #40]	@ (8003790 <HAL_RCC_GetSysClockFreq+0x108>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	0e5b      	lsrs	r3, r3, #25
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	3301      	adds	r3, #1
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	fbb2 f3f3 	udiv	r3, r2, r3
 800377e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003780:	69bb      	ldr	r3, [r7, #24]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3724      	adds	r7, #36	@ 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	08005c40 	.word	0x08005c40
 8003798:	00f42400 	.word	0x00f42400
 800379c:	007a1200 	.word	0x007a1200

080037a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a4:	4b03      	ldr	r3, [pc, #12]	@ (80037b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000000 	.word	0x20000000

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037bc:	f7ff fff0 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	0a1b      	lsrs	r3, r3, #8
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4904      	ldr	r1, [pc, #16]	@ (80037e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	f003 031f 	and.w	r3, r3, #31
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	08005c38 	.word	0x08005c38

080037e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80037e8:	f7ff ffda 	bl	80037a0 <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0adb      	lsrs	r3, r3, #11
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4904      	ldr	r1, [pc, #16]	@ (800380c <HAL_RCC_GetPCLK2Freq+0x28>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	08005c38 	.word	0x08005c38

08003810 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800381c:	4b2a      	ldr	r3, [pc, #168]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003828:	f7ff f9ee 	bl	8002c08 <HAL_PWREx_GetVoltageRange>
 800382c:	6178      	str	r0, [r7, #20]
 800382e:	e014      	b.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003830:	4b25      	ldr	r3, [pc, #148]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	4a24      	ldr	r2, [pc, #144]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800383a:	6593      	str	r3, [r2, #88]	@ 0x58
 800383c:	4b22      	ldr	r3, [pc, #136]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003848:	f7ff f9de 	bl	8002c08 <HAL_PWREx_GetVoltageRange>
 800384c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800384e:	4b1e      	ldr	r3, [pc, #120]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003858:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003860:	d10b      	bne.n	800387a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b80      	cmp	r3, #128	@ 0x80
 8003866:	d919      	bls.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2ba0      	cmp	r3, #160	@ 0xa0
 800386c:	d902      	bls.n	8003874 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800386e:	2302      	movs	r3, #2
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	e013      	b.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003874:	2301      	movs	r3, #1
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	e010      	b.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b80      	cmp	r3, #128	@ 0x80
 800387e:	d902      	bls.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003880:	2303      	movs	r3, #3
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	e00a      	b.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b80      	cmp	r3, #128	@ 0x80
 800388a:	d102      	bne.n	8003892 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800388c:	2302      	movs	r3, #2
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	e004      	b.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b70      	cmp	r3, #112	@ 0x70
 8003896:	d101      	bne.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003898:	2301      	movs	r3, #1
 800389a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800389c:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 0207 	bic.w	r2, r3, #7
 80038a4:	4909      	ldr	r1, [pc, #36]	@ (80038cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038ac:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d001      	beq.n	80038be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40022000 	.word	0x40022000

080038d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038d8:	2300      	movs	r3, #0
 80038da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038dc:	2300      	movs	r3, #0
 80038de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d041      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038f4:	d02a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038fa:	d824      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003900:	d008      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003902:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003906:	d81e      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800390c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003910:	d010      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003912:	e018      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003914:	4b86      	ldr	r3, [pc, #536]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4a85      	ldr	r2, [pc, #532]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003920:	e015      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fabb 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003932:	e00c      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3320      	adds	r3, #32
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fba6 	bl	800408c <RCCEx_PLLSAI2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003944:	e003      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	74fb      	strb	r3, [r7, #19]
      break;
 800394a:	e000      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800394c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003954:	4b76      	ldr	r3, [pc, #472]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003962:	4973      	ldr	r1, [pc, #460]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800396a:	e001      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	7cfb      	ldrb	r3, [r7, #19]
 800396e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d041      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003980:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003984:	d02a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003986:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800398a:	d824      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800398c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003992:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003996:	d81e      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800399c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039a0:	d010      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039a2:	e018      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039a4:	4b62      	ldr	r3, [pc, #392]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a61      	ldr	r2, [pc, #388]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039b0:	e015      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fa73 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039c2:	e00c      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3320      	adds	r3, #32
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fb5e 	bl	800408c <RCCEx_PLLSAI2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	74fb      	strb	r3, [r7, #19]
      break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039e4:	4b52      	ldr	r3, [pc, #328]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039f2:	494f      	ldr	r1, [pc, #316]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039fa:	e001      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a0 	beq.w	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a12:	4b47      	ldr	r3, [pc, #284]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a28:	4b41      	ldr	r3, [pc, #260]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2c:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a34:	4b3e      	ldr	r3, [pc, #248]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a40:	2301      	movs	r3, #1
 8003a42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a44:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a3a      	ldr	r2, [pc, #232]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a50:	f7fd f9ca 	bl	8000de8 <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a56:	e009      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a58:	f7fd f9c6 	bl	8000de8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d902      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	74fb      	strb	r3, [r7, #19]
        break;
 8003a6a:	e005      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a6c:	4b31      	ldr	r3, [pc, #196]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ef      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d15c      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01f      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d019      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a9c:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa8:	4b21      	ldr	r3, [pc, #132]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	4a20      	ldr	r2, [pc, #128]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	4a1c      	ldr	r2, [pc, #112]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ac8:	4a19      	ldr	r2, [pc, #100]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fd f985 	bl	8000de8 <HAL_GetTick>
 8003ade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae0:	e00b      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fd f981 	bl	8000de8 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d902      	bls.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	74fb      	strb	r3, [r7, #19]
            break;
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afa:	4b0d      	ldr	r3, [pc, #52]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ec      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b0e:	4b08      	ldr	r3, [pc, #32]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b1e:	4904      	ldr	r1, [pc, #16]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b26:	e009      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	74bb      	strb	r3, [r7, #18]
 8003b2c:	e006      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b3c:	7c7b      	ldrb	r3, [r7, #17]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d105      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b42:	4b9e      	ldr	r3, [pc, #632]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b46:	4a9d      	ldr	r2, [pc, #628]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b5a:	4b98      	ldr	r3, [pc, #608]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b60:	f023 0203 	bic.w	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	4994      	ldr	r1, [pc, #592]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b7c:	4b8f      	ldr	r3, [pc, #572]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b82:	f023 020c 	bic.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8a:	498c      	ldr	r1, [pc, #560]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b9e:	4b87      	ldr	r3, [pc, #540]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	4983      	ldr	r1, [pc, #524]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	497b      	ldr	r1, [pc, #492]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003be2:	4b76      	ldr	r3, [pc, #472]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf0:	4972      	ldr	r1, [pc, #456]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c04:	4b6d      	ldr	r3, [pc, #436]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c12:	496a      	ldr	r1, [pc, #424]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c26:	4b65      	ldr	r3, [pc, #404]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c34:	4961      	ldr	r1, [pc, #388]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c48:	4b5c      	ldr	r3, [pc, #368]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c56:	4959      	ldr	r1, [pc, #356]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c6a:	4b54      	ldr	r3, [pc, #336]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c78:	4950      	ldr	r1, [pc, #320]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	4948      	ldr	r1, [pc, #288]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cae:	4b43      	ldr	r3, [pc, #268]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbc:	493f      	ldr	r1, [pc, #252]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d028      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cde:	4937      	ldr	r1, [pc, #220]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cee:	d106      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf0:	4b32      	ldr	r3, [pc, #200]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a31      	ldr	r2, [pc, #196]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cfa:	60d3      	str	r3, [r2, #12]
 8003cfc:	e011      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d06:	d10c      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f8c8 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d1e:	7cfb      	ldrb	r3, [r7, #19]
 8003d20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d028      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d2e:	4b23      	ldr	r3, [pc, #140]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d34:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3c:	491f      	ldr	r1, [pc, #124]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	4a1a      	ldr	r2, [pc, #104]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d58:	60d3      	str	r3, [r2, #12]
 8003d5a:	e011      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f899 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02b      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9a:	4908      	ldr	r1, [pc, #32]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003daa:	d109      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dac:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a02      	ldr	r2, [pc, #8]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db6:	60d3      	str	r3, [r2, #12]
 8003db8:	e014      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2101      	movs	r1, #1
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f867 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003de0:	7cfb      	ldrb	r3, [r7, #19]
 8003de2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d02f      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dfe:	4928      	ldr	r1, [pc, #160]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e0e:	d10d      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	2102      	movs	r1, #2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f844 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d014      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	74bb      	strb	r3, [r7, #18]
 8003e2a:	e011      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3320      	adds	r3, #32
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f925 	bl	800408c <RCCEx_PLLSAI2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e62:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e6a:	490d      	ldr	r1, [pc, #52]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e8e:	4904      	ldr	r1, [pc, #16]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e96:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000

08003ea4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eb2:	4b75      	ldr	r3, [pc, #468]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d018      	beq.n	8003ef0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ebe:	4b72      	ldr	r3, [pc, #456]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f003 0203 	and.w	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d10d      	bne.n	8003eea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ed6:	4b6c      	ldr	r3, [pc, #432]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d047      	beq.n	8003f7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
 8003eee:	e044      	b.n	8003f7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d018      	beq.n	8003f2a <RCCEx_PLLSAI1_Config+0x86>
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d825      	bhi.n	8003f48 <RCCEx_PLLSAI1_Config+0xa4>
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d002      	beq.n	8003f06 <RCCEx_PLLSAI1_Config+0x62>
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d009      	beq.n	8003f18 <RCCEx_PLLSAI1_Config+0x74>
 8003f04:	e020      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f06:	4b60      	ldr	r3, [pc, #384]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d11d      	bne.n	8003f4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f16:	e01a      	b.n	8003f4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f18:	4b5b      	ldr	r3, [pc, #364]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d116      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f28:	e013      	b.n	8003f52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f2a:	4b57      	ldr	r3, [pc, #348]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f36:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f46:	e006      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4c:	e004      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e002      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f56:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10d      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	430b      	orrs	r3, r1
 8003f74:	4944      	ldr	r1, [pc, #272]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d17d      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f80:	4b41      	ldr	r3, [pc, #260]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a40      	ldr	r2, [pc, #256]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8c:	f7fc ff2c 	bl	8000de8 <HAL_GetTick>
 8003f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f92:	e009      	b.n	8003fa8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f94:	f7fc ff28 	bl	8000de8 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d902      	bls.n	8003fa8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fa6:	e005      	b.n	8003fb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fa8:	4b37      	ldr	r3, [pc, #220]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1ef      	bne.n	8003f94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d160      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d111      	bne.n	8003fe4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fc0:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6892      	ldr	r2, [r2, #8]
 8003fd0:	0211      	lsls	r1, r2, #8
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68d2      	ldr	r2, [r2, #12]
 8003fd6:	0912      	lsrs	r2, r2, #4
 8003fd8:	0452      	lsls	r2, r2, #17
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	492a      	ldr	r1, [pc, #168]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	610b      	str	r3, [r1, #16]
 8003fe2:	e027      	b.n	8004034 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d112      	bne.n	8004010 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fea:	4b27      	ldr	r3, [pc, #156]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003ff2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6892      	ldr	r2, [r2, #8]
 8003ffa:	0211      	lsls	r1, r2, #8
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6912      	ldr	r2, [r2, #16]
 8004000:	0852      	lsrs	r2, r2, #1
 8004002:	3a01      	subs	r2, #1
 8004004:	0552      	lsls	r2, r2, #21
 8004006:	430a      	orrs	r2, r1
 8004008:	491f      	ldr	r1, [pc, #124]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	610b      	str	r3, [r1, #16]
 800400e:	e011      	b.n	8004034 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004010:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004018:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6892      	ldr	r2, [r2, #8]
 8004020:	0211      	lsls	r1, r2, #8
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6952      	ldr	r2, [r2, #20]
 8004026:	0852      	lsrs	r2, r2, #1
 8004028:	3a01      	subs	r2, #1
 800402a:	0652      	lsls	r2, r2, #25
 800402c:	430a      	orrs	r2, r1
 800402e:	4916      	ldr	r1, [pc, #88]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004030:	4313      	orrs	r3, r2
 8004032:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004034:	4b14      	ldr	r3, [pc, #80]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a13      	ldr	r2, [pc, #76]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800403e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004040:	f7fc fed2 	bl	8000de8 <HAL_GetTick>
 8004044:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004046:	e009      	b.n	800405c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004048:	f7fc fece 	bl	8000de8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d902      	bls.n	800405c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	73fb      	strb	r3, [r7, #15]
          break;
 800405a:	e005      	b.n	8004068 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800405c:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ef      	beq.n	8004048 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800406e:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	4904      	ldr	r1, [pc, #16]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000

0800408c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800409a:	4b6a      	ldr	r3, [pc, #424]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d018      	beq.n	80040d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040a6:	4b67      	ldr	r3, [pc, #412]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0203 	and.w	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d10d      	bne.n	80040d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
       ||
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040be:	4b61      	ldr	r3, [pc, #388]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
       ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d047      	beq.n	8004162 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e044      	b.n	8004162 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d018      	beq.n	8004112 <RCCEx_PLLSAI2_Config+0x86>
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d825      	bhi.n	8004130 <RCCEx_PLLSAI2_Config+0xa4>
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d002      	beq.n	80040ee <RCCEx_PLLSAI2_Config+0x62>
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d009      	beq.n	8004100 <RCCEx_PLLSAI2_Config+0x74>
 80040ec:	e020      	b.n	8004130 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ee:	4b55      	ldr	r3, [pc, #340]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11d      	bne.n	8004136 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fe:	e01a      	b.n	8004136 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004100:	4b50      	ldr	r3, [pc, #320]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004110:	e013      	b.n	800413a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004112:	4b4c      	ldr	r3, [pc, #304]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800411e:	4b49      	ldr	r3, [pc, #292]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800412e:	e006      	b.n	800413e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      break;
 8004134:	e004      	b.n	8004140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004136:	bf00      	nop
 8004138:	e002      	b.n	8004140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800413a:	bf00      	nop
 800413c:	e000      	b.n	8004140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800413e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10d      	bne.n	8004162 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004146:	4b3f      	ldr	r3, [pc, #252]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	3b01      	subs	r3, #1
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	430b      	orrs	r3, r1
 800415c:	4939      	ldr	r1, [pc, #228]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415e:	4313      	orrs	r3, r2
 8004160:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d167      	bne.n	8004238 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004168:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a35      	ldr	r2, [pc, #212]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7fc fe38 	bl	8000de8 <HAL_GetTick>
 8004178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800417a:	e009      	b.n	8004190 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800417c:	f7fc fe34 	bl	8000de8 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d902      	bls.n	8004190 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	73fb      	strb	r3, [r7, #15]
        break;
 800418e:	e005      	b.n	800419c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004190:	4b2c      	ldr	r3, [pc, #176]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1ef      	bne.n	800417c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d14a      	bne.n	8004238 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d111      	bne.n	80041cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041a8:	4b26      	ldr	r3, [pc, #152]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6892      	ldr	r2, [r2, #8]
 80041b8:	0211      	lsls	r1, r2, #8
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68d2      	ldr	r2, [r2, #12]
 80041be:	0912      	lsrs	r2, r2, #4
 80041c0:	0452      	lsls	r2, r2, #17
 80041c2:	430a      	orrs	r2, r1
 80041c4:	491f      	ldr	r1, [pc, #124]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	614b      	str	r3, [r1, #20]
 80041ca:	e011      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6892      	ldr	r2, [r2, #8]
 80041dc:	0211      	lsls	r1, r2, #8
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6912      	ldr	r2, [r2, #16]
 80041e2:	0852      	lsrs	r2, r2, #1
 80041e4:	3a01      	subs	r2, #1
 80041e6:	0652      	lsls	r2, r2, #25
 80041e8:	430a      	orrs	r2, r1
 80041ea:	4916      	ldr	r1, [pc, #88]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041f0:	4b14      	ldr	r3, [pc, #80]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a13      	ldr	r2, [pc, #76]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fc fdf4 	bl	8000de8 <HAL_GetTick>
 8004200:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004202:	e009      	b.n	8004218 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004204:	f7fc fdf0 	bl	8000de8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d902      	bls.n	8004218 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	73fb      	strb	r3, [r7, #15]
          break;
 8004216:	e005      	b.n	8004224 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004218:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ef      	beq.n	8004204 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	4904      	ldr	r1, [pc, #16]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004234:	4313      	orrs	r3, r2
 8004236:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000

08004248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e040      	b.n	80042dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc fbd6 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	@ 0x24
 8004274:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fb6a 	bl	8004968 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f8af 	bl	80043f8 <UART_SetConfig>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e01b      	b.n	80042dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fbe9 	bl	8004aac <UART_CheckIdleState>
 80042da:	4603      	mov	r3, r0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b08a      	sub	sp, #40	@ 0x28
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	4613      	mov	r3, r2
 80042f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d177      	bne.n	80043ec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_UART_Transmit+0x24>
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e070      	b.n	80043ee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2221      	movs	r2, #33	@ 0x21
 8004318:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800431a:	f7fc fd65 	bl	8000de8 <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	88fa      	ldrh	r2, [r7, #6]
 8004324:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	88fa      	ldrh	r2, [r7, #6]
 800432c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004338:	d108      	bne.n	800434c <HAL_UART_Transmit+0x68>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e003      	b.n	8004354 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004354:	e02f      	b.n	80043b6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	2180      	movs	r1, #128	@ 0x80
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fc4b 	bl	8004bfc <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d004      	beq.n	8004376 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e03b      	b.n	80043ee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10b      	bne.n	8004394 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	881a      	ldrh	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004388:	b292      	uxth	r2, r2
 800438a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	3302      	adds	r3, #2
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	e007      	b.n	80043a4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	781a      	ldrb	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	3301      	adds	r3, #1
 80043a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1c9      	bne.n	8004356 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2140      	movs	r1, #64	@ 0x40
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fc15 	bl	8004bfc <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e005      	b.n	80043ee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043fc:	b08a      	sub	sp, #40	@ 0x28
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	431a      	orrs	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	431a      	orrs	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	4313      	orrs	r3, r2
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4ba4      	ldr	r3, [pc, #656]	@ (80046b8 <UART_SetConfig+0x2c0>)
 8004428:	4013      	ands	r3, r2
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004430:	430b      	orrs	r3, r1
 8004432:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a99      	ldr	r2, [pc, #612]	@ (80046bc <UART_SetConfig+0x2c4>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004460:	4313      	orrs	r3, r2
 8004462:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004474:	430a      	orrs	r2, r1
 8004476:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a90      	ldr	r2, [pc, #576]	@ (80046c0 <UART_SetConfig+0x2c8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d126      	bne.n	80044d0 <UART_SetConfig+0xd8>
 8004482:	4b90      	ldr	r3, [pc, #576]	@ (80046c4 <UART_SetConfig+0x2cc>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	2b03      	cmp	r3, #3
 800448e:	d81b      	bhi.n	80044c8 <UART_SetConfig+0xd0>
 8004490:	a201      	add	r2, pc, #4	@ (adr r2, 8004498 <UART_SetConfig+0xa0>)
 8004492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004496:	bf00      	nop
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044b9 	.word	0x080044b9
 80044a0:	080044b1 	.word	0x080044b1
 80044a4:	080044c1 	.word	0x080044c1
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ae:	e116      	b.n	80046de <UART_SetConfig+0x2e6>
 80044b0:	2302      	movs	r3, #2
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b6:	e112      	b.n	80046de <UART_SetConfig+0x2e6>
 80044b8:	2304      	movs	r3, #4
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044be:	e10e      	b.n	80046de <UART_SetConfig+0x2e6>
 80044c0:	2308      	movs	r3, #8
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c6:	e10a      	b.n	80046de <UART_SetConfig+0x2e6>
 80044c8:	2310      	movs	r3, #16
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ce:	e106      	b.n	80046de <UART_SetConfig+0x2e6>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a7c      	ldr	r2, [pc, #496]	@ (80046c8 <UART_SetConfig+0x2d0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d138      	bne.n	800454c <UART_SetConfig+0x154>
 80044da:	4b7a      	ldr	r3, [pc, #488]	@ (80046c4 <UART_SetConfig+0x2cc>)
 80044dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b0c      	cmp	r3, #12
 80044e6:	d82d      	bhi.n	8004544 <UART_SetConfig+0x14c>
 80044e8:	a201      	add	r2, pc, #4	@ (adr r2, 80044f0 <UART_SetConfig+0xf8>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004525 	.word	0x08004525
 80044f4:	08004545 	.word	0x08004545
 80044f8:	08004545 	.word	0x08004545
 80044fc:	08004545 	.word	0x08004545
 8004500:	08004535 	.word	0x08004535
 8004504:	08004545 	.word	0x08004545
 8004508:	08004545 	.word	0x08004545
 800450c:	08004545 	.word	0x08004545
 8004510:	0800452d 	.word	0x0800452d
 8004514:	08004545 	.word	0x08004545
 8004518:	08004545 	.word	0x08004545
 800451c:	08004545 	.word	0x08004545
 8004520:	0800453d 	.word	0x0800453d
 8004524:	2300      	movs	r3, #0
 8004526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452a:	e0d8      	b.n	80046de <UART_SetConfig+0x2e6>
 800452c:	2302      	movs	r3, #2
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004532:	e0d4      	b.n	80046de <UART_SetConfig+0x2e6>
 8004534:	2304      	movs	r3, #4
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453a:	e0d0      	b.n	80046de <UART_SetConfig+0x2e6>
 800453c:	2308      	movs	r3, #8
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004542:	e0cc      	b.n	80046de <UART_SetConfig+0x2e6>
 8004544:	2310      	movs	r3, #16
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454a:	e0c8      	b.n	80046de <UART_SetConfig+0x2e6>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a5e      	ldr	r2, [pc, #376]	@ (80046cc <UART_SetConfig+0x2d4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d125      	bne.n	80045a2 <UART_SetConfig+0x1aa>
 8004556:	4b5b      	ldr	r3, [pc, #364]	@ (80046c4 <UART_SetConfig+0x2cc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004560:	2b30      	cmp	r3, #48	@ 0x30
 8004562:	d016      	beq.n	8004592 <UART_SetConfig+0x19a>
 8004564:	2b30      	cmp	r3, #48	@ 0x30
 8004566:	d818      	bhi.n	800459a <UART_SetConfig+0x1a2>
 8004568:	2b20      	cmp	r3, #32
 800456a:	d00a      	beq.n	8004582 <UART_SetConfig+0x18a>
 800456c:	2b20      	cmp	r3, #32
 800456e:	d814      	bhi.n	800459a <UART_SetConfig+0x1a2>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <UART_SetConfig+0x182>
 8004574:	2b10      	cmp	r3, #16
 8004576:	d008      	beq.n	800458a <UART_SetConfig+0x192>
 8004578:	e00f      	b.n	800459a <UART_SetConfig+0x1a2>
 800457a:	2300      	movs	r3, #0
 800457c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004580:	e0ad      	b.n	80046de <UART_SetConfig+0x2e6>
 8004582:	2302      	movs	r3, #2
 8004584:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004588:	e0a9      	b.n	80046de <UART_SetConfig+0x2e6>
 800458a:	2304      	movs	r3, #4
 800458c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004590:	e0a5      	b.n	80046de <UART_SetConfig+0x2e6>
 8004592:	2308      	movs	r3, #8
 8004594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004598:	e0a1      	b.n	80046de <UART_SetConfig+0x2e6>
 800459a:	2310      	movs	r3, #16
 800459c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a0:	e09d      	b.n	80046de <UART_SetConfig+0x2e6>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a4a      	ldr	r2, [pc, #296]	@ (80046d0 <UART_SetConfig+0x2d8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d125      	bne.n	80045f8 <UART_SetConfig+0x200>
 80045ac:	4b45      	ldr	r3, [pc, #276]	@ (80046c4 <UART_SetConfig+0x2cc>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80045b8:	d016      	beq.n	80045e8 <UART_SetConfig+0x1f0>
 80045ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80045bc:	d818      	bhi.n	80045f0 <UART_SetConfig+0x1f8>
 80045be:	2b80      	cmp	r3, #128	@ 0x80
 80045c0:	d00a      	beq.n	80045d8 <UART_SetConfig+0x1e0>
 80045c2:	2b80      	cmp	r3, #128	@ 0x80
 80045c4:	d814      	bhi.n	80045f0 <UART_SetConfig+0x1f8>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <UART_SetConfig+0x1d8>
 80045ca:	2b40      	cmp	r3, #64	@ 0x40
 80045cc:	d008      	beq.n	80045e0 <UART_SetConfig+0x1e8>
 80045ce:	e00f      	b.n	80045f0 <UART_SetConfig+0x1f8>
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d6:	e082      	b.n	80046de <UART_SetConfig+0x2e6>
 80045d8:	2302      	movs	r3, #2
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e07e      	b.n	80046de <UART_SetConfig+0x2e6>
 80045e0:	2304      	movs	r3, #4
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e6:	e07a      	b.n	80046de <UART_SetConfig+0x2e6>
 80045e8:	2308      	movs	r3, #8
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ee:	e076      	b.n	80046de <UART_SetConfig+0x2e6>
 80045f0:	2310      	movs	r3, #16
 80045f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045f6:	e072      	b.n	80046de <UART_SetConfig+0x2e6>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a35      	ldr	r2, [pc, #212]	@ (80046d4 <UART_SetConfig+0x2dc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d12a      	bne.n	8004658 <UART_SetConfig+0x260>
 8004602:	4b30      	ldr	r3, [pc, #192]	@ (80046c4 <UART_SetConfig+0x2cc>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004610:	d01a      	beq.n	8004648 <UART_SetConfig+0x250>
 8004612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004616:	d81b      	bhi.n	8004650 <UART_SetConfig+0x258>
 8004618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800461c:	d00c      	beq.n	8004638 <UART_SetConfig+0x240>
 800461e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004622:	d815      	bhi.n	8004650 <UART_SetConfig+0x258>
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <UART_SetConfig+0x238>
 8004628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800462c:	d008      	beq.n	8004640 <UART_SetConfig+0x248>
 800462e:	e00f      	b.n	8004650 <UART_SetConfig+0x258>
 8004630:	2300      	movs	r3, #0
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004636:	e052      	b.n	80046de <UART_SetConfig+0x2e6>
 8004638:	2302      	movs	r3, #2
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463e:	e04e      	b.n	80046de <UART_SetConfig+0x2e6>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004646:	e04a      	b.n	80046de <UART_SetConfig+0x2e6>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464e:	e046      	b.n	80046de <UART_SetConfig+0x2e6>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004656:	e042      	b.n	80046de <UART_SetConfig+0x2e6>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a17      	ldr	r2, [pc, #92]	@ (80046bc <UART_SetConfig+0x2c4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d13a      	bne.n	80046d8 <UART_SetConfig+0x2e0>
 8004662:	4b18      	ldr	r3, [pc, #96]	@ (80046c4 <UART_SetConfig+0x2cc>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004668:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800466c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004670:	d01a      	beq.n	80046a8 <UART_SetConfig+0x2b0>
 8004672:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004676:	d81b      	bhi.n	80046b0 <UART_SetConfig+0x2b8>
 8004678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800467c:	d00c      	beq.n	8004698 <UART_SetConfig+0x2a0>
 800467e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004682:	d815      	bhi.n	80046b0 <UART_SetConfig+0x2b8>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <UART_SetConfig+0x298>
 8004688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800468c:	d008      	beq.n	80046a0 <UART_SetConfig+0x2a8>
 800468e:	e00f      	b.n	80046b0 <UART_SetConfig+0x2b8>
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004696:	e022      	b.n	80046de <UART_SetConfig+0x2e6>
 8004698:	2302      	movs	r3, #2
 800469a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469e:	e01e      	b.n	80046de <UART_SetConfig+0x2e6>
 80046a0:	2304      	movs	r3, #4
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046a6:	e01a      	b.n	80046de <UART_SetConfig+0x2e6>
 80046a8:	2308      	movs	r3, #8
 80046aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ae:	e016      	b.n	80046de <UART_SetConfig+0x2e6>
 80046b0:	2310      	movs	r3, #16
 80046b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b6:	e012      	b.n	80046de <UART_SetConfig+0x2e6>
 80046b8:	efff69f3 	.word	0xefff69f3
 80046bc:	40008000 	.word	0x40008000
 80046c0:	40013800 	.word	0x40013800
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40004400 	.word	0x40004400
 80046cc:	40004800 	.word	0x40004800
 80046d0:	40004c00 	.word	0x40004c00
 80046d4:	40005000 	.word	0x40005000
 80046d8:	2310      	movs	r3, #16
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a9f      	ldr	r2, [pc, #636]	@ (8004960 <UART_SetConfig+0x568>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d17a      	bne.n	80047de <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d824      	bhi.n	800473a <UART_SetConfig+0x342>
 80046f0:	a201      	add	r2, pc, #4	@ (adr r2, 80046f8 <UART_SetConfig+0x300>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	0800473b 	.word	0x0800473b
 8004700:	08004725 	.word	0x08004725
 8004704:	0800473b 	.word	0x0800473b
 8004708:	0800472b 	.word	0x0800472b
 800470c:	0800473b 	.word	0x0800473b
 8004710:	0800473b 	.word	0x0800473b
 8004714:	0800473b 	.word	0x0800473b
 8004718:	08004733 	.word	0x08004733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800471c:	f7ff f84c 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8004720:	61f8      	str	r0, [r7, #28]
        break;
 8004722:	e010      	b.n	8004746 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004724:	4b8f      	ldr	r3, [pc, #572]	@ (8004964 <UART_SetConfig+0x56c>)
 8004726:	61fb      	str	r3, [r7, #28]
        break;
 8004728:	e00d      	b.n	8004746 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472a:	f7fe ffad 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 800472e:	61f8      	str	r0, [r7, #28]
        break;
 8004730:	e009      	b.n	8004746 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004736:	61fb      	str	r3, [r7, #28]
        break;
 8004738:	e005      	b.n	8004746 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004744:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80fb 	beq.w	8004944 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	4413      	add	r3, r2
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	429a      	cmp	r2, r3
 800475c:	d305      	bcc.n	800476a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	429a      	cmp	r2, r3
 8004768:	d903      	bls.n	8004772 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004770:	e0e8      	b.n	8004944 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	2200      	movs	r2, #0
 8004776:	461c      	mov	r4, r3
 8004778:	4615      	mov	r5, r2
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	022b      	lsls	r3, r5, #8
 8004784:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004788:	0222      	lsls	r2, r4, #8
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	6849      	ldr	r1, [r1, #4]
 800478e:	0849      	lsrs	r1, r1, #1
 8004790:	2000      	movs	r0, #0
 8004792:	4688      	mov	r8, r1
 8004794:	4681      	mov	r9, r0
 8004796:	eb12 0a08 	adds.w	sl, r2, r8
 800479a:	eb43 0b09 	adc.w	fp, r3, r9
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ac:	4650      	mov	r0, sl
 80047ae:	4659      	mov	r1, fp
 80047b0:	f7fb fd5e 	bl	8000270 <__aeabi_uldivmod>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4613      	mov	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047c2:	d308      	bcc.n	80047d6 <UART_SetConfig+0x3de>
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ca:	d204      	bcs.n	80047d6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	e0b6      	b.n	8004944 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047dc:	e0b2      	b.n	8004944 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e6:	d15e      	bne.n	80048a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d828      	bhi.n	8004842 <UART_SetConfig+0x44a>
 80047f0:	a201      	add	r2, pc, #4	@ (adr r2, 80047f8 <UART_SetConfig+0x400>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004825 	.word	0x08004825
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004843 	.word	0x08004843
 8004808:	08004833 	.word	0x08004833
 800480c:	08004843 	.word	0x08004843
 8004810:	08004843 	.word	0x08004843
 8004814:	08004843 	.word	0x08004843
 8004818:	0800483b 	.word	0x0800483b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7fe ffcc 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8004820:	61f8      	str	r0, [r7, #28]
        break;
 8004822:	e014      	b.n	800484e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004824:	f7fe ffde 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 8004828:	61f8      	str	r0, [r7, #28]
        break;
 800482a:	e010      	b.n	800484e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800482c:	4b4d      	ldr	r3, [pc, #308]	@ (8004964 <UART_SetConfig+0x56c>)
 800482e:	61fb      	str	r3, [r7, #28]
        break;
 8004830:	e00d      	b.n	800484e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004832:	f7fe ff29 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8004836:	61f8      	str	r0, [r7, #28]
        break;
 8004838:	e009      	b.n	800484e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800483e:	61fb      	str	r3, [r7, #28]
        break;
 8004840:	e005      	b.n	800484e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800484c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d077      	beq.n	8004944 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	005a      	lsls	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	441a      	add	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b0f      	cmp	r3, #15
 800486e:	d916      	bls.n	800489e <UART_SetConfig+0x4a6>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004876:	d212      	bcs.n	800489e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f023 030f 	bic.w	r3, r3, #15
 8004880:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	b29b      	uxth	r3, r3
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	b29a      	uxth	r2, r3
 800488e:	8afb      	ldrh	r3, [r7, #22]
 8004890:	4313      	orrs	r3, r2
 8004892:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	8afa      	ldrh	r2, [r7, #22]
 800489a:	60da      	str	r2, [r3, #12]
 800489c:	e052      	b.n	8004944 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048a4:	e04e      	b.n	8004944 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d827      	bhi.n	80048fe <UART_SetConfig+0x506>
 80048ae:	a201      	add	r2, pc, #4	@ (adr r2, 80048b4 <UART_SetConfig+0x4bc>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048d9 	.word	0x080048d9
 80048b8:	080048e1 	.word	0x080048e1
 80048bc:	080048e9 	.word	0x080048e9
 80048c0:	080048ff 	.word	0x080048ff
 80048c4:	080048ef 	.word	0x080048ef
 80048c8:	080048ff 	.word	0x080048ff
 80048cc:	080048ff 	.word	0x080048ff
 80048d0:	080048ff 	.word	0x080048ff
 80048d4:	080048f7 	.word	0x080048f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d8:	f7fe ff6e 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80048dc:	61f8      	str	r0, [r7, #28]
        break;
 80048de:	e014      	b.n	800490a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048e0:	f7fe ff80 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 80048e4:	61f8      	str	r0, [r7, #28]
        break;
 80048e6:	e010      	b.n	800490a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004964 <UART_SetConfig+0x56c>)
 80048ea:	61fb      	str	r3, [r7, #28]
        break;
 80048ec:	e00d      	b.n	800490a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ee:	f7fe fecb 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 80048f2:	61f8      	str	r0, [r7, #28]
        break;
 80048f4:	e009      	b.n	800490a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048fa:	61fb      	str	r3, [r7, #28]
        break;
 80048fc:	e005      	b.n	800490a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004908:	bf00      	nop
    }

    if (pclk != 0U)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d019      	beq.n	8004944 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	085a      	lsrs	r2, r3, #1
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	441a      	add	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	2b0f      	cmp	r3, #15
 8004928:	d909      	bls.n	800493e <UART_SetConfig+0x546>
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004930:	d205      	bcs.n	800493e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	e002      	b.n	8004944 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004950:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004954:	4618      	mov	r0, r3
 8004956:	3728      	adds	r7, #40	@ 0x28
 8004958:	46bd      	mov	sp, r7
 800495a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495e:	bf00      	nop
 8004960:	40008000 	.word	0x40008000
 8004964:	00f42400 	.word	0x00f42400

08004968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d01a      	beq.n	8004a7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a66:	d10a      	bne.n	8004a7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b098      	sub	sp, #96	@ 0x60
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004abc:	f7fc f994 	bl	8000de8 <HAL_GetTick>
 8004ac0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d12e      	bne.n	8004b2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f88c 	bl	8004bfc <UART_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d021      	beq.n	8004b2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004afe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e6      	bne.n	8004aea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e062      	b.n	8004bf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d149      	bne.n	8004bd0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b44:	2200      	movs	r2, #0
 8004b46:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f856 	bl	8004bfc <UART_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d03c      	beq.n	8004bd0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	e853 3f00 	ldrex	r3, [r3]
 8004b62:	623b      	str	r3, [r7, #32]
   return(result);
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e6      	bne.n	8004b56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0301 	bic.w	r3, r3, #1
 8004b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ba8:	61fa      	str	r2, [r7, #28]
 8004baa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	69b9      	ldr	r1, [r7, #24]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e5      	bne.n	8004b88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e011      	b.n	8004bf4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3758      	adds	r7, #88	@ 0x58
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c0c:	e04f      	b.n	8004cae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c14:	d04b      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c16:	f7fc f8e7 	bl	8000de8 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d302      	bcc.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e04e      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d037      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b80      	cmp	r3, #128	@ 0x80
 8004c42:	d034      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b40      	cmp	r3, #64	@ 0x40
 8004c48:	d031      	beq.n	8004cae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d110      	bne.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f838 	bl	8004cd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e029      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c88:	d111      	bne.n	8004cae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f81e 	bl	8004cd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e00f      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d0a0      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b095      	sub	sp, #84	@ 0x54
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cfe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e6      	bne.n	8004cde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d118      	bne.n	8004d7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f023 0310 	bic.w	r3, r3, #16
 8004d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6979      	ldr	r1, [r7, #20]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	613b      	str	r3, [r7, #16]
   return(result);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e6      	bne.n	8004d4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d92:	bf00      	nop
 8004d94:	3754      	adds	r7, #84	@ 0x54
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <std>:
 8004da0:	2300      	movs	r3, #0
 8004da2:	b510      	push	{r4, lr}
 8004da4:	4604      	mov	r4, r0
 8004da6:	e9c0 3300 	strd	r3, r3, [r0]
 8004daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dae:	6083      	str	r3, [r0, #8]
 8004db0:	8181      	strh	r1, [r0, #12]
 8004db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004db4:	81c2      	strh	r2, [r0, #14]
 8004db6:	6183      	str	r3, [r0, #24]
 8004db8:	4619      	mov	r1, r3
 8004dba:	2208      	movs	r2, #8
 8004dbc:	305c      	adds	r0, #92	@ 0x5c
 8004dbe:	f000 f906 	bl	8004fce <memset>
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004df8 <std+0x58>)
 8004dc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004dfc <std+0x5c>)
 8004dc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004dca:	4b0d      	ldr	r3, [pc, #52]	@ (8004e00 <std+0x60>)
 8004dcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004dce:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <std+0x64>)
 8004dd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <std+0x68>)
 8004dd4:	6224      	str	r4, [r4, #32]
 8004dd6:	429c      	cmp	r4, r3
 8004dd8:	d006      	beq.n	8004de8 <std+0x48>
 8004dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004dde:	4294      	cmp	r4, r2
 8004de0:	d002      	beq.n	8004de8 <std+0x48>
 8004de2:	33d0      	adds	r3, #208	@ 0xd0
 8004de4:	429c      	cmp	r4, r3
 8004de6:	d105      	bne.n	8004df4 <std+0x54>
 8004de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df0:	f000 b966 	b.w	80050c0 <__retarget_lock_init_recursive>
 8004df4:	bd10      	pop	{r4, pc}
 8004df6:	bf00      	nop
 8004df8:	08004f49 	.word	0x08004f49
 8004dfc:	08004f6b 	.word	0x08004f6b
 8004e00:	08004fa3 	.word	0x08004fa3
 8004e04:	08004fc7 	.word	0x08004fc7
 8004e08:	2000017c 	.word	0x2000017c

08004e0c <stdio_exit_handler>:
 8004e0c:	4a02      	ldr	r2, [pc, #8]	@ (8004e18 <stdio_exit_handler+0xc>)
 8004e0e:	4903      	ldr	r1, [pc, #12]	@ (8004e1c <stdio_exit_handler+0x10>)
 8004e10:	4803      	ldr	r0, [pc, #12]	@ (8004e20 <stdio_exit_handler+0x14>)
 8004e12:	f000 b869 	b.w	8004ee8 <_fwalk_sglue>
 8004e16:	bf00      	nop
 8004e18:	2000000c 	.word	0x2000000c
 8004e1c:	0800595d 	.word	0x0800595d
 8004e20:	2000001c 	.word	0x2000001c

08004e24 <cleanup_stdio>:
 8004e24:	6841      	ldr	r1, [r0, #4]
 8004e26:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <cleanup_stdio+0x34>)
 8004e28:	4299      	cmp	r1, r3
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	4604      	mov	r4, r0
 8004e2e:	d001      	beq.n	8004e34 <cleanup_stdio+0x10>
 8004e30:	f000 fd94 	bl	800595c <_fflush_r>
 8004e34:	68a1      	ldr	r1, [r4, #8]
 8004e36:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <cleanup_stdio+0x38>)
 8004e38:	4299      	cmp	r1, r3
 8004e3a:	d002      	beq.n	8004e42 <cleanup_stdio+0x1e>
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f000 fd8d 	bl	800595c <_fflush_r>
 8004e42:	68e1      	ldr	r1, [r4, #12]
 8004e44:	4b06      	ldr	r3, [pc, #24]	@ (8004e60 <cleanup_stdio+0x3c>)
 8004e46:	4299      	cmp	r1, r3
 8004e48:	d004      	beq.n	8004e54 <cleanup_stdio+0x30>
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e50:	f000 bd84 	b.w	800595c <_fflush_r>
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	bf00      	nop
 8004e58:	2000017c 	.word	0x2000017c
 8004e5c:	200001e4 	.word	0x200001e4
 8004e60:	2000024c 	.word	0x2000024c

08004e64 <global_stdio_init.part.0>:
 8004e64:	b510      	push	{r4, lr}
 8004e66:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <global_stdio_init.part.0+0x30>)
 8004e68:	4c0b      	ldr	r4, [pc, #44]	@ (8004e98 <global_stdio_init.part.0+0x34>)
 8004e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e9c <global_stdio_init.part.0+0x38>)
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	4620      	mov	r0, r4
 8004e70:	2200      	movs	r2, #0
 8004e72:	2104      	movs	r1, #4
 8004e74:	f7ff ff94 	bl	8004da0 <std>
 8004e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	2109      	movs	r1, #9
 8004e80:	f7ff ff8e 	bl	8004da0 <std>
 8004e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e88:	2202      	movs	r2, #2
 8004e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e8e:	2112      	movs	r1, #18
 8004e90:	f7ff bf86 	b.w	8004da0 <std>
 8004e94:	200002b4 	.word	0x200002b4
 8004e98:	2000017c 	.word	0x2000017c
 8004e9c:	08004e0d 	.word	0x08004e0d

08004ea0 <__sfp_lock_acquire>:
 8004ea0:	4801      	ldr	r0, [pc, #4]	@ (8004ea8 <__sfp_lock_acquire+0x8>)
 8004ea2:	f000 b90e 	b.w	80050c2 <__retarget_lock_acquire_recursive>
 8004ea6:	bf00      	nop
 8004ea8:	200002bd 	.word	0x200002bd

08004eac <__sfp_lock_release>:
 8004eac:	4801      	ldr	r0, [pc, #4]	@ (8004eb4 <__sfp_lock_release+0x8>)
 8004eae:	f000 b909 	b.w	80050c4 <__retarget_lock_release_recursive>
 8004eb2:	bf00      	nop
 8004eb4:	200002bd 	.word	0x200002bd

08004eb8 <__sinit>:
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	4604      	mov	r4, r0
 8004ebc:	f7ff fff0 	bl	8004ea0 <__sfp_lock_acquire>
 8004ec0:	6a23      	ldr	r3, [r4, #32]
 8004ec2:	b11b      	cbz	r3, 8004ecc <__sinit+0x14>
 8004ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec8:	f7ff bff0 	b.w	8004eac <__sfp_lock_release>
 8004ecc:	4b04      	ldr	r3, [pc, #16]	@ (8004ee0 <__sinit+0x28>)
 8004ece:	6223      	str	r3, [r4, #32]
 8004ed0:	4b04      	ldr	r3, [pc, #16]	@ (8004ee4 <__sinit+0x2c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f5      	bne.n	8004ec4 <__sinit+0xc>
 8004ed8:	f7ff ffc4 	bl	8004e64 <global_stdio_init.part.0>
 8004edc:	e7f2      	b.n	8004ec4 <__sinit+0xc>
 8004ede:	bf00      	nop
 8004ee0:	08004e25 	.word	0x08004e25
 8004ee4:	200002b4 	.word	0x200002b4

08004ee8 <_fwalk_sglue>:
 8004ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eec:	4607      	mov	r7, r0
 8004eee:	4688      	mov	r8, r1
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8004efc:	d505      	bpl.n	8004f0a <_fwalk_sglue+0x22>
 8004efe:	6824      	ldr	r4, [r4, #0]
 8004f00:	2c00      	cmp	r4, #0
 8004f02:	d1f7      	bne.n	8004ef4 <_fwalk_sglue+0xc>
 8004f04:	4630      	mov	r0, r6
 8004f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f0a:	89ab      	ldrh	r3, [r5, #12]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d907      	bls.n	8004f20 <_fwalk_sglue+0x38>
 8004f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f14:	3301      	adds	r3, #1
 8004f16:	d003      	beq.n	8004f20 <_fwalk_sglue+0x38>
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	47c0      	blx	r8
 8004f1e:	4306      	orrs	r6, r0
 8004f20:	3568      	adds	r5, #104	@ 0x68
 8004f22:	e7e9      	b.n	8004ef8 <_fwalk_sglue+0x10>

08004f24 <iprintf>:
 8004f24:	b40f      	push	{r0, r1, r2, r3}
 8004f26:	b507      	push	{r0, r1, r2, lr}
 8004f28:	4906      	ldr	r1, [pc, #24]	@ (8004f44 <iprintf+0x20>)
 8004f2a:	ab04      	add	r3, sp, #16
 8004f2c:	6808      	ldr	r0, [r1, #0]
 8004f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f32:	6881      	ldr	r1, [r0, #8]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	f000 f9e9 	bl	800530c <_vfiprintf_r>
 8004f3a:	b003      	add	sp, #12
 8004f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f40:	b004      	add	sp, #16
 8004f42:	4770      	bx	lr
 8004f44:	20000018 	.word	0x20000018

08004f48 <__sread>:
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f50:	f000 f868 	bl	8005024 <_read_r>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	bfab      	itete	ge
 8004f58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8004f5c:	181b      	addge	r3, r3, r0
 8004f5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f62:	bfac      	ite	ge
 8004f64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f66:	81a3      	strhlt	r3, [r4, #12]
 8004f68:	bd10      	pop	{r4, pc}

08004f6a <__swrite>:
 8004f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6e:	461f      	mov	r7, r3
 8004f70:	898b      	ldrh	r3, [r1, #12]
 8004f72:	05db      	lsls	r3, r3, #23
 8004f74:	4605      	mov	r5, r0
 8004f76:	460c      	mov	r4, r1
 8004f78:	4616      	mov	r6, r2
 8004f7a:	d505      	bpl.n	8004f88 <__swrite+0x1e>
 8004f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f80:	2302      	movs	r3, #2
 8004f82:	2200      	movs	r2, #0
 8004f84:	f000 f83c 	bl	8005000 <_lseek_r>
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f92:	81a3      	strh	r3, [r4, #12]
 8004f94:	4632      	mov	r2, r6
 8004f96:	463b      	mov	r3, r7
 8004f98:	4628      	mov	r0, r5
 8004f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f9e:	f000 b853 	b.w	8005048 <_write_r>

08004fa2 <__sseek>:
 8004fa2:	b510      	push	{r4, lr}
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004faa:	f000 f829 	bl	8005000 <_lseek_r>
 8004fae:	1c43      	adds	r3, r0, #1
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	bf15      	itete	ne
 8004fb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004fb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004fba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004fbe:	81a3      	strheq	r3, [r4, #12]
 8004fc0:	bf18      	it	ne
 8004fc2:	81a3      	strhne	r3, [r4, #12]
 8004fc4:	bd10      	pop	{r4, pc}

08004fc6 <__sclose>:
 8004fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fca:	f000 b809 	b.w	8004fe0 <_close_r>

08004fce <memset>:
 8004fce:	4402      	add	r2, r0
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d100      	bne.n	8004fd8 <memset+0xa>
 8004fd6:	4770      	bx	lr
 8004fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8004fdc:	e7f9      	b.n	8004fd2 <memset+0x4>
	...

08004fe0 <_close_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4d06      	ldr	r5, [pc, #24]	@ (8004ffc <_close_r+0x1c>)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	602b      	str	r3, [r5, #0]
 8004fec:	f7fb fde5 	bl	8000bba <_close>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_close_r+0x1a>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_close_r+0x1a>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	200002b8 	.word	0x200002b8

08005000 <_lseek_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4d07      	ldr	r5, [pc, #28]	@ (8005020 <_lseek_r+0x20>)
 8005004:	4604      	mov	r4, r0
 8005006:	4608      	mov	r0, r1
 8005008:	4611      	mov	r1, r2
 800500a:	2200      	movs	r2, #0
 800500c:	602a      	str	r2, [r5, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	f7fb fdfa 	bl	8000c08 <_lseek>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d102      	bne.n	800501e <_lseek_r+0x1e>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	b103      	cbz	r3, 800501e <_lseek_r+0x1e>
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	200002b8 	.word	0x200002b8

08005024 <_read_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	4d07      	ldr	r5, [pc, #28]	@ (8005044 <_read_r+0x20>)
 8005028:	4604      	mov	r4, r0
 800502a:	4608      	mov	r0, r1
 800502c:	4611      	mov	r1, r2
 800502e:	2200      	movs	r2, #0
 8005030:	602a      	str	r2, [r5, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	f7fb fd88 	bl	8000b48 <_read>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_read_r+0x1e>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_read_r+0x1e>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	200002b8 	.word	0x200002b8

08005048 <_write_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d07      	ldr	r5, [pc, #28]	@ (8005068 <_write_r+0x20>)
 800504c:	4604      	mov	r4, r0
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	2200      	movs	r2, #0
 8005054:	602a      	str	r2, [r5, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	f7fb fd93 	bl	8000b82 <_write>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_write_r+0x1e>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_write_r+0x1e>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	200002b8 	.word	0x200002b8

0800506c <__errno>:
 800506c:	4b01      	ldr	r3, [pc, #4]	@ (8005074 <__errno+0x8>)
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000018 	.word	0x20000018

08005078 <__libc_init_array>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4d0d      	ldr	r5, [pc, #52]	@ (80050b0 <__libc_init_array+0x38>)
 800507c:	4c0d      	ldr	r4, [pc, #52]	@ (80050b4 <__libc_init_array+0x3c>)
 800507e:	1b64      	subs	r4, r4, r5
 8005080:	10a4      	asrs	r4, r4, #2
 8005082:	2600      	movs	r6, #0
 8005084:	42a6      	cmp	r6, r4
 8005086:	d109      	bne.n	800509c <__libc_init_array+0x24>
 8005088:	4d0b      	ldr	r5, [pc, #44]	@ (80050b8 <__libc_init_array+0x40>)
 800508a:	4c0c      	ldr	r4, [pc, #48]	@ (80050bc <__libc_init_array+0x44>)
 800508c:	f000 fdb6 	bl	8005bfc <_init>
 8005090:	1b64      	subs	r4, r4, r5
 8005092:	10a4      	asrs	r4, r4, #2
 8005094:	2600      	movs	r6, #0
 8005096:	42a6      	cmp	r6, r4
 8005098:	d105      	bne.n	80050a6 <__libc_init_array+0x2e>
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a0:	4798      	blx	r3
 80050a2:	3601      	adds	r6, #1
 80050a4:	e7ee      	b.n	8005084 <__libc_init_array+0xc>
 80050a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050aa:	4798      	blx	r3
 80050ac:	3601      	adds	r6, #1
 80050ae:	e7f2      	b.n	8005096 <__libc_init_array+0x1e>
 80050b0:	08005cac 	.word	0x08005cac
 80050b4:	08005cac 	.word	0x08005cac
 80050b8:	08005cac 	.word	0x08005cac
 80050bc:	08005cb0 	.word	0x08005cb0

080050c0 <__retarget_lock_init_recursive>:
 80050c0:	4770      	bx	lr

080050c2 <__retarget_lock_acquire_recursive>:
 80050c2:	4770      	bx	lr

080050c4 <__retarget_lock_release_recursive>:
 80050c4:	4770      	bx	lr
	...

080050c8 <_free_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4605      	mov	r5, r0
 80050cc:	2900      	cmp	r1, #0
 80050ce:	d041      	beq.n	8005154 <_free_r+0x8c>
 80050d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d4:	1f0c      	subs	r4, r1, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bfb8      	it	lt
 80050da:	18e4      	addlt	r4, r4, r3
 80050dc:	f000 f8e0 	bl	80052a0 <__malloc_lock>
 80050e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005158 <_free_r+0x90>)
 80050e2:	6813      	ldr	r3, [r2, #0]
 80050e4:	b933      	cbnz	r3, 80050f4 <_free_r+0x2c>
 80050e6:	6063      	str	r3, [r4, #4]
 80050e8:	6014      	str	r4, [r2, #0]
 80050ea:	4628      	mov	r0, r5
 80050ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050f0:	f000 b8dc 	b.w	80052ac <__malloc_unlock>
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	d908      	bls.n	800510a <_free_r+0x42>
 80050f8:	6820      	ldr	r0, [r4, #0]
 80050fa:	1821      	adds	r1, r4, r0
 80050fc:	428b      	cmp	r3, r1
 80050fe:	bf01      	itttt	eq
 8005100:	6819      	ldreq	r1, [r3, #0]
 8005102:	685b      	ldreq	r3, [r3, #4]
 8005104:	1809      	addeq	r1, r1, r0
 8005106:	6021      	streq	r1, [r4, #0]
 8005108:	e7ed      	b.n	80050e6 <_free_r+0x1e>
 800510a:	461a      	mov	r2, r3
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	b10b      	cbz	r3, 8005114 <_free_r+0x4c>
 8005110:	42a3      	cmp	r3, r4
 8005112:	d9fa      	bls.n	800510a <_free_r+0x42>
 8005114:	6811      	ldr	r1, [r2, #0]
 8005116:	1850      	adds	r0, r2, r1
 8005118:	42a0      	cmp	r0, r4
 800511a:	d10b      	bne.n	8005134 <_free_r+0x6c>
 800511c:	6820      	ldr	r0, [r4, #0]
 800511e:	4401      	add	r1, r0
 8005120:	1850      	adds	r0, r2, r1
 8005122:	4283      	cmp	r3, r0
 8005124:	6011      	str	r1, [r2, #0]
 8005126:	d1e0      	bne.n	80050ea <_free_r+0x22>
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	6053      	str	r3, [r2, #4]
 800512e:	4408      	add	r0, r1
 8005130:	6010      	str	r0, [r2, #0]
 8005132:	e7da      	b.n	80050ea <_free_r+0x22>
 8005134:	d902      	bls.n	800513c <_free_r+0x74>
 8005136:	230c      	movs	r3, #12
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	e7d6      	b.n	80050ea <_free_r+0x22>
 800513c:	6820      	ldr	r0, [r4, #0]
 800513e:	1821      	adds	r1, r4, r0
 8005140:	428b      	cmp	r3, r1
 8005142:	bf04      	itt	eq
 8005144:	6819      	ldreq	r1, [r3, #0]
 8005146:	685b      	ldreq	r3, [r3, #4]
 8005148:	6063      	str	r3, [r4, #4]
 800514a:	bf04      	itt	eq
 800514c:	1809      	addeq	r1, r1, r0
 800514e:	6021      	streq	r1, [r4, #0]
 8005150:	6054      	str	r4, [r2, #4]
 8005152:	e7ca      	b.n	80050ea <_free_r+0x22>
 8005154:	bd38      	pop	{r3, r4, r5, pc}
 8005156:	bf00      	nop
 8005158:	200002c4 	.word	0x200002c4

0800515c <sbrk_aligned>:
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	4e0f      	ldr	r6, [pc, #60]	@ (800519c <sbrk_aligned+0x40>)
 8005160:	460c      	mov	r4, r1
 8005162:	6831      	ldr	r1, [r6, #0]
 8005164:	4605      	mov	r5, r0
 8005166:	b911      	cbnz	r1, 800516e <sbrk_aligned+0x12>
 8005168:	f000 fcb4 	bl	8005ad4 <_sbrk_r>
 800516c:	6030      	str	r0, [r6, #0]
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f000 fcaf 	bl	8005ad4 <_sbrk_r>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	d103      	bne.n	8005182 <sbrk_aligned+0x26>
 800517a:	f04f 34ff 	mov.w	r4, #4294967295
 800517e:	4620      	mov	r0, r4
 8005180:	bd70      	pop	{r4, r5, r6, pc}
 8005182:	1cc4      	adds	r4, r0, #3
 8005184:	f024 0403 	bic.w	r4, r4, #3
 8005188:	42a0      	cmp	r0, r4
 800518a:	d0f8      	beq.n	800517e <sbrk_aligned+0x22>
 800518c:	1a21      	subs	r1, r4, r0
 800518e:	4628      	mov	r0, r5
 8005190:	f000 fca0 	bl	8005ad4 <_sbrk_r>
 8005194:	3001      	adds	r0, #1
 8005196:	d1f2      	bne.n	800517e <sbrk_aligned+0x22>
 8005198:	e7ef      	b.n	800517a <sbrk_aligned+0x1e>
 800519a:	bf00      	nop
 800519c:	200002c0 	.word	0x200002c0

080051a0 <_malloc_r>:
 80051a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a4:	1ccd      	adds	r5, r1, #3
 80051a6:	f025 0503 	bic.w	r5, r5, #3
 80051aa:	3508      	adds	r5, #8
 80051ac:	2d0c      	cmp	r5, #12
 80051ae:	bf38      	it	cc
 80051b0:	250c      	movcc	r5, #12
 80051b2:	2d00      	cmp	r5, #0
 80051b4:	4606      	mov	r6, r0
 80051b6:	db01      	blt.n	80051bc <_malloc_r+0x1c>
 80051b8:	42a9      	cmp	r1, r5
 80051ba:	d904      	bls.n	80051c6 <_malloc_r+0x26>
 80051bc:	230c      	movs	r3, #12
 80051be:	6033      	str	r3, [r6, #0]
 80051c0:	2000      	movs	r0, #0
 80051c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800529c <_malloc_r+0xfc>
 80051ca:	f000 f869 	bl	80052a0 <__malloc_lock>
 80051ce:	f8d8 3000 	ldr.w	r3, [r8]
 80051d2:	461c      	mov	r4, r3
 80051d4:	bb44      	cbnz	r4, 8005228 <_malloc_r+0x88>
 80051d6:	4629      	mov	r1, r5
 80051d8:	4630      	mov	r0, r6
 80051da:	f7ff ffbf 	bl	800515c <sbrk_aligned>
 80051de:	1c43      	adds	r3, r0, #1
 80051e0:	4604      	mov	r4, r0
 80051e2:	d158      	bne.n	8005296 <_malloc_r+0xf6>
 80051e4:	f8d8 4000 	ldr.w	r4, [r8]
 80051e8:	4627      	mov	r7, r4
 80051ea:	2f00      	cmp	r7, #0
 80051ec:	d143      	bne.n	8005276 <_malloc_r+0xd6>
 80051ee:	2c00      	cmp	r4, #0
 80051f0:	d04b      	beq.n	800528a <_malloc_r+0xea>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	4639      	mov	r1, r7
 80051f6:	4630      	mov	r0, r6
 80051f8:	eb04 0903 	add.w	r9, r4, r3
 80051fc:	f000 fc6a 	bl	8005ad4 <_sbrk_r>
 8005200:	4581      	cmp	r9, r0
 8005202:	d142      	bne.n	800528a <_malloc_r+0xea>
 8005204:	6821      	ldr	r1, [r4, #0]
 8005206:	1a6d      	subs	r5, r5, r1
 8005208:	4629      	mov	r1, r5
 800520a:	4630      	mov	r0, r6
 800520c:	f7ff ffa6 	bl	800515c <sbrk_aligned>
 8005210:	3001      	adds	r0, #1
 8005212:	d03a      	beq.n	800528a <_malloc_r+0xea>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	442b      	add	r3, r5
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	f8d8 3000 	ldr.w	r3, [r8]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	bb62      	cbnz	r2, 800527c <_malloc_r+0xdc>
 8005222:	f8c8 7000 	str.w	r7, [r8]
 8005226:	e00f      	b.n	8005248 <_malloc_r+0xa8>
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	1b52      	subs	r2, r2, r5
 800522c:	d420      	bmi.n	8005270 <_malloc_r+0xd0>
 800522e:	2a0b      	cmp	r2, #11
 8005230:	d917      	bls.n	8005262 <_malloc_r+0xc2>
 8005232:	1961      	adds	r1, r4, r5
 8005234:	42a3      	cmp	r3, r4
 8005236:	6025      	str	r5, [r4, #0]
 8005238:	bf18      	it	ne
 800523a:	6059      	strne	r1, [r3, #4]
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	bf08      	it	eq
 8005240:	f8c8 1000 	streq.w	r1, [r8]
 8005244:	5162      	str	r2, [r4, r5]
 8005246:	604b      	str	r3, [r1, #4]
 8005248:	4630      	mov	r0, r6
 800524a:	f000 f82f 	bl	80052ac <__malloc_unlock>
 800524e:	f104 000b 	add.w	r0, r4, #11
 8005252:	1d23      	adds	r3, r4, #4
 8005254:	f020 0007 	bic.w	r0, r0, #7
 8005258:	1ac2      	subs	r2, r0, r3
 800525a:	bf1c      	itt	ne
 800525c:	1a1b      	subne	r3, r3, r0
 800525e:	50a3      	strne	r3, [r4, r2]
 8005260:	e7af      	b.n	80051c2 <_malloc_r+0x22>
 8005262:	6862      	ldr	r2, [r4, #4]
 8005264:	42a3      	cmp	r3, r4
 8005266:	bf0c      	ite	eq
 8005268:	f8c8 2000 	streq.w	r2, [r8]
 800526c:	605a      	strne	r2, [r3, #4]
 800526e:	e7eb      	b.n	8005248 <_malloc_r+0xa8>
 8005270:	4623      	mov	r3, r4
 8005272:	6864      	ldr	r4, [r4, #4]
 8005274:	e7ae      	b.n	80051d4 <_malloc_r+0x34>
 8005276:	463c      	mov	r4, r7
 8005278:	687f      	ldr	r7, [r7, #4]
 800527a:	e7b6      	b.n	80051ea <_malloc_r+0x4a>
 800527c:	461a      	mov	r2, r3
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	42a3      	cmp	r3, r4
 8005282:	d1fb      	bne.n	800527c <_malloc_r+0xdc>
 8005284:	2300      	movs	r3, #0
 8005286:	6053      	str	r3, [r2, #4]
 8005288:	e7de      	b.n	8005248 <_malloc_r+0xa8>
 800528a:	230c      	movs	r3, #12
 800528c:	6033      	str	r3, [r6, #0]
 800528e:	4630      	mov	r0, r6
 8005290:	f000 f80c 	bl	80052ac <__malloc_unlock>
 8005294:	e794      	b.n	80051c0 <_malloc_r+0x20>
 8005296:	6005      	str	r5, [r0, #0]
 8005298:	e7d6      	b.n	8005248 <_malloc_r+0xa8>
 800529a:	bf00      	nop
 800529c:	200002c4 	.word	0x200002c4

080052a0 <__malloc_lock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	@ (80052a8 <__malloc_lock+0x8>)
 80052a2:	f7ff bf0e 	b.w	80050c2 <__retarget_lock_acquire_recursive>
 80052a6:	bf00      	nop
 80052a8:	200002bc 	.word	0x200002bc

080052ac <__malloc_unlock>:
 80052ac:	4801      	ldr	r0, [pc, #4]	@ (80052b4 <__malloc_unlock+0x8>)
 80052ae:	f7ff bf09 	b.w	80050c4 <__retarget_lock_release_recursive>
 80052b2:	bf00      	nop
 80052b4:	200002bc 	.word	0x200002bc

080052b8 <__sfputc_r>:
 80052b8:	6893      	ldr	r3, [r2, #8]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	b410      	push	{r4}
 80052c0:	6093      	str	r3, [r2, #8]
 80052c2:	da08      	bge.n	80052d6 <__sfputc_r+0x1e>
 80052c4:	6994      	ldr	r4, [r2, #24]
 80052c6:	42a3      	cmp	r3, r4
 80052c8:	db01      	blt.n	80052ce <__sfputc_r+0x16>
 80052ca:	290a      	cmp	r1, #10
 80052cc:	d103      	bne.n	80052d6 <__sfputc_r+0x1e>
 80052ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052d2:	f000 bb6b 	b.w	80059ac <__swbuf_r>
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	1c58      	adds	r0, r3, #1
 80052da:	6010      	str	r0, [r2, #0]
 80052dc:	7019      	strb	r1, [r3, #0]
 80052de:	4608      	mov	r0, r1
 80052e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <__sfputs_r>:
 80052e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e8:	4606      	mov	r6, r0
 80052ea:	460f      	mov	r7, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	18d5      	adds	r5, r2, r3
 80052f0:	42ac      	cmp	r4, r5
 80052f2:	d101      	bne.n	80052f8 <__sfputs_r+0x12>
 80052f4:	2000      	movs	r0, #0
 80052f6:	e007      	b.n	8005308 <__sfputs_r+0x22>
 80052f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052fc:	463a      	mov	r2, r7
 80052fe:	4630      	mov	r0, r6
 8005300:	f7ff ffda 	bl	80052b8 <__sfputc_r>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d1f3      	bne.n	80052f0 <__sfputs_r+0xa>
 8005308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800530c <_vfiprintf_r>:
 800530c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005310:	460d      	mov	r5, r1
 8005312:	b09d      	sub	sp, #116	@ 0x74
 8005314:	4614      	mov	r4, r2
 8005316:	4698      	mov	r8, r3
 8005318:	4606      	mov	r6, r0
 800531a:	b118      	cbz	r0, 8005324 <_vfiprintf_r+0x18>
 800531c:	6a03      	ldr	r3, [r0, #32]
 800531e:	b90b      	cbnz	r3, 8005324 <_vfiprintf_r+0x18>
 8005320:	f7ff fdca 	bl	8004eb8 <__sinit>
 8005324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005326:	07d9      	lsls	r1, r3, #31
 8005328:	d405      	bmi.n	8005336 <_vfiprintf_r+0x2a>
 800532a:	89ab      	ldrh	r3, [r5, #12]
 800532c:	059a      	lsls	r2, r3, #22
 800532e:	d402      	bmi.n	8005336 <_vfiprintf_r+0x2a>
 8005330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005332:	f7ff fec6 	bl	80050c2 <__retarget_lock_acquire_recursive>
 8005336:	89ab      	ldrh	r3, [r5, #12]
 8005338:	071b      	lsls	r3, r3, #28
 800533a:	d501      	bpl.n	8005340 <_vfiprintf_r+0x34>
 800533c:	692b      	ldr	r3, [r5, #16]
 800533e:	b99b      	cbnz	r3, 8005368 <_vfiprintf_r+0x5c>
 8005340:	4629      	mov	r1, r5
 8005342:	4630      	mov	r0, r6
 8005344:	f000 fb70 	bl	8005a28 <__swsetup_r>
 8005348:	b170      	cbz	r0, 8005368 <_vfiprintf_r+0x5c>
 800534a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800534c:	07dc      	lsls	r4, r3, #31
 800534e:	d504      	bpl.n	800535a <_vfiprintf_r+0x4e>
 8005350:	f04f 30ff 	mov.w	r0, #4294967295
 8005354:	b01d      	add	sp, #116	@ 0x74
 8005356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535a:	89ab      	ldrh	r3, [r5, #12]
 800535c:	0598      	lsls	r0, r3, #22
 800535e:	d4f7      	bmi.n	8005350 <_vfiprintf_r+0x44>
 8005360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005362:	f7ff feaf 	bl	80050c4 <__retarget_lock_release_recursive>
 8005366:	e7f3      	b.n	8005350 <_vfiprintf_r+0x44>
 8005368:	2300      	movs	r3, #0
 800536a:	9309      	str	r3, [sp, #36]	@ 0x24
 800536c:	2320      	movs	r3, #32
 800536e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005372:	f8cd 800c 	str.w	r8, [sp, #12]
 8005376:	2330      	movs	r3, #48	@ 0x30
 8005378:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005528 <_vfiprintf_r+0x21c>
 800537c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005380:	f04f 0901 	mov.w	r9, #1
 8005384:	4623      	mov	r3, r4
 8005386:	469a      	mov	sl, r3
 8005388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538c:	b10a      	cbz	r2, 8005392 <_vfiprintf_r+0x86>
 800538e:	2a25      	cmp	r2, #37	@ 0x25
 8005390:	d1f9      	bne.n	8005386 <_vfiprintf_r+0x7a>
 8005392:	ebba 0b04 	subs.w	fp, sl, r4
 8005396:	d00b      	beq.n	80053b0 <_vfiprintf_r+0xa4>
 8005398:	465b      	mov	r3, fp
 800539a:	4622      	mov	r2, r4
 800539c:	4629      	mov	r1, r5
 800539e:	4630      	mov	r0, r6
 80053a0:	f7ff ffa1 	bl	80052e6 <__sfputs_r>
 80053a4:	3001      	adds	r0, #1
 80053a6:	f000 80a7 	beq.w	80054f8 <_vfiprintf_r+0x1ec>
 80053aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053ac:	445a      	add	r2, fp
 80053ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80053b0:	f89a 3000 	ldrb.w	r3, [sl]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 809f 	beq.w	80054f8 <_vfiprintf_r+0x1ec>
 80053ba:	2300      	movs	r3, #0
 80053bc:	f04f 32ff 	mov.w	r2, #4294967295
 80053c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c4:	f10a 0a01 	add.w	sl, sl, #1
 80053c8:	9304      	str	r3, [sp, #16]
 80053ca:	9307      	str	r3, [sp, #28]
 80053cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80053d2:	4654      	mov	r4, sl
 80053d4:	2205      	movs	r2, #5
 80053d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053da:	4853      	ldr	r0, [pc, #332]	@ (8005528 <_vfiprintf_r+0x21c>)
 80053dc:	f7fa fef8 	bl	80001d0 <memchr>
 80053e0:	9a04      	ldr	r2, [sp, #16]
 80053e2:	b9d8      	cbnz	r0, 800541c <_vfiprintf_r+0x110>
 80053e4:	06d1      	lsls	r1, r2, #27
 80053e6:	bf44      	itt	mi
 80053e8:	2320      	movmi	r3, #32
 80053ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053ee:	0713      	lsls	r3, r2, #28
 80053f0:	bf44      	itt	mi
 80053f2:	232b      	movmi	r3, #43	@ 0x2b
 80053f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053f8:	f89a 3000 	ldrb.w	r3, [sl]
 80053fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80053fe:	d015      	beq.n	800542c <_vfiprintf_r+0x120>
 8005400:	9a07      	ldr	r2, [sp, #28]
 8005402:	4654      	mov	r4, sl
 8005404:	2000      	movs	r0, #0
 8005406:	f04f 0c0a 	mov.w	ip, #10
 800540a:	4621      	mov	r1, r4
 800540c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005410:	3b30      	subs	r3, #48	@ 0x30
 8005412:	2b09      	cmp	r3, #9
 8005414:	d94b      	bls.n	80054ae <_vfiprintf_r+0x1a2>
 8005416:	b1b0      	cbz	r0, 8005446 <_vfiprintf_r+0x13a>
 8005418:	9207      	str	r2, [sp, #28]
 800541a:	e014      	b.n	8005446 <_vfiprintf_r+0x13a>
 800541c:	eba0 0308 	sub.w	r3, r0, r8
 8005420:	fa09 f303 	lsl.w	r3, r9, r3
 8005424:	4313      	orrs	r3, r2
 8005426:	9304      	str	r3, [sp, #16]
 8005428:	46a2      	mov	sl, r4
 800542a:	e7d2      	b.n	80053d2 <_vfiprintf_r+0xc6>
 800542c:	9b03      	ldr	r3, [sp, #12]
 800542e:	1d19      	adds	r1, r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	9103      	str	r1, [sp, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	bfbb      	ittet	lt
 8005438:	425b      	neglt	r3, r3
 800543a:	f042 0202 	orrlt.w	r2, r2, #2
 800543e:	9307      	strge	r3, [sp, #28]
 8005440:	9307      	strlt	r3, [sp, #28]
 8005442:	bfb8      	it	lt
 8005444:	9204      	strlt	r2, [sp, #16]
 8005446:	7823      	ldrb	r3, [r4, #0]
 8005448:	2b2e      	cmp	r3, #46	@ 0x2e
 800544a:	d10a      	bne.n	8005462 <_vfiprintf_r+0x156>
 800544c:	7863      	ldrb	r3, [r4, #1]
 800544e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005450:	d132      	bne.n	80054b8 <_vfiprintf_r+0x1ac>
 8005452:	9b03      	ldr	r3, [sp, #12]
 8005454:	1d1a      	adds	r2, r3, #4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	9203      	str	r2, [sp, #12]
 800545a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800545e:	3402      	adds	r4, #2
 8005460:	9305      	str	r3, [sp, #20]
 8005462:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005538 <_vfiprintf_r+0x22c>
 8005466:	7821      	ldrb	r1, [r4, #0]
 8005468:	2203      	movs	r2, #3
 800546a:	4650      	mov	r0, sl
 800546c:	f7fa feb0 	bl	80001d0 <memchr>
 8005470:	b138      	cbz	r0, 8005482 <_vfiprintf_r+0x176>
 8005472:	9b04      	ldr	r3, [sp, #16]
 8005474:	eba0 000a 	sub.w	r0, r0, sl
 8005478:	2240      	movs	r2, #64	@ 0x40
 800547a:	4082      	lsls	r2, r0
 800547c:	4313      	orrs	r3, r2
 800547e:	3401      	adds	r4, #1
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005486:	4829      	ldr	r0, [pc, #164]	@ (800552c <_vfiprintf_r+0x220>)
 8005488:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800548c:	2206      	movs	r2, #6
 800548e:	f7fa fe9f 	bl	80001d0 <memchr>
 8005492:	2800      	cmp	r0, #0
 8005494:	d03f      	beq.n	8005516 <_vfiprintf_r+0x20a>
 8005496:	4b26      	ldr	r3, [pc, #152]	@ (8005530 <_vfiprintf_r+0x224>)
 8005498:	bb1b      	cbnz	r3, 80054e2 <_vfiprintf_r+0x1d6>
 800549a:	9b03      	ldr	r3, [sp, #12]
 800549c:	3307      	adds	r3, #7
 800549e:	f023 0307 	bic.w	r3, r3, #7
 80054a2:	3308      	adds	r3, #8
 80054a4:	9303      	str	r3, [sp, #12]
 80054a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054a8:	443b      	add	r3, r7
 80054aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80054ac:	e76a      	b.n	8005384 <_vfiprintf_r+0x78>
 80054ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b2:	460c      	mov	r4, r1
 80054b4:	2001      	movs	r0, #1
 80054b6:	e7a8      	b.n	800540a <_vfiprintf_r+0xfe>
 80054b8:	2300      	movs	r3, #0
 80054ba:	3401      	adds	r4, #1
 80054bc:	9305      	str	r3, [sp, #20]
 80054be:	4619      	mov	r1, r3
 80054c0:	f04f 0c0a 	mov.w	ip, #10
 80054c4:	4620      	mov	r0, r4
 80054c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ca:	3a30      	subs	r2, #48	@ 0x30
 80054cc:	2a09      	cmp	r2, #9
 80054ce:	d903      	bls.n	80054d8 <_vfiprintf_r+0x1cc>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0c6      	beq.n	8005462 <_vfiprintf_r+0x156>
 80054d4:	9105      	str	r1, [sp, #20]
 80054d6:	e7c4      	b.n	8005462 <_vfiprintf_r+0x156>
 80054d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054dc:	4604      	mov	r4, r0
 80054de:	2301      	movs	r3, #1
 80054e0:	e7f0      	b.n	80054c4 <_vfiprintf_r+0x1b8>
 80054e2:	ab03      	add	r3, sp, #12
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	462a      	mov	r2, r5
 80054e8:	4b12      	ldr	r3, [pc, #72]	@ (8005534 <_vfiprintf_r+0x228>)
 80054ea:	a904      	add	r1, sp, #16
 80054ec:	4630      	mov	r0, r6
 80054ee:	f3af 8000 	nop.w
 80054f2:	4607      	mov	r7, r0
 80054f4:	1c78      	adds	r0, r7, #1
 80054f6:	d1d6      	bne.n	80054a6 <_vfiprintf_r+0x19a>
 80054f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054fa:	07d9      	lsls	r1, r3, #31
 80054fc:	d405      	bmi.n	800550a <_vfiprintf_r+0x1fe>
 80054fe:	89ab      	ldrh	r3, [r5, #12]
 8005500:	059a      	lsls	r2, r3, #22
 8005502:	d402      	bmi.n	800550a <_vfiprintf_r+0x1fe>
 8005504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005506:	f7ff fddd 	bl	80050c4 <__retarget_lock_release_recursive>
 800550a:	89ab      	ldrh	r3, [r5, #12]
 800550c:	065b      	lsls	r3, r3, #25
 800550e:	f53f af1f 	bmi.w	8005350 <_vfiprintf_r+0x44>
 8005512:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005514:	e71e      	b.n	8005354 <_vfiprintf_r+0x48>
 8005516:	ab03      	add	r3, sp, #12
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	462a      	mov	r2, r5
 800551c:	4b05      	ldr	r3, [pc, #20]	@ (8005534 <_vfiprintf_r+0x228>)
 800551e:	a904      	add	r1, sp, #16
 8005520:	4630      	mov	r0, r6
 8005522:	f000 f879 	bl	8005618 <_printf_i>
 8005526:	e7e4      	b.n	80054f2 <_vfiprintf_r+0x1e6>
 8005528:	08005c70 	.word	0x08005c70
 800552c:	08005c7a 	.word	0x08005c7a
 8005530:	00000000 	.word	0x00000000
 8005534:	080052e7 	.word	0x080052e7
 8005538:	08005c76 	.word	0x08005c76

0800553c <_printf_common>:
 800553c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005540:	4616      	mov	r6, r2
 8005542:	4698      	mov	r8, r3
 8005544:	688a      	ldr	r2, [r1, #8]
 8005546:	690b      	ldr	r3, [r1, #16]
 8005548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800554c:	4293      	cmp	r3, r2
 800554e:	bfb8      	it	lt
 8005550:	4613      	movlt	r3, r2
 8005552:	6033      	str	r3, [r6, #0]
 8005554:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005558:	4607      	mov	r7, r0
 800555a:	460c      	mov	r4, r1
 800555c:	b10a      	cbz	r2, 8005562 <_printf_common+0x26>
 800555e:	3301      	adds	r3, #1
 8005560:	6033      	str	r3, [r6, #0]
 8005562:	6823      	ldr	r3, [r4, #0]
 8005564:	0699      	lsls	r1, r3, #26
 8005566:	bf42      	ittt	mi
 8005568:	6833      	ldrmi	r3, [r6, #0]
 800556a:	3302      	addmi	r3, #2
 800556c:	6033      	strmi	r3, [r6, #0]
 800556e:	6825      	ldr	r5, [r4, #0]
 8005570:	f015 0506 	ands.w	r5, r5, #6
 8005574:	d106      	bne.n	8005584 <_printf_common+0x48>
 8005576:	f104 0a19 	add.w	sl, r4, #25
 800557a:	68e3      	ldr	r3, [r4, #12]
 800557c:	6832      	ldr	r2, [r6, #0]
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	42ab      	cmp	r3, r5
 8005582:	dc26      	bgt.n	80055d2 <_printf_common+0x96>
 8005584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005588:	6822      	ldr	r2, [r4, #0]
 800558a:	3b00      	subs	r3, #0
 800558c:	bf18      	it	ne
 800558e:	2301      	movne	r3, #1
 8005590:	0692      	lsls	r2, r2, #26
 8005592:	d42b      	bmi.n	80055ec <_printf_common+0xb0>
 8005594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005598:	4641      	mov	r1, r8
 800559a:	4638      	mov	r0, r7
 800559c:	47c8      	blx	r9
 800559e:	3001      	adds	r0, #1
 80055a0:	d01e      	beq.n	80055e0 <_printf_common+0xa4>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	6922      	ldr	r2, [r4, #16]
 80055a6:	f003 0306 	and.w	r3, r3, #6
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	bf02      	ittt	eq
 80055ae:	68e5      	ldreq	r5, [r4, #12]
 80055b0:	6833      	ldreq	r3, [r6, #0]
 80055b2:	1aed      	subeq	r5, r5, r3
 80055b4:	68a3      	ldr	r3, [r4, #8]
 80055b6:	bf0c      	ite	eq
 80055b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055bc:	2500      	movne	r5, #0
 80055be:	4293      	cmp	r3, r2
 80055c0:	bfc4      	itt	gt
 80055c2:	1a9b      	subgt	r3, r3, r2
 80055c4:	18ed      	addgt	r5, r5, r3
 80055c6:	2600      	movs	r6, #0
 80055c8:	341a      	adds	r4, #26
 80055ca:	42b5      	cmp	r5, r6
 80055cc:	d11a      	bne.n	8005604 <_printf_common+0xc8>
 80055ce:	2000      	movs	r0, #0
 80055d0:	e008      	b.n	80055e4 <_printf_common+0xa8>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4652      	mov	r2, sl
 80055d6:	4641      	mov	r1, r8
 80055d8:	4638      	mov	r0, r7
 80055da:	47c8      	blx	r9
 80055dc:	3001      	adds	r0, #1
 80055de:	d103      	bne.n	80055e8 <_printf_common+0xac>
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295
 80055e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e8:	3501      	adds	r5, #1
 80055ea:	e7c6      	b.n	800557a <_printf_common+0x3e>
 80055ec:	18e1      	adds	r1, r4, r3
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	2030      	movs	r0, #48	@ 0x30
 80055f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055f6:	4422      	add	r2, r4
 80055f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005600:	3302      	adds	r3, #2
 8005602:	e7c7      	b.n	8005594 <_printf_common+0x58>
 8005604:	2301      	movs	r3, #1
 8005606:	4622      	mov	r2, r4
 8005608:	4641      	mov	r1, r8
 800560a:	4638      	mov	r0, r7
 800560c:	47c8      	blx	r9
 800560e:	3001      	adds	r0, #1
 8005610:	d0e6      	beq.n	80055e0 <_printf_common+0xa4>
 8005612:	3601      	adds	r6, #1
 8005614:	e7d9      	b.n	80055ca <_printf_common+0x8e>
	...

08005618 <_printf_i>:
 8005618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800561c:	7e0f      	ldrb	r7, [r1, #24]
 800561e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005620:	2f78      	cmp	r7, #120	@ 0x78
 8005622:	4691      	mov	r9, r2
 8005624:	4680      	mov	r8, r0
 8005626:	460c      	mov	r4, r1
 8005628:	469a      	mov	sl, r3
 800562a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800562e:	d807      	bhi.n	8005640 <_printf_i+0x28>
 8005630:	2f62      	cmp	r7, #98	@ 0x62
 8005632:	d80a      	bhi.n	800564a <_printf_i+0x32>
 8005634:	2f00      	cmp	r7, #0
 8005636:	f000 80d1 	beq.w	80057dc <_printf_i+0x1c4>
 800563a:	2f58      	cmp	r7, #88	@ 0x58
 800563c:	f000 80b8 	beq.w	80057b0 <_printf_i+0x198>
 8005640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005648:	e03a      	b.n	80056c0 <_printf_i+0xa8>
 800564a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800564e:	2b15      	cmp	r3, #21
 8005650:	d8f6      	bhi.n	8005640 <_printf_i+0x28>
 8005652:	a101      	add	r1, pc, #4	@ (adr r1, 8005658 <_printf_i+0x40>)
 8005654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005658:	080056b1 	.word	0x080056b1
 800565c:	080056c5 	.word	0x080056c5
 8005660:	08005641 	.word	0x08005641
 8005664:	08005641 	.word	0x08005641
 8005668:	08005641 	.word	0x08005641
 800566c:	08005641 	.word	0x08005641
 8005670:	080056c5 	.word	0x080056c5
 8005674:	08005641 	.word	0x08005641
 8005678:	08005641 	.word	0x08005641
 800567c:	08005641 	.word	0x08005641
 8005680:	08005641 	.word	0x08005641
 8005684:	080057c3 	.word	0x080057c3
 8005688:	080056ef 	.word	0x080056ef
 800568c:	0800577d 	.word	0x0800577d
 8005690:	08005641 	.word	0x08005641
 8005694:	08005641 	.word	0x08005641
 8005698:	080057e5 	.word	0x080057e5
 800569c:	08005641 	.word	0x08005641
 80056a0:	080056ef 	.word	0x080056ef
 80056a4:	08005641 	.word	0x08005641
 80056a8:	08005641 	.word	0x08005641
 80056ac:	08005785 	.word	0x08005785
 80056b0:	6833      	ldr	r3, [r6, #0]
 80056b2:	1d1a      	adds	r2, r3, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6032      	str	r2, [r6, #0]
 80056b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056c0:	2301      	movs	r3, #1
 80056c2:	e09c      	b.n	80057fe <_printf_i+0x1e6>
 80056c4:	6833      	ldr	r3, [r6, #0]
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	1d19      	adds	r1, r3, #4
 80056ca:	6031      	str	r1, [r6, #0]
 80056cc:	0606      	lsls	r6, r0, #24
 80056ce:	d501      	bpl.n	80056d4 <_printf_i+0xbc>
 80056d0:	681d      	ldr	r5, [r3, #0]
 80056d2:	e003      	b.n	80056dc <_printf_i+0xc4>
 80056d4:	0645      	lsls	r5, r0, #25
 80056d6:	d5fb      	bpl.n	80056d0 <_printf_i+0xb8>
 80056d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056dc:	2d00      	cmp	r5, #0
 80056de:	da03      	bge.n	80056e8 <_printf_i+0xd0>
 80056e0:	232d      	movs	r3, #45	@ 0x2d
 80056e2:	426d      	negs	r5, r5
 80056e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056e8:	4858      	ldr	r0, [pc, #352]	@ (800584c <_printf_i+0x234>)
 80056ea:	230a      	movs	r3, #10
 80056ec:	e011      	b.n	8005712 <_printf_i+0xfa>
 80056ee:	6821      	ldr	r1, [r4, #0]
 80056f0:	6833      	ldr	r3, [r6, #0]
 80056f2:	0608      	lsls	r0, r1, #24
 80056f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80056f8:	d402      	bmi.n	8005700 <_printf_i+0xe8>
 80056fa:	0649      	lsls	r1, r1, #25
 80056fc:	bf48      	it	mi
 80056fe:	b2ad      	uxthmi	r5, r5
 8005700:	2f6f      	cmp	r7, #111	@ 0x6f
 8005702:	4852      	ldr	r0, [pc, #328]	@ (800584c <_printf_i+0x234>)
 8005704:	6033      	str	r3, [r6, #0]
 8005706:	bf14      	ite	ne
 8005708:	230a      	movne	r3, #10
 800570a:	2308      	moveq	r3, #8
 800570c:	2100      	movs	r1, #0
 800570e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005712:	6866      	ldr	r6, [r4, #4]
 8005714:	60a6      	str	r6, [r4, #8]
 8005716:	2e00      	cmp	r6, #0
 8005718:	db05      	blt.n	8005726 <_printf_i+0x10e>
 800571a:	6821      	ldr	r1, [r4, #0]
 800571c:	432e      	orrs	r6, r5
 800571e:	f021 0104 	bic.w	r1, r1, #4
 8005722:	6021      	str	r1, [r4, #0]
 8005724:	d04b      	beq.n	80057be <_printf_i+0x1a6>
 8005726:	4616      	mov	r6, r2
 8005728:	fbb5 f1f3 	udiv	r1, r5, r3
 800572c:	fb03 5711 	mls	r7, r3, r1, r5
 8005730:	5dc7      	ldrb	r7, [r0, r7]
 8005732:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005736:	462f      	mov	r7, r5
 8005738:	42bb      	cmp	r3, r7
 800573a:	460d      	mov	r5, r1
 800573c:	d9f4      	bls.n	8005728 <_printf_i+0x110>
 800573e:	2b08      	cmp	r3, #8
 8005740:	d10b      	bne.n	800575a <_printf_i+0x142>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	07df      	lsls	r7, r3, #31
 8005746:	d508      	bpl.n	800575a <_printf_i+0x142>
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	6861      	ldr	r1, [r4, #4]
 800574c:	4299      	cmp	r1, r3
 800574e:	bfde      	ittt	le
 8005750:	2330      	movle	r3, #48	@ 0x30
 8005752:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005756:	f106 36ff 	addle.w	r6, r6, #4294967295
 800575a:	1b92      	subs	r2, r2, r6
 800575c:	6122      	str	r2, [r4, #16]
 800575e:	f8cd a000 	str.w	sl, [sp]
 8005762:	464b      	mov	r3, r9
 8005764:	aa03      	add	r2, sp, #12
 8005766:	4621      	mov	r1, r4
 8005768:	4640      	mov	r0, r8
 800576a:	f7ff fee7 	bl	800553c <_printf_common>
 800576e:	3001      	adds	r0, #1
 8005770:	d14a      	bne.n	8005808 <_printf_i+0x1f0>
 8005772:	f04f 30ff 	mov.w	r0, #4294967295
 8005776:	b004      	add	sp, #16
 8005778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	f043 0320 	orr.w	r3, r3, #32
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	4832      	ldr	r0, [pc, #200]	@ (8005850 <_printf_i+0x238>)
 8005786:	2778      	movs	r7, #120	@ 0x78
 8005788:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	6831      	ldr	r1, [r6, #0]
 8005790:	061f      	lsls	r7, r3, #24
 8005792:	f851 5b04 	ldr.w	r5, [r1], #4
 8005796:	d402      	bmi.n	800579e <_printf_i+0x186>
 8005798:	065f      	lsls	r7, r3, #25
 800579a:	bf48      	it	mi
 800579c:	b2ad      	uxthmi	r5, r5
 800579e:	6031      	str	r1, [r6, #0]
 80057a0:	07d9      	lsls	r1, r3, #31
 80057a2:	bf44      	itt	mi
 80057a4:	f043 0320 	orrmi.w	r3, r3, #32
 80057a8:	6023      	strmi	r3, [r4, #0]
 80057aa:	b11d      	cbz	r5, 80057b4 <_printf_i+0x19c>
 80057ac:	2310      	movs	r3, #16
 80057ae:	e7ad      	b.n	800570c <_printf_i+0xf4>
 80057b0:	4826      	ldr	r0, [pc, #152]	@ (800584c <_printf_i+0x234>)
 80057b2:	e7e9      	b.n	8005788 <_printf_i+0x170>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	f023 0320 	bic.w	r3, r3, #32
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	e7f6      	b.n	80057ac <_printf_i+0x194>
 80057be:	4616      	mov	r6, r2
 80057c0:	e7bd      	b.n	800573e <_printf_i+0x126>
 80057c2:	6833      	ldr	r3, [r6, #0]
 80057c4:	6825      	ldr	r5, [r4, #0]
 80057c6:	6961      	ldr	r1, [r4, #20]
 80057c8:	1d18      	adds	r0, r3, #4
 80057ca:	6030      	str	r0, [r6, #0]
 80057cc:	062e      	lsls	r6, r5, #24
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	d501      	bpl.n	80057d6 <_printf_i+0x1be>
 80057d2:	6019      	str	r1, [r3, #0]
 80057d4:	e002      	b.n	80057dc <_printf_i+0x1c4>
 80057d6:	0668      	lsls	r0, r5, #25
 80057d8:	d5fb      	bpl.n	80057d2 <_printf_i+0x1ba>
 80057da:	8019      	strh	r1, [r3, #0]
 80057dc:	2300      	movs	r3, #0
 80057de:	6123      	str	r3, [r4, #16]
 80057e0:	4616      	mov	r6, r2
 80057e2:	e7bc      	b.n	800575e <_printf_i+0x146>
 80057e4:	6833      	ldr	r3, [r6, #0]
 80057e6:	1d1a      	adds	r2, r3, #4
 80057e8:	6032      	str	r2, [r6, #0]
 80057ea:	681e      	ldr	r6, [r3, #0]
 80057ec:	6862      	ldr	r2, [r4, #4]
 80057ee:	2100      	movs	r1, #0
 80057f0:	4630      	mov	r0, r6
 80057f2:	f7fa fced 	bl	80001d0 <memchr>
 80057f6:	b108      	cbz	r0, 80057fc <_printf_i+0x1e4>
 80057f8:	1b80      	subs	r0, r0, r6
 80057fa:	6060      	str	r0, [r4, #4]
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	2300      	movs	r3, #0
 8005802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005806:	e7aa      	b.n	800575e <_printf_i+0x146>
 8005808:	6923      	ldr	r3, [r4, #16]
 800580a:	4632      	mov	r2, r6
 800580c:	4649      	mov	r1, r9
 800580e:	4640      	mov	r0, r8
 8005810:	47d0      	blx	sl
 8005812:	3001      	adds	r0, #1
 8005814:	d0ad      	beq.n	8005772 <_printf_i+0x15a>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	079b      	lsls	r3, r3, #30
 800581a:	d413      	bmi.n	8005844 <_printf_i+0x22c>
 800581c:	68e0      	ldr	r0, [r4, #12]
 800581e:	9b03      	ldr	r3, [sp, #12]
 8005820:	4298      	cmp	r0, r3
 8005822:	bfb8      	it	lt
 8005824:	4618      	movlt	r0, r3
 8005826:	e7a6      	b.n	8005776 <_printf_i+0x15e>
 8005828:	2301      	movs	r3, #1
 800582a:	4632      	mov	r2, r6
 800582c:	4649      	mov	r1, r9
 800582e:	4640      	mov	r0, r8
 8005830:	47d0      	blx	sl
 8005832:	3001      	adds	r0, #1
 8005834:	d09d      	beq.n	8005772 <_printf_i+0x15a>
 8005836:	3501      	adds	r5, #1
 8005838:	68e3      	ldr	r3, [r4, #12]
 800583a:	9903      	ldr	r1, [sp, #12]
 800583c:	1a5b      	subs	r3, r3, r1
 800583e:	42ab      	cmp	r3, r5
 8005840:	dcf2      	bgt.n	8005828 <_printf_i+0x210>
 8005842:	e7eb      	b.n	800581c <_printf_i+0x204>
 8005844:	2500      	movs	r5, #0
 8005846:	f104 0619 	add.w	r6, r4, #25
 800584a:	e7f5      	b.n	8005838 <_printf_i+0x220>
 800584c:	08005c81 	.word	0x08005c81
 8005850:	08005c92 	.word	0x08005c92

08005854 <__sflush_r>:
 8005854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585c:	0716      	lsls	r6, r2, #28
 800585e:	4605      	mov	r5, r0
 8005860:	460c      	mov	r4, r1
 8005862:	d454      	bmi.n	800590e <__sflush_r+0xba>
 8005864:	684b      	ldr	r3, [r1, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	dc02      	bgt.n	8005870 <__sflush_r+0x1c>
 800586a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	dd48      	ble.n	8005902 <__sflush_r+0xae>
 8005870:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005872:	2e00      	cmp	r6, #0
 8005874:	d045      	beq.n	8005902 <__sflush_r+0xae>
 8005876:	2300      	movs	r3, #0
 8005878:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800587c:	682f      	ldr	r7, [r5, #0]
 800587e:	6a21      	ldr	r1, [r4, #32]
 8005880:	602b      	str	r3, [r5, #0]
 8005882:	d030      	beq.n	80058e6 <__sflush_r+0x92>
 8005884:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	0759      	lsls	r1, r3, #29
 800588a:	d505      	bpl.n	8005898 <__sflush_r+0x44>
 800588c:	6863      	ldr	r3, [r4, #4]
 800588e:	1ad2      	subs	r2, r2, r3
 8005890:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005892:	b10b      	cbz	r3, 8005898 <__sflush_r+0x44>
 8005894:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	2300      	movs	r3, #0
 800589a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800589c:	6a21      	ldr	r1, [r4, #32]
 800589e:	4628      	mov	r0, r5
 80058a0:	47b0      	blx	r6
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	d106      	bne.n	80058b6 <__sflush_r+0x62>
 80058a8:	6829      	ldr	r1, [r5, #0]
 80058aa:	291d      	cmp	r1, #29
 80058ac:	d82b      	bhi.n	8005906 <__sflush_r+0xb2>
 80058ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005958 <__sflush_r+0x104>)
 80058b0:	40ca      	lsrs	r2, r1
 80058b2:	07d6      	lsls	r6, r2, #31
 80058b4:	d527      	bpl.n	8005906 <__sflush_r+0xb2>
 80058b6:	2200      	movs	r2, #0
 80058b8:	6062      	str	r2, [r4, #4]
 80058ba:	04d9      	lsls	r1, r3, #19
 80058bc:	6922      	ldr	r2, [r4, #16]
 80058be:	6022      	str	r2, [r4, #0]
 80058c0:	d504      	bpl.n	80058cc <__sflush_r+0x78>
 80058c2:	1c42      	adds	r2, r0, #1
 80058c4:	d101      	bne.n	80058ca <__sflush_r+0x76>
 80058c6:	682b      	ldr	r3, [r5, #0]
 80058c8:	b903      	cbnz	r3, 80058cc <__sflush_r+0x78>
 80058ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80058cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058ce:	602f      	str	r7, [r5, #0]
 80058d0:	b1b9      	cbz	r1, 8005902 <__sflush_r+0xae>
 80058d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058d6:	4299      	cmp	r1, r3
 80058d8:	d002      	beq.n	80058e0 <__sflush_r+0x8c>
 80058da:	4628      	mov	r0, r5
 80058dc:	f7ff fbf4 	bl	80050c8 <_free_r>
 80058e0:	2300      	movs	r3, #0
 80058e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80058e4:	e00d      	b.n	8005902 <__sflush_r+0xae>
 80058e6:	2301      	movs	r3, #1
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b0      	blx	r6
 80058ec:	4602      	mov	r2, r0
 80058ee:	1c50      	adds	r0, r2, #1
 80058f0:	d1c9      	bne.n	8005886 <__sflush_r+0x32>
 80058f2:	682b      	ldr	r3, [r5, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0c6      	beq.n	8005886 <__sflush_r+0x32>
 80058f8:	2b1d      	cmp	r3, #29
 80058fa:	d001      	beq.n	8005900 <__sflush_r+0xac>
 80058fc:	2b16      	cmp	r3, #22
 80058fe:	d11e      	bne.n	800593e <__sflush_r+0xea>
 8005900:	602f      	str	r7, [r5, #0]
 8005902:	2000      	movs	r0, #0
 8005904:	e022      	b.n	800594c <__sflush_r+0xf8>
 8005906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800590a:	b21b      	sxth	r3, r3
 800590c:	e01b      	b.n	8005946 <__sflush_r+0xf2>
 800590e:	690f      	ldr	r7, [r1, #16]
 8005910:	2f00      	cmp	r7, #0
 8005912:	d0f6      	beq.n	8005902 <__sflush_r+0xae>
 8005914:	0793      	lsls	r3, r2, #30
 8005916:	680e      	ldr	r6, [r1, #0]
 8005918:	bf08      	it	eq
 800591a:	694b      	ldreq	r3, [r1, #20]
 800591c:	600f      	str	r7, [r1, #0]
 800591e:	bf18      	it	ne
 8005920:	2300      	movne	r3, #0
 8005922:	eba6 0807 	sub.w	r8, r6, r7
 8005926:	608b      	str	r3, [r1, #8]
 8005928:	f1b8 0f00 	cmp.w	r8, #0
 800592c:	dde9      	ble.n	8005902 <__sflush_r+0xae>
 800592e:	6a21      	ldr	r1, [r4, #32]
 8005930:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005932:	4643      	mov	r3, r8
 8005934:	463a      	mov	r2, r7
 8005936:	4628      	mov	r0, r5
 8005938:	47b0      	blx	r6
 800593a:	2800      	cmp	r0, #0
 800593c:	dc08      	bgt.n	8005950 <__sflush_r+0xfc>
 800593e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005946:	81a3      	strh	r3, [r4, #12]
 8005948:	f04f 30ff 	mov.w	r0, #4294967295
 800594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005950:	4407      	add	r7, r0
 8005952:	eba8 0800 	sub.w	r8, r8, r0
 8005956:	e7e7      	b.n	8005928 <__sflush_r+0xd4>
 8005958:	20400001 	.word	0x20400001

0800595c <_fflush_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	690b      	ldr	r3, [r1, #16]
 8005960:	4605      	mov	r5, r0
 8005962:	460c      	mov	r4, r1
 8005964:	b913      	cbnz	r3, 800596c <_fflush_r+0x10>
 8005966:	2500      	movs	r5, #0
 8005968:	4628      	mov	r0, r5
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	b118      	cbz	r0, 8005976 <_fflush_r+0x1a>
 800596e:	6a03      	ldr	r3, [r0, #32]
 8005970:	b90b      	cbnz	r3, 8005976 <_fflush_r+0x1a>
 8005972:	f7ff faa1 	bl	8004eb8 <__sinit>
 8005976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f3      	beq.n	8005966 <_fflush_r+0xa>
 800597e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005980:	07d0      	lsls	r0, r2, #31
 8005982:	d404      	bmi.n	800598e <_fflush_r+0x32>
 8005984:	0599      	lsls	r1, r3, #22
 8005986:	d402      	bmi.n	800598e <_fflush_r+0x32>
 8005988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800598a:	f7ff fb9a 	bl	80050c2 <__retarget_lock_acquire_recursive>
 800598e:	4628      	mov	r0, r5
 8005990:	4621      	mov	r1, r4
 8005992:	f7ff ff5f 	bl	8005854 <__sflush_r>
 8005996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005998:	07da      	lsls	r2, r3, #31
 800599a:	4605      	mov	r5, r0
 800599c:	d4e4      	bmi.n	8005968 <_fflush_r+0xc>
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	059b      	lsls	r3, r3, #22
 80059a2:	d4e1      	bmi.n	8005968 <_fflush_r+0xc>
 80059a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059a6:	f7ff fb8d 	bl	80050c4 <__retarget_lock_release_recursive>
 80059aa:	e7dd      	b.n	8005968 <_fflush_r+0xc>

080059ac <__swbuf_r>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	460e      	mov	r6, r1
 80059b0:	4614      	mov	r4, r2
 80059b2:	4605      	mov	r5, r0
 80059b4:	b118      	cbz	r0, 80059be <__swbuf_r+0x12>
 80059b6:	6a03      	ldr	r3, [r0, #32]
 80059b8:	b90b      	cbnz	r3, 80059be <__swbuf_r+0x12>
 80059ba:	f7ff fa7d 	bl	8004eb8 <__sinit>
 80059be:	69a3      	ldr	r3, [r4, #24]
 80059c0:	60a3      	str	r3, [r4, #8]
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	071a      	lsls	r2, r3, #28
 80059c6:	d501      	bpl.n	80059cc <__swbuf_r+0x20>
 80059c8:	6923      	ldr	r3, [r4, #16]
 80059ca:	b943      	cbnz	r3, 80059de <__swbuf_r+0x32>
 80059cc:	4621      	mov	r1, r4
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 f82a 	bl	8005a28 <__swsetup_r>
 80059d4:	b118      	cbz	r0, 80059de <__swbuf_r+0x32>
 80059d6:	f04f 37ff 	mov.w	r7, #4294967295
 80059da:	4638      	mov	r0, r7
 80059dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	6922      	ldr	r2, [r4, #16]
 80059e2:	1a98      	subs	r0, r3, r2
 80059e4:	6963      	ldr	r3, [r4, #20]
 80059e6:	b2f6      	uxtb	r6, r6
 80059e8:	4283      	cmp	r3, r0
 80059ea:	4637      	mov	r7, r6
 80059ec:	dc05      	bgt.n	80059fa <__swbuf_r+0x4e>
 80059ee:	4621      	mov	r1, r4
 80059f0:	4628      	mov	r0, r5
 80059f2:	f7ff ffb3 	bl	800595c <_fflush_r>
 80059f6:	2800      	cmp	r0, #0
 80059f8:	d1ed      	bne.n	80059d6 <__swbuf_r+0x2a>
 80059fa:	68a3      	ldr	r3, [r4, #8]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	60a3      	str	r3, [r4, #8]
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	6022      	str	r2, [r4, #0]
 8005a06:	701e      	strb	r6, [r3, #0]
 8005a08:	6962      	ldr	r2, [r4, #20]
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d004      	beq.n	8005a1a <__swbuf_r+0x6e>
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	07db      	lsls	r3, r3, #31
 8005a14:	d5e1      	bpl.n	80059da <__swbuf_r+0x2e>
 8005a16:	2e0a      	cmp	r6, #10
 8005a18:	d1df      	bne.n	80059da <__swbuf_r+0x2e>
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f7ff ff9d 	bl	800595c <_fflush_r>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d0d9      	beq.n	80059da <__swbuf_r+0x2e>
 8005a26:	e7d6      	b.n	80059d6 <__swbuf_r+0x2a>

08005a28 <__swsetup_r>:
 8005a28:	b538      	push	{r3, r4, r5, lr}
 8005a2a:	4b29      	ldr	r3, [pc, #164]	@ (8005ad0 <__swsetup_r+0xa8>)
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	460c      	mov	r4, r1
 8005a32:	b118      	cbz	r0, 8005a3c <__swsetup_r+0x14>
 8005a34:	6a03      	ldr	r3, [r0, #32]
 8005a36:	b90b      	cbnz	r3, 8005a3c <__swsetup_r+0x14>
 8005a38:	f7ff fa3e 	bl	8004eb8 <__sinit>
 8005a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a40:	0719      	lsls	r1, r3, #28
 8005a42:	d422      	bmi.n	8005a8a <__swsetup_r+0x62>
 8005a44:	06da      	lsls	r2, r3, #27
 8005a46:	d407      	bmi.n	8005a58 <__swsetup_r+0x30>
 8005a48:	2209      	movs	r2, #9
 8005a4a:	602a      	str	r2, [r5, #0]
 8005a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a50:	81a3      	strh	r3, [r4, #12]
 8005a52:	f04f 30ff 	mov.w	r0, #4294967295
 8005a56:	e033      	b.n	8005ac0 <__swsetup_r+0x98>
 8005a58:	0758      	lsls	r0, r3, #29
 8005a5a:	d512      	bpl.n	8005a82 <__swsetup_r+0x5a>
 8005a5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a5e:	b141      	cbz	r1, 8005a72 <__swsetup_r+0x4a>
 8005a60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a64:	4299      	cmp	r1, r3
 8005a66:	d002      	beq.n	8005a6e <__swsetup_r+0x46>
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f7ff fb2d 	bl	80050c8 <_free_r>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a72:	89a3      	ldrh	r3, [r4, #12]
 8005a74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a78:	81a3      	strh	r3, [r4, #12]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	6063      	str	r3, [r4, #4]
 8005a7e:	6923      	ldr	r3, [r4, #16]
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	89a3      	ldrh	r3, [r4, #12]
 8005a84:	f043 0308 	orr.w	r3, r3, #8
 8005a88:	81a3      	strh	r3, [r4, #12]
 8005a8a:	6923      	ldr	r3, [r4, #16]
 8005a8c:	b94b      	cbnz	r3, 8005aa2 <__swsetup_r+0x7a>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a98:	d003      	beq.n	8005aa2 <__swsetup_r+0x7a>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f000 f84f 	bl	8005b40 <__smakebuf_r>
 8005aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa6:	f013 0201 	ands.w	r2, r3, #1
 8005aaa:	d00a      	beq.n	8005ac2 <__swsetup_r+0x9a>
 8005aac:	2200      	movs	r2, #0
 8005aae:	60a2      	str	r2, [r4, #8]
 8005ab0:	6962      	ldr	r2, [r4, #20]
 8005ab2:	4252      	negs	r2, r2
 8005ab4:	61a2      	str	r2, [r4, #24]
 8005ab6:	6922      	ldr	r2, [r4, #16]
 8005ab8:	b942      	cbnz	r2, 8005acc <__swsetup_r+0xa4>
 8005aba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005abe:	d1c5      	bne.n	8005a4c <__swsetup_r+0x24>
 8005ac0:	bd38      	pop	{r3, r4, r5, pc}
 8005ac2:	0799      	lsls	r1, r3, #30
 8005ac4:	bf58      	it	pl
 8005ac6:	6962      	ldrpl	r2, [r4, #20]
 8005ac8:	60a2      	str	r2, [r4, #8]
 8005aca:	e7f4      	b.n	8005ab6 <__swsetup_r+0x8e>
 8005acc:	2000      	movs	r0, #0
 8005ace:	e7f7      	b.n	8005ac0 <__swsetup_r+0x98>
 8005ad0:	20000018 	.word	0x20000018

08005ad4 <_sbrk_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4d06      	ldr	r5, [pc, #24]	@ (8005af0 <_sbrk_r+0x1c>)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	4604      	mov	r4, r0
 8005adc:	4608      	mov	r0, r1
 8005ade:	602b      	str	r3, [r5, #0]
 8005ae0:	f7fb f8a0 	bl	8000c24 <_sbrk>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d102      	bne.n	8005aee <_sbrk_r+0x1a>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	b103      	cbz	r3, 8005aee <_sbrk_r+0x1a>
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	200002b8 	.word	0x200002b8

08005af4 <__swhatbuf_r>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	460c      	mov	r4, r1
 8005af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afc:	2900      	cmp	r1, #0
 8005afe:	b096      	sub	sp, #88	@ 0x58
 8005b00:	4615      	mov	r5, r2
 8005b02:	461e      	mov	r6, r3
 8005b04:	da0d      	bge.n	8005b22 <__swhatbuf_r+0x2e>
 8005b06:	89a3      	ldrh	r3, [r4, #12]
 8005b08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b0c:	f04f 0100 	mov.w	r1, #0
 8005b10:	bf14      	ite	ne
 8005b12:	2340      	movne	r3, #64	@ 0x40
 8005b14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b18:	2000      	movs	r0, #0
 8005b1a:	6031      	str	r1, [r6, #0]
 8005b1c:	602b      	str	r3, [r5, #0]
 8005b1e:	b016      	add	sp, #88	@ 0x58
 8005b20:	bd70      	pop	{r4, r5, r6, pc}
 8005b22:	466a      	mov	r2, sp
 8005b24:	f000 f848 	bl	8005bb8 <_fstat_r>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	dbec      	blt.n	8005b06 <__swhatbuf_r+0x12>
 8005b2c:	9901      	ldr	r1, [sp, #4]
 8005b2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b36:	4259      	negs	r1, r3
 8005b38:	4159      	adcs	r1, r3
 8005b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b3e:	e7eb      	b.n	8005b18 <__swhatbuf_r+0x24>

08005b40 <__smakebuf_r>:
 8005b40:	898b      	ldrh	r3, [r1, #12]
 8005b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b44:	079d      	lsls	r5, r3, #30
 8005b46:	4606      	mov	r6, r0
 8005b48:	460c      	mov	r4, r1
 8005b4a:	d507      	bpl.n	8005b5c <__smakebuf_r+0x1c>
 8005b4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	6123      	str	r3, [r4, #16]
 8005b54:	2301      	movs	r3, #1
 8005b56:	6163      	str	r3, [r4, #20]
 8005b58:	b003      	add	sp, #12
 8005b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b5c:	ab01      	add	r3, sp, #4
 8005b5e:	466a      	mov	r2, sp
 8005b60:	f7ff ffc8 	bl	8005af4 <__swhatbuf_r>
 8005b64:	9f00      	ldr	r7, [sp, #0]
 8005b66:	4605      	mov	r5, r0
 8005b68:	4639      	mov	r1, r7
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff fb18 	bl	80051a0 <_malloc_r>
 8005b70:	b948      	cbnz	r0, 8005b86 <__smakebuf_r+0x46>
 8005b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b76:	059a      	lsls	r2, r3, #22
 8005b78:	d4ee      	bmi.n	8005b58 <__smakebuf_r+0x18>
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	f043 0302 	orr.w	r3, r3, #2
 8005b82:	81a3      	strh	r3, [r4, #12]
 8005b84:	e7e2      	b.n	8005b4c <__smakebuf_r+0xc>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	6020      	str	r0, [r4, #0]
 8005b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	9b01      	ldr	r3, [sp, #4]
 8005b92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b96:	b15b      	cbz	r3, 8005bb0 <__smakebuf_r+0x70>
 8005b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f000 f81d 	bl	8005bdc <_isatty_r>
 8005ba2:	b128      	cbz	r0, 8005bb0 <__smakebuf_r+0x70>
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	f023 0303 	bic.w	r3, r3, #3
 8005baa:	f043 0301 	orr.w	r3, r3, #1
 8005bae:	81a3      	strh	r3, [r4, #12]
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	431d      	orrs	r5, r3
 8005bb4:	81a5      	strh	r5, [r4, #12]
 8005bb6:	e7cf      	b.n	8005b58 <__smakebuf_r+0x18>

08005bb8 <_fstat_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4d07      	ldr	r5, [pc, #28]	@ (8005bd8 <_fstat_r+0x20>)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4608      	mov	r0, r1
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	602b      	str	r3, [r5, #0]
 8005bc6:	f7fb f804 	bl	8000bd2 <_fstat>
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	d102      	bne.n	8005bd4 <_fstat_r+0x1c>
 8005bce:	682b      	ldr	r3, [r5, #0]
 8005bd0:	b103      	cbz	r3, 8005bd4 <_fstat_r+0x1c>
 8005bd2:	6023      	str	r3, [r4, #0]
 8005bd4:	bd38      	pop	{r3, r4, r5, pc}
 8005bd6:	bf00      	nop
 8005bd8:	200002b8 	.word	0x200002b8

08005bdc <_isatty_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d06      	ldr	r5, [pc, #24]	@ (8005bf8 <_isatty_r+0x1c>)
 8005be0:	2300      	movs	r3, #0
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	f7fb f803 	bl	8000bf2 <_isatty>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_isatty_r+0x1a>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_isatty_r+0x1a>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	200002b8 	.word	0x200002b8

08005bfc <_init>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	bf00      	nop
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr

08005c08 <_fini>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	bf00      	nop
 8005c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0e:	bc08      	pop	{r3}
 8005c10:	469e      	mov	lr, r3
 8005c12:	4770      	bx	lr
