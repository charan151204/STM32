
URT_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004388  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004510  08004510  00005510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004558  08004558  00006020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004560  08004560  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00005560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004564  08004564  00005564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004568  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000020  08004588  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08004588  00006160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c35a  00000000  00000000  00006050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d32  00000000  00000000  000123aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  000140e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000789  00000000  00000000  00014ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025a73  00000000  00000000  00015241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdd0  00000000  00000000  0003acb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e78c2  00000000  00000000  00046a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e346  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  0012e38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00130ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044f8 	.word	0x080044f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080044f8 	.word	0x080044f8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Callback for DMA transmit complete
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <HAL_UART_TxCpltCallback+0x24>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d104      	bne.n	8000520 <HAL_UART_TxCpltCallback+0x1c>
    {
        // Toggle LED to indicate TX complete
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000516:	2120      	movs	r1, #32
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f001 f882 	bl	8001624 <HAL_GPIO_TogglePin>
    }
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40004400 	.word	0x40004400

0800052c <HAL_UART_RxCpltCallback>:


// Callback for DMA receive complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <HAL_UART_RxCpltCallback+0x34>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d10b      	bne.n	8000556 <HAL_UART_RxCpltCallback+0x2a>
    {
        // Echo received data back
        HAL_UART_Transmit(&huart2, rx_buf, sizeof(rx_buf), HAL_MAX_DELAY);
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	2205      	movs	r2, #5
 8000544:	4907      	ldr	r1, [pc, #28]	@ (8000564 <HAL_UART_RxCpltCallback+0x38>)
 8000546:	4808      	ldr	r0, [pc, #32]	@ (8000568 <HAL_UART_RxCpltCallback+0x3c>)
 8000548:	f002 fbf4 	bl	8002d34 <HAL_UART_Transmit>
        // Restart DMA reception
        HAL_UART_Receive_DMA(&huart2, rx_buf, sizeof(rx_buf));
 800054c:	2205      	movs	r2, #5
 800054e:	4905      	ldr	r1, [pc, #20]	@ (8000564 <HAL_UART_RxCpltCallback+0x38>)
 8000550:	4805      	ldr	r0, [pc, #20]	@ (8000568 <HAL_UART_RxCpltCallback+0x3c>)
 8000552:	f002 fcf5 	bl	8002f40 <HAL_UART_Receive_DMA>
    }
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40004400 	.word	0x40004400
 8000564:	2000003c 	.word	0x2000003c
 8000568:	20000044 	.word	0x20000044

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fa92 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f81e 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8c4 	bl	8000704 <MX_GPIO_Init>
  MX_DMA_Init();
 800057c:	f000 f89c 	bl	80006b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f86a 	bl	8000658 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  // Start DMA transmit with tx_data
  HAL_UART_Transmit_DMA(&huart2, tx_data, strlen((char*)tx_data));
 8000584:	4808      	ldr	r0, [pc, #32]	@ (80005a8 <main+0x3c>)
 8000586:	f7ff fe1f 	bl	80001c8 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29b      	uxth	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	4905      	ldr	r1, [pc, #20]	@ (80005a8 <main+0x3c>)
 8000592:	4806      	ldr	r0, [pc, #24]	@ (80005ac <main+0x40>)
 8000594:	f002 fc58 	bl	8002e48 <HAL_UART_Transmit_DMA>
  // Start DMA receive into rx_buf
  HAL_UART_Receive_DMA(&huart2, rx_buf, sizeof(rx_buf));
 8000598:	2205      	movs	r2, #5
 800059a:	4905      	ldr	r1, [pc, #20]	@ (80005b0 <main+0x44>)
 800059c:	4803      	ldr	r0, [pc, #12]	@ (80005ac <main+0x40>)
 800059e:	f002 fccf 	bl	8002f40 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a2:	bf00      	nop
 80005a4:	e7fd      	b.n	80005a2 <main+0x36>
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000044 	.word	0x20000044
 80005b0:	2000003c 	.word	0x2000003c

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	@ 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	@ 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 ff6b 	bl	800449e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005da:	f001 f84b 	bl	8001674 <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 f8e4 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	2310      	movs	r3, #16
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fa:	2302      	movs	r3, #2
 80005fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000602:	230a      	movs	r3, #10
 8000604:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000606:	2307      	movs	r3, #7
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4618      	mov	r0, r3
 8000618:	f001 f882 	bl	8001720 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000622:	f000 f8c5 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	2104      	movs	r1, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fc4a 	bl	8001ed8 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064a:	f000 f8b1 	bl	80007b0 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3758      	adds	r7, #88	@ 0x58
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	@ (80006b4 <MX_USART2_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800069c:	f002 fafc 	bl	8002c98 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f883 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000044 	.word	0x20000044
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <MX_DMA_Init+0x48>)
 80006c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000700 <MX_DMA_Init+0x48>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_DMA_Init+0x48>)
 80006cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2010      	movs	r0, #16
 80006dc:	f000 fb33 	bl	8000d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006e0:	2010      	movs	r0, #16
 80006e2:	f000 fb4c 	bl	8000d7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2011      	movs	r0, #17
 80006ec:	f000 fb2b 	bl	8000d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006f0:	2011      	movs	r0, #17
 80006f2:	f000 fb44 	bl	8000d7e <HAL_NVIC_EnableIRQ>

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	@ 0x28
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b24      	ldr	r3, [pc, #144]	@ (80007ac <MX_GPIO_Init+0xa8>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a23      	ldr	r2, [pc, #140]	@ (80007ac <MX_GPIO_Init+0xa8>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b21      	ldr	r3, [pc, #132]	@ (80007ac <MX_GPIO_Init+0xa8>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <MX_GPIO_Init+0xa8>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a1d      	ldr	r2, [pc, #116]	@ (80007ac <MX_GPIO_Init+0xa8>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ac <MX_GPIO_Init+0xa8>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <MX_GPIO_Init+0xa8>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a17      	ldr	r2, [pc, #92]	@ (80007ac <MX_GPIO_Init+0xa8>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_GPIO_Init+0xa8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_GPIO_Init+0xa8>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a11      	ldr	r2, [pc, #68]	@ (80007ac <MX_GPIO_Init+0xa8>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_GPIO_Init+0xa8>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2120      	movs	r1, #32
 800077e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000782:	f000 ff37 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000786:	2320      	movs	r3, #32
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f000 fd7e 	bl	80012a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	@ 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007de:	4a08      	ldr	r2, [pc, #32]	@ (8000800 <HAL_MspInit+0x44>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0ac      	sub	sp, #176	@ 0xb0
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2288      	movs	r2, #136	@ 0x88
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fe3a 	bl	800449e <memset>
  if(huart->Instance==USART2)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a4f      	ldr	r2, [pc, #316]	@ (800096c <HAL_UART_MspInit+0x168>)
 8000830:	4293      	cmp	r3, r2
 8000832:	f040 8096 	bne.w	8000962 <HAL_UART_MspInit+0x15e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000836:	2302      	movs	r3, #2
 8000838:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800083a:	2300      	movs	r3, #0
 800083c:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fd6c 	bl	8002320 <HAL_RCCEx_PeriphCLKConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800084e:	f7ff ffaf 	bl	80007b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000852:	4b47      	ldr	r3, [pc, #284]	@ (8000970 <HAL_UART_MspInit+0x16c>)
 8000854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000856:	4a46      	ldr	r2, [pc, #280]	@ (8000970 <HAL_UART_MspInit+0x16c>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085c:	6593      	str	r3, [r2, #88]	@ 0x58
 800085e:	4b44      	ldr	r3, [pc, #272]	@ (8000970 <HAL_UART_MspInit+0x16c>)
 8000860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b41      	ldr	r3, [pc, #260]	@ (8000970 <HAL_UART_MspInit+0x16c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a40      	ldr	r2, [pc, #256]	@ (8000970 <HAL_UART_MspInit+0x16c>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b3e      	ldr	r3, [pc, #248]	@ (8000970 <HAL_UART_MspInit+0x16c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000882:	230c      	movs	r3, #12
 8000884:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089a:	2307      	movs	r3, #7
 800089c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008aa:	f000 fcf9 	bl	80012a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80008ae:	4b31      	ldr	r3, [pc, #196]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008b0:	4a31      	ldr	r2, [pc, #196]	@ (8000978 <HAL_UART_MspInit+0x174>)
 80008b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80008b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008cc:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d2:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008d8:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008de:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008e4:	4823      	ldr	r0, [pc, #140]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008e6:	f000 fa65 	bl	8000db4 <HAL_DMA_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80008f0:	f7ff ff5e 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80008fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000974 <HAL_UART_MspInit+0x170>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000900:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <HAL_UART_MspInit+0x178>)
 8000902:	4a1f      	ldr	r2, [pc, #124]	@ (8000980 <HAL_UART_MspInit+0x17c>)
 8000904:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000906:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <HAL_UART_MspInit+0x178>)
 8000908:	2202      	movs	r2, #2
 800090a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <HAL_UART_MspInit+0x178>)
 800090e:	2210      	movs	r2, #16
 8000910:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <HAL_UART_MspInit+0x178>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_UART_MspInit+0x178>)
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <HAL_UART_MspInit+0x178>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000924:	4b15      	ldr	r3, [pc, #84]	@ (800097c <HAL_UART_MspInit+0x178>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <HAL_UART_MspInit+0x178>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <HAL_UART_MspInit+0x178>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000936:	4811      	ldr	r0, [pc, #68]	@ (800097c <HAL_UART_MspInit+0x178>)
 8000938:	f000 fa3c 	bl	8000db4 <HAL_DMA_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8000942:	f7ff ff35 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a0c      	ldr	r2, [pc, #48]	@ (800097c <HAL_UART_MspInit+0x178>)
 800094a:	671a      	str	r2, [r3, #112]	@ 0x70
 800094c:	4a0b      	ldr	r2, [pc, #44]	@ (800097c <HAL_UART_MspInit+0x178>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2026      	movs	r0, #38	@ 0x26
 8000958:	f000 f9f5 	bl	8000d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800095c:	2026      	movs	r0, #38	@ 0x26
 800095e:	f000 fa0e 	bl	8000d7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000962:	bf00      	nop
 8000964:	37b0      	adds	r7, #176	@ 0xb0
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40004400 	.word	0x40004400
 8000970:	40021000 	.word	0x40021000
 8000974:	200000cc 	.word	0x200000cc
 8000978:	4002006c 	.word	0x4002006c
 800097c:	20000114 	.word	0x20000114
 8000980:	40020080 	.word	0x40020080

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <NMI_Handler+0x4>

0800098c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <MemManage_Handler+0x4>

0800099c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <UsageFault_Handler+0x4>

080009ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009da:	f000 f8b9 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009e8:	4802      	ldr	r0, [pc, #8]	@ (80009f4 <DMA1_Channel6_IRQHandler+0x10>)
 80009ea:	f000 fb7a 	bl	80010e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000cc 	.word	0x200000cc

080009f8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <DMA1_Channel7_IRQHandler+0x10>)
 80009fe:	f000 fb70 	bl	80010e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000114 	.word	0x20000114

08000a0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <USART2_IRQHandler+0x10>)
 8000a12:	f002 fae1 	bl	8002fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000044 	.word	0x20000044

08000a20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	@ (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a48:	f7ff ffea 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	@ (8000a84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <LoopForever+0xe>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	@ (8000a90 <LoopForever+0x16>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f003 fd1d 	bl	80044b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a76:	f7ff fd79 	bl	800056c <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a88:	08004568 	.word	0x08004568
  ldr r2, =_sbss
 8000a8c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a90:	20000160 	.word	0x20000160

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <HAL_Init+0x3c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad4 <HAL_Init+0x3c>)
 8000aa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f000 f93e 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 f80f 	bl	8000ad8 <HAL_InitTick>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d002      	beq.n	8000ac6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	e001      	b.n	8000aca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac6:	f7ff fe79 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aca:	79fb      	ldrb	r3, [r7, #7]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ae4:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <HAL_InitTick+0x6c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d023      	beq.n	8000b34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <HAL_InitTick+0x70>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <HAL_InitTick+0x6c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f949 	bl	8000d9a <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10f      	bne.n	8000b2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d809      	bhi.n	8000b28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f000 f913 	bl	8000d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b20:	4a0a      	ldr	r2, [pc, #40]	@ (8000b4c <HAL_InitTick+0x74>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e007      	b.n	8000b38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e004      	b.n	8000b38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e001      	b.n	8000b38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000001c 	.word	0x2000001c
 8000b48:	20000014 	.word	0x20000014
 8000b4c:	20000018 	.word	0x20000018

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000001c 	.word	0x2000001c
 8000b74:	2000015c 	.word	0x2000015c

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	@ (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	2000015c 	.word	0x2000015c

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	@ (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	@ (8000c2c <__NVIC_EnableIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	@ (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	@ (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	@ 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	@ 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	f7ff ff8e 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff29 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff3e 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff8e 	bl	8000c84 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff31 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffa2 	bl	8000cec <SysTick_Config>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e098      	b.n	8000ef8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8000f04 <HAL_DMA_Init+0x150>)
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d80f      	bhi.n	8000df2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8000f08 <HAL_DMA_Init+0x154>)
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8000f0c <HAL_DMA_Init+0x158>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	009a      	lsls	r2, r3, #2
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a48      	ldr	r2, [pc, #288]	@ (8000f10 <HAL_DMA_Init+0x15c>)
 8000dee:	641a      	str	r2, [r3, #64]	@ 0x40
 8000df0:	e00e      	b.n	8000e10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b46      	ldr	r3, [pc, #280]	@ (8000f14 <HAL_DMA_Init+0x160>)
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a43      	ldr	r2, [pc, #268]	@ (8000f0c <HAL_DMA_Init+0x158>)
 8000dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	009a      	lsls	r2, r3, #2
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a42      	ldr	r2, [pc, #264]	@ (8000f18 <HAL_DMA_Init+0x164>)
 8000e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2202      	movs	r2, #2
 8000e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a1b      	ldr	r3, [r3, #32]
 8000e52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e6a:	d039      	beq.n	8000ee0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e70:	4a27      	ldr	r2, [pc, #156]	@ (8000f10 <HAL_DMA_Init+0x15c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d11a      	bne.n	8000eac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e76:	4b29      	ldr	r3, [pc, #164]	@ (8000f1c <HAL_DMA_Init+0x168>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	f003 031c 	and.w	r3, r3, #28
 8000e82:	210f      	movs	r1, #15
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	4924      	ldr	r1, [pc, #144]	@ (8000f1c <HAL_DMA_Init+0x168>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e90:	4b22      	ldr	r3, [pc, #136]	@ (8000f1c <HAL_DMA_Init+0x168>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6859      	ldr	r1, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9c:	f003 031c 	and.w	r3, r3, #28
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	491d      	ldr	r1, [pc, #116]	@ (8000f1c <HAL_DMA_Init+0x168>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
 8000eaa:	e019      	b.n	8000ee0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eac:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <HAL_DMA_Init+0x16c>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb4:	f003 031c 	and.w	r3, r3, #28
 8000eb8:	210f      	movs	r1, #15
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	4917      	ldr	r1, [pc, #92]	@ (8000f20 <HAL_DMA_Init+0x16c>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <HAL_DMA_Init+0x16c>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6859      	ldr	r1, [r3, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	f003 031c 	and.w	r3, r3, #28
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	4911      	ldr	r1, [pc, #68]	@ (8000f20 <HAL_DMA_Init+0x16c>)
 8000edc:	4313      	orrs	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40020407 	.word	0x40020407
 8000f08:	bffdfff8 	.word	0xbffdfff8
 8000f0c:	cccccccd 	.word	0xcccccccd
 8000f10:	40020000 	.word	0x40020000
 8000f14:	bffdfbf8 	.word	0xbffdfbf8
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	400200a8 	.word	0x400200a8
 8000f20:	400204a8 	.word	0x400204a8

08000f24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d101      	bne.n	8000f44 <HAL_DMA_Start_IT+0x20>
 8000f40:	2302      	movs	r3, #2
 8000f42:	e04b      	b.n	8000fdc <HAL_DMA_Start_IT+0xb8>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d13a      	bne.n	8000fce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2200      	movs	r2, #0
 8000f64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0201 	bic.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f000 f95f 	bl	8001240 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d008      	beq.n	8000f9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 020e 	orr.w	r2, r2, #14
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e00f      	b.n	8000fbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0204 	bic.w	r2, r2, #4
 8000faa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 020a 	orr.w	r2, r2, #10
 8000fba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0201 	orr.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e005      	b.n	8000fda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d008      	beq.n	800100e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2204      	movs	r2, #4
 8001000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e022      	b.n	8001054 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 020e 	bic.w	r2, r2, #14
 800101c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0201 	bic.w	r2, r2, #1
 800102c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f003 021c 	and.w	r2, r3, #28
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	2101      	movs	r1, #1
 800103c:	fa01 f202 	lsl.w	r2, r1, r2
 8001040:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001054:	4618      	mov	r0, r3
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d005      	beq.n	8001084 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2204      	movs	r2, #4
 800107c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e029      	b.n	80010d8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 020e 	bic.w	r2, r2, #14
 8001092:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a8:	f003 021c 	and.w	r2, r3, #28
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	4798      	blx	r3
    }
  }
  return status;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	f003 031c 	and.w	r3, r3, #28
 8001102:	2204      	movs	r2, #4
 8001104:	409a      	lsls	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d026      	beq.n	800115c <HAL_DMA_IRQHandler+0x7a>
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d021      	beq.n	800115c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0320 	and.w	r3, r3, #32
 8001122:	2b00      	cmp	r3, #0
 8001124:	d107      	bne.n	8001136 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0204 	bic.w	r2, r2, #4
 8001134:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f003 021c 	and.w	r2, r3, #28
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	2104      	movs	r1, #4
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	2b00      	cmp	r3, #0
 8001150:	d071      	beq.n	8001236 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800115a:	e06c      	b.n	8001236 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001160:	f003 031c 	and.w	r3, r3, #28
 8001164:	2202      	movs	r2, #2
 8001166:	409a      	lsls	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d02e      	beq.n	80011ce <HAL_DMA_IRQHandler+0xec>
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d029      	beq.n	80011ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10b      	bne.n	80011a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 020a 	bic.w	r2, r2, #10
 8001196:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a4:	f003 021c 	and.w	r2, r3, #28
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	2102      	movs	r1, #2
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d038      	beq.n	8001236 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80011cc:	e033      	b.n	8001236 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	f003 031c 	and.w	r3, r3, #28
 80011d6:	2208      	movs	r2, #8
 80011d8:	409a      	lsls	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4013      	ands	r3, r2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d02a      	beq.n	8001238 <HAL_DMA_IRQHandler+0x156>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d025      	beq.n	8001238 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 020e 	bic.w	r2, r2, #14
 80011fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001200:	f003 021c 	and.w	r2, r3, #28
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f202 	lsl.w	r2, r1, r2
 800120e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800122a:	2b00      	cmp	r3, #0
 800122c:	d004      	beq.n	8001238 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001236:	bf00      	nop
 8001238:	bf00      	nop
}
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f003 021c 	and.w	r2, r3, #28
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	2101      	movs	r1, #1
 800125c:	fa01 f202 	lsl.w	r2, r1, r2
 8001260:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b10      	cmp	r3, #16
 8001270:	d108      	bne.n	8001284 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001282:	e007      	b.n	8001294 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	60da      	str	r2, [r3, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	e17f      	b.n	80015b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	fa01 f303 	lsl.w	r3, r1, r3
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 8171 	beq.w	80015aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d005      	beq.n	80012e0 <HAL_GPIO_Init+0x40>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d130      	bne.n	8001342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001316:	2201      	movs	r2, #1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	f003 0201 	and.w	r2, r3, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b03      	cmp	r3, #3
 800134c:	d118      	bne.n	8001380 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001354:	2201      	movs	r2, #1
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	08db      	lsrs	r3, r3, #3
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b03      	cmp	r3, #3
 800138a:	d017      	beq.n	80013bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d123      	bne.n	8001410 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	6939      	ldr	r1, [r7, #16]
 800140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f000 80ac 	beq.w	80015aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	4b5f      	ldr	r3, [pc, #380]	@ (80015d0 <HAL_GPIO_Init+0x330>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001456:	4a5e      	ldr	r2, [pc, #376]	@ (80015d0 <HAL_GPIO_Init+0x330>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6613      	str	r3, [r2, #96]	@ 0x60
 800145e:	4b5c      	ldr	r3, [pc, #368]	@ (80015d0 <HAL_GPIO_Init+0x330>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800146a:	4a5a      	ldr	r2, [pc, #360]	@ (80015d4 <HAL_GPIO_Init+0x334>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3302      	adds	r3, #2
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001494:	d025      	beq.n	80014e2 <HAL_GPIO_Init+0x242>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4f      	ldr	r2, [pc, #316]	@ (80015d8 <HAL_GPIO_Init+0x338>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d01f      	beq.n	80014de <HAL_GPIO_Init+0x23e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4e      	ldr	r2, [pc, #312]	@ (80015dc <HAL_GPIO_Init+0x33c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d019      	beq.n	80014da <HAL_GPIO_Init+0x23a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4d      	ldr	r2, [pc, #308]	@ (80015e0 <HAL_GPIO_Init+0x340>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d013      	beq.n	80014d6 <HAL_GPIO_Init+0x236>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4c      	ldr	r2, [pc, #304]	@ (80015e4 <HAL_GPIO_Init+0x344>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d00d      	beq.n	80014d2 <HAL_GPIO_Init+0x232>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4b      	ldr	r2, [pc, #300]	@ (80015e8 <HAL_GPIO_Init+0x348>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d007      	beq.n	80014ce <HAL_GPIO_Init+0x22e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4a      	ldr	r2, [pc, #296]	@ (80015ec <HAL_GPIO_Init+0x34c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d101      	bne.n	80014ca <HAL_GPIO_Init+0x22a>
 80014c6:	2306      	movs	r3, #6
 80014c8:	e00c      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014ca:	2307      	movs	r3, #7
 80014cc:	e00a      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x244>
 80014e2:	2300      	movs	r3, #0
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	f002 0203 	and.w	r2, r2, #3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014f4:	4937      	ldr	r1, [pc, #220]	@ (80015d4 <HAL_GPIO_Init+0x334>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001502:	4b3b      	ldr	r3, [pc, #236]	@ (80015f0 <HAL_GPIO_Init+0x350>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001526:	4a32      	ldr	r2, [pc, #200]	@ (80015f0 <HAL_GPIO_Init+0x350>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800152c:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <HAL_GPIO_Init+0x350>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001550:	4a27      	ldr	r2, [pc, #156]	@ (80015f0 <HAL_GPIO_Init+0x350>)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001556:	4b26      	ldr	r3, [pc, #152]	@ (80015f0 <HAL_GPIO_Init+0x350>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800157a:	4a1d      	ldr	r2, [pc, #116]	@ (80015f0 <HAL_GPIO_Init+0x350>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_GPIO_Init+0x350>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015a4:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <HAL_GPIO_Init+0x350>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f47f ae78 	bne.w	80012b0 <HAL_GPIO_Init+0x10>
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40010000 	.word	0x40010000
 80015d8:	48000400 	.word	0x48000400
 80015dc:	48000800 	.word	0x48000800
 80015e0:	48000c00 	.word	0x48000c00
 80015e4:	48001000 	.word	0x48001000
 80015e8:	48001400 	.word	0x48001400
 80015ec:	48001800 	.word	0x48001800
 80015f0:	40010400 	.word	0x40010400

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001610:	e002      	b.n	8001618 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43d9      	mvns	r1, r3
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	400b      	ands	r3, r1
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <HAL_PWREx_GetVoltageRange+0x18>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40007000 	.word	0x40007000

08001674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001682:	d130      	bne.n	80016e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001684:	4b23      	ldr	r3, [pc, #140]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800168c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001690:	d038      	beq.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001692:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800169a:	4a1e      	ldr	r2, [pc, #120]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800169c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2232      	movs	r2, #50	@ 0x32
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0c9b      	lsrs	r3, r3, #18
 80016b4:	3301      	adds	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b8:	e002      	b.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	3b01      	subs	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016cc:	d102      	bne.n	80016d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1f2      	bne.n	80016ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016e0:	d110      	bne.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e00f      	b.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016f2:	d007      	beq.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016f4:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016fc:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001702:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40007000 	.word	0x40007000
 8001718:	20000014 	.word	0x20000014
 800171c:	431bde83 	.word	0x431bde83

08001720 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e3ca      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001732:	4b97      	ldr	r3, [pc, #604]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800173c:	4b94      	ldr	r3, [pc, #592]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	f000 80e4 	beq.w	800191c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <HAL_RCC_OscConfig+0x4a>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	f040 808b 	bne.w	8001878 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b01      	cmp	r3, #1
 8001766:	f040 8087 	bne.w	8001878 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800176a:	4b89      	ldr	r3, [pc, #548]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <HAL_RCC_OscConfig+0x62>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e3a2      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	4b82      	ldr	r3, [pc, #520]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <HAL_RCC_OscConfig+0x7c>
 8001792:	4b7f      	ldr	r3, [pc, #508]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800179a:	e005      	b.n	80017a8 <HAL_RCC_OscConfig+0x88>
 800179c:	4b7c      	ldr	r3, [pc, #496]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 800179e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d223      	bcs.n	80017f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fd55 	bl	8002260 <RCC_SetFlashLatencyFromMSIRange>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e383      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c0:	4b73      	ldr	r3, [pc, #460]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a72      	ldr	r2, [pc, #456]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b70      	ldr	r3, [pc, #448]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	496d      	ldr	r1, [pc, #436]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017de:	4b6c      	ldr	r3, [pc, #432]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	4968      	ldr	r1, [pc, #416]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
 80017f2:	e025      	b.n	8001840 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f4:	4b66      	ldr	r3, [pc, #408]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a65      	ldr	r2, [pc, #404]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b63      	ldr	r3, [pc, #396]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4960      	ldr	r1, [pc, #384]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001812:	4b5f      	ldr	r3, [pc, #380]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	495b      	ldr	r1, [pc, #364]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fd15 	bl	8002260 <RCC_SetFlashLatencyFromMSIRange>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e343      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001840:	f000 fc4a 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8001844:	4602      	mov	r2, r0
 8001846:	4b52      	ldr	r3, [pc, #328]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	4950      	ldr	r1, [pc, #320]	@ (8001994 <HAL_RCC_OscConfig+0x274>)
 8001852:	5ccb      	ldrb	r3, [r1, r3]
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	4a4e      	ldr	r2, [pc, #312]	@ (8001998 <HAL_RCC_OscConfig+0x278>)
 800185e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001860:	4b4e      	ldr	r3, [pc, #312]	@ (800199c <HAL_RCC_OscConfig+0x27c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff f937 	bl	8000ad8 <HAL_InitTick>
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d052      	beq.n	800191a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	e327      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d032      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001880:	4b43      	ldr	r3, [pc, #268]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a42      	ldr	r2, [pc, #264]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800188c:	f7ff f974 	bl	8000b78 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001894:	f7ff f970 	bl	8000b78 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e310      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b2:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a36      	ldr	r2, [pc, #216]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4931      	ldr	r1, [pc, #196]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	492c      	ldr	r1, [pc, #176]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e01a      	b.n	800191c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a29      	ldr	r2, [pc, #164]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f941 	bl	8000b78 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018fa:	f7ff f93d 	bl	8000b78 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e2dd      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800190c:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x1da>
 8001918:	e000      	b.n	800191c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800191a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d074      	beq.n	8001a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2b08      	cmp	r3, #8
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x21a>
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b0c      	cmp	r3, #12
 8001932:	d10e      	bne.n	8001952 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d10b      	bne.n	8001952 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d064      	beq.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d160      	bne.n	8001a10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e2ba      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x24a>
 800195c:	4b0c      	ldr	r3, [pc, #48]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0b      	ldr	r2, [pc, #44]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e026      	b.n	80019b8 <HAL_RCC_OscConfig+0x298>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001972:	d115      	bne.n	80019a0 <HAL_RCC_OscConfig+0x280>
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 800197a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a02      	ldr	r2, [pc, #8]	@ (8001990 <HAL_RCC_OscConfig+0x270>)
 8001986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	e014      	b.n	80019b8 <HAL_RCC_OscConfig+0x298>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	08004510 	.word	0x08004510
 8001998:	20000014 	.word	0x20000014
 800199c:	20000018 	.word	0x20000018
 80019a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a9f      	ldr	r2, [pc, #636]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a9c      	ldr	r2, [pc, #624]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff f8da 	bl	8000b78 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff f8d6 	bl	8000b78 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	@ 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e276      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019da:	4b92      	ldr	r3, [pc, #584]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x2a8>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff f8c6 	bl	8000b78 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff f8c2 	bl	8000b78 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	@ 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e262      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a02:	4b88      	ldr	r3, [pc, #544]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2d0>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d060      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_OscConfig+0x310>
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d119      	bne.n	8001a5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d116      	bne.n	8001a5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a30:	4b7c      	ldr	r3, [pc, #496]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_OscConfig+0x328>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e23f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a48:	4b76      	ldr	r3, [pc, #472]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	061b      	lsls	r3, r3, #24
 8001a56:	4973      	ldr	r1, [pc, #460]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a5c:	e040      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d023      	beq.n	8001aae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a66:	4b6f      	ldr	r3, [pc, #444]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff f881 	bl	8000b78 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f87d 	bl	8000b78 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e21d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8c:	4b65      	ldr	r3, [pc, #404]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b62      	ldr	r3, [pc, #392]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	495f      	ldr	r1, [pc, #380]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
 8001aac:	e018      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b5d      	ldr	r3, [pc, #372]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f85d 	bl	8000b78 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff f859 	bl	8000b78 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1f9      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad4:	4b53      	ldr	r3, [pc, #332]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d03c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d01c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af4:	4b4b      	ldr	r3, [pc, #300]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001afa:	4a4a      	ldr	r2, [pc, #296]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff f838 	bl	8000b78 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f834 	bl	8000b78 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1d4      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1e:	4b41      	ldr	r3, [pc, #260]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ef      	beq.n	8001b0c <HAL_RCC_OscConfig+0x3ec>
 8001b2c:	e01b      	b.n	8001b66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b34:	4a3b      	ldr	r2, [pc, #236]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3e:	f7ff f81b 	bl	8000b78 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b46:	f7ff f817 	bl	8000b78 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e1b7      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b58:	4b32      	ldr	r3, [pc, #200]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1ef      	bne.n	8001b46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80a6 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b78:	4b2a      	ldr	r3, [pc, #168]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10d      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b84:	4b27      	ldr	r3, [pc, #156]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b88:	4a26      	ldr	r2, [pc, #152]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b90:	4b24      	ldr	r3, [pc, #144]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba0:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <HAL_RCC_OscConfig+0x508>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d118      	bne.n	8001bde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bac:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <HAL_RCC_OscConfig+0x508>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c28 <HAL_RCC_OscConfig+0x508>)
 8001bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb8:	f7fe ffde 	bl	8000b78 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc0:	f7fe ffda 	bl	8000b78 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e17a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <HAL_RCC_OscConfig+0x508>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4d8>
 8001be6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bec:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bf6:	e029      	b.n	8001c4c <HAL_RCC_OscConfig+0x52c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d115      	bne.n	8001c2c <HAL_RCC_OscConfig+0x50c>
 8001c00:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c06:	4a07      	ldr	r2, [pc, #28]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c16:	4a03      	ldr	r2, [pc, #12]	@ (8001c24 <HAL_RCC_OscConfig+0x504>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c20:	e014      	b.n	8001c4c <HAL_RCC_OscConfig+0x52c>
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40007000 	.word	0x40007000
 8001c2c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c32:	4a9b      	ldr	r2, [pc, #620]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c3c:	4b98      	ldr	r3, [pc, #608]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c42:	4a97      	ldr	r2, [pc, #604]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d016      	beq.n	8001c82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7fe ff90 	bl	8000b78 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7fe ff8c 	bl	8000b78 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e12a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	4b8b      	ldr	r3, [pc, #556]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ed      	beq.n	8001c5c <HAL_RCC_OscConfig+0x53c>
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7fe ff79 	bl	8000b78 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7fe ff75 	bl	8000b78 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e113      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ed      	bne.n	8001c8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb8:	4a79      	ldr	r2, [pc, #484]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80fe 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	f040 80d0 	bne.w	8001e74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cd4:	4b72      	ldr	r3, [pc, #456]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d130      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d127      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d11f      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d14:	2a07      	cmp	r2, #7
 8001d16:	bf14      	ite	ne
 8001d18:	2201      	movne	r2, #1
 8001d1a:	2200      	moveq	r2, #0
 8001d1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d113      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d2c:	085b      	lsrs	r3, r3, #1
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d109      	bne.n	8001d4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	3b01      	subs	r3, #1
 8001d44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d06e      	beq.n	8001e28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d069      	beq.n	8001e24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d50:	4b53      	ldr	r3, [pc, #332]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d5c:	4b50      	ldr	r3, [pc, #320]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0ad      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d78:	f7fe fefe 	bl	8000b78 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7fe fefa 	bl	8000b78 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e09a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d92:	4b43      	ldr	r3, [pc, #268]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	4b40      	ldr	r3, [pc, #256]	@ (8001ea4 <HAL_RCC_OscConfig+0x784>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001dae:	3a01      	subs	r2, #1
 8001db0:	0112      	lsls	r2, r2, #4
 8001db2:	4311      	orrs	r1, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001db8:	0212      	lsls	r2, r2, #8
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dc0:	0852      	lsrs	r2, r2, #1
 8001dc2:	3a01      	subs	r2, #1
 8001dc4:	0552      	lsls	r2, r2, #21
 8001dc6:	4311      	orrs	r1, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dcc:	0852      	lsrs	r2, r2, #1
 8001dce:	3a01      	subs	r2, #1
 8001dd0:	0652      	lsls	r2, r2, #25
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001dd8:	0912      	lsrs	r2, r2, #4
 8001dda:	0452      	lsls	r2, r2, #17
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	4930      	ldr	r1, [pc, #192]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001de4:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df0:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4a2a      	ldr	r2, [pc, #168]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dfc:	f7fe febc 	bl	8000b78 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7fe feb8 	bl	8000b78 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e058      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e22:	e050      	b.n	8001ec6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e04f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d148      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e40:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	4a16      	ldr	r2, [pc, #88]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e4c:	f7fe fe94 	bl	8000b78 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe fe90 	bl	8000b78 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e030      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x734>
 8001e72:	e028      	b.n	8001ec6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d023      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ea0 <HAL_RCC_OscConfig+0x780>)
 8001e80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7fe fe77 	bl	8000b78 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8c:	e00c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7fe fe73 	bl	8000b78 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d905      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e013      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ea8:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_RCC_OscConfig+0x7b0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ec      	bne.n	8001e8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_RCC_OscConfig+0x7b0>)
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4905      	ldr	r1, [pc, #20]	@ (8001ed0 <HAL_RCC_OscConfig+0x7b0>)
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_RCC_OscConfig+0x7b4>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60cb      	str	r3, [r1, #12]
 8001ec0:	e001      	b.n	8001ec6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3720      	adds	r7, #32
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	feeefffc 	.word	0xfeeefffc

08001ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0e7      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eec:	4b75      	ldr	r3, [pc, #468]	@ (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d910      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b72      	ldr	r3, [pc, #456]	@ (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 0207 	bic.w	r2, r3, #7
 8001f02:	4970      	ldr	r1, [pc, #448]	@ (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b6e      	ldr	r3, [pc, #440]	@ (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e0cf      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d010      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	4b66      	ldr	r3, [pc, #408]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d908      	bls.n	8001f4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f38:	4b63      	ldr	r3, [pc, #396]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4960      	ldr	r1, [pc, #384]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d04c      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5e:	4b5a      	ldr	r3, [pc, #360]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d121      	bne.n	8001fae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0a6      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d107      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f76:	4b54      	ldr	r3, [pc, #336]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d115      	bne.n	8001fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e09a      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f8e:	4b4e      	ldr	r3, [pc, #312]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e08e      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e086      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4943      	ldr	r1, [pc, #268]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc0:	f7fe fdda 	bl	8000b78 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7fe fdd6 	bl	8000b78 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e06e      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b3a      	ldr	r3, [pc, #232]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d010      	beq.n	800201e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002008:	429a      	cmp	r2, r3
 800200a:	d208      	bcs.n	800201e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800200c:	4b2e      	ldr	r3, [pc, #184]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	492b      	ldr	r1, [pc, #172]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800201e:	4b29      	ldr	r3, [pc, #164]	@ (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d210      	bcs.n	800204e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202c:	4b25      	ldr	r3, [pc, #148]	@ (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 0207 	bic.w	r2, r3, #7
 8002034:	4923      	ldr	r1, [pc, #140]	@ (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800203c:	4b21      	ldr	r3, [pc, #132]	@ (80020c4 <HAL_RCC_ClockConfig+0x1ec>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d001      	beq.n	800204e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e036      	b.n	80020bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800205a:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4918      	ldr	r1, [pc, #96]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d009      	beq.n	800208c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4910      	ldr	r1, [pc, #64]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208c:	f000 f824 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	490b      	ldr	r1, [pc, #44]	@ (80020cc <HAL_RCC_ClockConfig+0x1f4>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	4a09      	ldr	r2, [pc, #36]	@ (80020d0 <HAL_RCC_ClockConfig+0x1f8>)
 80020aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fd11 	bl	8000ad8 <HAL_InitTick>
 80020b6:	4603      	mov	r3, r0
 80020b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80020ba:	7afb      	ldrb	r3, [r7, #11]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40022000 	.word	0x40022000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08004510 	.word	0x08004510
 80020d0:	20000014 	.word	0x20000014
 80020d4:	20000018 	.word	0x20000018

080020d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e6:	4b3e      	ldr	r3, [pc, #248]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f0:	4b3b      	ldr	r3, [pc, #236]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x34>
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d121      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d11e      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800210c:	4b34      	ldr	r3, [pc, #208]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d107      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002118:	4b31      	ldr	r3, [pc, #196]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e005      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002128:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002134:	4a2b      	ldr	r2, [pc, #172]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10d      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d102      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002150:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	e004      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b08      	cmp	r3, #8
 800215a:	d101      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800215c:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x114>)
 800215e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d134      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002166:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0xa6>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d003      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0xac>
 800217c:	e005      	b.n	800218a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002180:	617b      	str	r3, [r7, #20]
      break;
 8002182:	e005      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002186:	617b      	str	r3, [r7, #20]
      break;
 8002188:	e002      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	617b      	str	r3, [r7, #20]
      break;
 800218e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	3301      	adds	r3, #1
 800219c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800219e:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	fb03 f202 	mul.w	r2, r3, r2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	0e5b      	lsrs	r3, r3, #25
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	3301      	adds	r3, #1
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021d0:	69bb      	ldr	r3, [r7, #24]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	@ 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08004528 	.word	0x08004528
 80021e8:	00f42400 	.word	0x00f42400
 80021ec:	007a1200 	.word	0x007a1200

080021f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f4:	4b03      	ldr	r3, [pc, #12]	@ (8002204 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	20000014 	.word	0x20000014

08002208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800220c:	f7ff fff0 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b06      	ldr	r3, [pc, #24]	@ (800222c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4904      	ldr	r1, [pc, #16]	@ (8002230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	08004520 	.word	0x08004520

08002234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002238:	f7ff ffda 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 800223c:	4602      	mov	r2, r0
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	0adb      	lsrs	r3, r3, #11
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	4904      	ldr	r1, [pc, #16]	@ (800225c <HAL_RCC_GetPCLK2Freq+0x28>)
 800224a:	5ccb      	ldrb	r3, [r1, r3]
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	08004520 	.word	0x08004520

08002260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800226c:	4b2a      	ldr	r3, [pc, #168]	@ (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002278:	f7ff f9ee 	bl	8001658 <HAL_PWREx_GetVoltageRange>
 800227c:	6178      	str	r0, [r7, #20]
 800227e:	e014      	b.n	80022aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	4b25      	ldr	r3, [pc, #148]	@ (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002284:	4a24      	ldr	r2, [pc, #144]	@ (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800228a:	6593      	str	r3, [r2, #88]	@ 0x58
 800228c:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002298:	f7ff f9de 	bl	8001658 <HAL_PWREx_GetVoltageRange>
 800229c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022b0:	d10b      	bne.n	80022ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b80      	cmp	r3, #128	@ 0x80
 80022b6:	d919      	bls.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80022bc:	d902      	bls.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022be:	2302      	movs	r3, #2
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	e013      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c4:	2301      	movs	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	e010      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b80      	cmp	r3, #128	@ 0x80
 80022ce:	d902      	bls.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022d0:	2303      	movs	r3, #3
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	e00a      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b80      	cmp	r3, #128	@ 0x80
 80022da:	d102      	bne.n	80022e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022dc:	2302      	movs	r3, #2
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e004      	b.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b70      	cmp	r3, #112	@ 0x70
 80022e6:	d101      	bne.n	80022ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e8:	2301      	movs	r3, #1
 80022ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 0207 	bic.w	r2, r3, #7
 80022f4:	4909      	ldr	r1, [pc, #36]	@ (800231c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022fc:	4b07      	ldr	r3, [pc, #28]	@ (800231c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	40022000 	.word	0x40022000

08002320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002328:	2300      	movs	r3, #0
 800232a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800232c:	2300      	movs	r3, #0
 800232e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002338:	2b00      	cmp	r3, #0
 800233a:	d041      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002340:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002344:	d02a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002346:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800234a:	d824      	bhi.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800234c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002350:	d008      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002352:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002356:	d81e      	bhi.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800235c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002360:	d010      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002362:	e018      	b.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002364:	4b86      	ldr	r3, [pc, #536]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4a85      	ldr	r2, [pc, #532]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002370:	e015      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fabb 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 800237e:	4603      	mov	r3, r0
 8002380:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002382:	e00c      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3320      	adds	r3, #32
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fba6 	bl	8002adc <RCCEx_PLLSAI2_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002394:	e003      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	74fb      	strb	r3, [r7, #19]
      break;
 800239a:	e000      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800239c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10b      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a4:	4b76      	ldr	r3, [pc, #472]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b2:	4973      	ldr	r1, [pc, #460]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023ba:	e001      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d041      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023d4:	d02a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80023d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80023da:	d824      	bhi.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023e0:	d008      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023e6:	d81e      	bhi.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f0:	d010      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023f2:	e018      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023f4:	4b62      	ldr	r3, [pc, #392]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a61      	ldr	r2, [pc, #388]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002400:	e015      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fa73 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 800240e:	4603      	mov	r3, r0
 8002410:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002412:	e00c      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3320      	adds	r3, #32
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fb5e 	bl	8002adc <RCCEx_PLLSAI2_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002424:	e003      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	74fb      	strb	r3, [r7, #19]
      break;
 800242a:	e000      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800242c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10b      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002434:	4b52      	ldr	r3, [pc, #328]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002442:	494f      	ldr	r1, [pc, #316]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800244a:	e001      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80a0 	beq.w	800259e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002462:	4b47      	ldr	r3, [pc, #284]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002472:	2300      	movs	r3, #0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002478:	4b41      	ldr	r3, [pc, #260]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	4a40      	ldr	r2, [pc, #256]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002482:	6593      	str	r3, [r2, #88]	@ 0x58
 8002484:	4b3e      	ldr	r3, [pc, #248]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002490:	2301      	movs	r3, #1
 8002492:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002494:	4b3b      	ldr	r3, [pc, #236]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3a      	ldr	r2, [pc, #232]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800249e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024a0:	f7fe fb6a 	bl	8000b78 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024a6:	e009      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a8:	f7fe fb66 	bl	8000b78 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d902      	bls.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	74fb      	strb	r3, [r7, #19]
        break;
 80024ba:	e005      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024bc:	4b31      	ldr	r3, [pc, #196]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0ef      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024c8:	7cfb      	ldrb	r3, [r7, #19]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d15c      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01f      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d019      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024ec:	4b24      	ldr	r3, [pc, #144]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f8:	4b21      	ldr	r3, [pc, #132]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fe:	4a20      	ldr	r2, [pc, #128]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002508:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250e:	4a1c      	ldr	r2, [pc, #112]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002518:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7fe fb25 	bl	8000b78 <HAL_GetTick>
 800252e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002530:	e00b      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe fb21 	bl	8000b78 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d902      	bls.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	74fb      	strb	r3, [r7, #19]
            break;
 8002548:	e006      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254a:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ec      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800255e:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002564:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800256e:	4904      	ldr	r1, [pc, #16]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002576:	e009      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	74bb      	strb	r3, [r7, #18]
 800257c:	e006      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000
 8002584:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258c:	7c7b      	ldrb	r3, [r7, #17]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002592:	4b9e      	ldr	r3, [pc, #632]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002596:	4a9d      	ldr	r2, [pc, #628]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800259c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025aa:	4b98      	ldr	r3, [pc, #608]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b0:	f023 0203 	bic.w	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b8:	4994      	ldr	r1, [pc, #592]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025cc:	4b8f      	ldr	r3, [pc, #572]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d2:	f023 020c 	bic.w	r2, r3, #12
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025da:	498c      	ldr	r1, [pc, #560]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ee:	4b87      	ldr	r3, [pc, #540]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	4983      	ldr	r1, [pc, #524]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002610:	4b7e      	ldr	r3, [pc, #504]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	497b      	ldr	r1, [pc, #492]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002632:	4b76      	ldr	r3, [pc, #472]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002638:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002640:	4972      	ldr	r1, [pc, #456]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002654:	4b6d      	ldr	r3, [pc, #436]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002662:	496a      	ldr	r1, [pc, #424]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002676:	4b65      	ldr	r3, [pc, #404]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002684:	4961      	ldr	r1, [pc, #388]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002698:	4b5c      	ldr	r3, [pc, #368]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a6:	4959      	ldr	r1, [pc, #356]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ba:	4b54      	ldr	r3, [pc, #336]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c8:	4950      	ldr	r1, [pc, #320]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026dc:	4b4b      	ldr	r3, [pc, #300]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ea:	4948      	ldr	r1, [pc, #288]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fe:	4b43      	ldr	r3, [pc, #268]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270c:	493f      	ldr	r1, [pc, #252]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d028      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002720:	4b3a      	ldr	r3, [pc, #232]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800272e:	4937      	ldr	r1, [pc, #220]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800273a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800273e:	d106      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002740:	4b32      	ldr	r3, [pc, #200]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a31      	ldr	r2, [pc, #196]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800274a:	60d3      	str	r3, [r2, #12]
 800274c:	e011      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002756:	d10c      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	2101      	movs	r1, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f8c8 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d028      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800277e:	4b23      	ldr	r3, [pc, #140]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278c:	491f      	ldr	r1, [pc, #124]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002798:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800279c:	d106      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279e:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4a1a      	ldr	r2, [pc, #104]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027a8:	60d3      	str	r3, [r2, #12]
 80027aa:	e011      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027b4:	d10c      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2101      	movs	r1, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 f899 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 80027c2:	4603      	mov	r3, r0
 80027c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d02b      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027dc:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ea:	4908      	ldr	r1, [pc, #32]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027fa:	d109      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027fc:	4b03      	ldr	r3, [pc, #12]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a02      	ldr	r2, [pc, #8]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002806:	60d3      	str	r3, [r2, #12]
 8002808:	e014      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002814:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002818:	d10c      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3304      	adds	r3, #4
 800281e:	2101      	movs	r1, #1
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f867 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 8002826:	4603      	mov	r3, r0
 8002828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d02f      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002840:	4b2b      	ldr	r3, [pc, #172]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002846:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800284e:	4928      	ldr	r1, [pc, #160]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800285a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800285e:	d10d      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	2102      	movs	r1, #2
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f844 	bl	80028f4 <RCCEx_PLLSAI1_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d014      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	74bb      	strb	r3, [r7, #18]
 800287a:	e011      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3320      	adds	r3, #32
 800288a:	2102      	movs	r1, #2
 800288c:	4618      	mov	r0, r3
 800288e:	f000 f925 	bl	8002adc <RCCEx_PLLSAI2_Config>
 8002892:	4603      	mov	r3, r0
 8002894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002896:	7cfb      	ldrb	r3, [r7, #19]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028ac:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028ba:	490d      	ldr	r1, [pc, #52]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028ce:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028de:	4904      	ldr	r1, [pc, #16]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000

080028f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002902:	4b75      	ldr	r3, [pc, #468]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d018      	beq.n	8002940 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800290e:	4b72      	ldr	r3, [pc, #456]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0203 	and.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d10d      	bne.n	800293a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
       ||
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002926:	4b6c      	ldr	r3, [pc, #432]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	1c5a      	adds	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
       ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d047      	beq.n	80029ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	e044      	b.n	80029ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d018      	beq.n	800297a <RCCEx_PLLSAI1_Config+0x86>
 8002948:	2b03      	cmp	r3, #3
 800294a:	d825      	bhi.n	8002998 <RCCEx_PLLSAI1_Config+0xa4>
 800294c:	2b01      	cmp	r3, #1
 800294e:	d002      	beq.n	8002956 <RCCEx_PLLSAI1_Config+0x62>
 8002950:	2b02      	cmp	r3, #2
 8002952:	d009      	beq.n	8002968 <RCCEx_PLLSAI1_Config+0x74>
 8002954:	e020      	b.n	8002998 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002956:	4b60      	ldr	r3, [pc, #384]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11d      	bne.n	800299e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002966:	e01a      	b.n	800299e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002968:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002970:	2b00      	cmp	r3, #0
 8002972:	d116      	bne.n	80029a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002978:	e013      	b.n	80029a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800297a:	4b57      	ldr	r3, [pc, #348]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10f      	bne.n	80029a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002986:	4b54      	ldr	r3, [pc, #336]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002996:	e006      	b.n	80029a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      break;
 800299c:	e004      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800299e:	bf00      	nop
 80029a0:	e002      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ae:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	430b      	orrs	r3, r1
 80029c4:	4944      	ldr	r1, [pc, #272]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d17d      	bne.n	8002acc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029d0:	4b41      	ldr	r3, [pc, #260]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a40      	ldr	r2, [pc, #256]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe f8cc 	bl	8000b78 <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029e2:	e009      	b.n	80029f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029e4:	f7fe f8c8 	bl	8000b78 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d902      	bls.n	80029f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	73fb      	strb	r3, [r7, #15]
        break;
 80029f6:	e005      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029f8:	4b37      	ldr	r3, [pc, #220]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ef      	bne.n	80029e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d160      	bne.n	8002acc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d111      	bne.n	8002a34 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a10:	4b31      	ldr	r3, [pc, #196]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6892      	ldr	r2, [r2, #8]
 8002a20:	0211      	lsls	r1, r2, #8
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	0912      	lsrs	r2, r2, #4
 8002a28:	0452      	lsls	r2, r2, #17
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	492a      	ldr	r1, [pc, #168]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	610b      	str	r3, [r1, #16]
 8002a32:	e027      	b.n	8002a84 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d112      	bne.n	8002a60 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a3a:	4b27      	ldr	r3, [pc, #156]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a42:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6892      	ldr	r2, [r2, #8]
 8002a4a:	0211      	lsls	r1, r2, #8
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6912      	ldr	r2, [r2, #16]
 8002a50:	0852      	lsrs	r2, r2, #1
 8002a52:	3a01      	subs	r2, #1
 8002a54:	0552      	lsls	r2, r2, #21
 8002a56:	430a      	orrs	r2, r1
 8002a58:	491f      	ldr	r1, [pc, #124]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	610b      	str	r3, [r1, #16]
 8002a5e:	e011      	b.n	8002a84 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6892      	ldr	r2, [r2, #8]
 8002a70:	0211      	lsls	r1, r2, #8
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6952      	ldr	r2, [r2, #20]
 8002a76:	0852      	lsrs	r2, r2, #1
 8002a78:	3a01      	subs	r2, #1
 8002a7a:	0652      	lsls	r2, r2, #25
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	4916      	ldr	r1, [pc, #88]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a84:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe f872 	bl	8000b78 <HAL_GetTick>
 8002a94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a96:	e009      	b.n	8002aac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a98:	f7fe f86e 	bl	8000b78 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d902      	bls.n	8002aac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	73fb      	strb	r3, [r7, #15]
          break;
 8002aaa:	e005      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ef      	beq.n	8002a98 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	4904      	ldr	r1, [pc, #16]	@ (8002ad8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000

08002adc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002aea:	4b6a      	ldr	r3, [pc, #424]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d018      	beq.n	8002b28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002af6:	4b67      	ldr	r3, [pc, #412]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f003 0203 	and.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d10d      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
       ||
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b0e:	4b61      	ldr	r3, [pc, #388]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d047      	beq.n	8002bb2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
 8002b26:	e044      	b.n	8002bb2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d018      	beq.n	8002b62 <RCCEx_PLLSAI2_Config+0x86>
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d825      	bhi.n	8002b80 <RCCEx_PLLSAI2_Config+0xa4>
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d002      	beq.n	8002b3e <RCCEx_PLLSAI2_Config+0x62>
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d009      	beq.n	8002b50 <RCCEx_PLLSAI2_Config+0x74>
 8002b3c:	e020      	b.n	8002b80 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b3e:	4b55      	ldr	r3, [pc, #340]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d11d      	bne.n	8002b86 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4e:	e01a      	b.n	8002b86 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b50:	4b50      	ldr	r3, [pc, #320]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d116      	bne.n	8002b8a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b60:	e013      	b.n	8002b8a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b62:	4b4c      	ldr	r3, [pc, #304]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10f      	bne.n	8002b8e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b6e:	4b49      	ldr	r3, [pc, #292]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b7e:	e006      	b.n	8002b8e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      break;
 8002b84:	e004      	b.n	8002b90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b86:	bf00      	nop
 8002b88:	e002      	b.n	8002b90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b8a:	bf00      	nop
 8002b8c:	e000      	b.n	8002b90 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10d      	bne.n	8002bb2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b96:	4b3f      	ldr	r3, [pc, #252]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	430b      	orrs	r3, r1
 8002bac:	4939      	ldr	r1, [pc, #228]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d167      	bne.n	8002c88 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bb8:	4b36      	ldr	r3, [pc, #216]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a35      	ldr	r2, [pc, #212]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc4:	f7fd ffd8 	bl	8000b78 <HAL_GetTick>
 8002bc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bca:	e009      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bcc:	f7fd ffd4 	bl	8000b78 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d902      	bls.n	8002be0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	73fb      	strb	r3, [r7, #15]
        break;
 8002bde:	e005      	b.n	8002bec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002be0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1ef      	bne.n	8002bcc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d14a      	bne.n	8002c88 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d111      	bne.n	8002c1c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bf8:	4b26      	ldr	r3, [pc, #152]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6892      	ldr	r2, [r2, #8]
 8002c08:	0211      	lsls	r1, r2, #8
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68d2      	ldr	r2, [r2, #12]
 8002c0e:	0912      	lsrs	r2, r2, #4
 8002c10:	0452      	lsls	r2, r2, #17
 8002c12:	430a      	orrs	r2, r1
 8002c14:	491f      	ldr	r1, [pc, #124]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	614b      	str	r3, [r1, #20]
 8002c1a:	e011      	b.n	8002c40 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6892      	ldr	r2, [r2, #8]
 8002c2c:	0211      	lsls	r1, r2, #8
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6912      	ldr	r2, [r2, #16]
 8002c32:	0852      	lsrs	r2, r2, #1
 8002c34:	3a01      	subs	r2, #1
 8002c36:	0652      	lsls	r2, r2, #25
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	4916      	ldr	r1, [pc, #88]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c40:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a13      	ldr	r2, [pc, #76]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fd ff94 	bl	8000b78 <HAL_GetTick>
 8002c50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c52:	e009      	b.n	8002c68 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c54:	f7fd ff90 	bl	8000b78 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d902      	bls.n	8002c68 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	73fb      	strb	r3, [r7, #15]
          break;
 8002c66:	e005      	b.n	8002c74 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c68:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ef      	beq.n	8002c54 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	4904      	ldr	r1, [pc, #16]	@ (8002c94 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000

08002c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e040      	b.n	8002d2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fd fda2 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2224      	movs	r2, #36	@ 0x24
 8002cc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 ff62 	bl	8003ba8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fca7 	bl	8003638 <UART_SetConfig>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e01b      	b.n	8002d2c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 ffe1 	bl	8003cec <UART_CheckIdleState>
 8002d2a:	4603      	mov	r3, r0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	@ 0x28
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d177      	bne.n	8002e3c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_UART_Transmit+0x24>
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e070      	b.n	8002e3e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2221      	movs	r2, #33	@ 0x21
 8002d68:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6a:	f7fd ff05 	bl	8000b78 <HAL_GetTick>
 8002d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	88fa      	ldrh	r2, [r7, #6]
 8002d74:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	88fa      	ldrh	r2, [r7, #6]
 8002d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d88:	d108      	bne.n	8002d9c <HAL_UART_Transmit+0x68>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d104      	bne.n	8002d9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e003      	b.n	8002da4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da4:	e02f      	b.n	8002e06 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	@ 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f001 f843 	bl	8003e3c <UART_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e03b      	b.n	8002e3e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10b      	bne.n	8002de4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	881a      	ldrh	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd8:	b292      	uxth	r2, r2
 8002dda:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	3302      	adds	r3, #2
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	e007      	b.n	8002df4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	781a      	ldrb	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1c9      	bne.n	8002da6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2140      	movs	r1, #64	@ 0x40
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f001 f80d 	bl	8003e3c <UART_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e005      	b.n	8002e3e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	@ 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	4613      	mov	r3, r2
 8002e54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	d165      	bne.n	8002f2a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_UART_Transmit_DMA+0x22>
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e05e      	b.n	8002f2c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2221      	movs	r2, #33	@ 0x21
 8002e90:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d027      	beq.n	8002eea <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9e:	4a25      	ldr	r2, [pc, #148]	@ (8002f34 <HAL_UART_Transmit_DMA+0xec>)
 8002ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	4a24      	ldr	r2, [pc, #144]	@ (8002f38 <HAL_UART_Transmit_DMA+0xf0>)
 8002ea8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eae:	4a23      	ldr	r2, [pc, #140]	@ (8002f3c <HAL_UART_Transmit_DMA+0xf4>)
 8002eb0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3328      	adds	r3, #40	@ 0x28
 8002eca:	461a      	mov	r2, r3
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	f7fe f829 	bl	8000f24 <HAL_DMA_Start_IT>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2210      	movs	r2, #16
 8002edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e020      	b.n	8002f2c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2240      	movs	r2, #64	@ 0x40
 8002ef0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	613b      	str	r3, [r7, #16]
   return(result);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f12:	623a      	str	r2, [r7, #32]
 8002f14:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f16:	69f9      	ldr	r1, [r7, #28]
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e5      	bne.n	8002ef2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
  }
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3728      	adds	r7, #40	@ 0x28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	0800416d 	.word	0x0800416d
 8002f38:	08004207 	.word	0x08004207
 8002f3c:	0800438d 	.word	0x0800438d

08002f40 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d137      	bne.n	8002fc8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_UART_Receive_DMA+0x24>
 8002f5e:	88fb      	ldrh	r3, [r7, #6]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e030      	b.n	8002fca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a18      	ldr	r2, [pc, #96]	@ (8002fd4 <HAL_UART_Receive_DMA+0x94>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d01f      	beq.n	8002fb8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d018      	beq.n	8002fb8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	e853 3f00 	ldrex	r3, [r3]
 8002f92:	613b      	str	r3, [r7, #16]
   return(result);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	623b      	str	r3, [r7, #32]
 8002fa6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa8:	69f9      	ldr	r1, [r7, #28]
 8002faa:	6a3a      	ldr	r2, [r7, #32]
 8002fac:	e841 2300 	strex	r3, r2, [r1]
 8002fb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e6      	bne.n	8002f86 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 ffaa 	bl	8003f18 <UART_Start_Receive_DMA>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	e000      	b.n	8002fca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002fc8:	2302      	movs	r3, #2
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3728      	adds	r7, #40	@ 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40008000 	.word	0x40008000

08002fd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b0ba      	sub	sp, #232	@ 0xe8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ffe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003002:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003006:	4013      	ands	r3, r2
 8003008:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800300c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d115      	bne.n	8003040 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00f      	beq.n	8003040 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d009      	beq.n	8003040 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 82ca 	beq.w	80035ca <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	4798      	blx	r3
      }
      return;
 800303e:	e2c4      	b.n	80035ca <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8117 	beq.w	8003278 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800304a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003056:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800305a:	4b85      	ldr	r3, [pc, #532]	@ (8003270 <HAL_UART_IRQHandler+0x298>)
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 810a 	beq.w	8003278 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d011      	beq.n	8003094 <HAL_UART_IRQHandler+0xbc>
 8003070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00b      	beq.n	8003094 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d011      	beq.n	80030c4 <HAL_UART_IRQHandler+0xec>
 80030a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2202      	movs	r2, #2
 80030b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ba:	f043 0204 	orr.w	r2, r3, #4
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d011      	beq.n	80030f4 <HAL_UART_IRQHandler+0x11c>
 80030d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2204      	movs	r2, #4
 80030e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ea:	f043 0202 	orr.w	r2, r3, #2
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800310c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003110:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2208      	movs	r2, #8
 800311e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003126:	f043 0208 	orr.w	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003138:	2b00      	cmp	r3, #0
 800313a:	d012      	beq.n	8003162 <HAL_UART_IRQHandler+0x18a>
 800313c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003140:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8230 	beq.w	80035ce <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00d      	beq.n	8003196 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800317a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800319c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031aa:	2b40      	cmp	r3, #64	@ 0x40
 80031ac:	d005      	beq.n	80031ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80031b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d04f      	beq.n	800325a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 ff72 	bl	80040a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ca:	2b40      	cmp	r3, #64	@ 0x40
 80031cc:	d141      	bne.n	8003252 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3308      	adds	r3, #8
 80031d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031dc:	e853 3f00 	ldrex	r3, [r3]
 80031e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3308      	adds	r3, #8
 80031f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1d9      	bne.n	80031ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321e:	2b00      	cmp	r3, #0
 8003220:	d013      	beq.n	800324a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003226:	4a13      	ldr	r2, [pc, #76]	@ (8003274 <HAL_UART_IRQHandler+0x29c>)
 8003228:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd ff16 	bl	8001060 <HAL_DMA_Abort_IT>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d017      	beq.n	800326a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003244:	4610      	mov	r0, r2
 8003246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003248:	e00f      	b.n	800326a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f9de 	bl	800360c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003250:	e00b      	b.n	800326a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9da 	bl	800360c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	e007      	b.n	800326a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9d6 	bl	800360c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003268:	e1b1      	b.n	80035ce <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326a:	bf00      	nop
    return;
 800326c:	e1af      	b.n	80035ce <HAL_UART_IRQHandler+0x5f6>
 800326e:	bf00      	nop
 8003270:	04000120 	.word	0x04000120
 8003274:	0800440b 	.word	0x0800440b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 816a 	bne.w	8003556 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8163 	beq.w	8003556 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 815c 	beq.w	8003556 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2210      	movs	r2, #16
 80032a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	f040 80d4 	bne.w	800345e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80ad 	beq.w	8003426 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80032d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032d6:	429a      	cmp	r2, r3
 80032d8:	f080 80a5 	bcs.w	8003426 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 8086 	bne.w	8003404 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800330c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003314:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	461a      	mov	r2, r3
 800331e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003322:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003326:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800332e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003332:	e841 2300 	strex	r3, r2, [r1]
 8003336:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800333a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1da      	bne.n	80032f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3308      	adds	r3, #8
 8003348:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003352:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3308      	adds	r3, #8
 8003362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003366:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800336a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800336e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003378:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e1      	bne.n	8003342 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3308      	adds	r3, #8
 8003384:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800338e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003394:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3308      	adds	r3, #8
 800339e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80033a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80033a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80033b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e3      	bne.n	800337e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033d4:	f023 0310 	bic.w	r3, r3, #16
 80033d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e4      	bne.n	80033c4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fdf0 	bl	8000fe4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003416:	b29b      	uxth	r3, r3
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	b29b      	uxth	r3, r3
 800341c:	4619      	mov	r1, r3
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8fe 	bl	8003620 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003424:	e0d5      	b.n	80035d2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800342c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003430:	429a      	cmp	r2, r3
 8003432:	f040 80ce 	bne.w	80035d2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b20      	cmp	r3, #32
 8003444:	f040 80c5 	bne.w	80035d2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8e2 	bl	8003620 <HAL_UARTEx_RxEventCallback>
      return;
 800345c:	e0b9      	b.n	80035d2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800346a:	b29b      	uxth	r3, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80ab 	beq.w	80035d6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80a6 	beq.w	80035d6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800349e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80034ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034b4:	e841 2300 	strex	r3, r2, [r1]
 80034b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1e4      	bne.n	800348a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3308      	adds	r3, #8
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	623b      	str	r3, [r7, #32]
   return(result);
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3308      	adds	r3, #8
 80034e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80034e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80034e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e3      	bne.n	80034c0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	60fb      	str	r3, [r7, #12]
   return(result);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f023 0310 	bic.w	r3, r3, #16
 8003520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	69b9      	ldr	r1, [r7, #24]
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	617b      	str	r3, [r7, #20]
   return(result);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e4      	bne.n	800350c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800354c:	4619      	mov	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f866 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003554:	e03f      	b.n	80035d6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00e      	beq.n	8003580 <HAL_UART_IRQHandler+0x5a8>
 8003562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003576:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 ff86 	bl	800448a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800357e:	e02d      	b.n	80035dc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00e      	beq.n	80035aa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01c      	beq.n	80035da <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
    }
    return;
 80035a8:	e017      	b.n	80035da <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d012      	beq.n	80035dc <HAL_UART_IRQHandler+0x604>
 80035b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00c      	beq.n	80035dc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 ff37 	bl	8004436 <UART_EndTransmit_IT>
    return;
 80035c8:	e008      	b.n	80035dc <HAL_UART_IRQHandler+0x604>
      return;
 80035ca:	bf00      	nop
 80035cc:	e006      	b.n	80035dc <HAL_UART_IRQHandler+0x604>
    return;
 80035ce:	bf00      	nop
 80035d0:	e004      	b.n	80035dc <HAL_UART_IRQHandler+0x604>
      return;
 80035d2:	bf00      	nop
 80035d4:	e002      	b.n	80035dc <HAL_UART_IRQHandler+0x604>
      return;
 80035d6:	bf00      	nop
 80035d8:	e000      	b.n	80035dc <HAL_UART_IRQHandler+0x604>
    return;
 80035da:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035dc:	37e8      	adds	r7, #232	@ 0xe8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop

080035e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800363c:	b08a      	sub	sp, #40	@ 0x28
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	431a      	orrs	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	4313      	orrs	r3, r2
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4ba4      	ldr	r3, [pc, #656]	@ (80038f8 <UART_SetConfig+0x2c0>)
 8003668:	4013      	ands	r3, r2
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003670:	430b      	orrs	r3, r1
 8003672:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a99      	ldr	r2, [pc, #612]	@ (80038fc <UART_SetConfig+0x2c4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a0:	4313      	orrs	r3, r2
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b4:	430a      	orrs	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a90      	ldr	r2, [pc, #576]	@ (8003900 <UART_SetConfig+0x2c8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d126      	bne.n	8003710 <UART_SetConfig+0xd8>
 80036c2:	4b90      	ldr	r3, [pc, #576]	@ (8003904 <UART_SetConfig+0x2cc>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d81b      	bhi.n	8003708 <UART_SetConfig+0xd0>
 80036d0:	a201      	add	r2, pc, #4	@ (adr r2, 80036d8 <UART_SetConfig+0xa0>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	080036e9 	.word	0x080036e9
 80036dc:	080036f9 	.word	0x080036f9
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	08003701 	.word	0x08003701
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ee:	e116      	b.n	800391e <UART_SetConfig+0x2e6>
 80036f0:	2302      	movs	r3, #2
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f6:	e112      	b.n	800391e <UART_SetConfig+0x2e6>
 80036f8:	2304      	movs	r3, #4
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fe:	e10e      	b.n	800391e <UART_SetConfig+0x2e6>
 8003700:	2308      	movs	r3, #8
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003706:	e10a      	b.n	800391e <UART_SetConfig+0x2e6>
 8003708:	2310      	movs	r3, #16
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800370e:	e106      	b.n	800391e <UART_SetConfig+0x2e6>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a7c      	ldr	r2, [pc, #496]	@ (8003908 <UART_SetConfig+0x2d0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d138      	bne.n	800378c <UART_SetConfig+0x154>
 800371a:	4b7a      	ldr	r3, [pc, #488]	@ (8003904 <UART_SetConfig+0x2cc>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b0c      	cmp	r3, #12
 8003726:	d82d      	bhi.n	8003784 <UART_SetConfig+0x14c>
 8003728:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <UART_SetConfig+0xf8>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003765 	.word	0x08003765
 8003734:	08003785 	.word	0x08003785
 8003738:	08003785 	.word	0x08003785
 800373c:	08003785 	.word	0x08003785
 8003740:	08003775 	.word	0x08003775
 8003744:	08003785 	.word	0x08003785
 8003748:	08003785 	.word	0x08003785
 800374c:	08003785 	.word	0x08003785
 8003750:	0800376d 	.word	0x0800376d
 8003754:	08003785 	.word	0x08003785
 8003758:	08003785 	.word	0x08003785
 800375c:	08003785 	.word	0x08003785
 8003760:	0800377d 	.word	0x0800377d
 8003764:	2300      	movs	r3, #0
 8003766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376a:	e0d8      	b.n	800391e <UART_SetConfig+0x2e6>
 800376c:	2302      	movs	r3, #2
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003772:	e0d4      	b.n	800391e <UART_SetConfig+0x2e6>
 8003774:	2304      	movs	r3, #4
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800377a:	e0d0      	b.n	800391e <UART_SetConfig+0x2e6>
 800377c:	2308      	movs	r3, #8
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003782:	e0cc      	b.n	800391e <UART_SetConfig+0x2e6>
 8003784:	2310      	movs	r3, #16
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800378a:	e0c8      	b.n	800391e <UART_SetConfig+0x2e6>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5e      	ldr	r2, [pc, #376]	@ (800390c <UART_SetConfig+0x2d4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d125      	bne.n	80037e2 <UART_SetConfig+0x1aa>
 8003796:	4b5b      	ldr	r3, [pc, #364]	@ (8003904 <UART_SetConfig+0x2cc>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037a0:	2b30      	cmp	r3, #48	@ 0x30
 80037a2:	d016      	beq.n	80037d2 <UART_SetConfig+0x19a>
 80037a4:	2b30      	cmp	r3, #48	@ 0x30
 80037a6:	d818      	bhi.n	80037da <UART_SetConfig+0x1a2>
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d00a      	beq.n	80037c2 <UART_SetConfig+0x18a>
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d814      	bhi.n	80037da <UART_SetConfig+0x1a2>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <UART_SetConfig+0x182>
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d008      	beq.n	80037ca <UART_SetConfig+0x192>
 80037b8:	e00f      	b.n	80037da <UART_SetConfig+0x1a2>
 80037ba:	2300      	movs	r3, #0
 80037bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c0:	e0ad      	b.n	800391e <UART_SetConfig+0x2e6>
 80037c2:	2302      	movs	r3, #2
 80037c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c8:	e0a9      	b.n	800391e <UART_SetConfig+0x2e6>
 80037ca:	2304      	movs	r3, #4
 80037cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d0:	e0a5      	b.n	800391e <UART_SetConfig+0x2e6>
 80037d2:	2308      	movs	r3, #8
 80037d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d8:	e0a1      	b.n	800391e <UART_SetConfig+0x2e6>
 80037da:	2310      	movs	r3, #16
 80037dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e0:	e09d      	b.n	800391e <UART_SetConfig+0x2e6>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003910 <UART_SetConfig+0x2d8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d125      	bne.n	8003838 <UART_SetConfig+0x200>
 80037ec:	4b45      	ldr	r3, [pc, #276]	@ (8003904 <UART_SetConfig+0x2cc>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80037f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037f8:	d016      	beq.n	8003828 <UART_SetConfig+0x1f0>
 80037fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80037fc:	d818      	bhi.n	8003830 <UART_SetConfig+0x1f8>
 80037fe:	2b80      	cmp	r3, #128	@ 0x80
 8003800:	d00a      	beq.n	8003818 <UART_SetConfig+0x1e0>
 8003802:	2b80      	cmp	r3, #128	@ 0x80
 8003804:	d814      	bhi.n	8003830 <UART_SetConfig+0x1f8>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <UART_SetConfig+0x1d8>
 800380a:	2b40      	cmp	r3, #64	@ 0x40
 800380c:	d008      	beq.n	8003820 <UART_SetConfig+0x1e8>
 800380e:	e00f      	b.n	8003830 <UART_SetConfig+0x1f8>
 8003810:	2300      	movs	r3, #0
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003816:	e082      	b.n	800391e <UART_SetConfig+0x2e6>
 8003818:	2302      	movs	r3, #2
 800381a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381e:	e07e      	b.n	800391e <UART_SetConfig+0x2e6>
 8003820:	2304      	movs	r3, #4
 8003822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003826:	e07a      	b.n	800391e <UART_SetConfig+0x2e6>
 8003828:	2308      	movs	r3, #8
 800382a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800382e:	e076      	b.n	800391e <UART_SetConfig+0x2e6>
 8003830:	2310      	movs	r3, #16
 8003832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003836:	e072      	b.n	800391e <UART_SetConfig+0x2e6>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a35      	ldr	r2, [pc, #212]	@ (8003914 <UART_SetConfig+0x2dc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d12a      	bne.n	8003898 <UART_SetConfig+0x260>
 8003842:	4b30      	ldr	r3, [pc, #192]	@ (8003904 <UART_SetConfig+0x2cc>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003848:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003850:	d01a      	beq.n	8003888 <UART_SetConfig+0x250>
 8003852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003856:	d81b      	bhi.n	8003890 <UART_SetConfig+0x258>
 8003858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385c:	d00c      	beq.n	8003878 <UART_SetConfig+0x240>
 800385e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003862:	d815      	bhi.n	8003890 <UART_SetConfig+0x258>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <UART_SetConfig+0x238>
 8003868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800386c:	d008      	beq.n	8003880 <UART_SetConfig+0x248>
 800386e:	e00f      	b.n	8003890 <UART_SetConfig+0x258>
 8003870:	2300      	movs	r3, #0
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003876:	e052      	b.n	800391e <UART_SetConfig+0x2e6>
 8003878:	2302      	movs	r3, #2
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800387e:	e04e      	b.n	800391e <UART_SetConfig+0x2e6>
 8003880:	2304      	movs	r3, #4
 8003882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003886:	e04a      	b.n	800391e <UART_SetConfig+0x2e6>
 8003888:	2308      	movs	r3, #8
 800388a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800388e:	e046      	b.n	800391e <UART_SetConfig+0x2e6>
 8003890:	2310      	movs	r3, #16
 8003892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003896:	e042      	b.n	800391e <UART_SetConfig+0x2e6>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a17      	ldr	r2, [pc, #92]	@ (80038fc <UART_SetConfig+0x2c4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d13a      	bne.n	8003918 <UART_SetConfig+0x2e0>
 80038a2:	4b18      	ldr	r3, [pc, #96]	@ (8003904 <UART_SetConfig+0x2cc>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038b0:	d01a      	beq.n	80038e8 <UART_SetConfig+0x2b0>
 80038b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038b6:	d81b      	bhi.n	80038f0 <UART_SetConfig+0x2b8>
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038bc:	d00c      	beq.n	80038d8 <UART_SetConfig+0x2a0>
 80038be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038c2:	d815      	bhi.n	80038f0 <UART_SetConfig+0x2b8>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <UART_SetConfig+0x298>
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038cc:	d008      	beq.n	80038e0 <UART_SetConfig+0x2a8>
 80038ce:	e00f      	b.n	80038f0 <UART_SetConfig+0x2b8>
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d6:	e022      	b.n	800391e <UART_SetConfig+0x2e6>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038de:	e01e      	b.n	800391e <UART_SetConfig+0x2e6>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e6:	e01a      	b.n	800391e <UART_SetConfig+0x2e6>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ee:	e016      	b.n	800391e <UART_SetConfig+0x2e6>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038f6:	e012      	b.n	800391e <UART_SetConfig+0x2e6>
 80038f8:	efff69f3 	.word	0xefff69f3
 80038fc:	40008000 	.word	0x40008000
 8003900:	40013800 	.word	0x40013800
 8003904:	40021000 	.word	0x40021000
 8003908:	40004400 	.word	0x40004400
 800390c:	40004800 	.word	0x40004800
 8003910:	40004c00 	.word	0x40004c00
 8003914:	40005000 	.word	0x40005000
 8003918:	2310      	movs	r3, #16
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a9f      	ldr	r2, [pc, #636]	@ (8003ba0 <UART_SetConfig+0x568>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d17a      	bne.n	8003a1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003928:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800392c:	2b08      	cmp	r3, #8
 800392e:	d824      	bhi.n	800397a <UART_SetConfig+0x342>
 8003930:	a201      	add	r2, pc, #4	@ (adr r2, 8003938 <UART_SetConfig+0x300>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	0800395d 	.word	0x0800395d
 800393c:	0800397b 	.word	0x0800397b
 8003940:	08003965 	.word	0x08003965
 8003944:	0800397b 	.word	0x0800397b
 8003948:	0800396b 	.word	0x0800396b
 800394c:	0800397b 	.word	0x0800397b
 8003950:	0800397b 	.word	0x0800397b
 8003954:	0800397b 	.word	0x0800397b
 8003958:	08003973 	.word	0x08003973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800395c:	f7fe fc54 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8003960:	61f8      	str	r0, [r7, #28]
        break;
 8003962:	e010      	b.n	8003986 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003964:	4b8f      	ldr	r3, [pc, #572]	@ (8003ba4 <UART_SetConfig+0x56c>)
 8003966:	61fb      	str	r3, [r7, #28]
        break;
 8003968:	e00d      	b.n	8003986 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396a:	f7fe fbb5 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 800396e:	61f8      	str	r0, [r7, #28]
        break;
 8003970:	e009      	b.n	8003986 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003976:	61fb      	str	r3, [r7, #28]
        break;
 8003978:	e005      	b.n	8003986 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003984:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80fb 	beq.w	8003b84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	69fa      	ldr	r2, [r7, #28]
 800399a:	429a      	cmp	r2, r3
 800399c:	d305      	bcc.n	80039aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d903      	bls.n	80039b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039b0:	e0e8      	b.n	8003b84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2200      	movs	r2, #0
 80039b6:	461c      	mov	r4, r3
 80039b8:	4615      	mov	r5, r2
 80039ba:	f04f 0200 	mov.w	r2, #0
 80039be:	f04f 0300 	mov.w	r3, #0
 80039c2:	022b      	lsls	r3, r5, #8
 80039c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80039c8:	0222      	lsls	r2, r4, #8
 80039ca:	68f9      	ldr	r1, [r7, #12]
 80039cc:	6849      	ldr	r1, [r1, #4]
 80039ce:	0849      	lsrs	r1, r1, #1
 80039d0:	2000      	movs	r0, #0
 80039d2:	4688      	mov	r8, r1
 80039d4:	4681      	mov	r9, r0
 80039d6:	eb12 0a08 	adds.w	sl, r2, r8
 80039da:	eb43 0b09 	adc.w	fp, r3, r9
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039ec:	4650      	mov	r0, sl
 80039ee:	4659      	mov	r1, fp
 80039f0:	f7fc fbf2 	bl	80001d8 <__aeabi_uldivmod>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4613      	mov	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a02:	d308      	bcc.n	8003a16 <UART_SetConfig+0x3de>
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a0a:	d204      	bcs.n	8003a16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	60da      	str	r2, [r3, #12]
 8003a14:	e0b6      	b.n	8003b84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a1c:	e0b2      	b.n	8003b84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a26:	d15e      	bne.n	8003ae6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d828      	bhi.n	8003a82 <UART_SetConfig+0x44a>
 8003a30:	a201      	add	r2, pc, #4	@ (adr r2, 8003a38 <UART_SetConfig+0x400>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a65 	.word	0x08003a65
 8003a40:	08003a6d 	.word	0x08003a6d
 8003a44:	08003a83 	.word	0x08003a83
 8003a48:	08003a73 	.word	0x08003a73
 8003a4c:	08003a83 	.word	0x08003a83
 8003a50:	08003a83 	.word	0x08003a83
 8003a54:	08003a83 	.word	0x08003a83
 8003a58:	08003a7b 	.word	0x08003a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f7fe fbd4 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8003a60:	61f8      	str	r0, [r7, #28]
        break;
 8003a62:	e014      	b.n	8003a8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a64:	f7fe fbe6 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8003a68:	61f8      	str	r0, [r7, #28]
        break;
 8003a6a:	e010      	b.n	8003a8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a6c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba4 <UART_SetConfig+0x56c>)
 8003a6e:	61fb      	str	r3, [r7, #28]
        break;
 8003a70:	e00d      	b.n	8003a8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a72:	f7fe fb31 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003a76:	61f8      	str	r0, [r7, #28]
        break;
 8003a78:	e009      	b.n	8003a8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a7e:	61fb      	str	r3, [r7, #28]
        break;
 8003a80:	e005      	b.n	8003a8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d077      	beq.n	8003b84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	005a      	lsls	r2, r3, #1
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	441a      	add	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b0f      	cmp	r3, #15
 8003aae:	d916      	bls.n	8003ade <UART_SetConfig+0x4a6>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab6:	d212      	bcs.n	8003ade <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f023 030f 	bic.w	r3, r3, #15
 8003ac0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	8afb      	ldrh	r3, [r7, #22]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	8afa      	ldrh	r2, [r7, #22]
 8003ada:	60da      	str	r2, [r3, #12]
 8003adc:	e052      	b.n	8003b84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ae4:	e04e      	b.n	8003b84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003aea:	2b08      	cmp	r3, #8
 8003aec:	d827      	bhi.n	8003b3e <UART_SetConfig+0x506>
 8003aee:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <UART_SetConfig+0x4bc>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003b21 	.word	0x08003b21
 8003afc:	08003b29 	.word	0x08003b29
 8003b00:	08003b3f 	.word	0x08003b3f
 8003b04:	08003b2f 	.word	0x08003b2f
 8003b08:	08003b3f 	.word	0x08003b3f
 8003b0c:	08003b3f 	.word	0x08003b3f
 8003b10:	08003b3f 	.word	0x08003b3f
 8003b14:	08003b37 	.word	0x08003b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b18:	f7fe fb76 	bl	8002208 <HAL_RCC_GetPCLK1Freq>
 8003b1c:	61f8      	str	r0, [r7, #28]
        break;
 8003b1e:	e014      	b.n	8003b4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b20:	f7fe fb88 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 8003b24:	61f8      	str	r0, [r7, #28]
        break;
 8003b26:	e010      	b.n	8003b4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b28:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba4 <UART_SetConfig+0x56c>)
 8003b2a:	61fb      	str	r3, [r7, #28]
        break;
 8003b2c:	e00d      	b.n	8003b4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b2e:	f7fe fad3 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003b32:	61f8      	str	r0, [r7, #28]
        break;
 8003b34:	e009      	b.n	8003b4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b3a:	61fb      	str	r3, [r7, #28]
        break;
 8003b3c:	e005      	b.n	8003b4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b48:	bf00      	nop
    }

    if (pclk != 0U)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d019      	beq.n	8003b84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	085a      	lsrs	r2, r3, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	441a      	add	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b0f      	cmp	r3, #15
 8003b68:	d909      	bls.n	8003b7e <UART_SetConfig+0x546>
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b70:	d205      	bcs.n	8003b7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60da      	str	r2, [r3, #12]
 8003b7c:	e002      	b.n	8003b84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3728      	adds	r7, #40	@ 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40008000 	.word	0x40008000
 8003ba4:	00f42400 	.word	0x00f42400

08003ba8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01a      	beq.n	8003cbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca6:	d10a      	bne.n	8003cbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	605a      	str	r2, [r3, #4]
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b098      	sub	sp, #96	@ 0x60
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cfc:	f7fc ff3c 	bl	8000b78 <HAL_GetTick>
 8003d00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d12e      	bne.n	8003d6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f88c 	bl	8003e3c <UART_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d021      	beq.n	8003d6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e6      	bne.n	8003d2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e062      	b.n	8003e34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d149      	bne.n	8003e10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d84:	2200      	movs	r2, #0
 8003d86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f856 	bl	8003e3c <UART_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d03c      	beq.n	8003e10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	623b      	str	r3, [r7, #32]
   return(result);
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003db4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e6      	bne.n	8003d96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3308      	adds	r3, #8
 8003dce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	e853 3f00 	ldrex	r3, [r3]
 8003dd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0301 	bic.w	r3, r3, #1
 8003dde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3308      	adds	r3, #8
 8003de6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003de8:	61fa      	str	r2, [r7, #28]
 8003dea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	69b9      	ldr	r1, [r7, #24]
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	617b      	str	r3, [r7, #20]
   return(result);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e5      	bne.n	8003dc8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e011      	b.n	8003e34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3758      	adds	r7, #88	@ 0x58
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4c:	e04f      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d04b      	beq.n	8003eee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7fc fe8f 	bl	8000b78 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d302      	bcc.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e04e      	b.n	8003f0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d037      	beq.n	8003eee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b80      	cmp	r3, #128	@ 0x80
 8003e82:	d034      	beq.n	8003eee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b40      	cmp	r3, #64	@ 0x40
 8003e88:	d031      	beq.n	8003eee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d110      	bne.n	8003eba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f8ff 	bl	80040a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e029      	b.n	8003f0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ec4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec8:	d111      	bne.n	8003eee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ed2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 f8e5 	bl	80040a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e00f      	b.n	8003f0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d0a0      	beq.n	8003e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b096      	sub	sp, #88	@ 0x58
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2222      	movs	r2, #34	@ 0x22
 8003f40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d028      	beq.n	8003f9e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f50:	4a3e      	ldr	r2, [pc, #248]	@ (800404c <UART_Start_Receive_DMA+0x134>)
 8003f52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f58:	4a3d      	ldr	r2, [pc, #244]	@ (8004050 <UART_Start_Receive_DMA+0x138>)
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f60:	4a3c      	ldr	r2, [pc, #240]	@ (8004054 <UART_Start_Receive_DMA+0x13c>)
 8003f62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f68:	2200      	movs	r2, #0
 8003f6a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3324      	adds	r3, #36	@ 0x24
 8003f76:	4619      	mov	r1, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	88fb      	ldrh	r3, [r7, #6]
 8003f80:	f7fc ffd0 	bl	8000f24 <HAL_DMA_Start_IT>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e051      	b.n	8004042 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d018      	beq.n	8003fd8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fba:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fc6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ff8:	637a      	str	r2, [r7, #52]	@ 0x34
 8003ffa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ffe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3308      	adds	r3, #8
 8004012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	613b      	str	r3, [r7, #16]
   return(result);
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3308      	adds	r3, #8
 800402a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800402c:	623a      	str	r2, [r7, #32]
 800402e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	69f9      	ldr	r1, [r7, #28]
 8004032:	6a3a      	ldr	r2, [r7, #32]
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	61bb      	str	r3, [r7, #24]
   return(result);
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e5      	bne.n	800400c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3758      	adds	r7, #88	@ 0x58
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	08004223 	.word	0x08004223
 8004050:	0800434f 	.word	0x0800434f
 8004054:	0800438d 	.word	0x0800438d

08004058 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b089      	sub	sp, #36	@ 0x24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	60bb      	str	r3, [r7, #8]
   return(result);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	61bb      	str	r3, [r7, #24]
 8004080:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6979      	ldr	r1, [r7, #20]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	613b      	str	r3, [r7, #16]
   return(result);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e6      	bne.n	8004060 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2220      	movs	r2, #32
 8004096:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004098:	bf00      	nop
 800409a:	3724      	adds	r7, #36	@ 0x24
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b095      	sub	sp, #84	@ 0x54
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80040cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e6      	bne.n	80040ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3308      	adds	r3, #8
 80040e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004100:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800410c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e5      	bne.n	80040de <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004116:	2b01      	cmp	r3, #1
 8004118:	d118      	bne.n	800414c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	60bb      	str	r3, [r7, #8]
   return(result);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f023 0310 	bic.w	r3, r3, #16
 800412e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	461a      	mov	r2, r3
 8004136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6979      	ldr	r1, [r7, #20]
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	613b      	str	r3, [r7, #16]
   return(result);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e6      	bne.n	800411a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004160:	bf00      	nop
 8004162:	3754      	adds	r7, #84	@ 0x54
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b090      	sub	sp, #64	@ 0x40
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004178:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b00      	cmp	r3, #0
 8004186:	d137      	bne.n	80041f8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418a:	2200      	movs	r2, #0
 800418c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	623b      	str	r3, [r7, #32]
   return(result);
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80041b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80041da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	69b9      	ldr	r1, [r7, #24]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	617b      	str	r3, [r7, #20]
   return(result);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e6      	bne.n	80041c4 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041f6:	e002      	b.n	80041fe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80041f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80041fa:	f7fc f983 	bl	8000504 <HAL_UART_TxCpltCallback>
}
 80041fe:	bf00      	nop
 8004200:	3740      	adds	r7, #64	@ 0x40
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff f9e5 	bl	80035e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b09c      	sub	sp, #112	@ 0x70
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d171      	bne.n	8004322 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800423e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004240:	2200      	movs	r2, #0
 8004242:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004256:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800425a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800425c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004264:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004266:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800426a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e6      	bne.n	8004246 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004298:	647a      	str	r2, [r7, #68]	@ 0x44
 800429a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800429e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	623b      	str	r3, [r7, #32]
   return(result);
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80042c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80042ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e5      	bne.n	80042ac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e2:	2220      	movs	r2, #32
 80042e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d118      	bne.n	8004322 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f023 0310 	bic.w	r3, r3, #16
 8004304:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	69b9      	ldr	r1, [r7, #24]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	617b      	str	r3, [r7, #20]
   return(result);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e6      	bne.n	80042f0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004324:	2200      	movs	r2, #0
 8004326:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800432a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800432c:	2b01      	cmp	r3, #1
 800432e:	d107      	bne.n	8004340 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004332:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004336:	4619      	mov	r1, r3
 8004338:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800433a:	f7ff f971 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800433e:	e002      	b.n	8004346 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004340:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004342:	f7fc f8f3 	bl	800052c <HAL_UART_RxCpltCallback>
}
 8004346:	bf00      	nop
 8004348:	3770      	adds	r7, #112	@ 0x70
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	2b01      	cmp	r3, #1
 8004368:	d109      	bne.n	800437e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	b29b      	uxth	r3, r3
 8004374:	4619      	mov	r1, r3
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff f952 	bl	8003620 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800437c:	e002      	b.n	8004384 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f7ff f93a 	bl	80035f8 <HAL_UART_RxHalfCpltCallback>
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800439e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b80      	cmp	r3, #128	@ 0x80
 80043b4:	d109      	bne.n	80043ca <UART_DMAError+0x3e>
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b21      	cmp	r3, #33	@ 0x21
 80043ba:	d106      	bne.n	80043ca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80043c4:	6978      	ldr	r0, [r7, #20]
 80043c6:	f7ff fe47 	bl	8004058 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d4:	2b40      	cmp	r3, #64	@ 0x40
 80043d6:	d109      	bne.n	80043ec <UART_DMAError+0x60>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b22      	cmp	r3, #34	@ 0x22
 80043dc:	d106      	bne.n	80043ec <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f7ff fe5c 	bl	80040a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f2:	f043 0210 	orr.w	r2, r3, #16
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043fc:	6978      	ldr	r0, [r7, #20]
 80043fe:	f7ff f905 	bl	800360c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004402:	bf00      	nop
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff f8ef 	bl	800360c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b088      	sub	sp, #32
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	60bb      	str	r3, [r7, #8]
   return(result);
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6979      	ldr	r1, [r7, #20]
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	613b      	str	r3, [r7, #16]
   return(result);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e6      	bne.n	800443e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2220      	movs	r2, #32
 8004474:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fc f841 	bl	8000504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004482:	bf00      	nop
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr

0800449e <memset>:
 800449e:	4402      	add	r2, r0
 80044a0:	4603      	mov	r3, r0
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d100      	bne.n	80044a8 <memset+0xa>
 80044a6:	4770      	bx	lr
 80044a8:	f803 1b01 	strb.w	r1, [r3], #1
 80044ac:	e7f9      	b.n	80044a2 <memset+0x4>
	...

080044b0 <__libc_init_array>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4d0d      	ldr	r5, [pc, #52]	@ (80044e8 <__libc_init_array+0x38>)
 80044b4:	4c0d      	ldr	r4, [pc, #52]	@ (80044ec <__libc_init_array+0x3c>)
 80044b6:	1b64      	subs	r4, r4, r5
 80044b8:	10a4      	asrs	r4, r4, #2
 80044ba:	2600      	movs	r6, #0
 80044bc:	42a6      	cmp	r6, r4
 80044be:	d109      	bne.n	80044d4 <__libc_init_array+0x24>
 80044c0:	4d0b      	ldr	r5, [pc, #44]	@ (80044f0 <__libc_init_array+0x40>)
 80044c2:	4c0c      	ldr	r4, [pc, #48]	@ (80044f4 <__libc_init_array+0x44>)
 80044c4:	f000 f818 	bl	80044f8 <_init>
 80044c8:	1b64      	subs	r4, r4, r5
 80044ca:	10a4      	asrs	r4, r4, #2
 80044cc:	2600      	movs	r6, #0
 80044ce:	42a6      	cmp	r6, r4
 80044d0:	d105      	bne.n	80044de <__libc_init_array+0x2e>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}
 80044d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d8:	4798      	blx	r3
 80044da:	3601      	adds	r6, #1
 80044dc:	e7ee      	b.n	80044bc <__libc_init_array+0xc>
 80044de:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e2:	4798      	blx	r3
 80044e4:	3601      	adds	r6, #1
 80044e6:	e7f2      	b.n	80044ce <__libc_init_array+0x1e>
 80044e8:	08004560 	.word	0x08004560
 80044ec:	08004560 	.word	0x08004560
 80044f0:	08004560 	.word	0x08004560
 80044f4:	08004564 	.word	0x08004564

080044f8 <_init>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	bf00      	nop
 80044fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fe:	bc08      	pop	{r3}
 8004500:	469e      	mov	lr, r3
 8004502:	4770      	bx	lr

08004504 <_fini>:
 8004504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004506:	bf00      	nop
 8004508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450a:	bc08      	pop	{r3}
 800450c:	469e      	mov	lr, r3
 800450e:	4770      	bx	lr
