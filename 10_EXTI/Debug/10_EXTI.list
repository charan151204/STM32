
10_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003674  08003674  00004674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003710  08003710  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003710  08003710  00004710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003718  08003718  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003718  08003718  00004718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800371c  0800371c  0000471c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003720  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003788  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003788  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a757  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000180d  00000000  00000000  0000f7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00011000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000642  00000000  00000000  00011838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273ef  00000000  00000000  00011e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a76b  00000000  00000000  00039269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f28fc  00000000  00000000  000439d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001362d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002820  00000000  00000000  00136314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00138b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800365c 	.word	0x0800365c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800365c 	.word	0x0800365c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:
UART_HandleTypeDef huart2;

void gpio_pc13_interrupt_init(void);
void uart2_init(void);

int __io_putchar(int ch) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f001 fbc9 	bl	8001d44 <HAL_UART_Transmit>
    return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000084 	.word	0x20000084

080005c0 <main>:


int main()
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    HAL_Init();
 80005c4:	f000 fa86 	bl	8000ad4 <HAL_Init>
    uart2_init();
 80005c8:	f000 f804 	bl	80005d4 <uart2_init>
    gpio_pc13_interrupt_init();
 80005cc:	f000 f85c 	bl	8000688 <gpio_pc13_interrupt_init>

    while(1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0x10>

080005d4 <uart2_init>:
    {

    }
}

void uart2_init(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80005da:	4b28      	ldr	r3, [pc, #160]	@ (800067c <uart2_init+0xa8>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005de:	4a27      	ldr	r2, [pc, #156]	@ (800067c <uart2_init+0xa8>)
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80005e6:	4b25      	ldr	r3, [pc, #148]	@ (800067c <uart2_init+0xa8>)
 80005e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b22      	ldr	r3, [pc, #136]	@ (800067c <uart2_init+0xa8>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a21      	ldr	r2, [pc, #132]	@ (800067c <uart2_init+0xa8>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <uart2_init+0xa8>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]


    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800061a:	230c      	movs	r3, #12
 800061c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800062a:	2307      	movs	r3, #7
 800062c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	4619      	mov	r1, r3
 8000634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000638:	f000 fbda 	bl	8000df0 <HAL_GPIO_Init>

    huart2.Instance = USART2;
 800063c:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <uart2_init+0xac>)
 800063e:	4a11      	ldr	r2, [pc, #68]	@ (8000684 <uart2_init+0xb0>)
 8000640:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <uart2_init+0xac>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0d      	ldr	r3, [pc, #52]	@ (8000680 <uart2_init+0xac>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <uart2_init+0xac>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <uart2_init+0xac>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <uart2_init+0xac>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <uart2_init+0xac>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <uart2_init+0xac>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 800066e:	4804      	ldr	r0, [pc, #16]	@ (8000680 <uart2_init+0xac>)
 8000670:	f001 fb1a 	bl	8001ca8 <HAL_UART_Init>
}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40021000 	.word	0x40021000
 8000680:	20000084 	.word	0x20000084
 8000684:	40004400 	.word	0x40004400

08000688 <gpio_pc13_interrupt_init>:


void gpio_pc13_interrupt_init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b2d      	ldr	r3, [pc, #180]	@ (8000754 <gpio_pc13_interrupt_init+0xcc>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000754 <gpio_pc13_interrupt_init+0xcc>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <gpio_pc13_interrupt_init+0xcc>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <gpio_pc13_interrupt_init+0xcc>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <gpio_pc13_interrupt_init+0xcc>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <gpio_pc13_interrupt_init+0xcc>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

    // Configure PC13 as input with interrupt on rising edge
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BTN_PORT, &GPIO_InitStruct);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4619      	mov	r1, r3
 80006e8:	481b      	ldr	r0, [pc, #108]	@ (8000758 <gpio_pc13_interrupt_init+0xd0>)
 80006ea:	f000 fb81 	bl	8000df0 <HAL_GPIO_Init>

    //configure PA0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ee:	2301      	movs	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070a:	f000 fb71 	bl	8000df0 <HAL_GPIO_Init>



    // Configure PA5 as output for LED
    GPIO_InitStruct.Pin = LED_PIN;
 800070e:	2320      	movs	r3, #32
 8000710:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	4619      	mov	r1, r3
 8000724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000728:	f000 fb62 	bl	8000df0 <HAL_GPIO_Init>


      HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2006      	movs	r0, #6
 8000732:	f000 fb26 	bl	8000d82 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000736:	2006      	movs	r0, #6
 8000738:	f000 fb3f 	bl	8000dba <HAL_NVIC_EnableIRQ>


    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2028      	movs	r0, #40	@ 0x28
 8000742:	f000 fb1e 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000746:	2028      	movs	r0, #40	@ 0x28
 8000748:	f000 fb37 	bl	8000dba <HAL_NVIC_EnableIRQ>
}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	48000800 	.word	0x48000800

0800075c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == GPIO_PIN_13) {
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800076c:	d107      	bne.n	800077e <HAL_GPIO_EXTI_Callback+0x22>
    	HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800076e:	2120      	movs	r1, #32
 8000770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000774:	f000 fce6 	bl	8001144 <HAL_GPIO_TogglePin>
        printf("Button 13 pressed ! \n\r");
 8000778:	4806      	ldr	r0, [pc, #24]	@ (8000794 <HAL_GPIO_EXTI_Callback+0x38>)
 800077a:	f002 f903 	bl	8002984 <iprintf>
    }

    if (GPIO_Pin == GPIO_PIN_0) {
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d102      	bne.n	800078a <HAL_GPIO_EXTI_Callback+0x2e>

        printf("Button 0 pressed ! \n\r");
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000786:	f002 f8fd 	bl	8002984 <iprintf>
    }
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	08003674 	.word	0x08003674
 8000798:	0800368c 	.word	0x0800368c

0800079c <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007a4:	f000 fce8 	bl	8001178 <HAL_GPIO_EXTI_IRQHandler>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <Error_Handler>:

void EXTI10_IRQHandler(void)
{
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
}
void Error_Handler(void) {
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
    __disable_irq();
    while (1) {
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <Error_Handler+0x8>

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c2:	4a0e      	ldr	r2, [pc, #56]	@ (80007fc <HAL_MspInit+0x44>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <HAL_MspInit+0x44>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007da:	4a08      	ldr	r2, [pc, #32]	@ (80007fc <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0ac      	sub	sp, #176	@ 0xb0
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2288      	movs	r2, #136	@ 0x88
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f002 f904 	bl	8002a2e <memset>
  if(huart->Instance==USART2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a21      	ldr	r2, [pc, #132]	@ (80008b0 <HAL_UART_MspInit+0xb0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d13b      	bne.n	80008a8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000830:	2302      	movs	r3, #2
 8000832:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000834:	2300      	movs	r3, #0
 8000836:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fd77 	bl	8001330 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000848:	f7ff ffb0 	bl	80007ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <HAL_UART_MspInit+0xb4>)
 800084e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000850:	4a18      	ldr	r2, [pc, #96]	@ (80008b4 <HAL_UART_MspInit+0xb4>)
 8000852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000856:	6593      	str	r3, [r2, #88]	@ 0x58
 8000858:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <HAL_UART_MspInit+0xb4>)
 800085a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <HAL_UART_MspInit+0xb4>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000868:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <HAL_UART_MspInit+0xb4>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000870:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <HAL_UART_MspInit+0xb4>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800087c:	230c      	movs	r3, #12
 800087e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000894:	2307      	movs	r3, #7
 8000896:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a4:	f000 faa4 	bl	8000df0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80008a8:	bf00      	nop
 80008aa:	37b0      	adds	r7, #176	@ 0xb0
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <UsageFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090e:	f000 f93d 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}

08000916 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e00a      	b.n	800093e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000928:	f3af 8000 	nop.w
 800092c:	4601      	mov	r1, r0
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	60ba      	str	r2, [r7, #8]
 8000934:	b2ca      	uxtb	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	3301      	adds	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	429a      	cmp	r2, r3
 8000944:	dbf0      	blt.n	8000928 <_read+0x12>
  }

  return len;
 8000946:	687b      	ldr	r3, [r7, #4]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	e009      	b.n	8000976 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	60ba      	str	r2, [r7, #8]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fe16 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	3301      	adds	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	429a      	cmp	r2, r3
 800097c:	dbf1      	blt.n	8000962 <_write+0x12>
  }
  return len;
 800097e:	687b      	ldr	r3, [r7, #4]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <_close>:

int _close(int file)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009b0:	605a      	str	r2, [r3, #4]
  return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_isatty>:

int _isatty(int file)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c8:	2301      	movs	r3, #1
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	60b9      	str	r1, [r7, #8]
 80009e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f8:	4a14      	ldr	r2, [pc, #80]	@ (8000a4c <_sbrk+0x5c>)
 80009fa:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <_sbrk+0x60>)
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a04:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d102      	bne.n	8000a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <_sbrk+0x64>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	@ (8000a58 <_sbrk+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d207      	bcs.n	8000a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a20:	f002 f854 	bl	8002acc <__errno>
 8000a24:	4603      	mov	r3, r0
 8000a26:	220c      	movs	r2, #12
 8000a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	e009      	b.n	8000a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a36:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a05      	ldr	r2, [pc, #20]	@ (8000a54 <_sbrk+0x64>)
 8000a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20018000 	.word	0x20018000
 8000a50:	00000400 	.word	0x00000400
 8000a54:	2000010c 	.word	0x2000010c
 8000a58:	20000260 	.word	0x20000260

08000a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a84:	f7ff ffea 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	@ (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 f813 	bl	8002ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab2:	f7ff fd85 	bl	80005c0 <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ac4:	08003720 	.word	0x08003720
  ldr r2, =_sbss
 8000ac8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000acc:	20000260 	.word	0x20000260

08000ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_2_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <HAL_Init+0x3c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b10 <HAL_Init+0x3c>)
 8000ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aea:	2003      	movs	r0, #3
 8000aec:	f000 f93e 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f000 f80f 	bl	8000b14 <HAL_InitTick>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d002      	beq.n	8000b02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	e001      	b.n	8000b06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b02:	f7ff fe59 	bl	80007b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b06:	79fb      	ldrb	r3, [r7, #7]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <HAL_InitTick+0x6c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d023      	beq.n	8000b70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b28:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <HAL_InitTick+0x70>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <HAL_InitTick+0x6c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f949 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10f      	bne.n	8000b6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d809      	bhi.n	8000b64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f000 f913 	bl	8000d82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_InitTick+0x74>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e007      	b.n	8000b74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e004      	b.n	8000b74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	e001      	b.n	8000b74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000110 	.word	0x20000110

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000110 	.word	0x20000110

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	@ (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	@ (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	@ (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	@ 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff29 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff3e 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff8e 	bl	8000cc0 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff31 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffa2 	bl	8000d28 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b087      	sub	sp, #28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfe:	e17f      	b.n	8001100 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	2101      	movs	r1, #1
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 8171 	beq.w	80010fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d005      	beq.n	8000e30 <HAL_GPIO_Init+0x40>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d130      	bne.n	8000e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e66:	2201      	movs	r2, #1
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	091b      	lsrs	r3, r3, #4
 8000e7c:	f003 0201 	and.w	r2, r3, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d118      	bne.n	8000ed0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	08db      	lsrs	r3, r3, #3
 8000eba:	f003 0201 	and.w	r2, r3, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d017      	beq.n	8000f0c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d123      	bne.n	8000f60 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	6939      	ldr	r1, [r7, #16]
 8000f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0203 	and.w	r2, r3, #3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80ac 	beq.w	80010fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <HAL_GPIO_Init+0x330>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8001120 <HAL_GPIO_Init+0x330>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fae:	4b5c      	ldr	r3, [pc, #368]	@ (8001120 <HAL_GPIO_Init+0x330>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fba:	4a5a      	ldr	r2, [pc, #360]	@ (8001124 <HAL_GPIO_Init+0x334>)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	220f      	movs	r2, #15
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fe4:	d025      	beq.n	8001032 <HAL_GPIO_Init+0x242>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8001128 <HAL_GPIO_Init+0x338>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d01f      	beq.n	800102e <HAL_GPIO_Init+0x23e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4e      	ldr	r2, [pc, #312]	@ (800112c <HAL_GPIO_Init+0x33c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d019      	beq.n	800102a <HAL_GPIO_Init+0x23a>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8001130 <HAL_GPIO_Init+0x340>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d013      	beq.n	8001026 <HAL_GPIO_Init+0x236>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4c      	ldr	r2, [pc, #304]	@ (8001134 <HAL_GPIO_Init+0x344>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00d      	beq.n	8001022 <HAL_GPIO_Init+0x232>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4b      	ldr	r2, [pc, #300]	@ (8001138 <HAL_GPIO_Init+0x348>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x22e>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4a      	ldr	r2, [pc, #296]	@ (800113c <HAL_GPIO_Init+0x34c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_GPIO_Init+0x22a>
 8001016:	2306      	movs	r3, #6
 8001018:	e00c      	b.n	8001034 <HAL_GPIO_Init+0x244>
 800101a:	2307      	movs	r3, #7
 800101c:	e00a      	b.n	8001034 <HAL_GPIO_Init+0x244>
 800101e:	2305      	movs	r3, #5
 8001020:	e008      	b.n	8001034 <HAL_GPIO_Init+0x244>
 8001022:	2304      	movs	r3, #4
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x244>
 8001026:	2303      	movs	r3, #3
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x244>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x244>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x244>
 8001032:	2300      	movs	r3, #0
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001044:	4937      	ldr	r1, [pc, #220]	@ (8001124 <HAL_GPIO_Init+0x334>)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001052:	4b3b      	ldr	r3, [pc, #236]	@ (8001140 <HAL_GPIO_Init+0x350>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001076:	4a32      	ldr	r2, [pc, #200]	@ (8001140 <HAL_GPIO_Init+0x350>)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800107c:	4b30      	ldr	r3, [pc, #192]	@ (8001140 <HAL_GPIO_Init+0x350>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010a0:	4a27      	ldr	r2, [pc, #156]	@ (8001140 <HAL_GPIO_Init+0x350>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <HAL_GPIO_Init+0x350>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001140 <HAL_GPIO_Init+0x350>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <HAL_GPIO_Init+0x350>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f4:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <HAL_GPIO_Init+0x350>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa22 f303 	lsr.w	r3, r2, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	f47f ae78 	bne.w	8000e00 <HAL_GPIO_Init+0x10>
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	40010000 	.word	0x40010000
 8001128:	48000400 	.word	0x48000400
 800112c:	48000800 	.word	0x48000800
 8001130:	48000c00 	.word	0x48000c00
 8001134:	48001000 	.word	0x48001000
 8001138:	48001400 	.word	0x48001400
 800113c:	48001800 	.word	0x48001800
 8001140:	40010400 	.word	0x40010400

08001144 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4013      	ands	r3, r2
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43d9      	mvns	r1, r3
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	400b      	ands	r3, r1
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800118e:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fae0 	bl	800075c <HAL_GPIO_EXTI_Callback>
  }
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	@ 0x24
 80011ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	2300      	movs	r3, #0
 80011b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b6:	4b3e      	ldr	r3, [pc, #248]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011c0:	4b3b      	ldr	r3, [pc, #236]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <HAL_RCC_GetSysClockFreq+0x34>
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	2b0c      	cmp	r3, #12
 80011d4:	d121      	bne.n	800121a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d11e      	bne.n	800121a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80011dc:	4b34      	ldr	r3, [pc, #208]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d107      	bne.n	80011f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80011e8:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80011ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011ee:	0a1b      	lsrs	r3, r3, #8
 80011f0:	f003 030f 	and.w	r3, r3, #15
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e005      	b.n	8001204 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001204:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10d      	bne.n	8001230 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	2b04      	cmp	r3, #4
 800121e:	d102      	bne.n	8001226 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001220:	4b25      	ldr	r3, [pc, #148]	@ (80012b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	e004      	b.n	8001230 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b08      	cmp	r3, #8
 800122a:	d101      	bne.n	8001230 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800122c:	4b23      	ldr	r3, [pc, #140]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x114>)
 800122e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	2b0c      	cmp	r3, #12
 8001234:	d134      	bne.n	80012a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b02      	cmp	r3, #2
 8001244:	d003      	beq.n	800124e <HAL_RCC_GetSysClockFreq+0xa6>
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d003      	beq.n	8001254 <HAL_RCC_GetSysClockFreq+0xac>
 800124c:	e005      	b.n	800125a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001250:	617b      	str	r3, [r7, #20]
      break;
 8001252:	e005      	b.n	8001260 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_RCC_GetSysClockFreq+0x114>)
 8001256:	617b      	str	r3, [r7, #20]
      break;
 8001258:	e002      	b.n	8001260 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	617b      	str	r3, [r7, #20]
      break;
 800125e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	3301      	adds	r3, #1
 800126c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	fb03 f202 	mul.w	r2, r3, r2
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	fbb2 f3f3 	udiv	r3, r2, r3
 8001284:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	0e5b      	lsrs	r3, r3, #25
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	3301      	adds	r3, #1
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80012a0:	69bb      	ldr	r3, [r7, #24]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	@ 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	080036ac 	.word	0x080036ac
 80012b8:	00f42400 	.word	0x00f42400
 80012bc:	007a1200 	.word	0x007a1200

080012c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000000 	.word	0x20000000

080012d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80012dc:	f7ff fff0 	bl	80012c0 <HAL_RCC_GetHCLKFreq>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	4904      	ldr	r1, [pc, #16]	@ (8001300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80012ee:	5ccb      	ldrb	r3, [r1, r3]
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	080036a4 	.word	0x080036a4

08001304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001308:	f7ff ffda 	bl	80012c0 <HAL_RCC_GetHCLKFreq>
 800130c:	4602      	mov	r2, r0
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	0adb      	lsrs	r3, r3, #11
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	4904      	ldr	r1, [pc, #16]	@ (800132c <HAL_RCC_GetPCLK2Freq+0x28>)
 800131a:	5ccb      	ldrb	r3, [r1, r3]
 800131c:	f003 031f 	and.w	r3, r3, #31
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000
 800132c:	080036a4 	.word	0x080036a4

08001330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001338:	2300      	movs	r3, #0
 800133a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800133c:	2300      	movs	r3, #0
 800133e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001348:	2b00      	cmp	r3, #0
 800134a:	d041      	beq.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001350:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001354:	d02a      	beq.n	80013ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001356:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800135a:	d824      	bhi.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800135c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001360:	d008      	beq.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001362:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001366:	d81e      	bhi.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00a      	beq.n	8001382 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800136c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001370:	d010      	beq.n	8001394 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001372:	e018      	b.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001374:	4b86      	ldr	r3, [pc, #536]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4a85      	ldr	r2, [pc, #532]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800137a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800137e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001380:	e015      	b.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3304      	adds	r3, #4
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fabb 	bl	8001904 <RCCEx_PLLSAI1_Config>
 800138e:	4603      	mov	r3, r0
 8001390:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001392:	e00c      	b.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3320      	adds	r3, #32
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fba6 	bl	8001aec <RCCEx_PLLSAI2_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80013a4:	e003      	b.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	74fb      	strb	r3, [r7, #19]
      break;
 80013aa:	e000      	b.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80013ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80013ae:	7cfb      	ldrb	r3, [r7, #19]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10b      	bne.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013b4:	4b76      	ldr	r3, [pc, #472]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80013c2:	4973      	ldr	r1, [pc, #460]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80013ca:	e001      	b.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80013cc:	7cfb      	ldrb	r3, [r7, #19]
 80013ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d041      	beq.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80013e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80013e4:	d02a      	beq.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80013e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80013ea:	d824      	bhi.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80013ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80013f0:	d008      	beq.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80013f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80013f6:	d81e      	bhi.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00a      	beq.n	8001412 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001400:	d010      	beq.n	8001424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001402:	e018      	b.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001404:	4b62      	ldr	r3, [pc, #392]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	4a61      	ldr	r2, [pc, #388]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800140a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800140e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001410:	e015      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3304      	adds	r3, #4
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fa73 	bl	8001904 <RCCEx_PLLSAI1_Config>
 800141e:	4603      	mov	r3, r0
 8001420:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001422:	e00c      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3320      	adds	r3, #32
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fb5e 	bl	8001aec <RCCEx_PLLSAI2_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001434:	e003      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	74fb      	strb	r3, [r7, #19]
      break;
 800143a:	e000      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800143c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800143e:	7cfb      	ldrb	r3, [r7, #19]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001444:	4b52      	ldr	r3, [pc, #328]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001452:	494f      	ldr	r1, [pc, #316]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001454:	4313      	orrs	r3, r2
 8001456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800145a:	e001      	b.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800145c:	7cfb      	ldrb	r3, [r7, #19]
 800145e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a0 	beq.w	80015ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001472:	4b47      	ldr	r3, [pc, #284]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001482:	2300      	movs	r3, #0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00d      	beq.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	4b41      	ldr	r3, [pc, #260]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148c:	4a40      	ldr	r2, [pc, #256]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001492:	6593      	str	r3, [r2, #88]	@ 0x58
 8001494:	4b3e      	ldr	r3, [pc, #248]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a0:	2301      	movs	r3, #1
 80014a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001594 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a3a      	ldr	r2, [pc, #232]	@ (8001594 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80014b0:	f7ff fb80 	bl	8000bb4 <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80014b6:	e009      	b.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b8:	f7ff fb7c 	bl	8000bb4 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d902      	bls.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	74fb      	strb	r3, [r7, #19]
        break;
 80014ca:	e005      	b.n	80014d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80014cc:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0ef      	beq.n	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80014d8:	7cfb      	ldrb	r3, [r7, #19]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d15c      	bne.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80014de:	4b2c      	ldr	r3, [pc, #176]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80014e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01f      	beq.n	8001530 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d019      	beq.n	8001530 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80014fc:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001506:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800150e:	4a20      	ldr	r2, [pc, #128]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151e:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001528:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d016      	beq.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153a:	f7ff fb3b 	bl	8000bb4 <HAL_GetTick>
 800153e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001540:	e00b      	b.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f7ff fb37 	bl	8000bb4 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001550:	4293      	cmp	r3, r2
 8001552:	d902      	bls.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	74fb      	strb	r3, [r7, #19]
            break;
 8001558:	e006      	b.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ec      	beq.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001568:	7cfb      	ldrb	r3, [r7, #19]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800156e:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001574:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800157e:	4904      	ldr	r1, [pc, #16]	@ (8001590 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001580:	4313      	orrs	r3, r2
 8001582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001586:	e009      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001588:	7cfb      	ldrb	r3, [r7, #19]
 800158a:	74bb      	strb	r3, [r7, #18]
 800158c:	e006      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800159c:	7c7b      	ldrb	r3, [r7, #17]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d105      	bne.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a2:	4b9e      	ldr	r3, [pc, #632]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a6:	4a9d      	ldr	r2, [pc, #628]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015ba:	4b98      	ldr	r3, [pc, #608]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015c0:	f023 0203 	bic.w	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c8:	4994      	ldr	r1, [pc, #592]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00a      	beq.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015dc:	4b8f      	ldr	r3, [pc, #572]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e2:	f023 020c 	bic.w	r2, r3, #12
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ea:	498c      	ldr	r1, [pc, #560]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80015fe:	4b87      	ldr	r3, [pc, #540]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001604:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160c:	4983      	ldr	r1, [pc, #524]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800160e:	4313      	orrs	r3, r2
 8001610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00a      	beq.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001620:	4b7e      	ldr	r3, [pc, #504]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	497b      	ldr	r1, [pc, #492]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001630:	4313      	orrs	r3, r2
 8001632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001642:	4b76      	ldr	r3, [pc, #472]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001650:	4972      	ldr	r1, [pc, #456]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001652:	4313      	orrs	r3, r2
 8001654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00a      	beq.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001664:	4b6d      	ldr	r3, [pc, #436]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001672:	496a      	ldr	r1, [pc, #424]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001674:	4313      	orrs	r3, r2
 8001676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00a      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001686:	4b65      	ldr	r3, [pc, #404]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001694:	4961      	ldr	r1, [pc, #388]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001696:	4313      	orrs	r3, r2
 8001698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00a      	beq.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80016a8:	4b5c      	ldr	r3, [pc, #368]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b6:	4959      	ldr	r1, [pc, #356]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00a      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016ca:	4b54      	ldr	r3, [pc, #336]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80016cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016d8:	4950      	ldr	r1, [pc, #320]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00a      	beq.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80016ec:	4b4b      	ldr	r3, [pc, #300]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fa:	4948      	ldr	r1, [pc, #288]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00a      	beq.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800170e:	4b43      	ldr	r3, [pc, #268]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001714:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171c:	493f      	ldr	r1, [pc, #252]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800171e:	4313      	orrs	r3, r2
 8001720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d028      	beq.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001730:	4b3a      	ldr	r3, [pc, #232]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001736:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800173e:	4937      	ldr	r1, [pc, #220]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001740:	4313      	orrs	r3, r2
 8001742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800174a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800174e:	d106      	bne.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001750:	4b32      	ldr	r3, [pc, #200]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a31      	ldr	r2, [pc, #196]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800175a:	60d3      	str	r3, [r2, #12]
 800175c:	e011      	b.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001762:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001766:	d10c      	bne.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3304      	adds	r3, #4
 800176c:	2101      	movs	r1, #1
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f8c8 	bl	8001904 <RCCEx_PLLSAI1_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001778:	7cfb      	ldrb	r3, [r7, #19]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800177e:	7cfb      	ldrb	r3, [r7, #19]
 8001780:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d028      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800178e:	4b23      	ldr	r3, [pc, #140]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001794:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179c:	491f      	ldr	r1, [pc, #124]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80017ac:	d106      	bne.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80017ae:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	4a1a      	ldr	r2, [pc, #104]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80017b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80017b8:	60d3      	str	r3, [r2, #12]
 80017ba:	e011      	b.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	3304      	adds	r3, #4
 80017ca:	2101      	movs	r1, #1
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 f899 	bl	8001904 <RCCEx_PLLSAI1_Config>
 80017d2:	4603      	mov	r3, r0
 80017d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80017d6:	7cfb      	ldrb	r3, [r7, #19]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80017dc:	7cfb      	ldrb	r3, [r7, #19]
 80017de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d02b      	beq.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80017ec:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017fa:	4908      	ldr	r1, [pc, #32]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800180a:	d109      	bne.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800180c:	4b03      	ldr	r3, [pc, #12]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4a02      	ldr	r2, [pc, #8]	@ (800181c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001816:	60d3      	str	r3, [r2, #12]
 8001818:	e014      	b.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001824:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001828:	d10c      	bne.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3304      	adds	r3, #4
 800182e:	2101      	movs	r1, #1
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f867 	bl	8001904 <RCCEx_PLLSAI1_Config>
 8001836:	4603      	mov	r3, r0
 8001838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800183a:	7cfb      	ldrb	r3, [r7, #19]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8001840:	7cfb      	ldrb	r3, [r7, #19]
 8001842:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d02f      	beq.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001850:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800185e:	4928      	ldr	r1, [pc, #160]	@ (8001900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001860:	4313      	orrs	r3, r2
 8001862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800186a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800186e:	d10d      	bne.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3304      	adds	r3, #4
 8001874:	2102      	movs	r1, #2
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f844 	bl	8001904 <RCCEx_PLLSAI1_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001880:	7cfb      	ldrb	r3, [r7, #19]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d014      	beq.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001886:	7cfb      	ldrb	r3, [r7, #19]
 8001888:	74bb      	strb	r3, [r7, #18]
 800188a:	e011      	b.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001890:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001894:	d10c      	bne.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3320      	adds	r3, #32
 800189a:	2102      	movs	r1, #2
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f925 	bl	8001aec <RCCEx_PLLSAI2_Config>
 80018a2:	4603      	mov	r3, r0
 80018a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80018a6:	7cfb      	ldrb	r3, [r7, #19]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80018ac:	7cfb      	ldrb	r3, [r7, #19]
 80018ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00a      	beq.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80018bc:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80018ca:	490d      	ldr	r1, [pc, #52]	@ (8001900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00b      	beq.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80018de:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80018e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80018ee:	4904      	ldr	r1, [pc, #16]	@ (8001900 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80018f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000

08001904 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001912:	4b75      	ldr	r3, [pc, #468]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d018      	beq.n	8001950 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800191e:	4b72      	ldr	r3, [pc, #456]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d10d      	bne.n	800194a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
       ||
 8001932:	2b00      	cmp	r3, #0
 8001934:	d009      	beq.n	800194a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001936:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	1c5a      	adds	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
       ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d047      	beq.n	80019da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	e044      	b.n	80019da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d018      	beq.n	800198a <RCCEx_PLLSAI1_Config+0x86>
 8001958:	2b03      	cmp	r3, #3
 800195a:	d825      	bhi.n	80019a8 <RCCEx_PLLSAI1_Config+0xa4>
 800195c:	2b01      	cmp	r3, #1
 800195e:	d002      	beq.n	8001966 <RCCEx_PLLSAI1_Config+0x62>
 8001960:	2b02      	cmp	r3, #2
 8001962:	d009      	beq.n	8001978 <RCCEx_PLLSAI1_Config+0x74>
 8001964:	e020      	b.n	80019a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001966:	4b60      	ldr	r3, [pc, #384]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11d      	bne.n	80019ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001976:	e01a      	b.n	80019ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001978:	4b5b      	ldr	r3, [pc, #364]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d116      	bne.n	80019b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001988:	e013      	b.n	80019b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800198a:	4b57      	ldr	r3, [pc, #348]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001996:	4b54      	ldr	r3, [pc, #336]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80019a6:	e006      	b.n	80019b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
      break;
 80019ac:	e004      	b.n	80019b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80019ae:	bf00      	nop
 80019b0:	e002      	b.n	80019b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80019b2:	bf00      	nop
 80019b4:	e000      	b.n	80019b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80019b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10d      	bne.n	80019da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80019be:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6819      	ldr	r1, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	430b      	orrs	r3, r1
 80019d4:	4944      	ldr	r1, [pc, #272]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d17d      	bne.n	8001adc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80019e0:	4b41      	ldr	r3, [pc, #260]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a40      	ldr	r2, [pc, #256]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80019e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80019ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ec:	f7ff f8e2 	bl	8000bb4 <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80019f2:	e009      	b.n	8001a08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80019f4:	f7ff f8de 	bl	8000bb4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d902      	bls.n	8001a08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	73fb      	strb	r3, [r7, #15]
        break;
 8001a06:	e005      	b.n	8001a14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001a08:	4b37      	ldr	r3, [pc, #220]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1ef      	bne.n	80019f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d160      	bne.n	8001adc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d111      	bne.n	8001a44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001a20:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8001a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6892      	ldr	r2, [r2, #8]
 8001a30:	0211      	lsls	r1, r2, #8
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68d2      	ldr	r2, [r2, #12]
 8001a36:	0912      	lsrs	r2, r2, #4
 8001a38:	0452      	lsls	r2, r2, #17
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	492a      	ldr	r1, [pc, #168]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	610b      	str	r3, [r1, #16]
 8001a42:	e027      	b.n	8001a94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d112      	bne.n	8001a70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001a4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8001a52:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6892      	ldr	r2, [r2, #8]
 8001a5a:	0211      	lsls	r1, r2, #8
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6912      	ldr	r2, [r2, #16]
 8001a60:	0852      	lsrs	r2, r2, #1
 8001a62:	3a01      	subs	r2, #1
 8001a64:	0552      	lsls	r2, r2, #21
 8001a66:	430a      	orrs	r2, r1
 8001a68:	491f      	ldr	r1, [pc, #124]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	610b      	str	r3, [r1, #16]
 8001a6e:	e011      	b.n	8001a94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001a70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001a78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6892      	ldr	r2, [r2, #8]
 8001a80:	0211      	lsls	r1, r2, #8
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6952      	ldr	r2, [r2, #20]
 8001a86:	0852      	lsrs	r2, r2, #1
 8001a88:	3a01      	subs	r2, #1
 8001a8a:	0652      	lsls	r2, r2, #25
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	4916      	ldr	r1, [pc, #88]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a13      	ldr	r2, [pc, #76]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001a9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa0:	f7ff f888 	bl	8000bb4 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001aa6:	e009      	b.n	8001abc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001aa8:	f7ff f884 	bl	8000bb4 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d902      	bls.n	8001abc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8001aba:	e005      	b.n	8001ac8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0ef      	beq.n	8001aa8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	4904      	ldr	r1, [pc, #16]	@ (8001ae8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000

08001aec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001afa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d018      	beq.n	8001b38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001b06:	4b67      	ldr	r3, [pc, #412]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f003 0203 	and.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d10d      	bne.n	8001b32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
       ||
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001b1e:	4b61      	ldr	r3, [pc, #388]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	091b      	lsrs	r3, r3, #4
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
       ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d047      	beq.n	8001bc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	e044      	b.n	8001bc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d018      	beq.n	8001b72 <RCCEx_PLLSAI2_Config+0x86>
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d825      	bhi.n	8001b90 <RCCEx_PLLSAI2_Config+0xa4>
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d002      	beq.n	8001b4e <RCCEx_PLLSAI2_Config+0x62>
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d009      	beq.n	8001b60 <RCCEx_PLLSAI2_Config+0x74>
 8001b4c:	e020      	b.n	8001b90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001b4e:	4b55      	ldr	r3, [pc, #340]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11d      	bne.n	8001b96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b5e:	e01a      	b.n	8001b96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001b60:	4b50      	ldr	r3, [pc, #320]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d116      	bne.n	8001b9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b70:	e013      	b.n	8001b9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001b72:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001b7e:	4b49      	ldr	r3, [pc, #292]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001b8e:	e006      	b.n	8001b9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
      break;
 8001b94:	e004      	b.n	8001ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001b96:	bf00      	nop
 8001b98:	e002      	b.n	8001ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001b9a:	bf00      	nop
 8001b9c:	e000      	b.n	8001ba0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001b9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	4939      	ldr	r1, [pc, #228]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d167      	bne.n	8001c98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001bc8:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a35      	ldr	r2, [pc, #212]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd4:	f7fe ffee 	bl	8000bb4 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001bda:	e009      	b.n	8001bf0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001bdc:	f7fe ffea 	bl	8000bb4 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d902      	bls.n	8001bf0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	73fb      	strb	r3, [r7, #15]
        break;
 8001bee:	e005      	b.n	8001bfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ef      	bne.n	8001bdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d14a      	bne.n	8001c98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d111      	bne.n	8001c2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001c08:	4b26      	ldr	r3, [pc, #152]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8001c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6892      	ldr	r2, [r2, #8]
 8001c18:	0211      	lsls	r1, r2, #8
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68d2      	ldr	r2, [r2, #12]
 8001c1e:	0912      	lsrs	r2, r2, #4
 8001c20:	0452      	lsls	r2, r2, #17
 8001c22:	430a      	orrs	r2, r1
 8001c24:	491f      	ldr	r1, [pc, #124]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	614b      	str	r3, [r1, #20]
 8001c2a:	e011      	b.n	8001c50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001c34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6892      	ldr	r2, [r2, #8]
 8001c3c:	0211      	lsls	r1, r2, #8
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6912      	ldr	r2, [r2, #16]
 8001c42:	0852      	lsrs	r2, r2, #1
 8001c44:	3a01      	subs	r2, #1
 8001c46:	0652      	lsls	r2, r2, #25
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	4916      	ldr	r1, [pc, #88]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a13      	ldr	r2, [pc, #76]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5c:	f7fe ffaa 	bl	8000bb4 <HAL_GetTick>
 8001c60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001c62:	e009      	b.n	8001c78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001c64:	f7fe ffa6 	bl	8000bb4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d902      	bls.n	8001c78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	73fb      	strb	r3, [r7, #15]
          break;
 8001c76:	e005      	b.n	8001c84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001c78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ef      	beq.n	8001c64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	4904      	ldr	r1, [pc, #16]	@ (8001ca4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e040      	b.n	8001d3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fd98 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	@ 0x24
 8001cd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fb6a 	bl	80023c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8af 	bl	8001e58 <UART_SetConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e01b      	b.n	8001d3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fbe9 	bl	800250c <UART_CheckIdleState>
 8001d3a:	4603      	mov	r3, r0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	@ 0x28
 8001d48:	af02      	add	r7, sp, #8
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d177      	bne.n	8001e4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <HAL_UART_Transmit+0x24>
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e070      	b.n	8001e4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2221      	movs	r2, #33	@ 0x21
 8001d78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d7a:	f7fe ff1b 	bl	8000bb4 <HAL_GetTick>
 8001d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	88fa      	ldrh	r2, [r7, #6]
 8001d84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	88fa      	ldrh	r2, [r7, #6]
 8001d8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d98:	d108      	bne.n	8001dac <HAL_UART_Transmit+0x68>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d104      	bne.n	8001dac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	e003      	b.n	8001db4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001db4:	e02f      	b.n	8001e16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2180      	movs	r1, #128	@ 0x80
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fc4b 	bl	800265c <UART_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e03b      	b.n	8001e4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	881a      	ldrh	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001de8:	b292      	uxth	r2, r2
 8001dea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	3302      	adds	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	e007      	b.n	8001e04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	781a      	ldrb	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1c9      	bne.n	8001db6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2140      	movs	r1, #64	@ 0x40
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f000 fc15 	bl	800265c <UART_WaitOnFlagUntilTimeout>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e005      	b.n	8001e4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2220      	movs	r2, #32
 8001e46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8001e4c:	2302      	movs	r3, #2
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3720      	adds	r7, #32
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e5c:	b08a      	sub	sp, #40	@ 0x28
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4ba4      	ldr	r3, [pc, #656]	@ (8002118 <UART_SetConfig+0x2c0>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	6812      	ldr	r2, [r2, #0]
 8001e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a99      	ldr	r2, [pc, #612]	@ (800211c <UART_SetConfig+0x2c4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a90      	ldr	r2, [pc, #576]	@ (8002120 <UART_SetConfig+0x2c8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d126      	bne.n	8001f30 <UART_SetConfig+0xd8>
 8001ee2:	4b90      	ldr	r3, [pc, #576]	@ (8002124 <UART_SetConfig+0x2cc>)
 8001ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d81b      	bhi.n	8001f28 <UART_SetConfig+0xd0>
 8001ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef8 <UART_SetConfig+0xa0>)
 8001ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef6:	bf00      	nop
 8001ef8:	08001f09 	.word	0x08001f09
 8001efc:	08001f19 	.word	0x08001f19
 8001f00:	08001f11 	.word	0x08001f11
 8001f04:	08001f21 	.word	0x08001f21
 8001f08:	2301      	movs	r3, #1
 8001f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f0e:	e116      	b.n	800213e <UART_SetConfig+0x2e6>
 8001f10:	2302      	movs	r3, #2
 8001f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f16:	e112      	b.n	800213e <UART_SetConfig+0x2e6>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f1e:	e10e      	b.n	800213e <UART_SetConfig+0x2e6>
 8001f20:	2308      	movs	r3, #8
 8001f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f26:	e10a      	b.n	800213e <UART_SetConfig+0x2e6>
 8001f28:	2310      	movs	r3, #16
 8001f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f2e:	e106      	b.n	800213e <UART_SetConfig+0x2e6>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a7c      	ldr	r2, [pc, #496]	@ (8002128 <UART_SetConfig+0x2d0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d138      	bne.n	8001fac <UART_SetConfig+0x154>
 8001f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002124 <UART_SetConfig+0x2cc>)
 8001f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b0c      	cmp	r3, #12
 8001f46:	d82d      	bhi.n	8001fa4 <UART_SetConfig+0x14c>
 8001f48:	a201      	add	r2, pc, #4	@ (adr r2, 8001f50 <UART_SetConfig+0xf8>)
 8001f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4e:	bf00      	nop
 8001f50:	08001f85 	.word	0x08001f85
 8001f54:	08001fa5 	.word	0x08001fa5
 8001f58:	08001fa5 	.word	0x08001fa5
 8001f5c:	08001fa5 	.word	0x08001fa5
 8001f60:	08001f95 	.word	0x08001f95
 8001f64:	08001fa5 	.word	0x08001fa5
 8001f68:	08001fa5 	.word	0x08001fa5
 8001f6c:	08001fa5 	.word	0x08001fa5
 8001f70:	08001f8d 	.word	0x08001f8d
 8001f74:	08001fa5 	.word	0x08001fa5
 8001f78:	08001fa5 	.word	0x08001fa5
 8001f7c:	08001fa5 	.word	0x08001fa5
 8001f80:	08001f9d 	.word	0x08001f9d
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f8a:	e0d8      	b.n	800213e <UART_SetConfig+0x2e6>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f92:	e0d4      	b.n	800213e <UART_SetConfig+0x2e6>
 8001f94:	2304      	movs	r3, #4
 8001f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f9a:	e0d0      	b.n	800213e <UART_SetConfig+0x2e6>
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fa2:	e0cc      	b.n	800213e <UART_SetConfig+0x2e6>
 8001fa4:	2310      	movs	r3, #16
 8001fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001faa:	e0c8      	b.n	800213e <UART_SetConfig+0x2e6>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a5e      	ldr	r2, [pc, #376]	@ (800212c <UART_SetConfig+0x2d4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d125      	bne.n	8002002 <UART_SetConfig+0x1aa>
 8001fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8002124 <UART_SetConfig+0x2cc>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001fc0:	2b30      	cmp	r3, #48	@ 0x30
 8001fc2:	d016      	beq.n	8001ff2 <UART_SetConfig+0x19a>
 8001fc4:	2b30      	cmp	r3, #48	@ 0x30
 8001fc6:	d818      	bhi.n	8001ffa <UART_SetConfig+0x1a2>
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d00a      	beq.n	8001fe2 <UART_SetConfig+0x18a>
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	d814      	bhi.n	8001ffa <UART_SetConfig+0x1a2>
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <UART_SetConfig+0x182>
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	d008      	beq.n	8001fea <UART_SetConfig+0x192>
 8001fd8:	e00f      	b.n	8001ffa <UART_SetConfig+0x1a2>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fe0:	e0ad      	b.n	800213e <UART_SetConfig+0x2e6>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fe8:	e0a9      	b.n	800213e <UART_SetConfig+0x2e6>
 8001fea:	2304      	movs	r3, #4
 8001fec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ff0:	e0a5      	b.n	800213e <UART_SetConfig+0x2e6>
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ff8:	e0a1      	b.n	800213e <UART_SetConfig+0x2e6>
 8001ffa:	2310      	movs	r3, #16
 8001ffc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002000:	e09d      	b.n	800213e <UART_SetConfig+0x2e6>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a4a      	ldr	r2, [pc, #296]	@ (8002130 <UART_SetConfig+0x2d8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d125      	bne.n	8002058 <UART_SetConfig+0x200>
 800200c:	4b45      	ldr	r3, [pc, #276]	@ (8002124 <UART_SetConfig+0x2cc>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002012:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002016:	2bc0      	cmp	r3, #192	@ 0xc0
 8002018:	d016      	beq.n	8002048 <UART_SetConfig+0x1f0>
 800201a:	2bc0      	cmp	r3, #192	@ 0xc0
 800201c:	d818      	bhi.n	8002050 <UART_SetConfig+0x1f8>
 800201e:	2b80      	cmp	r3, #128	@ 0x80
 8002020:	d00a      	beq.n	8002038 <UART_SetConfig+0x1e0>
 8002022:	2b80      	cmp	r3, #128	@ 0x80
 8002024:	d814      	bhi.n	8002050 <UART_SetConfig+0x1f8>
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <UART_SetConfig+0x1d8>
 800202a:	2b40      	cmp	r3, #64	@ 0x40
 800202c:	d008      	beq.n	8002040 <UART_SetConfig+0x1e8>
 800202e:	e00f      	b.n	8002050 <UART_SetConfig+0x1f8>
 8002030:	2300      	movs	r3, #0
 8002032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002036:	e082      	b.n	800213e <UART_SetConfig+0x2e6>
 8002038:	2302      	movs	r3, #2
 800203a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800203e:	e07e      	b.n	800213e <UART_SetConfig+0x2e6>
 8002040:	2304      	movs	r3, #4
 8002042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002046:	e07a      	b.n	800213e <UART_SetConfig+0x2e6>
 8002048:	2308      	movs	r3, #8
 800204a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800204e:	e076      	b.n	800213e <UART_SetConfig+0x2e6>
 8002050:	2310      	movs	r3, #16
 8002052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002056:	e072      	b.n	800213e <UART_SetConfig+0x2e6>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a35      	ldr	r2, [pc, #212]	@ (8002134 <UART_SetConfig+0x2dc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12a      	bne.n	80020b8 <UART_SetConfig+0x260>
 8002062:	4b30      	ldr	r3, [pc, #192]	@ (8002124 <UART_SetConfig+0x2cc>)
 8002064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800206c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002070:	d01a      	beq.n	80020a8 <UART_SetConfig+0x250>
 8002072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002076:	d81b      	bhi.n	80020b0 <UART_SetConfig+0x258>
 8002078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800207c:	d00c      	beq.n	8002098 <UART_SetConfig+0x240>
 800207e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002082:	d815      	bhi.n	80020b0 <UART_SetConfig+0x258>
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <UART_SetConfig+0x238>
 8002088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800208c:	d008      	beq.n	80020a0 <UART_SetConfig+0x248>
 800208e:	e00f      	b.n	80020b0 <UART_SetConfig+0x258>
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002096:	e052      	b.n	800213e <UART_SetConfig+0x2e6>
 8002098:	2302      	movs	r3, #2
 800209a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800209e:	e04e      	b.n	800213e <UART_SetConfig+0x2e6>
 80020a0:	2304      	movs	r3, #4
 80020a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020a6:	e04a      	b.n	800213e <UART_SetConfig+0x2e6>
 80020a8:	2308      	movs	r3, #8
 80020aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020ae:	e046      	b.n	800213e <UART_SetConfig+0x2e6>
 80020b0:	2310      	movs	r3, #16
 80020b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020b6:	e042      	b.n	800213e <UART_SetConfig+0x2e6>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a17      	ldr	r2, [pc, #92]	@ (800211c <UART_SetConfig+0x2c4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d13a      	bne.n	8002138 <UART_SetConfig+0x2e0>
 80020c2:	4b18      	ldr	r3, [pc, #96]	@ (8002124 <UART_SetConfig+0x2cc>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80020cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80020d0:	d01a      	beq.n	8002108 <UART_SetConfig+0x2b0>
 80020d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80020d6:	d81b      	bhi.n	8002110 <UART_SetConfig+0x2b8>
 80020d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020dc:	d00c      	beq.n	80020f8 <UART_SetConfig+0x2a0>
 80020de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020e2:	d815      	bhi.n	8002110 <UART_SetConfig+0x2b8>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <UART_SetConfig+0x298>
 80020e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ec:	d008      	beq.n	8002100 <UART_SetConfig+0x2a8>
 80020ee:	e00f      	b.n	8002110 <UART_SetConfig+0x2b8>
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020f6:	e022      	b.n	800213e <UART_SetConfig+0x2e6>
 80020f8:	2302      	movs	r3, #2
 80020fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020fe:	e01e      	b.n	800213e <UART_SetConfig+0x2e6>
 8002100:	2304      	movs	r3, #4
 8002102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002106:	e01a      	b.n	800213e <UART_SetConfig+0x2e6>
 8002108:	2308      	movs	r3, #8
 800210a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800210e:	e016      	b.n	800213e <UART_SetConfig+0x2e6>
 8002110:	2310      	movs	r3, #16
 8002112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002116:	e012      	b.n	800213e <UART_SetConfig+0x2e6>
 8002118:	efff69f3 	.word	0xefff69f3
 800211c:	40008000 	.word	0x40008000
 8002120:	40013800 	.word	0x40013800
 8002124:	40021000 	.word	0x40021000
 8002128:	40004400 	.word	0x40004400
 800212c:	40004800 	.word	0x40004800
 8002130:	40004c00 	.word	0x40004c00
 8002134:	40005000 	.word	0x40005000
 8002138:	2310      	movs	r3, #16
 800213a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a9f      	ldr	r2, [pc, #636]	@ (80023c0 <UART_SetConfig+0x568>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d17a      	bne.n	800223e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002148:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800214c:	2b08      	cmp	r3, #8
 800214e:	d824      	bhi.n	800219a <UART_SetConfig+0x342>
 8002150:	a201      	add	r2, pc, #4	@ (adr r2, 8002158 <UART_SetConfig+0x300>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	0800217d 	.word	0x0800217d
 800215c:	0800219b 	.word	0x0800219b
 8002160:	08002185 	.word	0x08002185
 8002164:	0800219b 	.word	0x0800219b
 8002168:	0800218b 	.word	0x0800218b
 800216c:	0800219b 	.word	0x0800219b
 8002170:	0800219b 	.word	0x0800219b
 8002174:	0800219b 	.word	0x0800219b
 8002178:	08002193 	.word	0x08002193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800217c:	f7ff f8ac 	bl	80012d8 <HAL_RCC_GetPCLK1Freq>
 8002180:	61f8      	str	r0, [r7, #28]
        break;
 8002182:	e010      	b.n	80021a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002184:	4b8f      	ldr	r3, [pc, #572]	@ (80023c4 <UART_SetConfig+0x56c>)
 8002186:	61fb      	str	r3, [r7, #28]
        break;
 8002188:	e00d      	b.n	80021a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800218a:	f7ff f80d 	bl	80011a8 <HAL_RCC_GetSysClockFreq>
 800218e:	61f8      	str	r0, [r7, #28]
        break;
 8002190:	e009      	b.n	80021a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002196:	61fb      	str	r3, [r7, #28]
        break;
 8002198:	e005      	b.n	80021a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80021a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80fb 	beq.w	80023a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d305      	bcc.n	80021ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d903      	bls.n	80021d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80021d0:	e0e8      	b.n	80023a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	2200      	movs	r2, #0
 80021d6:	461c      	mov	r4, r3
 80021d8:	4615      	mov	r5, r2
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	022b      	lsls	r3, r5, #8
 80021e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80021e8:	0222      	lsls	r2, r4, #8
 80021ea:	68f9      	ldr	r1, [r7, #12]
 80021ec:	6849      	ldr	r1, [r1, #4]
 80021ee:	0849      	lsrs	r1, r1, #1
 80021f0:	2000      	movs	r0, #0
 80021f2:	4688      	mov	r8, r1
 80021f4:	4681      	mov	r9, r0
 80021f6:	eb12 0a08 	adds.w	sl, r2, r8
 80021fa:	eb43 0b09 	adc.w	fp, r3, r9
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800220c:	4650      	mov	r0, sl
 800220e:	4659      	mov	r1, fp
 8002210:	f7fe f82e 	bl	8000270 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4613      	mov	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002222:	d308      	bcc.n	8002236 <UART_SetConfig+0x3de>
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800222a:	d204      	bcs.n	8002236 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	e0b6      	b.n	80023a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800223c:	e0b2      	b.n	80023a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002246:	d15e      	bne.n	8002306 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002248:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800224c:	2b08      	cmp	r3, #8
 800224e:	d828      	bhi.n	80022a2 <UART_SetConfig+0x44a>
 8002250:	a201      	add	r2, pc, #4	@ (adr r2, 8002258 <UART_SetConfig+0x400>)
 8002252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002256:	bf00      	nop
 8002258:	0800227d 	.word	0x0800227d
 800225c:	08002285 	.word	0x08002285
 8002260:	0800228d 	.word	0x0800228d
 8002264:	080022a3 	.word	0x080022a3
 8002268:	08002293 	.word	0x08002293
 800226c:	080022a3 	.word	0x080022a3
 8002270:	080022a3 	.word	0x080022a3
 8002274:	080022a3 	.word	0x080022a3
 8002278:	0800229b 	.word	0x0800229b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800227c:	f7ff f82c 	bl	80012d8 <HAL_RCC_GetPCLK1Freq>
 8002280:	61f8      	str	r0, [r7, #28]
        break;
 8002282:	e014      	b.n	80022ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002284:	f7ff f83e 	bl	8001304 <HAL_RCC_GetPCLK2Freq>
 8002288:	61f8      	str	r0, [r7, #28]
        break;
 800228a:	e010      	b.n	80022ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800228c:	4b4d      	ldr	r3, [pc, #308]	@ (80023c4 <UART_SetConfig+0x56c>)
 800228e:	61fb      	str	r3, [r7, #28]
        break;
 8002290:	e00d      	b.n	80022ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002292:	f7fe ff89 	bl	80011a8 <HAL_RCC_GetSysClockFreq>
 8002296:	61f8      	str	r0, [r7, #28]
        break;
 8002298:	e009      	b.n	80022ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800229a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800229e:	61fb      	str	r3, [r7, #28]
        break;
 80022a0:	e005      	b.n	80022ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80022ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d077      	beq.n	80023a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005a      	lsls	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	441a      	add	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b0f      	cmp	r3, #15
 80022ce:	d916      	bls.n	80022fe <UART_SetConfig+0x4a6>
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d6:	d212      	bcs.n	80022fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f023 030f 	bic.w	r3, r3, #15
 80022e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	8afb      	ldrh	r3, [r7, #22]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	8afa      	ldrh	r2, [r7, #22]
 80022fa:	60da      	str	r2, [r3, #12]
 80022fc:	e052      	b.n	80023a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002304:	e04e      	b.n	80023a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002306:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800230a:	2b08      	cmp	r3, #8
 800230c:	d827      	bhi.n	800235e <UART_SetConfig+0x506>
 800230e:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <UART_SetConfig+0x4bc>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002339 	.word	0x08002339
 8002318:	08002341 	.word	0x08002341
 800231c:	08002349 	.word	0x08002349
 8002320:	0800235f 	.word	0x0800235f
 8002324:	0800234f 	.word	0x0800234f
 8002328:	0800235f 	.word	0x0800235f
 800232c:	0800235f 	.word	0x0800235f
 8002330:	0800235f 	.word	0x0800235f
 8002334:	08002357 	.word	0x08002357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002338:	f7fe ffce 	bl	80012d8 <HAL_RCC_GetPCLK1Freq>
 800233c:	61f8      	str	r0, [r7, #28]
        break;
 800233e:	e014      	b.n	800236a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002340:	f7fe ffe0 	bl	8001304 <HAL_RCC_GetPCLK2Freq>
 8002344:	61f8      	str	r0, [r7, #28]
        break;
 8002346:	e010      	b.n	800236a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002348:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <UART_SetConfig+0x56c>)
 800234a:	61fb      	str	r3, [r7, #28]
        break;
 800234c:	e00d      	b.n	800236a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800234e:	f7fe ff2b 	bl	80011a8 <HAL_RCC_GetSysClockFreq>
 8002352:	61f8      	str	r0, [r7, #28]
        break;
 8002354:	e009      	b.n	800236a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800235a:	61fb      	str	r3, [r7, #28]
        break;
 800235c:	e005      	b.n	800236a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002368:	bf00      	nop
    }

    if (pclk != 0U)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d019      	beq.n	80023a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	085a      	lsrs	r2, r3, #1
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	441a      	add	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	d909      	bls.n	800239e <UART_SetConfig+0x546>
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002390:	d205      	bcs.n	800239e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	e002      	b.n	80023a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80023b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3728      	adds	r7, #40	@ 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023be:	bf00      	nop
 80023c0:	40008000 	.word	0x40008000
 80023c4:	00f42400 	.word	0x00f42400

080023c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01a      	beq.n	80024de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024c6:	d10a      	bne.n	80024de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	605a      	str	r2, [r3, #4]
  }
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b098      	sub	sp, #96	@ 0x60
 8002510:	af02      	add	r7, sp, #8
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800251c:	f7fe fb4a 	bl	8000bb4 <HAL_GetTick>
 8002520:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b08      	cmp	r3, #8
 800252e:	d12e      	bne.n	800258e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002538:	2200      	movs	r2, #0
 800253a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f88c 	bl	800265c <UART_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d021      	beq.n	800258e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002552:	e853 3f00 	ldrex	r3, [r3]
 8002556:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800255a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800255e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002568:	647b      	str	r3, [r7, #68]	@ 0x44
 800256a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800256c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800256e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002570:	e841 2300 	strex	r3, r2, [r1]
 8002574:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e6      	bne.n	800254a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e062      	b.n	8002654 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b04      	cmp	r3, #4
 800259a:	d149      	bne.n	8002630 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800259c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f856 	bl	800265c <UART_WaitOnFlagUntilTimeout>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d03c      	beq.n	8002630 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	e853 3f00 	ldrex	r3, [r3]
 80025c2:	623b      	str	r3, [r7, #32]
   return(result);
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80025da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025dc:	e841 2300 	strex	r3, r2, [r1]
 80025e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80025e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e6      	bne.n	80025b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3308      	adds	r3, #8
 80025ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	e853 3f00 	ldrex	r3, [r3]
 80025f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3308      	adds	r3, #8
 8002606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002608:	61fa      	str	r2, [r7, #28]
 800260a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260c:	69b9      	ldr	r1, [r7, #24]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	e841 2300 	strex	r3, r2, [r1]
 8002614:	617b      	str	r3, [r7, #20]
   return(result);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1e5      	bne.n	80025e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e011      	b.n	8002654 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2220      	movs	r2, #32
 8002634:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2220      	movs	r2, #32
 800263a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3758      	adds	r7, #88	@ 0x58
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800266c:	e04f      	b.n	800270e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d04b      	beq.n	800270e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002676:	f7fe fa9d 	bl	8000bb4 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <UART_WaitOnFlagUntilTimeout+0x30>
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e04e      	b.n	800272e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d037      	beq.n	800270e <UART_WaitOnFlagUntilTimeout+0xb2>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b80      	cmp	r3, #128	@ 0x80
 80026a2:	d034      	beq.n	800270e <UART_WaitOnFlagUntilTimeout+0xb2>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b40      	cmp	r3, #64	@ 0x40
 80026a8:	d031      	beq.n	800270e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d110      	bne.n	80026da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2208      	movs	r2, #8
 80026be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f838 	bl	8002736 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2208      	movs	r2, #8
 80026ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e029      	b.n	800272e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026e8:	d111      	bne.n	800270e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f81e 	bl	8002736 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e00f      	b.n	800272e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4013      	ands	r3, r2
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	429a      	cmp	r2, r3
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	429a      	cmp	r2, r3
 800272a:	d0a0      	beq.n	800266e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002736:	b480      	push	{r7}
 8002738:	b095      	sub	sp, #84	@ 0x54
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002746:	e853 3f00 	ldrex	r3, [r3]
 800274a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800275c:	643b      	str	r3, [r7, #64]	@ 0x40
 800275e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002762:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002764:	e841 2300 	strex	r3, r2, [r1]
 8002768:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800276a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e6      	bne.n	800273e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	3308      	adds	r3, #8
 8002776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	e853 3f00 	ldrex	r3, [r3]
 800277e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3308      	adds	r3, #8
 800278e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002790:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002792:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002798:	e841 2300 	strex	r3, r2, [r1]
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e5      	bne.n	8002770 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d118      	bne.n	80027de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	e853 3f00 	ldrex	r3, [r3]
 80027b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f023 0310 	bic.w	r3, r3, #16
 80027c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ce:	6979      	ldr	r1, [r7, #20]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	e841 2300 	strex	r3, r2, [r1]
 80027d6:	613b      	str	r3, [r7, #16]
   return(result);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e6      	bne.n	80027ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80027f2:	bf00      	nop
 80027f4:	3754      	adds	r7, #84	@ 0x54
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
	...

08002800 <std>:
 8002800:	2300      	movs	r3, #0
 8002802:	b510      	push	{r4, lr}
 8002804:	4604      	mov	r4, r0
 8002806:	e9c0 3300 	strd	r3, r3, [r0]
 800280a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800280e:	6083      	str	r3, [r0, #8]
 8002810:	8181      	strh	r1, [r0, #12]
 8002812:	6643      	str	r3, [r0, #100]	@ 0x64
 8002814:	81c2      	strh	r2, [r0, #14]
 8002816:	6183      	str	r3, [r0, #24]
 8002818:	4619      	mov	r1, r3
 800281a:	2208      	movs	r2, #8
 800281c:	305c      	adds	r0, #92	@ 0x5c
 800281e:	f000 f906 	bl	8002a2e <memset>
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <std+0x58>)
 8002824:	6263      	str	r3, [r4, #36]	@ 0x24
 8002826:	4b0d      	ldr	r3, [pc, #52]	@ (800285c <std+0x5c>)
 8002828:	62a3      	str	r3, [r4, #40]	@ 0x28
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <std+0x60>)
 800282c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800282e:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <std+0x64>)
 8002830:	6323      	str	r3, [r4, #48]	@ 0x30
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <std+0x68>)
 8002834:	6224      	str	r4, [r4, #32]
 8002836:	429c      	cmp	r4, r3
 8002838:	d006      	beq.n	8002848 <std+0x48>
 800283a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800283e:	4294      	cmp	r4, r2
 8002840:	d002      	beq.n	8002848 <std+0x48>
 8002842:	33d0      	adds	r3, #208	@ 0xd0
 8002844:	429c      	cmp	r4, r3
 8002846:	d105      	bne.n	8002854 <std+0x54>
 8002848:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800284c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002850:	f000 b966 	b.w	8002b20 <__retarget_lock_init_recursive>
 8002854:	bd10      	pop	{r4, pc}
 8002856:	bf00      	nop
 8002858:	080029a9 	.word	0x080029a9
 800285c:	080029cb 	.word	0x080029cb
 8002860:	08002a03 	.word	0x08002a03
 8002864:	08002a27 	.word	0x08002a27
 8002868:	20000114 	.word	0x20000114

0800286c <stdio_exit_handler>:
 800286c:	4a02      	ldr	r2, [pc, #8]	@ (8002878 <stdio_exit_handler+0xc>)
 800286e:	4903      	ldr	r1, [pc, #12]	@ (800287c <stdio_exit_handler+0x10>)
 8002870:	4803      	ldr	r0, [pc, #12]	@ (8002880 <stdio_exit_handler+0x14>)
 8002872:	f000 b869 	b.w	8002948 <_fwalk_sglue>
 8002876:	bf00      	nop
 8002878:	2000000c 	.word	0x2000000c
 800287c:	080033bd 	.word	0x080033bd
 8002880:	2000001c 	.word	0x2000001c

08002884 <cleanup_stdio>:
 8002884:	6841      	ldr	r1, [r0, #4]
 8002886:	4b0c      	ldr	r3, [pc, #48]	@ (80028b8 <cleanup_stdio+0x34>)
 8002888:	4299      	cmp	r1, r3
 800288a:	b510      	push	{r4, lr}
 800288c:	4604      	mov	r4, r0
 800288e:	d001      	beq.n	8002894 <cleanup_stdio+0x10>
 8002890:	f000 fd94 	bl	80033bc <_fflush_r>
 8002894:	68a1      	ldr	r1, [r4, #8]
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <cleanup_stdio+0x38>)
 8002898:	4299      	cmp	r1, r3
 800289a:	d002      	beq.n	80028a2 <cleanup_stdio+0x1e>
 800289c:	4620      	mov	r0, r4
 800289e:	f000 fd8d 	bl	80033bc <_fflush_r>
 80028a2:	68e1      	ldr	r1, [r4, #12]
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <cleanup_stdio+0x3c>)
 80028a6:	4299      	cmp	r1, r3
 80028a8:	d004      	beq.n	80028b4 <cleanup_stdio+0x30>
 80028aa:	4620      	mov	r0, r4
 80028ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b0:	f000 bd84 	b.w	80033bc <_fflush_r>
 80028b4:	bd10      	pop	{r4, pc}
 80028b6:	bf00      	nop
 80028b8:	20000114 	.word	0x20000114
 80028bc:	2000017c 	.word	0x2000017c
 80028c0:	200001e4 	.word	0x200001e4

080028c4 <global_stdio_init.part.0>:
 80028c4:	b510      	push	{r4, lr}
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <global_stdio_init.part.0+0x30>)
 80028c8:	4c0b      	ldr	r4, [pc, #44]	@ (80028f8 <global_stdio_init.part.0+0x34>)
 80028ca:	4a0c      	ldr	r2, [pc, #48]	@ (80028fc <global_stdio_init.part.0+0x38>)
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	4620      	mov	r0, r4
 80028d0:	2200      	movs	r2, #0
 80028d2:	2104      	movs	r1, #4
 80028d4:	f7ff ff94 	bl	8002800 <std>
 80028d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80028dc:	2201      	movs	r2, #1
 80028de:	2109      	movs	r1, #9
 80028e0:	f7ff ff8e 	bl	8002800 <std>
 80028e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80028e8:	2202      	movs	r2, #2
 80028ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028ee:	2112      	movs	r1, #18
 80028f0:	f7ff bf86 	b.w	8002800 <std>
 80028f4:	2000024c 	.word	0x2000024c
 80028f8:	20000114 	.word	0x20000114
 80028fc:	0800286d 	.word	0x0800286d

08002900 <__sfp_lock_acquire>:
 8002900:	4801      	ldr	r0, [pc, #4]	@ (8002908 <__sfp_lock_acquire+0x8>)
 8002902:	f000 b90e 	b.w	8002b22 <__retarget_lock_acquire_recursive>
 8002906:	bf00      	nop
 8002908:	20000255 	.word	0x20000255

0800290c <__sfp_lock_release>:
 800290c:	4801      	ldr	r0, [pc, #4]	@ (8002914 <__sfp_lock_release+0x8>)
 800290e:	f000 b909 	b.w	8002b24 <__retarget_lock_release_recursive>
 8002912:	bf00      	nop
 8002914:	20000255 	.word	0x20000255

08002918 <__sinit>:
 8002918:	b510      	push	{r4, lr}
 800291a:	4604      	mov	r4, r0
 800291c:	f7ff fff0 	bl	8002900 <__sfp_lock_acquire>
 8002920:	6a23      	ldr	r3, [r4, #32]
 8002922:	b11b      	cbz	r3, 800292c <__sinit+0x14>
 8002924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002928:	f7ff bff0 	b.w	800290c <__sfp_lock_release>
 800292c:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <__sinit+0x28>)
 800292e:	6223      	str	r3, [r4, #32]
 8002930:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <__sinit+0x2c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f5      	bne.n	8002924 <__sinit+0xc>
 8002938:	f7ff ffc4 	bl	80028c4 <global_stdio_init.part.0>
 800293c:	e7f2      	b.n	8002924 <__sinit+0xc>
 800293e:	bf00      	nop
 8002940:	08002885 	.word	0x08002885
 8002944:	2000024c 	.word	0x2000024c

08002948 <_fwalk_sglue>:
 8002948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800294c:	4607      	mov	r7, r0
 800294e:	4688      	mov	r8, r1
 8002950:	4614      	mov	r4, r2
 8002952:	2600      	movs	r6, #0
 8002954:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002958:	f1b9 0901 	subs.w	r9, r9, #1
 800295c:	d505      	bpl.n	800296a <_fwalk_sglue+0x22>
 800295e:	6824      	ldr	r4, [r4, #0]
 8002960:	2c00      	cmp	r4, #0
 8002962:	d1f7      	bne.n	8002954 <_fwalk_sglue+0xc>
 8002964:	4630      	mov	r0, r6
 8002966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800296a:	89ab      	ldrh	r3, [r5, #12]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d907      	bls.n	8002980 <_fwalk_sglue+0x38>
 8002970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002974:	3301      	adds	r3, #1
 8002976:	d003      	beq.n	8002980 <_fwalk_sglue+0x38>
 8002978:	4629      	mov	r1, r5
 800297a:	4638      	mov	r0, r7
 800297c:	47c0      	blx	r8
 800297e:	4306      	orrs	r6, r0
 8002980:	3568      	adds	r5, #104	@ 0x68
 8002982:	e7e9      	b.n	8002958 <_fwalk_sglue+0x10>

08002984 <iprintf>:
 8002984:	b40f      	push	{r0, r1, r2, r3}
 8002986:	b507      	push	{r0, r1, r2, lr}
 8002988:	4906      	ldr	r1, [pc, #24]	@ (80029a4 <iprintf+0x20>)
 800298a:	ab04      	add	r3, sp, #16
 800298c:	6808      	ldr	r0, [r1, #0]
 800298e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002992:	6881      	ldr	r1, [r0, #8]
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	f000 f9e9 	bl	8002d6c <_vfiprintf_r>
 800299a:	b003      	add	sp, #12
 800299c:	f85d eb04 	ldr.w	lr, [sp], #4
 80029a0:	b004      	add	sp, #16
 80029a2:	4770      	bx	lr
 80029a4:	20000018 	.word	0x20000018

080029a8 <__sread>:
 80029a8:	b510      	push	{r4, lr}
 80029aa:	460c      	mov	r4, r1
 80029ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029b0:	f000 f868 	bl	8002a84 <_read_r>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	bfab      	itete	ge
 80029b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80029ba:	89a3      	ldrhlt	r3, [r4, #12]
 80029bc:	181b      	addge	r3, r3, r0
 80029be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80029c2:	bfac      	ite	ge
 80029c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80029c6:	81a3      	strhlt	r3, [r4, #12]
 80029c8:	bd10      	pop	{r4, pc}

080029ca <__swrite>:
 80029ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ce:	461f      	mov	r7, r3
 80029d0:	898b      	ldrh	r3, [r1, #12]
 80029d2:	05db      	lsls	r3, r3, #23
 80029d4:	4605      	mov	r5, r0
 80029d6:	460c      	mov	r4, r1
 80029d8:	4616      	mov	r6, r2
 80029da:	d505      	bpl.n	80029e8 <__swrite+0x1e>
 80029dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029e0:	2302      	movs	r3, #2
 80029e2:	2200      	movs	r2, #0
 80029e4:	f000 f83c 	bl	8002a60 <_lseek_r>
 80029e8:	89a3      	ldrh	r3, [r4, #12]
 80029ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029f2:	81a3      	strh	r3, [r4, #12]
 80029f4:	4632      	mov	r2, r6
 80029f6:	463b      	mov	r3, r7
 80029f8:	4628      	mov	r0, r5
 80029fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029fe:	f000 b853 	b.w	8002aa8 <_write_r>

08002a02 <__sseek>:
 8002a02:	b510      	push	{r4, lr}
 8002a04:	460c      	mov	r4, r1
 8002a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a0a:	f000 f829 	bl	8002a60 <_lseek_r>
 8002a0e:	1c43      	adds	r3, r0, #1
 8002a10:	89a3      	ldrh	r3, [r4, #12]
 8002a12:	bf15      	itete	ne
 8002a14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002a16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002a1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002a1e:	81a3      	strheq	r3, [r4, #12]
 8002a20:	bf18      	it	ne
 8002a22:	81a3      	strhne	r3, [r4, #12]
 8002a24:	bd10      	pop	{r4, pc}

08002a26 <__sclose>:
 8002a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a2a:	f000 b809 	b.w	8002a40 <_close_r>

08002a2e <memset>:
 8002a2e:	4402      	add	r2, r0
 8002a30:	4603      	mov	r3, r0
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d100      	bne.n	8002a38 <memset+0xa>
 8002a36:	4770      	bx	lr
 8002a38:	f803 1b01 	strb.w	r1, [r3], #1
 8002a3c:	e7f9      	b.n	8002a32 <memset+0x4>
	...

08002a40 <_close_r>:
 8002a40:	b538      	push	{r3, r4, r5, lr}
 8002a42:	4d06      	ldr	r5, [pc, #24]	@ (8002a5c <_close_r+0x1c>)
 8002a44:	2300      	movs	r3, #0
 8002a46:	4604      	mov	r4, r0
 8002a48:	4608      	mov	r0, r1
 8002a4a:	602b      	str	r3, [r5, #0]
 8002a4c:	f7fd ff9c 	bl	8000988 <_close>
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	d102      	bne.n	8002a5a <_close_r+0x1a>
 8002a54:	682b      	ldr	r3, [r5, #0]
 8002a56:	b103      	cbz	r3, 8002a5a <_close_r+0x1a>
 8002a58:	6023      	str	r3, [r4, #0]
 8002a5a:	bd38      	pop	{r3, r4, r5, pc}
 8002a5c:	20000250 	.word	0x20000250

08002a60 <_lseek_r>:
 8002a60:	b538      	push	{r3, r4, r5, lr}
 8002a62:	4d07      	ldr	r5, [pc, #28]	@ (8002a80 <_lseek_r+0x20>)
 8002a64:	4604      	mov	r4, r0
 8002a66:	4608      	mov	r0, r1
 8002a68:	4611      	mov	r1, r2
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	602a      	str	r2, [r5, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f7fd ffb1 	bl	80009d6 <_lseek>
 8002a74:	1c43      	adds	r3, r0, #1
 8002a76:	d102      	bne.n	8002a7e <_lseek_r+0x1e>
 8002a78:	682b      	ldr	r3, [r5, #0]
 8002a7a:	b103      	cbz	r3, 8002a7e <_lseek_r+0x1e>
 8002a7c:	6023      	str	r3, [r4, #0]
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}
 8002a80:	20000250 	.word	0x20000250

08002a84 <_read_r>:
 8002a84:	b538      	push	{r3, r4, r5, lr}
 8002a86:	4d07      	ldr	r5, [pc, #28]	@ (8002aa4 <_read_r+0x20>)
 8002a88:	4604      	mov	r4, r0
 8002a8a:	4608      	mov	r0, r1
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	2200      	movs	r2, #0
 8002a90:	602a      	str	r2, [r5, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	f7fd ff3f 	bl	8000916 <_read>
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	d102      	bne.n	8002aa2 <_read_r+0x1e>
 8002a9c:	682b      	ldr	r3, [r5, #0]
 8002a9e:	b103      	cbz	r3, 8002aa2 <_read_r+0x1e>
 8002aa0:	6023      	str	r3, [r4, #0]
 8002aa2:	bd38      	pop	{r3, r4, r5, pc}
 8002aa4:	20000250 	.word	0x20000250

08002aa8 <_write_r>:
 8002aa8:	b538      	push	{r3, r4, r5, lr}
 8002aaa:	4d07      	ldr	r5, [pc, #28]	@ (8002ac8 <_write_r+0x20>)
 8002aac:	4604      	mov	r4, r0
 8002aae:	4608      	mov	r0, r1
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	602a      	str	r2, [r5, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f7fd ff4a 	bl	8000950 <_write>
 8002abc:	1c43      	adds	r3, r0, #1
 8002abe:	d102      	bne.n	8002ac6 <_write_r+0x1e>
 8002ac0:	682b      	ldr	r3, [r5, #0]
 8002ac2:	b103      	cbz	r3, 8002ac6 <_write_r+0x1e>
 8002ac4:	6023      	str	r3, [r4, #0]
 8002ac6:	bd38      	pop	{r3, r4, r5, pc}
 8002ac8:	20000250 	.word	0x20000250

08002acc <__errno>:
 8002acc:	4b01      	ldr	r3, [pc, #4]	@ (8002ad4 <__errno+0x8>)
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	20000018 	.word	0x20000018

08002ad8 <__libc_init_array>:
 8002ad8:	b570      	push	{r4, r5, r6, lr}
 8002ada:	4d0d      	ldr	r5, [pc, #52]	@ (8002b10 <__libc_init_array+0x38>)
 8002adc:	4c0d      	ldr	r4, [pc, #52]	@ (8002b14 <__libc_init_array+0x3c>)
 8002ade:	1b64      	subs	r4, r4, r5
 8002ae0:	10a4      	asrs	r4, r4, #2
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	42a6      	cmp	r6, r4
 8002ae6:	d109      	bne.n	8002afc <__libc_init_array+0x24>
 8002ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8002b18 <__libc_init_array+0x40>)
 8002aea:	4c0c      	ldr	r4, [pc, #48]	@ (8002b1c <__libc_init_array+0x44>)
 8002aec:	f000 fdb6 	bl	800365c <_init>
 8002af0:	1b64      	subs	r4, r4, r5
 8002af2:	10a4      	asrs	r4, r4, #2
 8002af4:	2600      	movs	r6, #0
 8002af6:	42a6      	cmp	r6, r4
 8002af8:	d105      	bne.n	8002b06 <__libc_init_array+0x2e>
 8002afa:	bd70      	pop	{r4, r5, r6, pc}
 8002afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b00:	4798      	blx	r3
 8002b02:	3601      	adds	r6, #1
 8002b04:	e7ee      	b.n	8002ae4 <__libc_init_array+0xc>
 8002b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b0a:	4798      	blx	r3
 8002b0c:	3601      	adds	r6, #1
 8002b0e:	e7f2      	b.n	8002af6 <__libc_init_array+0x1e>
 8002b10:	08003718 	.word	0x08003718
 8002b14:	08003718 	.word	0x08003718
 8002b18:	08003718 	.word	0x08003718
 8002b1c:	0800371c 	.word	0x0800371c

08002b20 <__retarget_lock_init_recursive>:
 8002b20:	4770      	bx	lr

08002b22 <__retarget_lock_acquire_recursive>:
 8002b22:	4770      	bx	lr

08002b24 <__retarget_lock_release_recursive>:
 8002b24:	4770      	bx	lr
	...

08002b28 <_free_r>:
 8002b28:	b538      	push	{r3, r4, r5, lr}
 8002b2a:	4605      	mov	r5, r0
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	d041      	beq.n	8002bb4 <_free_r+0x8c>
 8002b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b34:	1f0c      	subs	r4, r1, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bfb8      	it	lt
 8002b3a:	18e4      	addlt	r4, r4, r3
 8002b3c:	f000 f8e0 	bl	8002d00 <__malloc_lock>
 8002b40:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb8 <_free_r+0x90>)
 8002b42:	6813      	ldr	r3, [r2, #0]
 8002b44:	b933      	cbnz	r3, 8002b54 <_free_r+0x2c>
 8002b46:	6063      	str	r3, [r4, #4]
 8002b48:	6014      	str	r4, [r2, #0]
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b50:	f000 b8dc 	b.w	8002d0c <__malloc_unlock>
 8002b54:	42a3      	cmp	r3, r4
 8002b56:	d908      	bls.n	8002b6a <_free_r+0x42>
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	1821      	adds	r1, r4, r0
 8002b5c:	428b      	cmp	r3, r1
 8002b5e:	bf01      	itttt	eq
 8002b60:	6819      	ldreq	r1, [r3, #0]
 8002b62:	685b      	ldreq	r3, [r3, #4]
 8002b64:	1809      	addeq	r1, r1, r0
 8002b66:	6021      	streq	r1, [r4, #0]
 8002b68:	e7ed      	b.n	8002b46 <_free_r+0x1e>
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	b10b      	cbz	r3, 8002b74 <_free_r+0x4c>
 8002b70:	42a3      	cmp	r3, r4
 8002b72:	d9fa      	bls.n	8002b6a <_free_r+0x42>
 8002b74:	6811      	ldr	r1, [r2, #0]
 8002b76:	1850      	adds	r0, r2, r1
 8002b78:	42a0      	cmp	r0, r4
 8002b7a:	d10b      	bne.n	8002b94 <_free_r+0x6c>
 8002b7c:	6820      	ldr	r0, [r4, #0]
 8002b7e:	4401      	add	r1, r0
 8002b80:	1850      	adds	r0, r2, r1
 8002b82:	4283      	cmp	r3, r0
 8002b84:	6011      	str	r1, [r2, #0]
 8002b86:	d1e0      	bne.n	8002b4a <_free_r+0x22>
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	6053      	str	r3, [r2, #4]
 8002b8e:	4408      	add	r0, r1
 8002b90:	6010      	str	r0, [r2, #0]
 8002b92:	e7da      	b.n	8002b4a <_free_r+0x22>
 8002b94:	d902      	bls.n	8002b9c <_free_r+0x74>
 8002b96:	230c      	movs	r3, #12
 8002b98:	602b      	str	r3, [r5, #0]
 8002b9a:	e7d6      	b.n	8002b4a <_free_r+0x22>
 8002b9c:	6820      	ldr	r0, [r4, #0]
 8002b9e:	1821      	adds	r1, r4, r0
 8002ba0:	428b      	cmp	r3, r1
 8002ba2:	bf04      	itt	eq
 8002ba4:	6819      	ldreq	r1, [r3, #0]
 8002ba6:	685b      	ldreq	r3, [r3, #4]
 8002ba8:	6063      	str	r3, [r4, #4]
 8002baa:	bf04      	itt	eq
 8002bac:	1809      	addeq	r1, r1, r0
 8002bae:	6021      	streq	r1, [r4, #0]
 8002bb0:	6054      	str	r4, [r2, #4]
 8002bb2:	e7ca      	b.n	8002b4a <_free_r+0x22>
 8002bb4:	bd38      	pop	{r3, r4, r5, pc}
 8002bb6:	bf00      	nop
 8002bb8:	2000025c 	.word	0x2000025c

08002bbc <sbrk_aligned>:
 8002bbc:	b570      	push	{r4, r5, r6, lr}
 8002bbe:	4e0f      	ldr	r6, [pc, #60]	@ (8002bfc <sbrk_aligned+0x40>)
 8002bc0:	460c      	mov	r4, r1
 8002bc2:	6831      	ldr	r1, [r6, #0]
 8002bc4:	4605      	mov	r5, r0
 8002bc6:	b911      	cbnz	r1, 8002bce <sbrk_aligned+0x12>
 8002bc8:	f000 fcb4 	bl	8003534 <_sbrk_r>
 8002bcc:	6030      	str	r0, [r6, #0]
 8002bce:	4621      	mov	r1, r4
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f000 fcaf 	bl	8003534 <_sbrk_r>
 8002bd6:	1c43      	adds	r3, r0, #1
 8002bd8:	d103      	bne.n	8002be2 <sbrk_aligned+0x26>
 8002bda:	f04f 34ff 	mov.w	r4, #4294967295
 8002bde:	4620      	mov	r0, r4
 8002be0:	bd70      	pop	{r4, r5, r6, pc}
 8002be2:	1cc4      	adds	r4, r0, #3
 8002be4:	f024 0403 	bic.w	r4, r4, #3
 8002be8:	42a0      	cmp	r0, r4
 8002bea:	d0f8      	beq.n	8002bde <sbrk_aligned+0x22>
 8002bec:	1a21      	subs	r1, r4, r0
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f000 fca0 	bl	8003534 <_sbrk_r>
 8002bf4:	3001      	adds	r0, #1
 8002bf6:	d1f2      	bne.n	8002bde <sbrk_aligned+0x22>
 8002bf8:	e7ef      	b.n	8002bda <sbrk_aligned+0x1e>
 8002bfa:	bf00      	nop
 8002bfc:	20000258 	.word	0x20000258

08002c00 <_malloc_r>:
 8002c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c04:	1ccd      	adds	r5, r1, #3
 8002c06:	f025 0503 	bic.w	r5, r5, #3
 8002c0a:	3508      	adds	r5, #8
 8002c0c:	2d0c      	cmp	r5, #12
 8002c0e:	bf38      	it	cc
 8002c10:	250c      	movcc	r5, #12
 8002c12:	2d00      	cmp	r5, #0
 8002c14:	4606      	mov	r6, r0
 8002c16:	db01      	blt.n	8002c1c <_malloc_r+0x1c>
 8002c18:	42a9      	cmp	r1, r5
 8002c1a:	d904      	bls.n	8002c26 <_malloc_r+0x26>
 8002c1c:	230c      	movs	r3, #12
 8002c1e:	6033      	str	r3, [r6, #0]
 8002c20:	2000      	movs	r0, #0
 8002c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002cfc <_malloc_r+0xfc>
 8002c2a:	f000 f869 	bl	8002d00 <__malloc_lock>
 8002c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8002c32:	461c      	mov	r4, r3
 8002c34:	bb44      	cbnz	r4, 8002c88 <_malloc_r+0x88>
 8002c36:	4629      	mov	r1, r5
 8002c38:	4630      	mov	r0, r6
 8002c3a:	f7ff ffbf 	bl	8002bbc <sbrk_aligned>
 8002c3e:	1c43      	adds	r3, r0, #1
 8002c40:	4604      	mov	r4, r0
 8002c42:	d158      	bne.n	8002cf6 <_malloc_r+0xf6>
 8002c44:	f8d8 4000 	ldr.w	r4, [r8]
 8002c48:	4627      	mov	r7, r4
 8002c4a:	2f00      	cmp	r7, #0
 8002c4c:	d143      	bne.n	8002cd6 <_malloc_r+0xd6>
 8002c4e:	2c00      	cmp	r4, #0
 8002c50:	d04b      	beq.n	8002cea <_malloc_r+0xea>
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	4639      	mov	r1, r7
 8002c56:	4630      	mov	r0, r6
 8002c58:	eb04 0903 	add.w	r9, r4, r3
 8002c5c:	f000 fc6a 	bl	8003534 <_sbrk_r>
 8002c60:	4581      	cmp	r9, r0
 8002c62:	d142      	bne.n	8002cea <_malloc_r+0xea>
 8002c64:	6821      	ldr	r1, [r4, #0]
 8002c66:	1a6d      	subs	r5, r5, r1
 8002c68:	4629      	mov	r1, r5
 8002c6a:	4630      	mov	r0, r6
 8002c6c:	f7ff ffa6 	bl	8002bbc <sbrk_aligned>
 8002c70:	3001      	adds	r0, #1
 8002c72:	d03a      	beq.n	8002cea <_malloc_r+0xea>
 8002c74:	6823      	ldr	r3, [r4, #0]
 8002c76:	442b      	add	r3, r5
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	bb62      	cbnz	r2, 8002cdc <_malloc_r+0xdc>
 8002c82:	f8c8 7000 	str.w	r7, [r8]
 8002c86:	e00f      	b.n	8002ca8 <_malloc_r+0xa8>
 8002c88:	6822      	ldr	r2, [r4, #0]
 8002c8a:	1b52      	subs	r2, r2, r5
 8002c8c:	d420      	bmi.n	8002cd0 <_malloc_r+0xd0>
 8002c8e:	2a0b      	cmp	r2, #11
 8002c90:	d917      	bls.n	8002cc2 <_malloc_r+0xc2>
 8002c92:	1961      	adds	r1, r4, r5
 8002c94:	42a3      	cmp	r3, r4
 8002c96:	6025      	str	r5, [r4, #0]
 8002c98:	bf18      	it	ne
 8002c9a:	6059      	strne	r1, [r3, #4]
 8002c9c:	6863      	ldr	r3, [r4, #4]
 8002c9e:	bf08      	it	eq
 8002ca0:	f8c8 1000 	streq.w	r1, [r8]
 8002ca4:	5162      	str	r2, [r4, r5]
 8002ca6:	604b      	str	r3, [r1, #4]
 8002ca8:	4630      	mov	r0, r6
 8002caa:	f000 f82f 	bl	8002d0c <__malloc_unlock>
 8002cae:	f104 000b 	add.w	r0, r4, #11
 8002cb2:	1d23      	adds	r3, r4, #4
 8002cb4:	f020 0007 	bic.w	r0, r0, #7
 8002cb8:	1ac2      	subs	r2, r0, r3
 8002cba:	bf1c      	itt	ne
 8002cbc:	1a1b      	subne	r3, r3, r0
 8002cbe:	50a3      	strne	r3, [r4, r2]
 8002cc0:	e7af      	b.n	8002c22 <_malloc_r+0x22>
 8002cc2:	6862      	ldr	r2, [r4, #4]
 8002cc4:	42a3      	cmp	r3, r4
 8002cc6:	bf0c      	ite	eq
 8002cc8:	f8c8 2000 	streq.w	r2, [r8]
 8002ccc:	605a      	strne	r2, [r3, #4]
 8002cce:	e7eb      	b.n	8002ca8 <_malloc_r+0xa8>
 8002cd0:	4623      	mov	r3, r4
 8002cd2:	6864      	ldr	r4, [r4, #4]
 8002cd4:	e7ae      	b.n	8002c34 <_malloc_r+0x34>
 8002cd6:	463c      	mov	r4, r7
 8002cd8:	687f      	ldr	r7, [r7, #4]
 8002cda:	e7b6      	b.n	8002c4a <_malloc_r+0x4a>
 8002cdc:	461a      	mov	r2, r3
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	42a3      	cmp	r3, r4
 8002ce2:	d1fb      	bne.n	8002cdc <_malloc_r+0xdc>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6053      	str	r3, [r2, #4]
 8002ce8:	e7de      	b.n	8002ca8 <_malloc_r+0xa8>
 8002cea:	230c      	movs	r3, #12
 8002cec:	6033      	str	r3, [r6, #0]
 8002cee:	4630      	mov	r0, r6
 8002cf0:	f000 f80c 	bl	8002d0c <__malloc_unlock>
 8002cf4:	e794      	b.n	8002c20 <_malloc_r+0x20>
 8002cf6:	6005      	str	r5, [r0, #0]
 8002cf8:	e7d6      	b.n	8002ca8 <_malloc_r+0xa8>
 8002cfa:	bf00      	nop
 8002cfc:	2000025c 	.word	0x2000025c

08002d00 <__malloc_lock>:
 8002d00:	4801      	ldr	r0, [pc, #4]	@ (8002d08 <__malloc_lock+0x8>)
 8002d02:	f7ff bf0e 	b.w	8002b22 <__retarget_lock_acquire_recursive>
 8002d06:	bf00      	nop
 8002d08:	20000254 	.word	0x20000254

08002d0c <__malloc_unlock>:
 8002d0c:	4801      	ldr	r0, [pc, #4]	@ (8002d14 <__malloc_unlock+0x8>)
 8002d0e:	f7ff bf09 	b.w	8002b24 <__retarget_lock_release_recursive>
 8002d12:	bf00      	nop
 8002d14:	20000254 	.word	0x20000254

08002d18 <__sfputc_r>:
 8002d18:	6893      	ldr	r3, [r2, #8]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	b410      	push	{r4}
 8002d20:	6093      	str	r3, [r2, #8]
 8002d22:	da08      	bge.n	8002d36 <__sfputc_r+0x1e>
 8002d24:	6994      	ldr	r4, [r2, #24]
 8002d26:	42a3      	cmp	r3, r4
 8002d28:	db01      	blt.n	8002d2e <__sfputc_r+0x16>
 8002d2a:	290a      	cmp	r1, #10
 8002d2c:	d103      	bne.n	8002d36 <__sfputc_r+0x1e>
 8002d2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d32:	f000 bb6b 	b.w	800340c <__swbuf_r>
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	1c58      	adds	r0, r3, #1
 8002d3a:	6010      	str	r0, [r2, #0]
 8002d3c:	7019      	strb	r1, [r3, #0]
 8002d3e:	4608      	mov	r0, r1
 8002d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <__sfputs_r>:
 8002d46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d48:	4606      	mov	r6, r0
 8002d4a:	460f      	mov	r7, r1
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	18d5      	adds	r5, r2, r3
 8002d50:	42ac      	cmp	r4, r5
 8002d52:	d101      	bne.n	8002d58 <__sfputs_r+0x12>
 8002d54:	2000      	movs	r0, #0
 8002d56:	e007      	b.n	8002d68 <__sfputs_r+0x22>
 8002d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d5c:	463a      	mov	r2, r7
 8002d5e:	4630      	mov	r0, r6
 8002d60:	f7ff ffda 	bl	8002d18 <__sfputc_r>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d1f3      	bne.n	8002d50 <__sfputs_r+0xa>
 8002d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d6c <_vfiprintf_r>:
 8002d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d70:	460d      	mov	r5, r1
 8002d72:	b09d      	sub	sp, #116	@ 0x74
 8002d74:	4614      	mov	r4, r2
 8002d76:	4698      	mov	r8, r3
 8002d78:	4606      	mov	r6, r0
 8002d7a:	b118      	cbz	r0, 8002d84 <_vfiprintf_r+0x18>
 8002d7c:	6a03      	ldr	r3, [r0, #32]
 8002d7e:	b90b      	cbnz	r3, 8002d84 <_vfiprintf_r+0x18>
 8002d80:	f7ff fdca 	bl	8002918 <__sinit>
 8002d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002d86:	07d9      	lsls	r1, r3, #31
 8002d88:	d405      	bmi.n	8002d96 <_vfiprintf_r+0x2a>
 8002d8a:	89ab      	ldrh	r3, [r5, #12]
 8002d8c:	059a      	lsls	r2, r3, #22
 8002d8e:	d402      	bmi.n	8002d96 <_vfiprintf_r+0x2a>
 8002d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002d92:	f7ff fec6 	bl	8002b22 <__retarget_lock_acquire_recursive>
 8002d96:	89ab      	ldrh	r3, [r5, #12]
 8002d98:	071b      	lsls	r3, r3, #28
 8002d9a:	d501      	bpl.n	8002da0 <_vfiprintf_r+0x34>
 8002d9c:	692b      	ldr	r3, [r5, #16]
 8002d9e:	b99b      	cbnz	r3, 8002dc8 <_vfiprintf_r+0x5c>
 8002da0:	4629      	mov	r1, r5
 8002da2:	4630      	mov	r0, r6
 8002da4:	f000 fb70 	bl	8003488 <__swsetup_r>
 8002da8:	b170      	cbz	r0, 8002dc8 <_vfiprintf_r+0x5c>
 8002daa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002dac:	07dc      	lsls	r4, r3, #31
 8002dae:	d504      	bpl.n	8002dba <_vfiprintf_r+0x4e>
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	b01d      	add	sp, #116	@ 0x74
 8002db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dba:	89ab      	ldrh	r3, [r5, #12]
 8002dbc:	0598      	lsls	r0, r3, #22
 8002dbe:	d4f7      	bmi.n	8002db0 <_vfiprintf_r+0x44>
 8002dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002dc2:	f7ff feaf 	bl	8002b24 <__retarget_lock_release_recursive>
 8002dc6:	e7f3      	b.n	8002db0 <_vfiprintf_r+0x44>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dcc:	2320      	movs	r3, #32
 8002dce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002dd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dd6:	2330      	movs	r3, #48	@ 0x30
 8002dd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002f88 <_vfiprintf_r+0x21c>
 8002ddc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002de0:	f04f 0901 	mov.w	r9, #1
 8002de4:	4623      	mov	r3, r4
 8002de6:	469a      	mov	sl, r3
 8002de8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dec:	b10a      	cbz	r2, 8002df2 <_vfiprintf_r+0x86>
 8002dee:	2a25      	cmp	r2, #37	@ 0x25
 8002df0:	d1f9      	bne.n	8002de6 <_vfiprintf_r+0x7a>
 8002df2:	ebba 0b04 	subs.w	fp, sl, r4
 8002df6:	d00b      	beq.n	8002e10 <_vfiprintf_r+0xa4>
 8002df8:	465b      	mov	r3, fp
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f7ff ffa1 	bl	8002d46 <__sfputs_r>
 8002e04:	3001      	adds	r0, #1
 8002e06:	f000 80a7 	beq.w	8002f58 <_vfiprintf_r+0x1ec>
 8002e0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e0c:	445a      	add	r2, fp
 8002e0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e10:	f89a 3000 	ldrb.w	r3, [sl]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 809f 	beq.w	8002f58 <_vfiprintf_r+0x1ec>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e24:	f10a 0a01 	add.w	sl, sl, #1
 8002e28:	9304      	str	r3, [sp, #16]
 8002e2a:	9307      	str	r3, [sp, #28]
 8002e2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e30:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e32:	4654      	mov	r4, sl
 8002e34:	2205      	movs	r2, #5
 8002e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e3a:	4853      	ldr	r0, [pc, #332]	@ (8002f88 <_vfiprintf_r+0x21c>)
 8002e3c:	f7fd f9c8 	bl	80001d0 <memchr>
 8002e40:	9a04      	ldr	r2, [sp, #16]
 8002e42:	b9d8      	cbnz	r0, 8002e7c <_vfiprintf_r+0x110>
 8002e44:	06d1      	lsls	r1, r2, #27
 8002e46:	bf44      	itt	mi
 8002e48:	2320      	movmi	r3, #32
 8002e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e4e:	0713      	lsls	r3, r2, #28
 8002e50:	bf44      	itt	mi
 8002e52:	232b      	movmi	r3, #43	@ 0x2b
 8002e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e58:	f89a 3000 	ldrb.w	r3, [sl]
 8002e5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e5e:	d015      	beq.n	8002e8c <_vfiprintf_r+0x120>
 8002e60:	9a07      	ldr	r2, [sp, #28]
 8002e62:	4654      	mov	r4, sl
 8002e64:	2000      	movs	r0, #0
 8002e66:	f04f 0c0a 	mov.w	ip, #10
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e70:	3b30      	subs	r3, #48	@ 0x30
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	d94b      	bls.n	8002f0e <_vfiprintf_r+0x1a2>
 8002e76:	b1b0      	cbz	r0, 8002ea6 <_vfiprintf_r+0x13a>
 8002e78:	9207      	str	r2, [sp, #28]
 8002e7a:	e014      	b.n	8002ea6 <_vfiprintf_r+0x13a>
 8002e7c:	eba0 0308 	sub.w	r3, r0, r8
 8002e80:	fa09 f303 	lsl.w	r3, r9, r3
 8002e84:	4313      	orrs	r3, r2
 8002e86:	9304      	str	r3, [sp, #16]
 8002e88:	46a2      	mov	sl, r4
 8002e8a:	e7d2      	b.n	8002e32 <_vfiprintf_r+0xc6>
 8002e8c:	9b03      	ldr	r3, [sp, #12]
 8002e8e:	1d19      	adds	r1, r3, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	9103      	str	r1, [sp, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bfbb      	ittet	lt
 8002e98:	425b      	neglt	r3, r3
 8002e9a:	f042 0202 	orrlt.w	r2, r2, #2
 8002e9e:	9307      	strge	r3, [sp, #28]
 8002ea0:	9307      	strlt	r3, [sp, #28]
 8002ea2:	bfb8      	it	lt
 8002ea4:	9204      	strlt	r2, [sp, #16]
 8002ea6:	7823      	ldrb	r3, [r4, #0]
 8002ea8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002eaa:	d10a      	bne.n	8002ec2 <_vfiprintf_r+0x156>
 8002eac:	7863      	ldrb	r3, [r4, #1]
 8002eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eb0:	d132      	bne.n	8002f18 <_vfiprintf_r+0x1ac>
 8002eb2:	9b03      	ldr	r3, [sp, #12]
 8002eb4:	1d1a      	adds	r2, r3, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	9203      	str	r2, [sp, #12]
 8002eba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ebe:	3402      	adds	r4, #2
 8002ec0:	9305      	str	r3, [sp, #20]
 8002ec2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002f98 <_vfiprintf_r+0x22c>
 8002ec6:	7821      	ldrb	r1, [r4, #0]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	4650      	mov	r0, sl
 8002ecc:	f7fd f980 	bl	80001d0 <memchr>
 8002ed0:	b138      	cbz	r0, 8002ee2 <_vfiprintf_r+0x176>
 8002ed2:	9b04      	ldr	r3, [sp, #16]
 8002ed4:	eba0 000a 	sub.w	r0, r0, sl
 8002ed8:	2240      	movs	r2, #64	@ 0x40
 8002eda:	4082      	lsls	r2, r0
 8002edc:	4313      	orrs	r3, r2
 8002ede:	3401      	adds	r4, #1
 8002ee0:	9304      	str	r3, [sp, #16]
 8002ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ee6:	4829      	ldr	r0, [pc, #164]	@ (8002f8c <_vfiprintf_r+0x220>)
 8002ee8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002eec:	2206      	movs	r2, #6
 8002eee:	f7fd f96f 	bl	80001d0 <memchr>
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d03f      	beq.n	8002f76 <_vfiprintf_r+0x20a>
 8002ef6:	4b26      	ldr	r3, [pc, #152]	@ (8002f90 <_vfiprintf_r+0x224>)
 8002ef8:	bb1b      	cbnz	r3, 8002f42 <_vfiprintf_r+0x1d6>
 8002efa:	9b03      	ldr	r3, [sp, #12]
 8002efc:	3307      	adds	r3, #7
 8002efe:	f023 0307 	bic.w	r3, r3, #7
 8002f02:	3308      	adds	r3, #8
 8002f04:	9303      	str	r3, [sp, #12]
 8002f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f08:	443b      	add	r3, r7
 8002f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f0c:	e76a      	b.n	8002de4 <_vfiprintf_r+0x78>
 8002f0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f12:	460c      	mov	r4, r1
 8002f14:	2001      	movs	r0, #1
 8002f16:	e7a8      	b.n	8002e6a <_vfiprintf_r+0xfe>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	3401      	adds	r4, #1
 8002f1c:	9305      	str	r3, [sp, #20]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f04f 0c0a 	mov.w	ip, #10
 8002f24:	4620      	mov	r0, r4
 8002f26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f2a:	3a30      	subs	r2, #48	@ 0x30
 8002f2c:	2a09      	cmp	r2, #9
 8002f2e:	d903      	bls.n	8002f38 <_vfiprintf_r+0x1cc>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0c6      	beq.n	8002ec2 <_vfiprintf_r+0x156>
 8002f34:	9105      	str	r1, [sp, #20]
 8002f36:	e7c4      	b.n	8002ec2 <_vfiprintf_r+0x156>
 8002f38:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e7f0      	b.n	8002f24 <_vfiprintf_r+0x1b8>
 8002f42:	ab03      	add	r3, sp, #12
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	462a      	mov	r2, r5
 8002f48:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <_vfiprintf_r+0x228>)
 8002f4a:	a904      	add	r1, sp, #16
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	f3af 8000 	nop.w
 8002f52:	4607      	mov	r7, r0
 8002f54:	1c78      	adds	r0, r7, #1
 8002f56:	d1d6      	bne.n	8002f06 <_vfiprintf_r+0x19a>
 8002f58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f5a:	07d9      	lsls	r1, r3, #31
 8002f5c:	d405      	bmi.n	8002f6a <_vfiprintf_r+0x1fe>
 8002f5e:	89ab      	ldrh	r3, [r5, #12]
 8002f60:	059a      	lsls	r2, r3, #22
 8002f62:	d402      	bmi.n	8002f6a <_vfiprintf_r+0x1fe>
 8002f64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f66:	f7ff fddd 	bl	8002b24 <__retarget_lock_release_recursive>
 8002f6a:	89ab      	ldrh	r3, [r5, #12]
 8002f6c:	065b      	lsls	r3, r3, #25
 8002f6e:	f53f af1f 	bmi.w	8002db0 <_vfiprintf_r+0x44>
 8002f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f74:	e71e      	b.n	8002db4 <_vfiprintf_r+0x48>
 8002f76:	ab03      	add	r3, sp, #12
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	462a      	mov	r2, r5
 8002f7c:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <_vfiprintf_r+0x228>)
 8002f7e:	a904      	add	r1, sp, #16
 8002f80:	4630      	mov	r0, r6
 8002f82:	f000 f879 	bl	8003078 <_printf_i>
 8002f86:	e7e4      	b.n	8002f52 <_vfiprintf_r+0x1e6>
 8002f88:	080036dc 	.word	0x080036dc
 8002f8c:	080036e6 	.word	0x080036e6
 8002f90:	00000000 	.word	0x00000000
 8002f94:	08002d47 	.word	0x08002d47
 8002f98:	080036e2 	.word	0x080036e2

08002f9c <_printf_common>:
 8002f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa0:	4616      	mov	r6, r2
 8002fa2:	4698      	mov	r8, r3
 8002fa4:	688a      	ldr	r2, [r1, #8]
 8002fa6:	690b      	ldr	r3, [r1, #16]
 8002fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002fac:	4293      	cmp	r3, r2
 8002fae:	bfb8      	it	lt
 8002fb0:	4613      	movlt	r3, r2
 8002fb2:	6033      	str	r3, [r6, #0]
 8002fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002fb8:	4607      	mov	r7, r0
 8002fba:	460c      	mov	r4, r1
 8002fbc:	b10a      	cbz	r2, 8002fc2 <_printf_common+0x26>
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	6033      	str	r3, [r6, #0]
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	0699      	lsls	r1, r3, #26
 8002fc6:	bf42      	ittt	mi
 8002fc8:	6833      	ldrmi	r3, [r6, #0]
 8002fca:	3302      	addmi	r3, #2
 8002fcc:	6033      	strmi	r3, [r6, #0]
 8002fce:	6825      	ldr	r5, [r4, #0]
 8002fd0:	f015 0506 	ands.w	r5, r5, #6
 8002fd4:	d106      	bne.n	8002fe4 <_printf_common+0x48>
 8002fd6:	f104 0a19 	add.w	sl, r4, #25
 8002fda:	68e3      	ldr	r3, [r4, #12]
 8002fdc:	6832      	ldr	r2, [r6, #0]
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	42ab      	cmp	r3, r5
 8002fe2:	dc26      	bgt.n	8003032 <_printf_common+0x96>
 8002fe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fe8:	6822      	ldr	r2, [r4, #0]
 8002fea:	3b00      	subs	r3, #0
 8002fec:	bf18      	it	ne
 8002fee:	2301      	movne	r3, #1
 8002ff0:	0692      	lsls	r2, r2, #26
 8002ff2:	d42b      	bmi.n	800304c <_printf_common+0xb0>
 8002ff4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	4638      	mov	r0, r7
 8002ffc:	47c8      	blx	r9
 8002ffe:	3001      	adds	r0, #1
 8003000:	d01e      	beq.n	8003040 <_printf_common+0xa4>
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	6922      	ldr	r2, [r4, #16]
 8003006:	f003 0306 	and.w	r3, r3, #6
 800300a:	2b04      	cmp	r3, #4
 800300c:	bf02      	ittt	eq
 800300e:	68e5      	ldreq	r5, [r4, #12]
 8003010:	6833      	ldreq	r3, [r6, #0]
 8003012:	1aed      	subeq	r5, r5, r3
 8003014:	68a3      	ldr	r3, [r4, #8]
 8003016:	bf0c      	ite	eq
 8003018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800301c:	2500      	movne	r5, #0
 800301e:	4293      	cmp	r3, r2
 8003020:	bfc4      	itt	gt
 8003022:	1a9b      	subgt	r3, r3, r2
 8003024:	18ed      	addgt	r5, r5, r3
 8003026:	2600      	movs	r6, #0
 8003028:	341a      	adds	r4, #26
 800302a:	42b5      	cmp	r5, r6
 800302c:	d11a      	bne.n	8003064 <_printf_common+0xc8>
 800302e:	2000      	movs	r0, #0
 8003030:	e008      	b.n	8003044 <_printf_common+0xa8>
 8003032:	2301      	movs	r3, #1
 8003034:	4652      	mov	r2, sl
 8003036:	4641      	mov	r1, r8
 8003038:	4638      	mov	r0, r7
 800303a:	47c8      	blx	r9
 800303c:	3001      	adds	r0, #1
 800303e:	d103      	bne.n	8003048 <_printf_common+0xac>
 8003040:	f04f 30ff 	mov.w	r0, #4294967295
 8003044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003048:	3501      	adds	r5, #1
 800304a:	e7c6      	b.n	8002fda <_printf_common+0x3e>
 800304c:	18e1      	adds	r1, r4, r3
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	2030      	movs	r0, #48	@ 0x30
 8003052:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003056:	4422      	add	r2, r4
 8003058:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800305c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003060:	3302      	adds	r3, #2
 8003062:	e7c7      	b.n	8002ff4 <_printf_common+0x58>
 8003064:	2301      	movs	r3, #1
 8003066:	4622      	mov	r2, r4
 8003068:	4641      	mov	r1, r8
 800306a:	4638      	mov	r0, r7
 800306c:	47c8      	blx	r9
 800306e:	3001      	adds	r0, #1
 8003070:	d0e6      	beq.n	8003040 <_printf_common+0xa4>
 8003072:	3601      	adds	r6, #1
 8003074:	e7d9      	b.n	800302a <_printf_common+0x8e>
	...

08003078 <_printf_i>:
 8003078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	7e0f      	ldrb	r7, [r1, #24]
 800307e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003080:	2f78      	cmp	r7, #120	@ 0x78
 8003082:	4691      	mov	r9, r2
 8003084:	4680      	mov	r8, r0
 8003086:	460c      	mov	r4, r1
 8003088:	469a      	mov	sl, r3
 800308a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800308e:	d807      	bhi.n	80030a0 <_printf_i+0x28>
 8003090:	2f62      	cmp	r7, #98	@ 0x62
 8003092:	d80a      	bhi.n	80030aa <_printf_i+0x32>
 8003094:	2f00      	cmp	r7, #0
 8003096:	f000 80d1 	beq.w	800323c <_printf_i+0x1c4>
 800309a:	2f58      	cmp	r7, #88	@ 0x58
 800309c:	f000 80b8 	beq.w	8003210 <_printf_i+0x198>
 80030a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80030a8:	e03a      	b.n	8003120 <_printf_i+0xa8>
 80030aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80030ae:	2b15      	cmp	r3, #21
 80030b0:	d8f6      	bhi.n	80030a0 <_printf_i+0x28>
 80030b2:	a101      	add	r1, pc, #4	@ (adr r1, 80030b8 <_printf_i+0x40>)
 80030b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030b8:	08003111 	.word	0x08003111
 80030bc:	08003125 	.word	0x08003125
 80030c0:	080030a1 	.word	0x080030a1
 80030c4:	080030a1 	.word	0x080030a1
 80030c8:	080030a1 	.word	0x080030a1
 80030cc:	080030a1 	.word	0x080030a1
 80030d0:	08003125 	.word	0x08003125
 80030d4:	080030a1 	.word	0x080030a1
 80030d8:	080030a1 	.word	0x080030a1
 80030dc:	080030a1 	.word	0x080030a1
 80030e0:	080030a1 	.word	0x080030a1
 80030e4:	08003223 	.word	0x08003223
 80030e8:	0800314f 	.word	0x0800314f
 80030ec:	080031dd 	.word	0x080031dd
 80030f0:	080030a1 	.word	0x080030a1
 80030f4:	080030a1 	.word	0x080030a1
 80030f8:	08003245 	.word	0x08003245
 80030fc:	080030a1 	.word	0x080030a1
 8003100:	0800314f 	.word	0x0800314f
 8003104:	080030a1 	.word	0x080030a1
 8003108:	080030a1 	.word	0x080030a1
 800310c:	080031e5 	.word	0x080031e5
 8003110:	6833      	ldr	r3, [r6, #0]
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6032      	str	r2, [r6, #0]
 8003118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800311c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003120:	2301      	movs	r3, #1
 8003122:	e09c      	b.n	800325e <_printf_i+0x1e6>
 8003124:	6833      	ldr	r3, [r6, #0]
 8003126:	6820      	ldr	r0, [r4, #0]
 8003128:	1d19      	adds	r1, r3, #4
 800312a:	6031      	str	r1, [r6, #0]
 800312c:	0606      	lsls	r6, r0, #24
 800312e:	d501      	bpl.n	8003134 <_printf_i+0xbc>
 8003130:	681d      	ldr	r5, [r3, #0]
 8003132:	e003      	b.n	800313c <_printf_i+0xc4>
 8003134:	0645      	lsls	r5, r0, #25
 8003136:	d5fb      	bpl.n	8003130 <_printf_i+0xb8>
 8003138:	f9b3 5000 	ldrsh.w	r5, [r3]
 800313c:	2d00      	cmp	r5, #0
 800313e:	da03      	bge.n	8003148 <_printf_i+0xd0>
 8003140:	232d      	movs	r3, #45	@ 0x2d
 8003142:	426d      	negs	r5, r5
 8003144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003148:	4858      	ldr	r0, [pc, #352]	@ (80032ac <_printf_i+0x234>)
 800314a:	230a      	movs	r3, #10
 800314c:	e011      	b.n	8003172 <_printf_i+0xfa>
 800314e:	6821      	ldr	r1, [r4, #0]
 8003150:	6833      	ldr	r3, [r6, #0]
 8003152:	0608      	lsls	r0, r1, #24
 8003154:	f853 5b04 	ldr.w	r5, [r3], #4
 8003158:	d402      	bmi.n	8003160 <_printf_i+0xe8>
 800315a:	0649      	lsls	r1, r1, #25
 800315c:	bf48      	it	mi
 800315e:	b2ad      	uxthmi	r5, r5
 8003160:	2f6f      	cmp	r7, #111	@ 0x6f
 8003162:	4852      	ldr	r0, [pc, #328]	@ (80032ac <_printf_i+0x234>)
 8003164:	6033      	str	r3, [r6, #0]
 8003166:	bf14      	ite	ne
 8003168:	230a      	movne	r3, #10
 800316a:	2308      	moveq	r3, #8
 800316c:	2100      	movs	r1, #0
 800316e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003172:	6866      	ldr	r6, [r4, #4]
 8003174:	60a6      	str	r6, [r4, #8]
 8003176:	2e00      	cmp	r6, #0
 8003178:	db05      	blt.n	8003186 <_printf_i+0x10e>
 800317a:	6821      	ldr	r1, [r4, #0]
 800317c:	432e      	orrs	r6, r5
 800317e:	f021 0104 	bic.w	r1, r1, #4
 8003182:	6021      	str	r1, [r4, #0]
 8003184:	d04b      	beq.n	800321e <_printf_i+0x1a6>
 8003186:	4616      	mov	r6, r2
 8003188:	fbb5 f1f3 	udiv	r1, r5, r3
 800318c:	fb03 5711 	mls	r7, r3, r1, r5
 8003190:	5dc7      	ldrb	r7, [r0, r7]
 8003192:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003196:	462f      	mov	r7, r5
 8003198:	42bb      	cmp	r3, r7
 800319a:	460d      	mov	r5, r1
 800319c:	d9f4      	bls.n	8003188 <_printf_i+0x110>
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d10b      	bne.n	80031ba <_printf_i+0x142>
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	07df      	lsls	r7, r3, #31
 80031a6:	d508      	bpl.n	80031ba <_printf_i+0x142>
 80031a8:	6923      	ldr	r3, [r4, #16]
 80031aa:	6861      	ldr	r1, [r4, #4]
 80031ac:	4299      	cmp	r1, r3
 80031ae:	bfde      	ittt	le
 80031b0:	2330      	movle	r3, #48	@ 0x30
 80031b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031ba:	1b92      	subs	r2, r2, r6
 80031bc:	6122      	str	r2, [r4, #16]
 80031be:	f8cd a000 	str.w	sl, [sp]
 80031c2:	464b      	mov	r3, r9
 80031c4:	aa03      	add	r2, sp, #12
 80031c6:	4621      	mov	r1, r4
 80031c8:	4640      	mov	r0, r8
 80031ca:	f7ff fee7 	bl	8002f9c <_printf_common>
 80031ce:	3001      	adds	r0, #1
 80031d0:	d14a      	bne.n	8003268 <_printf_i+0x1f0>
 80031d2:	f04f 30ff 	mov.w	r0, #4294967295
 80031d6:	b004      	add	sp, #16
 80031d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	f043 0320 	orr.w	r3, r3, #32
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	4832      	ldr	r0, [pc, #200]	@ (80032b0 <_printf_i+0x238>)
 80031e6:	2778      	movs	r7, #120	@ 0x78
 80031e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	6831      	ldr	r1, [r6, #0]
 80031f0:	061f      	lsls	r7, r3, #24
 80031f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80031f6:	d402      	bmi.n	80031fe <_printf_i+0x186>
 80031f8:	065f      	lsls	r7, r3, #25
 80031fa:	bf48      	it	mi
 80031fc:	b2ad      	uxthmi	r5, r5
 80031fe:	6031      	str	r1, [r6, #0]
 8003200:	07d9      	lsls	r1, r3, #31
 8003202:	bf44      	itt	mi
 8003204:	f043 0320 	orrmi.w	r3, r3, #32
 8003208:	6023      	strmi	r3, [r4, #0]
 800320a:	b11d      	cbz	r5, 8003214 <_printf_i+0x19c>
 800320c:	2310      	movs	r3, #16
 800320e:	e7ad      	b.n	800316c <_printf_i+0xf4>
 8003210:	4826      	ldr	r0, [pc, #152]	@ (80032ac <_printf_i+0x234>)
 8003212:	e7e9      	b.n	80031e8 <_printf_i+0x170>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	f023 0320 	bic.w	r3, r3, #32
 800321a:	6023      	str	r3, [r4, #0]
 800321c:	e7f6      	b.n	800320c <_printf_i+0x194>
 800321e:	4616      	mov	r6, r2
 8003220:	e7bd      	b.n	800319e <_printf_i+0x126>
 8003222:	6833      	ldr	r3, [r6, #0]
 8003224:	6825      	ldr	r5, [r4, #0]
 8003226:	6961      	ldr	r1, [r4, #20]
 8003228:	1d18      	adds	r0, r3, #4
 800322a:	6030      	str	r0, [r6, #0]
 800322c:	062e      	lsls	r6, r5, #24
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	d501      	bpl.n	8003236 <_printf_i+0x1be>
 8003232:	6019      	str	r1, [r3, #0]
 8003234:	e002      	b.n	800323c <_printf_i+0x1c4>
 8003236:	0668      	lsls	r0, r5, #25
 8003238:	d5fb      	bpl.n	8003232 <_printf_i+0x1ba>
 800323a:	8019      	strh	r1, [r3, #0]
 800323c:	2300      	movs	r3, #0
 800323e:	6123      	str	r3, [r4, #16]
 8003240:	4616      	mov	r6, r2
 8003242:	e7bc      	b.n	80031be <_printf_i+0x146>
 8003244:	6833      	ldr	r3, [r6, #0]
 8003246:	1d1a      	adds	r2, r3, #4
 8003248:	6032      	str	r2, [r6, #0]
 800324a:	681e      	ldr	r6, [r3, #0]
 800324c:	6862      	ldr	r2, [r4, #4]
 800324e:	2100      	movs	r1, #0
 8003250:	4630      	mov	r0, r6
 8003252:	f7fc ffbd 	bl	80001d0 <memchr>
 8003256:	b108      	cbz	r0, 800325c <_printf_i+0x1e4>
 8003258:	1b80      	subs	r0, r0, r6
 800325a:	6060      	str	r0, [r4, #4]
 800325c:	6863      	ldr	r3, [r4, #4]
 800325e:	6123      	str	r3, [r4, #16]
 8003260:	2300      	movs	r3, #0
 8003262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003266:	e7aa      	b.n	80031be <_printf_i+0x146>
 8003268:	6923      	ldr	r3, [r4, #16]
 800326a:	4632      	mov	r2, r6
 800326c:	4649      	mov	r1, r9
 800326e:	4640      	mov	r0, r8
 8003270:	47d0      	blx	sl
 8003272:	3001      	adds	r0, #1
 8003274:	d0ad      	beq.n	80031d2 <_printf_i+0x15a>
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	079b      	lsls	r3, r3, #30
 800327a:	d413      	bmi.n	80032a4 <_printf_i+0x22c>
 800327c:	68e0      	ldr	r0, [r4, #12]
 800327e:	9b03      	ldr	r3, [sp, #12]
 8003280:	4298      	cmp	r0, r3
 8003282:	bfb8      	it	lt
 8003284:	4618      	movlt	r0, r3
 8003286:	e7a6      	b.n	80031d6 <_printf_i+0x15e>
 8003288:	2301      	movs	r3, #1
 800328a:	4632      	mov	r2, r6
 800328c:	4649      	mov	r1, r9
 800328e:	4640      	mov	r0, r8
 8003290:	47d0      	blx	sl
 8003292:	3001      	adds	r0, #1
 8003294:	d09d      	beq.n	80031d2 <_printf_i+0x15a>
 8003296:	3501      	adds	r5, #1
 8003298:	68e3      	ldr	r3, [r4, #12]
 800329a:	9903      	ldr	r1, [sp, #12]
 800329c:	1a5b      	subs	r3, r3, r1
 800329e:	42ab      	cmp	r3, r5
 80032a0:	dcf2      	bgt.n	8003288 <_printf_i+0x210>
 80032a2:	e7eb      	b.n	800327c <_printf_i+0x204>
 80032a4:	2500      	movs	r5, #0
 80032a6:	f104 0619 	add.w	r6, r4, #25
 80032aa:	e7f5      	b.n	8003298 <_printf_i+0x220>
 80032ac:	080036ed 	.word	0x080036ed
 80032b0:	080036fe 	.word	0x080036fe

080032b4 <__sflush_r>:
 80032b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032bc:	0716      	lsls	r6, r2, #28
 80032be:	4605      	mov	r5, r0
 80032c0:	460c      	mov	r4, r1
 80032c2:	d454      	bmi.n	800336e <__sflush_r+0xba>
 80032c4:	684b      	ldr	r3, [r1, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	dc02      	bgt.n	80032d0 <__sflush_r+0x1c>
 80032ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	dd48      	ble.n	8003362 <__sflush_r+0xae>
 80032d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032d2:	2e00      	cmp	r6, #0
 80032d4:	d045      	beq.n	8003362 <__sflush_r+0xae>
 80032d6:	2300      	movs	r3, #0
 80032d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80032dc:	682f      	ldr	r7, [r5, #0]
 80032de:	6a21      	ldr	r1, [r4, #32]
 80032e0:	602b      	str	r3, [r5, #0]
 80032e2:	d030      	beq.n	8003346 <__sflush_r+0x92>
 80032e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	0759      	lsls	r1, r3, #29
 80032ea:	d505      	bpl.n	80032f8 <__sflush_r+0x44>
 80032ec:	6863      	ldr	r3, [r4, #4]
 80032ee:	1ad2      	subs	r2, r2, r3
 80032f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80032f2:	b10b      	cbz	r3, 80032f8 <__sflush_r+0x44>
 80032f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032f6:	1ad2      	subs	r2, r2, r3
 80032f8:	2300      	movs	r3, #0
 80032fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032fc:	6a21      	ldr	r1, [r4, #32]
 80032fe:	4628      	mov	r0, r5
 8003300:	47b0      	blx	r6
 8003302:	1c43      	adds	r3, r0, #1
 8003304:	89a3      	ldrh	r3, [r4, #12]
 8003306:	d106      	bne.n	8003316 <__sflush_r+0x62>
 8003308:	6829      	ldr	r1, [r5, #0]
 800330a:	291d      	cmp	r1, #29
 800330c:	d82b      	bhi.n	8003366 <__sflush_r+0xb2>
 800330e:	4a2a      	ldr	r2, [pc, #168]	@ (80033b8 <__sflush_r+0x104>)
 8003310:	40ca      	lsrs	r2, r1
 8003312:	07d6      	lsls	r6, r2, #31
 8003314:	d527      	bpl.n	8003366 <__sflush_r+0xb2>
 8003316:	2200      	movs	r2, #0
 8003318:	6062      	str	r2, [r4, #4]
 800331a:	04d9      	lsls	r1, r3, #19
 800331c:	6922      	ldr	r2, [r4, #16]
 800331e:	6022      	str	r2, [r4, #0]
 8003320:	d504      	bpl.n	800332c <__sflush_r+0x78>
 8003322:	1c42      	adds	r2, r0, #1
 8003324:	d101      	bne.n	800332a <__sflush_r+0x76>
 8003326:	682b      	ldr	r3, [r5, #0]
 8003328:	b903      	cbnz	r3, 800332c <__sflush_r+0x78>
 800332a:	6560      	str	r0, [r4, #84]	@ 0x54
 800332c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800332e:	602f      	str	r7, [r5, #0]
 8003330:	b1b9      	cbz	r1, 8003362 <__sflush_r+0xae>
 8003332:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003336:	4299      	cmp	r1, r3
 8003338:	d002      	beq.n	8003340 <__sflush_r+0x8c>
 800333a:	4628      	mov	r0, r5
 800333c:	f7ff fbf4 	bl	8002b28 <_free_r>
 8003340:	2300      	movs	r3, #0
 8003342:	6363      	str	r3, [r4, #52]	@ 0x34
 8003344:	e00d      	b.n	8003362 <__sflush_r+0xae>
 8003346:	2301      	movs	r3, #1
 8003348:	4628      	mov	r0, r5
 800334a:	47b0      	blx	r6
 800334c:	4602      	mov	r2, r0
 800334e:	1c50      	adds	r0, r2, #1
 8003350:	d1c9      	bne.n	80032e6 <__sflush_r+0x32>
 8003352:	682b      	ldr	r3, [r5, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0c6      	beq.n	80032e6 <__sflush_r+0x32>
 8003358:	2b1d      	cmp	r3, #29
 800335a:	d001      	beq.n	8003360 <__sflush_r+0xac>
 800335c:	2b16      	cmp	r3, #22
 800335e:	d11e      	bne.n	800339e <__sflush_r+0xea>
 8003360:	602f      	str	r7, [r5, #0]
 8003362:	2000      	movs	r0, #0
 8003364:	e022      	b.n	80033ac <__sflush_r+0xf8>
 8003366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800336a:	b21b      	sxth	r3, r3
 800336c:	e01b      	b.n	80033a6 <__sflush_r+0xf2>
 800336e:	690f      	ldr	r7, [r1, #16]
 8003370:	2f00      	cmp	r7, #0
 8003372:	d0f6      	beq.n	8003362 <__sflush_r+0xae>
 8003374:	0793      	lsls	r3, r2, #30
 8003376:	680e      	ldr	r6, [r1, #0]
 8003378:	bf08      	it	eq
 800337a:	694b      	ldreq	r3, [r1, #20]
 800337c:	600f      	str	r7, [r1, #0]
 800337e:	bf18      	it	ne
 8003380:	2300      	movne	r3, #0
 8003382:	eba6 0807 	sub.w	r8, r6, r7
 8003386:	608b      	str	r3, [r1, #8]
 8003388:	f1b8 0f00 	cmp.w	r8, #0
 800338c:	dde9      	ble.n	8003362 <__sflush_r+0xae>
 800338e:	6a21      	ldr	r1, [r4, #32]
 8003390:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003392:	4643      	mov	r3, r8
 8003394:	463a      	mov	r2, r7
 8003396:	4628      	mov	r0, r5
 8003398:	47b0      	blx	r6
 800339a:	2800      	cmp	r0, #0
 800339c:	dc08      	bgt.n	80033b0 <__sflush_r+0xfc>
 800339e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033a6:	81a3      	strh	r3, [r4, #12]
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b0:	4407      	add	r7, r0
 80033b2:	eba8 0800 	sub.w	r8, r8, r0
 80033b6:	e7e7      	b.n	8003388 <__sflush_r+0xd4>
 80033b8:	20400001 	.word	0x20400001

080033bc <_fflush_r>:
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	690b      	ldr	r3, [r1, #16]
 80033c0:	4605      	mov	r5, r0
 80033c2:	460c      	mov	r4, r1
 80033c4:	b913      	cbnz	r3, 80033cc <_fflush_r+0x10>
 80033c6:	2500      	movs	r5, #0
 80033c8:	4628      	mov	r0, r5
 80033ca:	bd38      	pop	{r3, r4, r5, pc}
 80033cc:	b118      	cbz	r0, 80033d6 <_fflush_r+0x1a>
 80033ce:	6a03      	ldr	r3, [r0, #32]
 80033d0:	b90b      	cbnz	r3, 80033d6 <_fflush_r+0x1a>
 80033d2:	f7ff faa1 	bl	8002918 <__sinit>
 80033d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f3      	beq.n	80033c6 <_fflush_r+0xa>
 80033de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80033e0:	07d0      	lsls	r0, r2, #31
 80033e2:	d404      	bmi.n	80033ee <_fflush_r+0x32>
 80033e4:	0599      	lsls	r1, r3, #22
 80033e6:	d402      	bmi.n	80033ee <_fflush_r+0x32>
 80033e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ea:	f7ff fb9a 	bl	8002b22 <__retarget_lock_acquire_recursive>
 80033ee:	4628      	mov	r0, r5
 80033f0:	4621      	mov	r1, r4
 80033f2:	f7ff ff5f 	bl	80032b4 <__sflush_r>
 80033f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033f8:	07da      	lsls	r2, r3, #31
 80033fa:	4605      	mov	r5, r0
 80033fc:	d4e4      	bmi.n	80033c8 <_fflush_r+0xc>
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	059b      	lsls	r3, r3, #22
 8003402:	d4e1      	bmi.n	80033c8 <_fflush_r+0xc>
 8003404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003406:	f7ff fb8d 	bl	8002b24 <__retarget_lock_release_recursive>
 800340a:	e7dd      	b.n	80033c8 <_fflush_r+0xc>

0800340c <__swbuf_r>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	460e      	mov	r6, r1
 8003410:	4614      	mov	r4, r2
 8003412:	4605      	mov	r5, r0
 8003414:	b118      	cbz	r0, 800341e <__swbuf_r+0x12>
 8003416:	6a03      	ldr	r3, [r0, #32]
 8003418:	b90b      	cbnz	r3, 800341e <__swbuf_r+0x12>
 800341a:	f7ff fa7d 	bl	8002918 <__sinit>
 800341e:	69a3      	ldr	r3, [r4, #24]
 8003420:	60a3      	str	r3, [r4, #8]
 8003422:	89a3      	ldrh	r3, [r4, #12]
 8003424:	071a      	lsls	r2, r3, #28
 8003426:	d501      	bpl.n	800342c <__swbuf_r+0x20>
 8003428:	6923      	ldr	r3, [r4, #16]
 800342a:	b943      	cbnz	r3, 800343e <__swbuf_r+0x32>
 800342c:	4621      	mov	r1, r4
 800342e:	4628      	mov	r0, r5
 8003430:	f000 f82a 	bl	8003488 <__swsetup_r>
 8003434:	b118      	cbz	r0, 800343e <__swbuf_r+0x32>
 8003436:	f04f 37ff 	mov.w	r7, #4294967295
 800343a:	4638      	mov	r0, r7
 800343c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	6922      	ldr	r2, [r4, #16]
 8003442:	1a98      	subs	r0, r3, r2
 8003444:	6963      	ldr	r3, [r4, #20]
 8003446:	b2f6      	uxtb	r6, r6
 8003448:	4283      	cmp	r3, r0
 800344a:	4637      	mov	r7, r6
 800344c:	dc05      	bgt.n	800345a <__swbuf_r+0x4e>
 800344e:	4621      	mov	r1, r4
 8003450:	4628      	mov	r0, r5
 8003452:	f7ff ffb3 	bl	80033bc <_fflush_r>
 8003456:	2800      	cmp	r0, #0
 8003458:	d1ed      	bne.n	8003436 <__swbuf_r+0x2a>
 800345a:	68a3      	ldr	r3, [r4, #8]
 800345c:	3b01      	subs	r3, #1
 800345e:	60a3      	str	r3, [r4, #8]
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	6022      	str	r2, [r4, #0]
 8003466:	701e      	strb	r6, [r3, #0]
 8003468:	6962      	ldr	r2, [r4, #20]
 800346a:	1c43      	adds	r3, r0, #1
 800346c:	429a      	cmp	r2, r3
 800346e:	d004      	beq.n	800347a <__swbuf_r+0x6e>
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	07db      	lsls	r3, r3, #31
 8003474:	d5e1      	bpl.n	800343a <__swbuf_r+0x2e>
 8003476:	2e0a      	cmp	r6, #10
 8003478:	d1df      	bne.n	800343a <__swbuf_r+0x2e>
 800347a:	4621      	mov	r1, r4
 800347c:	4628      	mov	r0, r5
 800347e:	f7ff ff9d 	bl	80033bc <_fflush_r>
 8003482:	2800      	cmp	r0, #0
 8003484:	d0d9      	beq.n	800343a <__swbuf_r+0x2e>
 8003486:	e7d6      	b.n	8003436 <__swbuf_r+0x2a>

08003488 <__swsetup_r>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4b29      	ldr	r3, [pc, #164]	@ (8003530 <__swsetup_r+0xa8>)
 800348c:	4605      	mov	r5, r0
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	460c      	mov	r4, r1
 8003492:	b118      	cbz	r0, 800349c <__swsetup_r+0x14>
 8003494:	6a03      	ldr	r3, [r0, #32]
 8003496:	b90b      	cbnz	r3, 800349c <__swsetup_r+0x14>
 8003498:	f7ff fa3e 	bl	8002918 <__sinit>
 800349c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034a0:	0719      	lsls	r1, r3, #28
 80034a2:	d422      	bmi.n	80034ea <__swsetup_r+0x62>
 80034a4:	06da      	lsls	r2, r3, #27
 80034a6:	d407      	bmi.n	80034b8 <__swsetup_r+0x30>
 80034a8:	2209      	movs	r2, #9
 80034aa:	602a      	str	r2, [r5, #0]
 80034ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034b0:	81a3      	strh	r3, [r4, #12]
 80034b2:	f04f 30ff 	mov.w	r0, #4294967295
 80034b6:	e033      	b.n	8003520 <__swsetup_r+0x98>
 80034b8:	0758      	lsls	r0, r3, #29
 80034ba:	d512      	bpl.n	80034e2 <__swsetup_r+0x5a>
 80034bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80034be:	b141      	cbz	r1, 80034d2 <__swsetup_r+0x4a>
 80034c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80034c4:	4299      	cmp	r1, r3
 80034c6:	d002      	beq.n	80034ce <__swsetup_r+0x46>
 80034c8:	4628      	mov	r0, r5
 80034ca:	f7ff fb2d 	bl	8002b28 <_free_r>
 80034ce:	2300      	movs	r3, #0
 80034d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80034d8:	81a3      	strh	r3, [r4, #12]
 80034da:	2300      	movs	r3, #0
 80034dc:	6063      	str	r3, [r4, #4]
 80034de:	6923      	ldr	r3, [r4, #16]
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	f043 0308 	orr.w	r3, r3, #8
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	6923      	ldr	r3, [r4, #16]
 80034ec:	b94b      	cbnz	r3, 8003502 <__swsetup_r+0x7a>
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80034f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034f8:	d003      	beq.n	8003502 <__swsetup_r+0x7a>
 80034fa:	4621      	mov	r1, r4
 80034fc:	4628      	mov	r0, r5
 80034fe:	f000 f84f 	bl	80035a0 <__smakebuf_r>
 8003502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003506:	f013 0201 	ands.w	r2, r3, #1
 800350a:	d00a      	beq.n	8003522 <__swsetup_r+0x9a>
 800350c:	2200      	movs	r2, #0
 800350e:	60a2      	str	r2, [r4, #8]
 8003510:	6962      	ldr	r2, [r4, #20]
 8003512:	4252      	negs	r2, r2
 8003514:	61a2      	str	r2, [r4, #24]
 8003516:	6922      	ldr	r2, [r4, #16]
 8003518:	b942      	cbnz	r2, 800352c <__swsetup_r+0xa4>
 800351a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800351e:	d1c5      	bne.n	80034ac <__swsetup_r+0x24>
 8003520:	bd38      	pop	{r3, r4, r5, pc}
 8003522:	0799      	lsls	r1, r3, #30
 8003524:	bf58      	it	pl
 8003526:	6962      	ldrpl	r2, [r4, #20]
 8003528:	60a2      	str	r2, [r4, #8]
 800352a:	e7f4      	b.n	8003516 <__swsetup_r+0x8e>
 800352c:	2000      	movs	r0, #0
 800352e:	e7f7      	b.n	8003520 <__swsetup_r+0x98>
 8003530:	20000018 	.word	0x20000018

08003534 <_sbrk_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4d06      	ldr	r5, [pc, #24]	@ (8003550 <_sbrk_r+0x1c>)
 8003538:	2300      	movs	r3, #0
 800353a:	4604      	mov	r4, r0
 800353c:	4608      	mov	r0, r1
 800353e:	602b      	str	r3, [r5, #0]
 8003540:	f7fd fa56 	bl	80009f0 <_sbrk>
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	d102      	bne.n	800354e <_sbrk_r+0x1a>
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	b103      	cbz	r3, 800354e <_sbrk_r+0x1a>
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	bd38      	pop	{r3, r4, r5, pc}
 8003550:	20000250 	.word	0x20000250

08003554 <__swhatbuf_r>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	460c      	mov	r4, r1
 8003558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800355c:	2900      	cmp	r1, #0
 800355e:	b096      	sub	sp, #88	@ 0x58
 8003560:	4615      	mov	r5, r2
 8003562:	461e      	mov	r6, r3
 8003564:	da0d      	bge.n	8003582 <__swhatbuf_r+0x2e>
 8003566:	89a3      	ldrh	r3, [r4, #12]
 8003568:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	bf14      	ite	ne
 8003572:	2340      	movne	r3, #64	@ 0x40
 8003574:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003578:	2000      	movs	r0, #0
 800357a:	6031      	str	r1, [r6, #0]
 800357c:	602b      	str	r3, [r5, #0]
 800357e:	b016      	add	sp, #88	@ 0x58
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	466a      	mov	r2, sp
 8003584:	f000 f848 	bl	8003618 <_fstat_r>
 8003588:	2800      	cmp	r0, #0
 800358a:	dbec      	blt.n	8003566 <__swhatbuf_r+0x12>
 800358c:	9901      	ldr	r1, [sp, #4]
 800358e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003592:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003596:	4259      	negs	r1, r3
 8003598:	4159      	adcs	r1, r3
 800359a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800359e:	e7eb      	b.n	8003578 <__swhatbuf_r+0x24>

080035a0 <__smakebuf_r>:
 80035a0:	898b      	ldrh	r3, [r1, #12]
 80035a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035a4:	079d      	lsls	r5, r3, #30
 80035a6:	4606      	mov	r6, r0
 80035a8:	460c      	mov	r4, r1
 80035aa:	d507      	bpl.n	80035bc <__smakebuf_r+0x1c>
 80035ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	6123      	str	r3, [r4, #16]
 80035b4:	2301      	movs	r3, #1
 80035b6:	6163      	str	r3, [r4, #20]
 80035b8:	b003      	add	sp, #12
 80035ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035bc:	ab01      	add	r3, sp, #4
 80035be:	466a      	mov	r2, sp
 80035c0:	f7ff ffc8 	bl	8003554 <__swhatbuf_r>
 80035c4:	9f00      	ldr	r7, [sp, #0]
 80035c6:	4605      	mov	r5, r0
 80035c8:	4639      	mov	r1, r7
 80035ca:	4630      	mov	r0, r6
 80035cc:	f7ff fb18 	bl	8002c00 <_malloc_r>
 80035d0:	b948      	cbnz	r0, 80035e6 <__smakebuf_r+0x46>
 80035d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035d6:	059a      	lsls	r2, r3, #22
 80035d8:	d4ee      	bmi.n	80035b8 <__smakebuf_r+0x18>
 80035da:	f023 0303 	bic.w	r3, r3, #3
 80035de:	f043 0302 	orr.w	r3, r3, #2
 80035e2:	81a3      	strh	r3, [r4, #12]
 80035e4:	e7e2      	b.n	80035ac <__smakebuf_r+0xc>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	6020      	str	r0, [r4, #0]
 80035ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ee:	81a3      	strh	r3, [r4, #12]
 80035f0:	9b01      	ldr	r3, [sp, #4]
 80035f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80035f6:	b15b      	cbz	r3, 8003610 <__smakebuf_r+0x70>
 80035f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035fc:	4630      	mov	r0, r6
 80035fe:	f000 f81d 	bl	800363c <_isatty_r>
 8003602:	b128      	cbz	r0, 8003610 <__smakebuf_r+0x70>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	81a3      	strh	r3, [r4, #12]
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	431d      	orrs	r5, r3
 8003614:	81a5      	strh	r5, [r4, #12]
 8003616:	e7cf      	b.n	80035b8 <__smakebuf_r+0x18>

08003618 <_fstat_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4d07      	ldr	r5, [pc, #28]	@ (8003638 <_fstat_r+0x20>)
 800361c:	2300      	movs	r3, #0
 800361e:	4604      	mov	r4, r0
 8003620:	4608      	mov	r0, r1
 8003622:	4611      	mov	r1, r2
 8003624:	602b      	str	r3, [r5, #0]
 8003626:	f7fd f9bb 	bl	80009a0 <_fstat>
 800362a:	1c43      	adds	r3, r0, #1
 800362c:	d102      	bne.n	8003634 <_fstat_r+0x1c>
 800362e:	682b      	ldr	r3, [r5, #0]
 8003630:	b103      	cbz	r3, 8003634 <_fstat_r+0x1c>
 8003632:	6023      	str	r3, [r4, #0]
 8003634:	bd38      	pop	{r3, r4, r5, pc}
 8003636:	bf00      	nop
 8003638:	20000250 	.word	0x20000250

0800363c <_isatty_r>:
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	4d06      	ldr	r5, [pc, #24]	@ (8003658 <_isatty_r+0x1c>)
 8003640:	2300      	movs	r3, #0
 8003642:	4604      	mov	r4, r0
 8003644:	4608      	mov	r0, r1
 8003646:	602b      	str	r3, [r5, #0]
 8003648:	f7fd f9ba 	bl	80009c0 <_isatty>
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	d102      	bne.n	8003656 <_isatty_r+0x1a>
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	b103      	cbz	r3, 8003656 <_isatty_r+0x1a>
 8003654:	6023      	str	r3, [r4, #0]
 8003656:	bd38      	pop	{r3, r4, r5, pc}
 8003658:	20000250 	.word	0x20000250

0800365c <_init>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr

08003668 <_fini>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	bf00      	nop
 800366c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366e:	bc08      	pop	{r3}
 8003670:	469e      	mov	lr, r3
 8003672:	4770      	bx	lr
