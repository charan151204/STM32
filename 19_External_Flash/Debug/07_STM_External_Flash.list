
07_STM_External_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006644  08006644  00007644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006700  08006700  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006700  08006700  00007700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006708  08006708  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800670c  0800670c  0000770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006710  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000005c  0800676c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800676c  00008354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113b5  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000217d  00000000  00000000  00019441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0001b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cec  00000000  00000000  0001c638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027148  00000000  00000000  0001d324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b9a  00000000  00000000  0004446c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f49de  00000000  00000000  00057006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b9e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c48  00000000  00000000  0014ba28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00150670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800662c 	.word	0x0800662c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800662c 	.word	0x0800662c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b988 	b.w	8000d84 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	468e      	mov	lr, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	4688      	mov	r8, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d962      	bls.n	8000b68 <__udivmoddi4+0xdc>
 8000aa2:	fab2 f682 	clz	r6, r2
 8000aa6:	b14e      	cbz	r6, 8000abc <__udivmoddi4+0x30>
 8000aa8:	f1c6 0320 	rsb	r3, r6, #32
 8000aac:	fa01 f806 	lsl.w	r8, r1, r6
 8000ab0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab4:	40b7      	lsls	r7, r6
 8000ab6:	ea43 0808 	orr.w	r8, r3, r8
 8000aba:	40b4      	lsls	r4, r6
 8000abc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac0:	fa1f fc87 	uxth.w	ip, r7
 8000ac4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ac8:	0c23      	lsrs	r3, r4, #16
 8000aca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ace:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d909      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ae0:	f080 80ea 	bcs.w	8000cb8 <__udivmoddi4+0x22c>
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f240 80e7 	bls.w	8000cb8 <__udivmoddi4+0x22c>
 8000aea:	3902      	subs	r1, #2
 8000aec:	443b      	add	r3, r7
 8000aee:	1a9a      	subs	r2, r3, r2
 8000af0:	b2a3      	uxth	r3, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b02:	459c      	cmp	ip, r3
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0x8e>
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0c:	f080 80d6 	bcs.w	8000cbc <__udivmoddi4+0x230>
 8000b10:	459c      	cmp	ip, r3
 8000b12:	f240 80d3 	bls.w	8000cbc <__udivmoddi4+0x230>
 8000b16:	443b      	add	r3, r7
 8000b18:	3802      	subs	r0, #2
 8000b1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b1e:	eba3 030c 	sub.w	r3, r3, ip
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11d      	cbz	r5, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40f3      	lsrs	r3, r6
 8000b28:	2200      	movs	r2, #0
 8000b2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d905      	bls.n	8000b42 <__udivmoddi4+0xb6>
 8000b36:	b10d      	cbz	r5, 8000b3c <__udivmoddi4+0xb0>
 8000b38:	e9c5 0100 	strd	r0, r1, [r5]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e7f5      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b42:	fab3 f183 	clz	r1, r3
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d146      	bne.n	8000bd8 <__udivmoddi4+0x14c>
 8000b4a:	4573      	cmp	r3, lr
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xc8>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 8105 	bhi.w	8000d5e <__udivmoddi4+0x2d2>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4690      	mov	r8, r2
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d0e5      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b62:	e9c5 4800 	strd	r4, r8, [r5]
 8000b66:	e7e2      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f000 8090 	beq.w	8000c8e <__udivmoddi4+0x202>
 8000b6e:	fab2 f682 	clz	r6, r2
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	f040 80a4 	bne.w	8000cc0 <__udivmoddi4+0x234>
 8000b78:	1a8a      	subs	r2, r1, r2
 8000b7a:	0c03      	lsrs	r3, r0, #16
 8000b7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b80:	b280      	uxth	r0, r0
 8000b82:	b2bc      	uxth	r4, r7
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b92:	fb04 f20c 	mul.w	r2, r4, ip
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d907      	bls.n	8000baa <__udivmoddi4+0x11e>
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x11c>
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	f200 80e0 	bhi.w	8000d68 <__udivmoddi4+0x2dc>
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	1a9b      	subs	r3, r3, r2
 8000bac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bb8:	fb02 f404 	mul.w	r4, r2, r4
 8000bbc:	429c      	cmp	r4, r3
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x144>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x142>
 8000bc8:	429c      	cmp	r4, r3
 8000bca:	f200 80ca 	bhi.w	8000d62 <__udivmoddi4+0x2d6>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	1b1b      	subs	r3, r3, r4
 8000bd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bd6:	e7a5      	b.n	8000b24 <__udivmoddi4+0x98>
 8000bd8:	f1c1 0620 	rsb	r6, r1, #32
 8000bdc:	408b      	lsls	r3, r1
 8000bde:	fa22 f706 	lsr.w	r7, r2, r6
 8000be2:	431f      	orrs	r7, r3
 8000be4:	fa0e f401 	lsl.w	r4, lr, r1
 8000be8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	fa1f fc87 	uxth.w	ip, r7
 8000bfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000c02:	0c1c      	lsrs	r4, r3, #16
 8000c04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	d909      	bls.n	8000c2c <__udivmoddi4+0x1a0>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c1e:	f080 809c 	bcs.w	8000d5a <__udivmoddi4+0x2ce>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f240 8099 	bls.w	8000d5a <__udivmoddi4+0x2ce>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	fa1f fe83 	uxth.w	lr, r3
 8000c34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c38:	fb09 4413 	mls	r4, r9, r3, r4
 8000c3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x1ce>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c4e:	f080 8082 	bcs.w	8000d56 <__udivmoddi4+0x2ca>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d97f      	bls.n	8000d56 <__udivmoddi4+0x2ca>
 8000c56:	3b02      	subs	r3, #2
 8000c58:	443c      	add	r4, r7
 8000c5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c5e:	eba4 040c 	sub.w	r4, r4, ip
 8000c62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c66:	4564      	cmp	r4, ip
 8000c68:	4673      	mov	r3, lr
 8000c6a:	46e1      	mov	r9, ip
 8000c6c:	d362      	bcc.n	8000d34 <__udivmoddi4+0x2a8>
 8000c6e:	d05f      	beq.n	8000d30 <__udivmoddi4+0x2a4>
 8000c70:	b15d      	cbz	r5, 8000c8a <__udivmoddi4+0x1fe>
 8000c72:	ebb8 0203 	subs.w	r2, r8, r3
 8000c76:	eb64 0409 	sbc.w	r4, r4, r9
 8000c7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c82:	431e      	orrs	r6, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e74f      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000c8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c92:	0c01      	lsrs	r1, r0, #16
 8000c94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c98:	b280      	uxth	r0, r0
 8000c9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	463c      	mov	r4, r7
 8000ca4:	46b8      	mov	r8, r7
 8000ca6:	46be      	mov	lr, r7
 8000ca8:	2620      	movs	r6, #32
 8000caa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cae:	eba2 0208 	sub.w	r2, r2, r8
 8000cb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cb6:	e766      	b.n	8000b86 <__udivmoddi4+0xfa>
 8000cb8:	4601      	mov	r1, r0
 8000cba:	e718      	b.n	8000aee <__udivmoddi4+0x62>
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	e72c      	b.n	8000b1a <__udivmoddi4+0x8e>
 8000cc0:	f1c6 0220 	rsb	r2, r6, #32
 8000cc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cc8:	40b7      	lsls	r7, r6
 8000cca:	40b1      	lsls	r1, r6
 8000ccc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cda:	b2bc      	uxth	r4, r7
 8000cdc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce6:	fb08 f904 	mul.w	r9, r8, r4
 8000cea:	40b0      	lsls	r0, r6
 8000cec:	4589      	cmp	r9, r1
 8000cee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cf2:	b280      	uxth	r0, r0
 8000cf4:	d93e      	bls.n	8000d74 <__udivmoddi4+0x2e8>
 8000cf6:	1879      	adds	r1, r7, r1
 8000cf8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cfc:	d201      	bcs.n	8000d02 <__udivmoddi4+0x276>
 8000cfe:	4589      	cmp	r9, r1
 8000d00:	d81f      	bhi.n	8000d42 <__udivmoddi4+0x2b6>
 8000d02:	eba1 0109 	sub.w	r1, r1, r9
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fb09 f804 	mul.w	r8, r9, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	b292      	uxth	r2, r2
 8000d14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d18:	4542      	cmp	r2, r8
 8000d1a:	d229      	bcs.n	8000d70 <__udivmoddi4+0x2e4>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d22:	d2c4      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d24:	4542      	cmp	r2, r8
 8000d26:	d2c2      	bcs.n	8000cae <__udivmoddi4+0x222>
 8000d28:	f1a9 0102 	sub.w	r1, r9, #2
 8000d2c:	443a      	add	r2, r7
 8000d2e:	e7be      	b.n	8000cae <__udivmoddi4+0x222>
 8000d30:	45f0      	cmp	r8, lr
 8000d32:	d29d      	bcs.n	8000c70 <__udivmoddi4+0x1e4>
 8000d34:	ebbe 0302 	subs.w	r3, lr, r2
 8000d38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	46e1      	mov	r9, ip
 8000d40:	e796      	b.n	8000c70 <__udivmoddi4+0x1e4>
 8000d42:	eba7 0909 	sub.w	r9, r7, r9
 8000d46:	4449      	add	r1, r9
 8000d48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d50:	fb09 f804 	mul.w	r8, r9, r4
 8000d54:	e7db      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d56:	4673      	mov	r3, lr
 8000d58:	e77f      	b.n	8000c5a <__udivmoddi4+0x1ce>
 8000d5a:	4650      	mov	r0, sl
 8000d5c:	e766      	b.n	8000c2c <__udivmoddi4+0x1a0>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e6fd      	b.n	8000b5e <__udivmoddi4+0xd2>
 8000d62:	443b      	add	r3, r7
 8000d64:	3a02      	subs	r2, #2
 8000d66:	e733      	b.n	8000bd0 <__udivmoddi4+0x144>
 8000d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d6c:	443b      	add	r3, r7
 8000d6e:	e71c      	b.n	8000baa <__udivmoddi4+0x11e>
 8000d70:	4649      	mov	r1, r9
 8000d72:	e79c      	b.n	8000cae <__udivmoddi4+0x222>
 8000d74:	eba1 0109 	sub.w	r1, r1, r9
 8000d78:	46c4      	mov	ip, r8
 8000d7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7e:	fb09 f804 	mul.w	r8, r9, r4
 8000d82:	e7c4      	b.n	8000d0e <__udivmoddi4+0x282>

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <Ultrasonic_Trigger>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Ultrasonic_Trigger(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2102      	movs	r1, #2
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d94:	f001 f894 	bl	8001ec0 <HAL_GPIO_WritePin>
  HAL_Delay(1);  // 10us pulse
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f000 fdb1 	bl	8001900 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2102      	movs	r1, #2
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da6:	f001 f88b 	bl	8001ec0 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <Ultrasonic_Read>:

uint32_t Ultrasonic_Read(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  isFirstCaptured = 0;
 8000db4:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <Ultrasonic_Read+0x24>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <Ultrasonic_Read+0x28>)
 8000dbe:	f003 fb3b 	bl	8004438 <HAL_TIM_IC_Start_IT>
  Ultrasonic_Trigger();
 8000dc2:	f7ff ffe1 	bl	8000d88 <Ultrasonic_Trigger>
  HAL_Delay(60); // wait for measurement
 8000dc6:	203c      	movs	r0, #60	@ 0x3c
 8000dc8:	f000 fd9a 	bl	8001900 <HAL_Delay>
  return distance;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	@ (8000ddc <Ultrasonic_Read+0x2c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200001b8 	.word	0x200001b8
 8000dd8:	200000dc 	.word	0x200000dc
 8000ddc:	200001bc 	.word	0x200001bc

08000de0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7f1b      	ldrb	r3, [r3, #28]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d177      	bne.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x100>
  {
    if(isFirstCaptured==0)
 8000df0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d11a      	bne.n	8000e2e <HAL_TIM_IC_CaptureCallback+0x4e>
    {
      icVal1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000df8:	2100      	movs	r1, #0
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f003 fec8 	bl	8004b90 <HAL_TIM_ReadCapturedValue>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a3c      	ldr	r2, [pc, #240]	@ (8000ef4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e04:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6a1a      	ldr	r2, [r3, #32]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 020a 	bic.w	r2, r2, #10
 8000e14:	621a      	str	r2, [r3, #32]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6a1a      	ldr	r2, [r3, #32]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f042 0202 	orr.w	r2, r2, #2
 8000e24:	621a      	str	r2, [r3, #32]
      isFirstCaptured = 1;
 8000e26:	4b32      	ldr	r3, [pc, #200]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
      isFirstCaptured = 0;
      HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
    }
  }
}
 8000e2c:	e058      	b.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x100>
    else if(isFirstCaptured==1)
 8000e2e:	4b30      	ldr	r3, [pc, #192]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d154      	bne.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x100>
      icVal2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e36:	2100      	movs	r1, #0
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f003 fea9 	bl	8004b90 <HAL_TIM_ReadCapturedValue>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e42:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_COUNTER(htim,0);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	625a      	str	r2, [r3, #36]	@ 0x24
      if(icVal2 > icVal1) distance = icVal2-icVal1;
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d907      	bls.n	8000e68 <HAL_TIM_IC_CaptureCallback+0x88>
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	4a26      	ldr	r2, [pc, #152]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e009      	b.n	8000e7c <HAL_TIM_IC_CaptureCallback+0x9c>
      else distance = (0xFFFF - icVal1) + icVal2;
 8000e68:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000e76:	33ff      	adds	r3, #255	@ 0xff
 8000e78:	4a20      	ldr	r2, [pc, #128]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e7a:	6013      	str	r3, [r2, #0]
      distance = (distance * 0.034/2); // convert to cm
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb3f 	bl	8000504 <__aeabi_ui2d>
 8000e86:	a318      	add	r3, pc, #96	@ (adr r3, 8000ee8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f7ff fbb4 	bl	80005f8 <__aeabi_dmul>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f04f 0200 	mov.w	r2, #0
 8000e9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ea0:	f7ff fcd4 	bl	800084c <__aeabi_ddiv>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f7ff fdb6 	bl	8000a1c <__aeabi_d2uiz>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000eb4:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6a1a      	ldr	r2, [r3, #32]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 020a 	bic.w	r2, r2, #10
 8000ec4:	621a      	str	r2, [r3, #32]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6a12      	ldr	r2, [r2, #32]
 8000ed0:	621a      	str	r2, [r3, #32]
      isFirstCaptured = 0;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
      HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4809      	ldr	r0, [pc, #36]	@ (8000f00 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000edc:	f003 fbf6 	bl	80046cc <HAL_TIM_IC_Stop_IT>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	b020c49c 	.word	0xb020c49c
 8000eec:	3fa16872 	.word	0x3fa16872
 8000ef0:	200001b8 	.word	0x200001b8
 8000ef4:	200001b0 	.word	0x200001b0
 8000ef8:	200001b4 	.word	0x200001b4
 8000efc:	200001bc 	.word	0x200001bc
 8000f00:	200000dc 	.word	0x200000dc

08000f04 <W25Q_WriteEnable>:

/* ----------------- W25Q32 DRIVER ----------------- */
void W25Q_WriteEnable(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  uint8_t cmd = W25Q_WRITE_ENABLE;
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	71fb      	strb	r3, [r7, #7]
  FLASH_CS_LOW();
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f14:	4809      	ldr	r0, [pc, #36]	@ (8000f3c <W25Q_WriteEnable+0x38>)
 8000f16:	f000 ffd3 	bl	8001ec0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000f1a:	1df9      	adds	r1, r7, #7
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	2201      	movs	r2, #1
 8000f22:	4807      	ldr	r0, [pc, #28]	@ (8000f40 <W25Q_WriteEnable+0x3c>)
 8000f24:	f002 fba7 	bl	8003676 <HAL_SPI_Transmit>
  FLASH_CS_HIGH();
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f2e:	4803      	ldr	r0, [pc, #12]	@ (8000f3c <W25Q_WriteEnable+0x38>)
 8000f30:	f000 ffc6 	bl	8001ec0 <HAL_GPIO_WritePin>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	20000078 	.word	0x20000078

08000f44 <W25Q_ReadStatus>:

uint8_t W25Q_ReadStatus(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  uint8_t cmd = W25Q_READ_STATUS;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	71fb      	strb	r3, [r7, #7]
  uint8_t status;
  FLASH_CS_LOW();
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f54:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <W25Q_ReadStatus+0x48>)
 8000f56:	f000 ffb3 	bl	8001ec0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000f5a:	1df9      	adds	r1, r7, #7
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	2201      	movs	r2, #1
 8000f62:	480b      	ldr	r0, [pc, #44]	@ (8000f90 <W25Q_ReadStatus+0x4c>)
 8000f64:	f002 fb87 	bl	8003676 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &status, 1, HAL_MAX_DELAY);
 8000f68:	1db9      	adds	r1, r7, #6
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4807      	ldr	r0, [pc, #28]	@ (8000f90 <W25Q_ReadStatus+0x4c>)
 8000f72:	f002 fcf6 	bl	8003962 <HAL_SPI_Receive>
  FLASH_CS_HIGH();
 8000f76:	2201      	movs	r2, #1
 8000f78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f7c:	4803      	ldr	r0, [pc, #12]	@ (8000f8c <W25Q_ReadStatus+0x48>)
 8000f7e:	f000 ff9f 	bl	8001ec0 <HAL_GPIO_WritePin>
  return status;
 8000f82:	79bb      	ldrb	r3, [r7, #6]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	48000400 	.word	0x48000400
 8000f90:	20000078 	.word	0x20000078

08000f94 <W25Q_WaitBusy>:

void W25Q_WaitBusy(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  while(W25Q_ReadStatus() & 0x01);
 8000f98:	bf00      	nop
 8000f9a:	f7ff ffd3 	bl	8000f44 <W25Q_ReadStatus>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f8      	bne.n	8000f9a <W25Q_WaitBusy+0x6>
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <W25Q_PageProgram>:

void W25Q_PageProgram(uint32_t addr, uint8_t* data, uint16_t len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	80fb      	strh	r3, [r7, #6]
  uint8_t cmd[4];
  W25Q_WriteEnable();
 8000fbe:	f7ff ffa1 	bl	8000f04 <W25Q_WriteEnable>
  cmd[0] = W25Q_PAGE_PROGRAM;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	753b      	strb	r3, [r7, #20]
  cmd[1] = (addr >> 16) & 0xFF;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	0c1b      	lsrs	r3, r3, #16
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	757b      	strb	r3, [r7, #21]
  cmd[2] = (addr >> 8) & 0xFF;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	75bb      	strb	r3, [r7, #22]
  cmd[3] = addr & 0xFF;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	75fb      	strb	r3, [r7, #23]

  FLASH_CS_LOW();
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fe2:	480f      	ldr	r0, [pc, #60]	@ (8001020 <W25Q_PageProgram+0x70>)
 8000fe4:	f000 ff6c 	bl	8001ec0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 8000fe8:	f107 0114 	add.w	r1, r7, #20
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	480c      	ldr	r0, [pc, #48]	@ (8001024 <W25Q_PageProgram+0x74>)
 8000ff4:	f002 fb3f 	bl	8003676 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, data, len, HAL_MAX_DELAY);
 8000ff8:	88fa      	ldrh	r2, [r7, #6]
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	4808      	ldr	r0, [pc, #32]	@ (8001024 <W25Q_PageProgram+0x74>)
 8001002:	f002 fb38 	bl	8003676 <HAL_SPI_Transmit>
  FLASH_CS_HIGH();
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100c:	4804      	ldr	r0, [pc, #16]	@ (8001020 <W25Q_PageProgram+0x70>)
 800100e:	f000 ff57 	bl	8001ec0 <HAL_GPIO_WritePin>
  W25Q_WaitBusy();
 8001012:	f7ff ffbf 	bl	8000f94 <W25Q_WaitBusy>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	48000400 	.word	0x48000400
 8001024:	20000078 	.word	0x20000078

08001028 <W25Q_ReadData>:

void W25Q_ReadData(uint32_t addr, uint8_t* buf, uint16_t len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	4613      	mov	r3, r2
 8001034:	80fb      	strh	r3, [r7, #6]
  uint8_t cmd[4];
  cmd[0] = W25Q_READ_DATA;
 8001036:	2303      	movs	r3, #3
 8001038:	753b      	strb	r3, [r7, #20]
  cmd[1] = (addr >> 16) & 0xFF;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	0c1b      	lsrs	r3, r3, #16
 800103e:	b2db      	uxtb	r3, r3
 8001040:	757b      	strb	r3, [r7, #21]
  cmd[2] = (addr >> 8) & 0xFF;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	b2db      	uxtb	r3, r3
 8001048:	75bb      	strb	r3, [r7, #22]
  cmd[3] = addr & 0xFF;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	75fb      	strb	r3, [r7, #23]

  FLASH_CS_LOW();
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <W25Q_ReadData+0x68>)
 8001058:	f000 ff32 	bl	8001ec0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 800105c:	f107 0114 	add.w	r1, r7, #20
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	2204      	movs	r2, #4
 8001066:	480b      	ldr	r0, [pc, #44]	@ (8001094 <W25Q_ReadData+0x6c>)
 8001068:	f002 fb05 	bl	8003676 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, buf, len, HAL_MAX_DELAY);
 800106c:	88fa      	ldrh	r2, [r7, #6]
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	4807      	ldr	r0, [pc, #28]	@ (8001094 <W25Q_ReadData+0x6c>)
 8001076:	f002 fc74 	bl	8003962 <HAL_SPI_Receive>
  FLASH_CS_HIGH();
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <W25Q_ReadData+0x68>)
 8001082:	f000 ff1d 	bl	8001ec0 <HAL_GPIO_WritePin>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	48000400 	.word	0x48000400
 8001094:	20000078 	.word	0x20000078

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();
 800109e:	f000 fbb3 	bl	8001808 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  SystemClock_Config();
 80010a2:	f000 f871 	bl	8001188 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  MX_GPIO_Init();
 80010a6:	f000 f983 	bl	80013b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010aa:	f000 f951 	bl	8001350 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80010ae:	f000 f8bd 	bl	800122c <MX_SPI2_Init>
  MX_TIM2_Init();
 80010b2:	f000 f8f9 	bl	80012a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80010b6:	2100      	movs	r1, #0
 80010b8:	482d      	ldr	r0, [pc, #180]	@ (8001170 <main+0xd8>)
 80010ba:	f003 f9bd 	bl	8004438 <HAL_TIM_IC_Start_IT>
  sprintf(uart_buf, "W25Q32 Logger Start\r\n");
 80010be:	492d      	ldr	r1, [pc, #180]	@ (8001174 <main+0xdc>)
 80010c0:	482d      	ldr	r0, [pc, #180]	@ (8001178 <main+0xe0>)
 80010c2:	f004 fe13 	bl	8005cec <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80010c6:	482c      	ldr	r0, [pc, #176]	@ (8001178 <main+0xe0>)
 80010c8:	f7ff f882 	bl	80001d0 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	4928      	ldr	r1, [pc, #160]	@ (8001178 <main+0xe0>)
 80010d6:	4829      	ldr	r0, [pc, #164]	@ (800117c <main+0xe4>)
 80010d8:	f004 f8aa 	bl	8005230 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  while (1)
  {
    /* USER CODE BEGIN WHILE */
    uint32_t dist = Ultrasonic_Read();
 80010dc:	f7ff fe68 	bl	8000db0 <Ultrasonic_Read>
 80010e0:	60f8      	str	r0, [r7, #12]

    // Write distance to flash (2 bytes)
    uint8_t buf[2];
    buf[0] = (dist >> 8) & 0xFF;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	723b      	strb	r3, [r7, #8]
    buf[1] = dist & 0xFF;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	727b      	strb	r3, [r7, #9]
    W25Q_PageProgram(flash_addr, buf, 2);
 80010f0:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <main+0xe8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f107 0108 	add.w	r1, r7, #8
 80010f8:	2202      	movs	r2, #2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff58 	bl	8000fb0 <W25Q_PageProgram>

    // Read back
    uint8_t read_buf[2];
    W25Q_ReadData(flash_addr, read_buf, 2);
 8001100:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <main+0xe8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	1d39      	adds	r1, r7, #4
 8001106:	2202      	movs	r2, #2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff8d 	bl	8001028 <W25Q_ReadData>
    uint16_t dist_read = (read_buf[0]<<8) | read_buf[1];
 800110e:	793b      	ldrb	r3, [r7, #4]
 8001110:	b21b      	sxth	r3, r3
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	797b      	ldrb	r3, [r7, #5]
 8001118:	b21b      	sxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b21b      	sxth	r3, r3
 800111e:	817b      	strh	r3, [r7, #10]

    // Print
    sprintf(uart_buf, "Dist:%lu cm | Flash:%u cm @0x%06lX\r\n", dist, dist_read, flash_addr);
 8001120:	897a      	ldrh	r2, [r7, #10]
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <main+0xe8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4613      	mov	r3, r2
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4915      	ldr	r1, [pc, #84]	@ (8001184 <main+0xec>)
 800112e:	4812      	ldr	r0, [pc, #72]	@ (8001178 <main+0xe0>)
 8001130:	f004 fddc 	bl	8005cec <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8001134:	4810      	ldr	r0, [pc, #64]	@ (8001178 <main+0xe0>)
 8001136:	f7ff f84b 	bl	80001d0 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <main+0xe0>)
 8001144:	480d      	ldr	r0, [pc, #52]	@ (800117c <main+0xe4>)
 8001146:	f004 f873 	bl	8005230 <HAL_UART_Transmit>

    flash_addr += 2;
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <main+0xe8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3302      	adds	r3, #2
 8001150:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <main+0xe8>)
 8001152:	6013      	str	r3, [r2, #0]
    if(flash_addr >= 0x400000) flash_addr = 0; // wrap around 4MB
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <main+0xe8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800115c:	d302      	bcc.n	8001164 <main+0xcc>
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <main+0xe8>)
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]

    HAL_Delay(1000);
 8001164:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001168:	f000 fbca 	bl	8001900 <HAL_Delay>
  {
 800116c:	e7b6      	b.n	80010dc <main+0x44>
 800116e:	bf00      	nop
 8001170:	200000dc 	.word	0x200000dc
 8001174:	08006644 	.word	0x08006644
 8001178:	200001c4 	.word	0x200001c4
 800117c:	20000128 	.word	0x20000128
 8001180:	200001c0 	.word	0x200001c0
 8001184:	0800665c 	.word	0x0800665c

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b096      	sub	sp, #88	@ 0x58
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2244      	movs	r2, #68	@ 0x44
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fdca 	bl	8005d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011ae:	f000 fead 	bl	8001f0c <HAL_PWREx_ControlVoltageScaling>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011b8:	f000 f968 	bl	800148c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011bc:	2302      	movs	r3, #2
 80011be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c6:	2310      	movs	r3, #16
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ca:	2302      	movs	r3, #2
 80011cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ce:	2302      	movs	r3, #2
 80011d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011d6:	230a      	movs	r3, #10
 80011d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011da:	2307      	movs	r3, #7
 80011dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011de:	2302      	movs	r3, #2
 80011e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fee4 	bl	8001fb8 <HAL_RCC_OscConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011f6:	f000 f949 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fa:	230f      	movs	r3, #15
 80011fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fe:	2303      	movs	r3, #3
 8001200:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	2104      	movs	r1, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f001 faac 	bl	8002770 <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800121e:	f000 f935 	bl	800148c <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3758      	adds	r7, #88	@ 0x58
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001230:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <MX_SPI2_Init+0x74>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	@ (80012a4 <MX_SPI2_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <MX_SPI2_Init+0x74>)
 8001238:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800123c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <MX_SPI2_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <MX_SPI2_Init+0x74>)
 8001246:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800124a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_SPI2_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <MX_SPI2_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_SPI2_Init+0x74>)
 800125a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800125e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_SPI2_Init+0x74>)
 8001262:	2210      	movs	r2, #16
 8001264:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_SPI2_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_SPI2_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <MX_SPI2_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001278:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_SPI2_Init+0x74>)
 800127a:	2207      	movs	r2, #7
 800127c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800127e:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <MX_SPI2_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MX_SPI2_Init+0x74>)
 8001286:	2208      	movs	r2, #8
 8001288:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_SPI2_Init+0x74>)
 800128c:	f002 f950 	bl	8003530 <HAL_SPI_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001296:	f000 f8f9 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000078 	.word	0x20000078
 80012a4:	40003800 	.word	0x40003800

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c6:	4b21      	ldr	r3, [pc, #132]	@ (800134c <MX_TIM2_Init+0xa4>)
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <MX_TIM2_Init+0xa4>)
 80012d0:	2253      	movs	r2, #83	@ 0x53
 80012d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <MX_TIM2_Init+0xa4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <MX_TIM2_Init+0xa4>)
 80012dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_TIM2_Init+0xa4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_TIM2_Init+0xa4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80012ee:	4817      	ldr	r0, [pc, #92]	@ (800134c <MX_TIM2_Init+0xa4>)
 80012f0:	f003 f84a 	bl	8004388 <HAL_TIM_IC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012fa:	f000 f8c7 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	@ (800134c <MX_TIM2_Init+0xa4>)
 800130e:	f003 fe9b 	bl	8005048 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001318:	f000 f8b8 	bl	800148c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001320:	2301      	movs	r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <MX_TIM2_Init+0xa4>)
 8001334:	f003 fb8f 	bl	8004a56 <HAL_TIM_IC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800133e:	f000 f8a5 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200000dc 	.word	0x200000dc

08001350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001356:	4a15      	ldr	r2, [pc, #84]	@ (80013ac <MX_USART2_UART_Init+0x5c>)
 8001358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_USART2_UART_Init+0x58>)
 8001394:	f003 fefe 	bl	8005194 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800139e:	f000 f875 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000128 	.word	0x20000128
 80013ac:	40004400 	.word	0x40004400

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08a      	sub	sp, #40	@ 0x28
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001484 <MX_GPIO_Init+0xd4>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001484 <MX_GPIO_Init+0xd4>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <MX_GPIO_Init+0xd4>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013de:	4b29      	ldr	r3, [pc, #164]	@ (8001484 <MX_GPIO_Init+0xd4>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	4a28      	ldr	r2, [pc, #160]	@ (8001484 <MX_GPIO_Init+0xd4>)
 80013e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ea:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <MX_GPIO_Init+0xd4>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <MX_GPIO_Init+0xd4>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	4a22      	ldr	r2, [pc, #136]	@ (8001484 <MX_GPIO_Init+0xd4>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <MX_GPIO_Init+0xd4>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_GPIO_Init+0xd4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <MX_GPIO_Init+0xd4>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_GPIO_Init+0xd4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2102      	movs	r1, #2
 800142a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142e:	f000 fd47 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001438:	4813      	ldr	r0, [pc, #76]	@ (8001488 <MX_GPIO_Init+0xd8>)
 800143a:	f000 fd41 	bl	8001ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800143e:	2302      	movs	r3, #2
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001458:	f000 fb88 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146a:	2302      	movs	r3, #2
 800146c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4804      	ldr	r0, [pc, #16]	@ (8001488 <MX_GPIO_Init+0xd8>)
 8001476:	f000 fb79 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	@ 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	48000400 	.word	0x48000400

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <Error_Handler+0x8>

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <HAL_MspInit+0x44>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a2:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <HAL_MspInit+0x44>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <HAL_MspInit+0x44>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_MspInit+0x44>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ba:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <HAL_MspInit+0x44>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_MspInit+0x44>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	@ 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a17      	ldr	r2, [pc, #92]	@ (800155c <HAL_SPI_MspInit+0x7c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d128      	bne.n	8001554 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001502:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <HAL_SPI_MspInit+0x80>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001506:	4a16      	ldr	r2, [pc, #88]	@ (8001560 <HAL_SPI_MspInit+0x80>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150c:	6593      	str	r3, [r2, #88]	@ 0x58
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <HAL_SPI_MspInit+0x80>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001516:	613b      	str	r3, [r7, #16]
 8001518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HAL_SPI_MspInit+0x80>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151e:	4a10      	ldr	r2, [pc, #64]	@ (8001560 <HAL_SPI_MspInit+0x80>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001526:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <HAL_SPI_MspInit+0x80>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001532:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001544:	2305      	movs	r3, #5
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4805      	ldr	r0, [pc, #20]	@ (8001564 <HAL_SPI_MspInit+0x84>)
 8001550:	f000 fb0c 	bl	8001b6c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	@ 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40003800 	.word	0x40003800
 8001560:	40021000 	.word	0x40021000
 8001564:	48000400 	.word	0x48000400

08001568 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	@ 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001588:	d130      	bne.n	80015ec <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_TIM_IC_MspInit+0x8c>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158e:	4a19      	ldr	r2, [pc, #100]	@ (80015f4 <HAL_TIM_IC_MspInit+0x8c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6593      	str	r3, [r2, #88]	@ 0x58
 8001596:	4b17      	ldr	r3, [pc, #92]	@ (80015f4 <HAL_TIM_IC_MspInit+0x8c>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <HAL_TIM_IC_MspInit+0x8c>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a6:	4a13      	ldr	r2, [pc, #76]	@ (80015f4 <HAL_TIM_IC_MspInit+0x8c>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <HAL_TIM_IC_MspInit+0x8c>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ba:	2301      	movs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ca:	2301      	movs	r3, #1
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d8:	f000 fac8 	bl	8001b6c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	201c      	movs	r0, #28
 80015e2:	f000 fa8c 	bl	8001afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e6:	201c      	movs	r0, #28
 80015e8:	f000 faa5 	bl	8001b36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	@ 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0ac      	sub	sp, #176	@ 0xb0
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2288      	movs	r2, #136	@ 0x88
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f004 fb89 	bl	8005d30 <memset>
  if(huart->Instance==USART2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <HAL_UART_MspInit+0xb0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d13b      	bne.n	80016a0 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001628:	2302      	movs	r3, #2
 800162a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800162c:	2300      	movs	r3, #0
 800162e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fabf 	bl	8002bb8 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001640:	f7ff ff24 	bl	800148c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001644:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <HAL_UART_MspInit+0xb4>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	4a18      	ldr	r2, [pc, #96]	@ (80016ac <HAL_UART_MspInit+0xb4>)
 800164a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800164e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001650:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <HAL_UART_MspInit+0xb4>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <HAL_UART_MspInit+0xb4>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001660:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <HAL_UART_MspInit+0xb4>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001668:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <HAL_UART_MspInit+0xb4>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001674:	230c      	movs	r3, #12
 8001676:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168c:	2307      	movs	r3, #7
 800168e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169c:	f000 fa66 	bl	8001b6c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80016a0:	bf00      	nop
 80016a2:	37b0      	adds	r7, #176	@ 0xb0
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40004400 	.word	0x40004400
 80016ac:	40021000 	.word	0x40021000

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <NMI_Handler+0x4>

080016b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <MemManage_Handler+0x4>

080016c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001706:	f000 f8db 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <TIM2_IRQHandler+0x10>)
 8001716:	f003 f897 	bl	8004848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000dc 	.word	0x200000dc

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	@ (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	@ (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	@ (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f004 faf4 	bl	8005d40 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	@ (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20018000 	.word	0x20018000
 8001784:	00000400 	.word	0x00000400
 8001788:	20000204 	.word	0x20000204
 800178c:	20000358 	.word	0x20000358

08001790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b8:	f7ff ffea 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80017be:	490d      	ldr	r1, [pc, #52]	@ (80017f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017c0:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <LoopForever+0xe>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001800 <LoopForever+0x16>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e2:	f004 fab3 	bl	8005d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017e6:	f7ff fc57 	bl	8001098 <main>

080017ea <LoopForever>:

LoopForever:
    b LoopForever
 80017ea:	e7fe      	b.n	80017ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017f8:	08006710 	.word	0x08006710
  ldr r2, =_sbss
 80017fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001800:	20000354 	.word	0x20000354

08001804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_2_IRQHandler>
	...

08001808 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001812:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <HAL_Init+0x3c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <HAL_Init+0x3c>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181e:	2003      	movs	r0, #3
 8001820:	f000 f962 	bl	8001ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001824:	2000      	movs	r0, #0
 8001826:	f000 f80f 	bl	8001848 <HAL_InitTick>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	e001      	b.n	800183a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001836:	f7ff fe2f 	bl	8001498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800183a:	79fb      	ldrb	r3, [r7, #7]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40022000 	.word	0x40022000

08001848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001854:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <HAL_InitTick+0x6c>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d023      	beq.n	80018a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <HAL_InitTick+0x70>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <HAL_InitTick+0x6c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186a:	fbb3 f3f1 	udiv	r3, r3, r1
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f96d 	bl	8001b52 <HAL_SYSTICK_Config>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10f      	bne.n	800189e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d809      	bhi.n	8001898 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 f937 	bl	8001afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001890:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <HAL_InitTick+0x74>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e007      	b.n	80018a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e004      	b.n	80018a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	e001      	b.n	80018a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	@ (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000208 	.word	0x20000208

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000208 	.word	0x20000208

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	@ (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0b      	blt.n	80019d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	f003 021f 	and.w	r2, r3, #31
 80019c4:	4907      	ldr	r1, [pc, #28]	@ (80019e4 <__NVIC_EnableIRQ+0x38>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	2001      	movs	r0, #1
 80019ce:	fa00 f202 	lsl.w	r2, r0, r2
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100

080019e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	db0a      	blt.n	8001a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	490c      	ldr	r1, [pc, #48]	@ (8001a34 <__NVIC_SetPriority+0x4c>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a10:	e00a      	b.n	8001a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4908      	ldr	r1, [pc, #32]	@ (8001a38 <__NVIC_SetPriority+0x50>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	3b04      	subs	r3, #4
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	440b      	add	r3, r1
 8001a26:	761a      	strb	r2, [r3, #24]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	@ 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f1c3 0307 	rsb	r3, r3, #7
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	bf28      	it	cs
 8001a5a:	2304      	movcs	r3, #4
 8001a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3304      	adds	r3, #4
 8001a62:	2b06      	cmp	r3, #6
 8001a64:	d902      	bls.n	8001a6c <NVIC_EncodePriority+0x30>
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3b03      	subs	r3, #3
 8001a6a:	e000      	b.n	8001a6e <NVIC_EncodePriority+0x32>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	401a      	ands	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8e:	43d9      	mvns	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a94:	4313      	orrs	r3, r2
         );
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3724      	adds	r7, #36	@ 0x24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ab4:	d301      	bcc.n	8001aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00f      	b.n	8001ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <SysTick_Config+0x40>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac2:	210f      	movs	r1, #15
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f7ff ff8e 	bl	80019e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <SysTick_Config+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad2:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <SysTick_Config+0x40>)
 8001ad4:	2207      	movs	r2, #7
 8001ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	e000e010 	.word	0xe000e010

08001ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ff29 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff3e 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff8e 	bl	8001a3c <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5d 	bl	80019e8 <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff31 	bl	80019ac <__NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffa2 	bl	8001aa4 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7a:	e17f      	b.n	8001e7c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8171 	beq.w	8001e76 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d005      	beq.n	8001bac <HAL_GPIO_Init+0x40>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d130      	bne.n	8001c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001be2:	2201      	movs	r2, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 0201 	and.w	r2, r3, #1
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d118      	bne.n	8001c4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c20:	2201      	movs	r2, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	08db      	lsrs	r3, r3, #3
 8001c36:	f003 0201 	and.w	r2, r3, #1
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d017      	beq.n	8001c88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	6939      	ldr	r1, [r7, #16]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80ac 	beq.w	8001e76 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001e9c <HAL_GPIO_Init+0x330>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d22:	4a5e      	ldr	r2, [pc, #376]	@ (8001e9c <HAL_GPIO_Init+0x330>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001e9c <HAL_GPIO_Init+0x330>)
 8001d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d36:	4a5a      	ldr	r2, [pc, #360]	@ (8001ea0 <HAL_GPIO_Init+0x334>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d60:	d025      	beq.n	8001dae <HAL_GPIO_Init+0x242>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4f      	ldr	r2, [pc, #316]	@ (8001ea4 <HAL_GPIO_Init+0x338>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01f      	beq.n	8001daa <HAL_GPIO_Init+0x23e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ea8 <HAL_GPIO_Init+0x33c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d019      	beq.n	8001da6 <HAL_GPIO_Init+0x23a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4d      	ldr	r2, [pc, #308]	@ (8001eac <HAL_GPIO_Init+0x340>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0x236>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb0 <HAL_GPIO_Init+0x344>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00d      	beq.n	8001d9e <HAL_GPIO_Init+0x232>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4b      	ldr	r2, [pc, #300]	@ (8001eb4 <HAL_GPIO_Init+0x348>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <HAL_GPIO_Init+0x22e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb8 <HAL_GPIO_Init+0x34c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_GPIO_Init+0x22a>
 8001d92:	2306      	movs	r3, #6
 8001d94:	e00c      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00a      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e008      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001d9e:	2304      	movs	r3, #4
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001da2:	2303      	movs	r3, #3
 8001da4:	e004      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e002      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_GPIO_Init+0x244>
 8001dae:	2300      	movs	r3, #0
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	f002 0203 	and.w	r2, r2, #3
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4093      	lsls	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dc0:	4937      	ldr	r1, [pc, #220]	@ (8001ea0 <HAL_GPIO_Init+0x334>)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dce:	4b3b      	ldr	r3, [pc, #236]	@ (8001ebc <HAL_GPIO_Init+0x350>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001df2:	4a32      	ldr	r2, [pc, #200]	@ (8001ebc <HAL_GPIO_Init+0x350>)
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001df8:	4b30      	ldr	r3, [pc, #192]	@ (8001ebc <HAL_GPIO_Init+0x350>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e1c:	4a27      	ldr	r2, [pc, #156]	@ (8001ebc <HAL_GPIO_Init+0x350>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e22:	4b26      	ldr	r3, [pc, #152]	@ (8001ebc <HAL_GPIO_Init+0x350>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e46:	4a1d      	ldr	r2, [pc, #116]	@ (8001ebc <HAL_GPIO_Init+0x350>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <HAL_GPIO_Init+0x350>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e70:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <HAL_GPIO_Init+0x350>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa22 f303 	lsr.w	r3, r2, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f47f ae78 	bne.w	8001b7c <HAL_GPIO_Init+0x10>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	48000400 	.word	0x48000400
 8001ea8:	48000800 	.word	0x48000800
 8001eac:	48000c00 	.word	0x48000c00
 8001eb0:	48001000 	.word	0x48001000
 8001eb4:	48001400 	.word	0x48001400
 8001eb8:	48001800 	.word	0x48001800
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed0:	787b      	ldrb	r3, [r7, #1]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001edc:	e002      	b.n	8001ee4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ef4:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40007000 	.word	0x40007000

08001f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f1a:	d130      	bne.n	8001f7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f1c:	4b23      	ldr	r3, [pc, #140]	@ (8001fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f28:	d038      	beq.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2a:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f32:	4a1e      	ldr	r2, [pc, #120]	@ (8001fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2232      	movs	r2, #50	@ 0x32
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	0c9b      	lsrs	r3, r3, #18
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f50:	e002      	b.n	8001f58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f58:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f64:	d102      	bne.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f2      	bne.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f78:	d110      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e00f      	b.n	8001f9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8a:	d007      	beq.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f8c:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f94:	4a05      	ldr	r2, [pc, #20]	@ (8001fac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	431bde83 	.word	0x431bde83

08001fb8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e3ca      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fca:	4b97      	ldr	r3, [pc, #604]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd4:	4b94      	ldr	r3, [pc, #592]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80e4 	beq.w	80021b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_RCC_OscConfig+0x4a>
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	2b0c      	cmp	r3, #12
 8001ff6:	f040 808b 	bne.w	8002110 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	f040 8087 	bne.w	8002110 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002002:	4b89      	ldr	r3, [pc, #548]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <HAL_RCC_OscConfig+0x62>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e3a2      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1a      	ldr	r2, [r3, #32]
 800201e:	4b82      	ldr	r3, [pc, #520]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d004      	beq.n	8002034 <HAL_RCC_OscConfig+0x7c>
 800202a:	4b7f      	ldr	r3, [pc, #508]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002032:	e005      	b.n	8002040 <HAL_RCC_OscConfig+0x88>
 8002034:	4b7c      	ldr	r3, [pc, #496]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002040:	4293      	cmp	r3, r2
 8002042:	d223      	bcs.n	800208c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fd55 	bl	8002af8 <RCC_SetFlashLatencyFromMSIRange>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e383      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002058:	4b73      	ldr	r3, [pc, #460]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a72      	ldr	r2, [pc, #456]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800205e:	f043 0308 	orr.w	r3, r3, #8
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b70      	ldr	r3, [pc, #448]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	496d      	ldr	r1, [pc, #436]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002076:	4b6c      	ldr	r3, [pc, #432]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	4968      	ldr	r1, [pc, #416]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
 800208a:	e025      	b.n	80020d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800208c:	4b66      	ldr	r3, [pc, #408]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a65      	ldr	r2, [pc, #404]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b63      	ldr	r3, [pc, #396]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4960      	ldr	r1, [pc, #384]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	495b      	ldr	r1, [pc, #364]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d109      	bne.n	80020d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fd15 	bl	8002af8 <RCC_SetFlashLatencyFromMSIRange>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e343      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020d8:	f000 fc4a 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b52      	ldr	r3, [pc, #328]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	4950      	ldr	r1, [pc, #320]	@ (800222c <HAL_RCC_OscConfig+0x274>)
 80020ea:	5ccb      	ldrb	r3, [r1, r3]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
 80020f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002230 <HAL_RCC_OscConfig+0x278>)
 80020f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002234 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fba3 	bl	8001848 <HAL_InitTick>
 8002102:	4603      	mov	r3, r0
 8002104:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d052      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	e327      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d032      	beq.n	800217e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002118:	4b43      	ldr	r3, [pc, #268]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a42      	ldr	r2, [pc, #264]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002124:	f7ff fbe0 	bl	80018e8 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800212c:	f7ff fbdc 	bl	80018e8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e310      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800213e:	4b3a      	ldr	r3, [pc, #232]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800214a:	4b37      	ldr	r3, [pc, #220]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a36      	ldr	r2, [pc, #216]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002150:	f043 0308 	orr.w	r3, r3, #8
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b34      	ldr	r3, [pc, #208]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4931      	ldr	r1, [pc, #196]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002168:	4b2f      	ldr	r3, [pc, #188]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	492c      	ldr	r1, [pc, #176]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	e01a      	b.n	80021b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800217e:	4b2a      	ldr	r3, [pc, #168]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a29      	ldr	r2, [pc, #164]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002184:	f023 0301 	bic.w	r3, r3, #1
 8002188:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800218a:	f7ff fbad 	bl	80018e8 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002192:	f7ff fba9 	bl	80018e8 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e2dd      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021a4:	4b20      	ldr	r3, [pc, #128]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f0      	bne.n	8002192 <HAL_RCC_OscConfig+0x1da>
 80021b0:	e000      	b.n	80021b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d074      	beq.n	80022aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x21a>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	d10e      	bne.n	80021ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d10b      	bne.n	80021ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d064      	beq.n	80022a8 <HAL_RCC_OscConfig+0x2f0>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d160      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e2ba      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f2:	d106      	bne.n	8002202 <HAL_RCC_OscConfig+0x24a>
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e026      	b.n	8002250 <HAL_RCC_OscConfig+0x298>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800220a:	d115      	bne.n	8002238 <HAL_RCC_OscConfig+0x280>
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a05      	ldr	r2, [pc, #20]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 8002212:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a02      	ldr	r2, [pc, #8]	@ (8002228 <HAL_RCC_OscConfig+0x270>)
 800221e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e014      	b.n	8002250 <HAL_RCC_OscConfig+0x298>
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	08006684 	.word	0x08006684
 8002230:	20000000 	.word	0x20000000
 8002234:	20000004 	.word	0x20000004
 8002238:	4ba0      	ldr	r3, [pc, #640]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a9f      	ldr	r2, [pc, #636]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b9d      	ldr	r3, [pc, #628]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a9c      	ldr	r2, [pc, #624]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7ff fb46 	bl	80018e8 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff fb42 	bl	80018e8 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e276      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002272:	4b92      	ldr	r3, [pc, #584]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x2a8>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7ff fb32 	bl	80018e8 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff fb2e 	bl	80018e8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	@ 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e262      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229a:	4b88      	ldr	r3, [pc, #544]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x2d0>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d060      	beq.n	8002378 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_OscConfig+0x310>
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d119      	bne.n	80022f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d116      	bne.n	80022f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c8:	4b7c      	ldr	r3, [pc, #496]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_OscConfig+0x328>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e23f      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b76      	ldr	r3, [pc, #472]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	4973      	ldr	r1, [pc, #460]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f4:	e040      	b.n	8002378 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d023      	beq.n	8002346 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022fe:	4b6f      	ldr	r3, [pc, #444]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a6e      	ldr	r2, [pc, #440]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230a:	f7ff faed 	bl	80018e8 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002312:	f7ff fae9 	bl	80018e8 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e21d      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002324:	4b65      	ldr	r3, [pc, #404]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002330:	4b62      	ldr	r3, [pc, #392]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	495f      	ldr	r1, [pc, #380]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
 8002344:	e018      	b.n	8002378 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b5d      	ldr	r3, [pc, #372]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5c      	ldr	r2, [pc, #368]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 800234c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7ff fac9 	bl	80018e8 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235a:	f7ff fac5 	bl	80018e8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e1f9      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800236c:	4b53      	ldr	r3, [pc, #332]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d03c      	beq.n	80023fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01c      	beq.n	80023c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800238c:	4b4b      	ldr	r3, [pc, #300]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 800238e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002392:	4a4a      	ldr	r2, [pc, #296]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7ff faa4 	bl	80018e8 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a4:	f7ff faa0 	bl	80018e8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1d4      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b6:	4b41      	ldr	r3, [pc, #260]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 80023b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0ef      	beq.n	80023a4 <HAL_RCC_OscConfig+0x3ec>
 80023c4:	e01b      	b.n	80023fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c6:	4b3d      	ldr	r3, [pc, #244]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 80023c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023cc:	4a3b      	ldr	r2, [pc, #236]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7ff fa87 	bl	80018e8 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023de:	f7ff fa83 	bl	80018e8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1b7      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023f0:	4b32      	ldr	r3, [pc, #200]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 80023f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1ef      	bne.n	80023de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 80a6 	beq.w	8002558 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800240c:	2300      	movs	r3, #0
 800240e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002410:	4b2a      	ldr	r3, [pc, #168]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10d      	bne.n	8002438 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	4b27      	ldr	r3, [pc, #156]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	4a26      	ldr	r2, [pc, #152]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002426:	6593      	str	r3, [r2, #88]	@ 0x58
 8002428:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002434:	2301      	movs	r3, #1
 8002436:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002438:	4b21      	ldr	r3, [pc, #132]	@ (80024c0 <HAL_RCC_OscConfig+0x508>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002440:	2b00      	cmp	r3, #0
 8002442:	d118      	bne.n	8002476 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002444:	4b1e      	ldr	r3, [pc, #120]	@ (80024c0 <HAL_RCC_OscConfig+0x508>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1d      	ldr	r2, [pc, #116]	@ (80024c0 <HAL_RCC_OscConfig+0x508>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002450:	f7ff fa4a 	bl	80018e8 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002458:	f7ff fa46 	bl	80018e8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e17a      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246a:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <HAL_RCC_OscConfig+0x508>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <HAL_RCC_OscConfig+0x4d8>
 800247e:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002484:	4a0d      	ldr	r2, [pc, #52]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800248e:	e029      	b.n	80024e4 <HAL_RCC_OscConfig+0x52c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b05      	cmp	r3, #5
 8002496:	d115      	bne.n	80024c4 <HAL_RCC_OscConfig+0x50c>
 8002498:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249e:	4a07      	ldr	r2, [pc, #28]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ae:	4a03      	ldr	r2, [pc, #12]	@ (80024bc <HAL_RCC_OscConfig+0x504>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024b8:	e014      	b.n	80024e4 <HAL_RCC_OscConfig+0x52c>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40007000 	.word	0x40007000
 80024c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ca:	4a9b      	ldr	r2, [pc, #620]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024d4:	4b98      	ldr	r3, [pc, #608]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024da:	4a97      	ldr	r2, [pc, #604]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80024dc:	f023 0304 	bic.w	r3, r3, #4
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d016      	beq.n	800251a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7ff f9fc 	bl	80018e8 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f2:	e00a      	b.n	800250a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7ff f9f8 	bl	80018e8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e12a      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250a:	4b8b      	ldr	r3, [pc, #556]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ed      	beq.n	80024f4 <HAL_RCC_OscConfig+0x53c>
 8002518:	e015      	b.n	8002546 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7ff f9e5 	bl	80018e8 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7ff f9e1 	bl	80018e8 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e113      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002538:	4b7f      	ldr	r3, [pc, #508]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ed      	bne.n	8002522 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002546:	7ffb      	ldrb	r3, [r7, #31]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254c:	4b7a      	ldr	r3, [pc, #488]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002550:	4a79      	ldr	r2, [pc, #484]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 8002552:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002556:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80fe 	beq.w	800275e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	2b02      	cmp	r3, #2
 8002568:	f040 80d0 	bne.w	800270c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800256c:	4b72      	ldr	r3, [pc, #456]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	429a      	cmp	r2, r3
 800257e:	d130      	bne.n	80025e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	3b01      	subs	r3, #1
 800258c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d127      	bne.n	80025e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d11f      	bne.n	80025e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025ac:	2a07      	cmp	r2, #7
 80025ae:	bf14      	ite	ne
 80025b0:	2201      	movne	r2, #1
 80025b2:	2200      	moveq	r2, #0
 80025b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d113      	bne.n	80025e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	3b01      	subs	r3, #1
 80025c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d109      	bne.n	80025e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	3b01      	subs	r3, #1
 80025dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d06e      	beq.n	80026c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b0c      	cmp	r3, #12
 80025e6:	d069      	beq.n	80026bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025e8:	4b53      	ldr	r3, [pc, #332]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025f4:	4b50      	ldr	r3, [pc, #320]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0ad      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002604:	4b4c      	ldr	r3, [pc, #304]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a4b      	ldr	r2, [pc, #300]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 800260a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800260e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002610:	f7ff f96a 	bl	80018e8 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002618:	f7ff f966 	bl	80018e8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e09a      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262a:	4b43      	ldr	r3, [pc, #268]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002636:	4b40      	ldr	r3, [pc, #256]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	4b40      	ldr	r3, [pc, #256]	@ (800273c <HAL_RCC_OscConfig+0x784>)
 800263c:	4013      	ands	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002646:	3a01      	subs	r2, #1
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	4311      	orrs	r1, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002650:	0212      	lsls	r2, r2, #8
 8002652:	4311      	orrs	r1, r2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002658:	0852      	lsrs	r2, r2, #1
 800265a:	3a01      	subs	r2, #1
 800265c:	0552      	lsls	r2, r2, #21
 800265e:	4311      	orrs	r1, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002664:	0852      	lsrs	r2, r2, #1
 8002666:	3a01      	subs	r2, #1
 8002668:	0652      	lsls	r2, r2, #25
 800266a:	4311      	orrs	r1, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002670:	0912      	lsrs	r2, r2, #4
 8002672:	0452      	lsls	r2, r2, #17
 8002674:	430a      	orrs	r2, r1
 8002676:	4930      	ldr	r1, [pc, #192]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 8002678:	4313      	orrs	r3, r2
 800267a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800267c:	4b2e      	ldr	r3, [pc, #184]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2d      	ldr	r2, [pc, #180]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002686:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002688:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a2a      	ldr	r2, [pc, #168]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 800268e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002692:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002694:	f7ff f928 	bl	80018e8 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269c:	f7ff f924 	bl	80018e8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e058      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ae:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ba:	e050      	b.n	800275e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e04f      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d148      	bne.n	800275e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a19      	ldr	r2, [pc, #100]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d8:	4b17      	ldr	r3, [pc, #92]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a16      	ldr	r2, [pc, #88]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 80026de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026e4:	f7ff f900 	bl	80018e8 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7ff f8fc 	bl	80018e8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e030      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x734>
 800270a:	e028      	b.n	800275e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d023      	beq.n	800275a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a08      	ldr	r2, [pc, #32]	@ (8002738 <HAL_RCC_OscConfig+0x780>)
 8002718:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800271c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271e:	f7ff f8e3 	bl	80018e8 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002724:	e00c      	b.n	8002740 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002726:	f7ff f8df 	bl	80018e8 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d905      	bls.n	8002740 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e013      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
 8002738:	40021000 	.word	0x40021000
 800273c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002740:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_RCC_OscConfig+0x7b0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ec      	bne.n	8002726 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800274c:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <HAL_RCC_OscConfig+0x7b0>)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	4905      	ldr	r1, [pc, #20]	@ (8002768 <HAL_RCC_OscConfig+0x7b0>)
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_RCC_OscConfig+0x7b4>)
 8002754:	4013      	ands	r3, r2
 8002756:	60cb      	str	r3, [r1, #12]
 8002758:	e001      	b.n	800275e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3720      	adds	r7, #32
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	feeefffc 	.word	0xfeeefffc

08002770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e0e7      	b.n	8002954 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002784:	4b75      	ldr	r3, [pc, #468]	@ (800295c <HAL_RCC_ClockConfig+0x1ec>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d910      	bls.n	80027b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002792:	4b72      	ldr	r3, [pc, #456]	@ (800295c <HAL_RCC_ClockConfig+0x1ec>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 0207 	bic.w	r2, r3, #7
 800279a:	4970      	ldr	r1, [pc, #448]	@ (800295c <HAL_RCC_ClockConfig+0x1ec>)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a2:	4b6e      	ldr	r3, [pc, #440]	@ (800295c <HAL_RCC_ClockConfig+0x1ec>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0cf      	b.n	8002954 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d010      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	4b66      	ldr	r3, [pc, #408]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d908      	bls.n	80027e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b63      	ldr	r3, [pc, #396]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4960      	ldr	r1, [pc, #384]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d04c      	beq.n	8002888 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d121      	bne.n	8002846 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0a6      	b.n	8002954 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800280e:	4b54      	ldr	r3, [pc, #336]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d115      	bne.n	8002846 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e09a      	b.n	8002954 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002826:	4b4e      	ldr	r3, [pc, #312]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e08e      	b.n	8002954 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002836:	4b4a      	ldr	r3, [pc, #296]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e086      	b.n	8002954 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b46      	ldr	r3, [pc, #280]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4943      	ldr	r1, [pc, #268]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7ff f846 	bl	80018e8 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7ff f842 	bl	80018e8 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e06e      	b.n	8002954 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b3a      	ldr	r3, [pc, #232]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	4b31      	ldr	r3, [pc, #196]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d208      	bcs.n	80028b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	492b      	ldr	r1, [pc, #172]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b6:	4b29      	ldr	r3, [pc, #164]	@ (800295c <HAL_RCC_ClockConfig+0x1ec>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d210      	bcs.n	80028e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c4:	4b25      	ldr	r3, [pc, #148]	@ (800295c <HAL_RCC_ClockConfig+0x1ec>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 0207 	bic.w	r2, r3, #7
 80028cc:	4923      	ldr	r1, [pc, #140]	@ (800295c <HAL_RCC_ClockConfig+0x1ec>)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d4:	4b21      	ldr	r3, [pc, #132]	@ (800295c <HAL_RCC_ClockConfig+0x1ec>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d001      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e036      	b.n	8002954 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d008      	beq.n	8002904 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	4918      	ldr	r1, [pc, #96]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002910:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4910      	ldr	r1, [pc, #64]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002924:	f000 f824 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <HAL_RCC_ClockConfig+0x1f0>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	490b      	ldr	r1, [pc, #44]	@ (8002964 <HAL_RCC_ClockConfig+0x1f4>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
 8002940:	4a09      	ldr	r2, [pc, #36]	@ (8002968 <HAL_RCC_ClockConfig+0x1f8>)
 8002942:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002944:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCC_ClockConfig+0x1fc>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe ff7d 	bl	8001848 <HAL_InitTick>
 800294e:	4603      	mov	r3, r0
 8002950:	72fb      	strb	r3, [r7, #11]

  return status;
 8002952:	7afb      	ldrb	r3, [r7, #11]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40022000 	.word	0x40022000
 8002960:	40021000 	.word	0x40021000
 8002964:	08006684 	.word	0x08006684
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004

08002970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	@ 0x24
 8002974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002988:	4b3b      	ldr	r3, [pc, #236]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d121      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d11e      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029a4:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029b0:	4b31      	ldr	r3, [pc, #196]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e005      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029cc:	4a2b      	ldr	r2, [pc, #172]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10d      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029e8:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e004      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029f4:	4b23      	ldr	r3, [pc, #140]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x114>)
 80029f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d134      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d003      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0xac>
 8002a14:	e005      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a18:	617b      	str	r3, [r7, #20]
      break;
 8002a1a:	e005      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a1e:	617b      	str	r3, [r7, #20]
      break;
 8002a20:	e002      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	617b      	str	r3, [r7, #20]
      break;
 8002a26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a28:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	3301      	adds	r3, #1
 8002a34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a36:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	fb03 f202 	mul.w	r2, r3, r2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	0e5b      	lsrs	r3, r3, #25
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a68:	69bb      	ldr	r3, [r7, #24]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	0800669c 	.word	0x0800669c
 8002a80:	00f42400 	.word	0x00f42400
 8002a84:	007a1200 	.word	0x007a1200

08002a88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	@ (8002a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000000 	.word	0x20000000

08002aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aa4:	f7ff fff0 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4904      	ldr	r1, [pc, #16]	@ (8002ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08006694 	.word	0x08006694

08002acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ad0:	f7ff ffda 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0adb      	lsrs	r3, r3, #11
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4904      	ldr	r1, [pc, #16]	@ (8002af4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40021000 	.word	0x40021000
 8002af4:	08006694 	.word	0x08006694

08002af8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b04:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b10:	f7ff f9ee 	bl	8001ef0 <HAL_PWREx_GetVoltageRange>
 8002b14:	6178      	str	r0, [r7, #20]
 8002b16:	e014      	b.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1c:	4a24      	ldr	r2, [pc, #144]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b24:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b30:	f7ff f9de 	bl	8001ef0 <HAL_PWREx_GetVoltageRange>
 8002b34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b36:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b48:	d10b      	bne.n	8002b62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b80      	cmp	r3, #128	@ 0x80
 8002b4e:	d919      	bls.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b54:	d902      	bls.n	8002b5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b56:	2302      	movs	r3, #2
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e013      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	e010      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b80      	cmp	r3, #128	@ 0x80
 8002b66:	d902      	bls.n	8002b6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b68:	2303      	movs	r3, #3
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e00a      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b80      	cmp	r3, #128	@ 0x80
 8002b72:	d102      	bne.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b74:	2302      	movs	r3, #2
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	e004      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b70      	cmp	r3, #112	@ 0x70
 8002b7e:	d101      	bne.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b80:	2301      	movs	r3, #1
 8002b82:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 0207 	bic.w	r2, r3, #7
 8002b8c:	4909      	ldr	r1, [pc, #36]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b94:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d001      	beq.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40022000 	.word	0x40022000

08002bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d041      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bd8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002bdc:	d02a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002bde:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002be2:	d824      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002be4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002be8:	d008      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bee:	d81e      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bf8:	d010      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bfa:	e018      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bfc:	4b86      	ldr	r3, [pc, #536]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a85      	ldr	r2, [pc, #532]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c08:	e015      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fabb 	bl	800318c <RCCEx_PLLSAI1_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c1a:	e00c      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3320      	adds	r3, #32
 8002c20:	2100      	movs	r1, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fba6 	bl	8003374 <RCCEx_PLLSAI2_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c2c:	e003      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	74fb      	strb	r3, [r7, #19]
      break;
 8002c32:	e000      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10b      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c3c:	4b76      	ldr	r3, [pc, #472]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c4a:	4973      	ldr	r1, [pc, #460]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c52:	e001      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d041      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c6c:	d02a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c72:	d824      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c7e:	d81e      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c88:	d010      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c8a:	e018      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c8c:	4b62      	ldr	r3, [pc, #392]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4a61      	ldr	r2, [pc, #388]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c98:	e015      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fa73 	bl	800318c <RCCEx_PLLSAI1_Config>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002caa:	e00c      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3320      	adds	r3, #32
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fb5e 	bl	8003374 <RCCEx_PLLSAI2_Config>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002cbc:	e003      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc6:	7cfb      	ldrb	r3, [r7, #19]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ccc:	4b52      	ldr	r3, [pc, #328]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cda:	494f      	ldr	r1, [pc, #316]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ce2:	e001      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a0 	beq.w	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cfa:	4b47      	ldr	r3, [pc, #284]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00d      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b41      	ldr	r3, [pc, #260]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	4a40      	ldr	r2, [pc, #256]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3a      	ldr	r2, [pc, #232]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d38:	f7fe fdd6 	bl	80018e8 <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d3e:	e009      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fe fdd2 	bl	80018e8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d902      	bls.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	74fb      	strb	r3, [r7, #19]
        break;
 8002d52:	e005      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d54:	4b31      	ldr	r3, [pc, #196]	@ (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ef      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d15c      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d66:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01f      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d019      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d84:	4b24      	ldr	r3, [pc, #144]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d90:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d96:	4a20      	ldr	r2, [pc, #128]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002da0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002db0:	4a19      	ldr	r2, [pc, #100]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fd91 	bl	80018e8 <HAL_GetTick>
 8002dc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dca:	f7fe fd8d 	bl	80018e8 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d902      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	74fb      	strb	r3, [r7, #19]
            break;
 8002de0:	e006      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ec      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df6:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e06:	4904      	ldr	r1, [pc, #16]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e0e:	e009      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	74bb      	strb	r3, [r7, #18]
 8002e14:	e006      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e24:	7c7b      	ldrb	r3, [r7, #17]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b9e      	ldr	r3, [pc, #632]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	4a9d      	ldr	r2, [pc, #628]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e42:	4b98      	ldr	r3, [pc, #608]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e48:	f023 0203 	bic.w	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e50:	4994      	ldr	r1, [pc, #592]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e64:	4b8f      	ldr	r3, [pc, #572]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e6a:	f023 020c 	bic.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e72:	498c      	ldr	r1, [pc, #560]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e86:	4b87      	ldr	r3, [pc, #540]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	4983      	ldr	r1, [pc, #524]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ea8:	4b7e      	ldr	r3, [pc, #504]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb6:	497b      	ldr	r1, [pc, #492]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eca:	4b76      	ldr	r3, [pc, #472]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed8:	4972      	ldr	r1, [pc, #456]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eec:	4b6d      	ldr	r3, [pc, #436]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efa:	496a      	ldr	r1, [pc, #424]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0e:	4b65      	ldr	r3, [pc, #404]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1c:	4961      	ldr	r1, [pc, #388]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f30:	4b5c      	ldr	r3, [pc, #368]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f3e:	4959      	ldr	r1, [pc, #356]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f52:	4b54      	ldr	r3, [pc, #336]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f60:	4950      	ldr	r1, [pc, #320]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f74:	4b4b      	ldr	r3, [pc, #300]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f82:	4948      	ldr	r1, [pc, #288]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f96:	4b43      	ldr	r3, [pc, #268]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa4:	493f      	ldr	r1, [pc, #252]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d028      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb8:	4b3a      	ldr	r3, [pc, #232]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fc6:	4937      	ldr	r1, [pc, #220]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b32      	ldr	r3, [pc, #200]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a31      	ldr	r2, [pc, #196]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]
 8002fe4:	e011      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fee:	d10c      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f8c8 	bl	800318c <RCCEx_PLLSAI1_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003006:	7cfb      	ldrb	r3, [r7, #19]
 8003008:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d028      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003016:	4b23      	ldr	r3, [pc, #140]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800301c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003024:	491f      	ldr	r1, [pc, #124]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003030:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003034:	d106      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003036:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	4a1a      	ldr	r2, [pc, #104]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003040:	60d3      	str	r3, [r2, #12]
 8003042:	e011      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800304c:	d10c      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f899 	bl	800318c <RCCEx_PLLSAI1_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d02b      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003074:	4b0b      	ldr	r3, [pc, #44]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003082:	4908      	ldr	r1, [pc, #32]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003092:	d109      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003094:	4b03      	ldr	r3, [pc, #12]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a02      	ldr	r2, [pc, #8]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800309e:	60d3      	str	r3, [r2, #12]
 80030a0:	e014      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f867 	bl	800318c <RCCEx_PLLSAI1_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02f      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030e6:	4928      	ldr	r1, [pc, #160]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030f6:	d10d      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	2102      	movs	r1, #2
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f844 	bl	800318c <RCCEx_PLLSAI1_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d014      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800310e:	7cfb      	ldrb	r3, [r7, #19]
 8003110:	74bb      	strb	r3, [r7, #18]
 8003112:	e011      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800311c:	d10c      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3320      	adds	r3, #32
 8003122:	2102      	movs	r1, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f925 	bl	8003374 <RCCEx_PLLSAI2_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800312e:	7cfb      	ldrb	r3, [r7, #19]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003144:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800314a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003152:	490d      	ldr	r1, [pc, #52]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003166:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003176:	4904      	ldr	r1, [pc, #16]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800317e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000

0800318c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800319a:	4b75      	ldr	r3, [pc, #468]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d018      	beq.n	80031d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031a6:	4b72      	ldr	r3, [pc, #456]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0203 	and.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d10d      	bne.n	80031d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
       ||
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031be:	4b6c      	ldr	r3, [pc, #432]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
       ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d047      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
 80031d6:	e044      	b.n	8003262 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d018      	beq.n	8003212 <RCCEx_PLLSAI1_Config+0x86>
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d825      	bhi.n	8003230 <RCCEx_PLLSAI1_Config+0xa4>
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d002      	beq.n	80031ee <RCCEx_PLLSAI1_Config+0x62>
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d009      	beq.n	8003200 <RCCEx_PLLSAI1_Config+0x74>
 80031ec:	e020      	b.n	8003230 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ee:	4b60      	ldr	r3, [pc, #384]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11d      	bne.n	8003236 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fe:	e01a      	b.n	8003236 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003200:	4b5b      	ldr	r3, [pc, #364]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003208:	2b00      	cmp	r3, #0
 800320a:	d116      	bne.n	800323a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003210:	e013      	b.n	800323a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003212:	4b57      	ldr	r3, [pc, #348]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10f      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800321e:	4b54      	ldr	r3, [pc, #336]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800322e:	e006      	b.n	800323e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e004      	b.n	8003240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003236:	bf00      	nop
 8003238:	e002      	b.n	8003240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800323a:	bf00      	nop
 800323c:	e000      	b.n	8003240 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800323e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003246:	4b4a      	ldr	r3, [pc, #296]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	430b      	orrs	r3, r1
 800325c:	4944      	ldr	r1, [pc, #272]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003262:	7bfb      	ldrb	r3, [r7, #15]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d17d      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003268:	4b41      	ldr	r3, [pc, #260]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a40      	ldr	r2, [pc, #256]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003274:	f7fe fb38 	bl	80018e8 <HAL_GetTick>
 8003278:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800327a:	e009      	b.n	8003290 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800327c:	f7fe fb34 	bl	80018e8 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d902      	bls.n	8003290 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	73fb      	strb	r3, [r7, #15]
        break;
 800328e:	e005      	b.n	800329c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003290:	4b37      	ldr	r3, [pc, #220]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ef      	bne.n	800327c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d160      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d111      	bne.n	80032cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032a8:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80032b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6892      	ldr	r2, [r2, #8]
 80032b8:	0211      	lsls	r1, r2, #8
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68d2      	ldr	r2, [r2, #12]
 80032be:	0912      	lsrs	r2, r2, #4
 80032c0:	0452      	lsls	r2, r2, #17
 80032c2:	430a      	orrs	r2, r1
 80032c4:	492a      	ldr	r1, [pc, #168]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	610b      	str	r3, [r1, #16]
 80032ca:	e027      	b.n	800331c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d112      	bne.n	80032f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d2:	4b27      	ldr	r3, [pc, #156]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80032da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6892      	ldr	r2, [r2, #8]
 80032e2:	0211      	lsls	r1, r2, #8
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6912      	ldr	r2, [r2, #16]
 80032e8:	0852      	lsrs	r2, r2, #1
 80032ea:	3a01      	subs	r2, #1
 80032ec:	0552      	lsls	r2, r2, #21
 80032ee:	430a      	orrs	r2, r1
 80032f0:	491f      	ldr	r1, [pc, #124]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	610b      	str	r3, [r1, #16]
 80032f6:	e011      	b.n	800331c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003300:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	0211      	lsls	r1, r2, #8
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6952      	ldr	r2, [r2, #20]
 800330e:	0852      	lsrs	r2, r2, #1
 8003310:	3a01      	subs	r2, #1
 8003312:	0652      	lsls	r2, r2, #25
 8003314:	430a      	orrs	r2, r1
 8003316:	4916      	ldr	r1, [pc, #88]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800331c:	4b14      	ldr	r3, [pc, #80]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003326:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003328:	f7fe fade 	bl	80018e8 <HAL_GetTick>
 800332c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800332e:	e009      	b.n	8003344 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003330:	f7fe fada 	bl	80018e8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d902      	bls.n	8003344 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	73fb      	strb	r3, [r7, #15]
          break;
 8003342:	e005      	b.n	8003350 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003344:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0ef      	beq.n	8003330 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	4904      	ldr	r1, [pc, #16]	@ (8003370 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000

08003374 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003382:	4b6a      	ldr	r3, [pc, #424]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d018      	beq.n	80033c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800338e:	4b67      	ldr	r3, [pc, #412]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0203 	and.w	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d10d      	bne.n	80033ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
       ||
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80033a6:	4b61      	ldr	r3, [pc, #388]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
       ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d047      	beq.n	800344a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
 80033be:	e044      	b.n	800344a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d018      	beq.n	80033fa <RCCEx_PLLSAI2_Config+0x86>
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d825      	bhi.n	8003418 <RCCEx_PLLSAI2_Config+0xa4>
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d002      	beq.n	80033d6 <RCCEx_PLLSAI2_Config+0x62>
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d009      	beq.n	80033e8 <RCCEx_PLLSAI2_Config+0x74>
 80033d4:	e020      	b.n	8003418 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033d6:	4b55      	ldr	r3, [pc, #340]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11d      	bne.n	800341e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e6:	e01a      	b.n	800341e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033e8:	4b50      	ldr	r3, [pc, #320]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d116      	bne.n	8003422 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f8:	e013      	b.n	8003422 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033fa:	4b4c      	ldr	r3, [pc, #304]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10f      	bne.n	8003426 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003406:	4b49      	ldr	r3, [pc, #292]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d109      	bne.n	8003426 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003416:	e006      	b.n	8003426 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      break;
 800341c:	e004      	b.n	8003428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003426:	bf00      	nop
    }

    if(status == HAL_OK)
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800342e:	4b3f      	ldr	r3, [pc, #252]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	3b01      	subs	r3, #1
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	430b      	orrs	r3, r1
 8003444:	4939      	ldr	r1, [pc, #228]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003446:	4313      	orrs	r3, r2
 8003448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d167      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003450:	4b36      	ldr	r3, [pc, #216]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a35      	ldr	r2, [pc, #212]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800345a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345c:	f7fe fa44 	bl	80018e8 <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003462:	e009      	b.n	8003478 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003464:	f7fe fa40 	bl	80018e8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d902      	bls.n	8003478 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	73fb      	strb	r3, [r7, #15]
        break;
 8003476:	e005      	b.n	8003484 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003478:	4b2c      	ldr	r3, [pc, #176]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ef      	bne.n	8003464 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d14a      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d111      	bne.n	80034b4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003490:	4b26      	ldr	r3, [pc, #152]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6892      	ldr	r2, [r2, #8]
 80034a0:	0211      	lsls	r1, r2, #8
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	0912      	lsrs	r2, r2, #4
 80034a8:	0452      	lsls	r2, r2, #17
 80034aa:	430a      	orrs	r2, r1
 80034ac:	491f      	ldr	r1, [pc, #124]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	614b      	str	r3, [r1, #20]
 80034b2:	e011      	b.n	80034d8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034b4:	4b1d      	ldr	r3, [pc, #116]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80034bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6892      	ldr	r2, [r2, #8]
 80034c4:	0211      	lsls	r1, r2, #8
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6912      	ldr	r2, [r2, #16]
 80034ca:	0852      	lsrs	r2, r2, #1
 80034cc:	3a01      	subs	r2, #1
 80034ce:	0652      	lsls	r2, r2, #25
 80034d0:	430a      	orrs	r2, r1
 80034d2:	4916      	ldr	r1, [pc, #88]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034d8:	4b14      	ldr	r3, [pc, #80]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a13      	ldr	r2, [pc, #76]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe fa00 	bl	80018e8 <HAL_GetTick>
 80034e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034ea:	e009      	b.n	8003500 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034ec:	f7fe f9fc 	bl	80018e8 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d902      	bls.n	8003500 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	73fb      	strb	r3, [r7, #15]
          break;
 80034fe:	e005      	b.n	800350c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003500:	4b0a      	ldr	r3, [pc, #40]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ef      	beq.n	80034ec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003512:	4b06      	ldr	r3, [pc, #24]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4904      	ldr	r1, [pc, #16]	@ (800352c <RCCEx_PLLSAI2_Config+0x1b8>)
 800351c:	4313      	orrs	r3, r2
 800351e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000

08003530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e095      	b.n	800366e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003552:	d009      	beq.n	8003568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
 800355a:	e005      	b.n	8003568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd ffac 	bl	80014e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800359e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035a8:	d902      	bls.n	80035b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	e002      	b.n	80035b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80035b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80035be:	d007      	beq.n	80035d0 <HAL_SPI_Init+0xa0>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003612:	ea42 0103 	orr.w	r1, r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	0c1b      	lsrs	r3, r3, #16
 800362c:	f003 0204 	and.w	r2, r3, #4
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800364c:	ea42 0103 	orr.w	r1, r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b088      	sub	sp, #32
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003686:	f7fe f92f 	bl	80018e8 <HAL_GetTick>
 800368a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	d001      	beq.n	80036a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
 800369e:	e15c      	b.n	800395a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_SPI_Transmit+0x36>
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e154      	b.n	800395a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_SPI_Transmit+0x48>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e14d      	b.n	800395a <HAL_SPI_Transmit+0x2e4>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2203      	movs	r2, #3
 80036ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	88fa      	ldrh	r2, [r7, #6]
 80036de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	88fa      	ldrh	r2, [r7, #6]
 80036e4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003710:	d10f      	bne.n	8003732 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003730:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	2b40      	cmp	r3, #64	@ 0x40
 800373e:	d007      	beq.n	8003750 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003758:	d952      	bls.n	8003800 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_SPI_Transmit+0xf2>
 8003762:	8b7b      	ldrh	r3, [r7, #26]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d145      	bne.n	80037f4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376c:	881a      	ldrh	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003778:	1c9a      	adds	r2, r3, #2
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800378c:	e032      	b.n	80037f4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b02      	cmp	r3, #2
 800379a:	d112      	bne.n	80037c2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a0:	881a      	ldrh	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ac:	1c9a      	adds	r2, r3, #2
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037c0:	e018      	b.n	80037f4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c2:	f7fe f891 	bl	80018e8 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d803      	bhi.n	80037da <HAL_SPI_Transmit+0x164>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d102      	bne.n	80037e0 <HAL_SPI_Transmit+0x16a>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e0b2      	b.n	800395a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1c7      	bne.n	800378e <HAL_SPI_Transmit+0x118>
 80037fe:	e083      	b.n	8003908 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_SPI_Transmit+0x198>
 8003808:	8b7b      	ldrh	r3, [r7, #26]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d177      	bne.n	80038fe <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	d912      	bls.n	800383e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	881a      	ldrh	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b02      	subs	r3, #2
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800383c:	e05f      	b.n	80038fe <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003864:	e04b      	b.n	80038fe <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b02      	cmp	r3, #2
 8003872:	d12b      	bne.n	80038cc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d912      	bls.n	80038a4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003882:	881a      	ldrh	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388e:	1c9a      	adds	r2, r3, #2
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b02      	subs	r3, #2
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038a2:	e02c      	b.n	80038fe <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	330c      	adds	r3, #12
 80038ae:	7812      	ldrb	r2, [r2, #0]
 80038b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038ca:	e018      	b.n	80038fe <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038cc:	f7fe f80c 	bl	80018e8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d803      	bhi.n	80038e4 <HAL_SPI_Transmit+0x26e>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e2:	d102      	bne.n	80038ea <HAL_SPI_Transmit+0x274>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e02d      	b.n	800395a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ae      	bne.n	8003866 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	6839      	ldr	r1, [r7, #0]
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fcf5 	bl	80042fc <SPI_EndRxTxTransaction>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003958:	2300      	movs	r3, #0
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	3720      	adds	r7, #32
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b088      	sub	sp, #32
 8003966:	af02      	add	r7, sp, #8
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d001      	beq.n	8003982 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
 8003980:	e123      	b.n	8003bca <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800398a:	d112      	bne.n	80039b2 <HAL_SPI_Receive+0x50>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10e      	bne.n	80039b2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2204      	movs	r2, #4
 8003998:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4613      	mov	r3, r2
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f912 	bl	8003bd2 <HAL_SPI_TransmitReceive>
 80039ae:	4603      	mov	r3, r0
 80039b0:	e10b      	b.n	8003bca <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b2:	f7fd ff99 	bl	80018e8 <HAL_GetTick>
 80039b6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_SPI_Receive+0x62>
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e100      	b.n	8003bca <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_SPI_Receive+0x74>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e0f9      	b.n	8003bca <HAL_SPI_Receive+0x268>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2204      	movs	r2, #4
 80039e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	88fa      	ldrh	r2, [r7, #6]
 80039f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a28:	d908      	bls.n	8003a3c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	e007      	b.n	8003a4c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a4a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a54:	d10f      	bne.n	8003a76 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b40      	cmp	r3, #64	@ 0x40
 8003a82:	d007      	beq.n	8003a94 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a9c:	d875      	bhi.n	8003b8a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a9e:	e037      	b.n	8003b10 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d117      	bne.n	8003ade <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f103 020c 	add.w	r2, r3, #12
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	7812      	ldrb	r2, [r2, #0]
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003adc:	e018      	b.n	8003b10 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ade:	f7fd ff03 	bl	80018e8 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d803      	bhi.n	8003af6 <HAL_SPI_Receive+0x194>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d102      	bne.n	8003afc <HAL_SPI_Receive+0x19a>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e05c      	b.n	8003bca <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1c1      	bne.n	8003aa0 <HAL_SPI_Receive+0x13e>
 8003b1c:	e03b      	b.n	8003b96 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d115      	bne.n	8003b58 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	b292      	uxth	r2, r2
 8003b38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	1c9a      	adds	r2, r3, #2
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003b56:	e018      	b.n	8003b8a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b58:	f7fd fec6 	bl	80018e8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d803      	bhi.n	8003b70 <HAL_SPI_Receive+0x20e>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d102      	bne.n	8003b76 <HAL_SPI_Receive+0x214>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e01f      	b.n	8003bca <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1c3      	bne.n	8003b1e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	6839      	ldr	r1, [r7, #0]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 fb56 	bl	800424c <SPI_EndRxTransaction>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
  }
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b08a      	sub	sp, #40	@ 0x28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003be0:	2301      	movs	r3, #1
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be4:	f7fd fe80 	bl	80018e8 <HAL_GetTick>
 8003be8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bf0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003bf8:	887b      	ldrh	r3, [r7, #2]
 8003bfa:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003bfc:	887b      	ldrh	r3, [r7, #2]
 8003bfe:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c00:	7ffb      	ldrb	r3, [r7, #31]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d00c      	beq.n	8003c20 <HAL_SPI_TransmitReceive+0x4e>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c0c:	d106      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d102      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x4a>
 8003c16:	7ffb      	ldrb	r3, [r7, #31]
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d001      	beq.n	8003c20 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e1f3      	b.n	8004008 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_SPI_TransmitReceive+0x60>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_SPI_TransmitReceive+0x60>
 8003c2c:	887b      	ldrh	r3, [r7, #2]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e1e8      	b.n	8004008 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_SPI_TransmitReceive+0x72>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e1e1      	b.n	8004008 <HAL_SPI_TransmitReceive+0x436>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d003      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	887a      	ldrh	r2, [r7, #2]
 8003c70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	887a      	ldrh	r2, [r7, #2]
 8003c86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	887a      	ldrh	r2, [r7, #2]
 8003c8c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003ca2:	d802      	bhi.n	8003caa <HAL_SPI_TransmitReceive+0xd8>
 8003ca4:	8abb      	ldrh	r3, [r7, #20]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d908      	bls.n	8003cbc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	e007      	b.n	8003ccc <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd6:	2b40      	cmp	r3, #64	@ 0x40
 8003cd8:	d007      	beq.n	8003cea <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cf2:	f240 8083 	bls.w	8003dfc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x132>
 8003cfe:	8afb      	ldrh	r3, [r7, #22]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d16f      	bne.n	8003de4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d28:	e05c      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d11b      	bne.n	8003d70 <HAL_SPI_TransmitReceive+0x19e>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <HAL_SPI_TransmitReceive+0x19e>
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d113      	bne.n	8003d70 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d4c:	881a      	ldrh	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	1c9a      	adds	r2, r3, #2
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d11c      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x1e6>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d016      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	b292      	uxth	r2, r2
 8003d96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003db4:	2301      	movs	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003db8:	f7fd fd96 	bl	80018e8 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d80d      	bhi.n	8003de4 <HAL_SPI_TransmitReceive+0x212>
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dce:	d009      	beq.n	8003de4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e111      	b.n	8004008 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d19d      	bne.n	8003d2a <HAL_SPI_TransmitReceive+0x158>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d197      	bne.n	8003d2a <HAL_SPI_TransmitReceive+0x158>
 8003dfa:	e0e5      	b.n	8003fc8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_SPI_TransmitReceive+0x23a>
 8003e04:	8afb      	ldrh	r3, [r7, #22]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	f040 80d1 	bne.w	8003fae <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d912      	bls.n	8003e3c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b02      	subs	r3, #2
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e3a:	e0b8      	b.n	8003fae <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e62:	e0a4      	b.n	8003fae <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d134      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x30a>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02f      	beq.n	8003edc <HAL_SPI_TransmitReceive+0x30a>
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d12c      	bne.n	8003edc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d912      	bls.n	8003eb2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	1c9a      	adds	r2, r3, #2
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b02      	subs	r3, #2
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003eb0:	e012      	b.n	8003ed8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	330c      	adds	r3, #12
 8003ebc:	7812      	ldrb	r2, [r2, #0]
 8003ebe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d148      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x3aa>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d042      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d923      	bls.n	8003f4a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	b292      	uxth	r2, r2
 8003f0e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	1c9a      	adds	r2, r3, #2
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b02      	subs	r3, #2
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d81f      	bhi.n	8003f78 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	e016      	b.n	8003f78 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f103 020c 	add.w	r2, r3, #12
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	7812      	ldrb	r2, [r2, #0]
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f7c:	f7fd fcb4 	bl	80018e8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d803      	bhi.n	8003f94 <HAL_SPI_TransmitReceive+0x3c2>
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d102      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x3c8>
 8003f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e02c      	b.n	8004008 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f af55 	bne.w	8003e64 <HAL_SPI_TransmitReceive+0x292>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f47f af4e 	bne.w	8003e64 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fc8:	6a3a      	ldr	r2, [r7, #32]
 8003fca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f995 	bl	80042fc <SPI_EndRxTxTransaction>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00e      	b.n	8004008 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004006:	2300      	movs	r3, #0
  }
}
 8004008:	4618      	mov	r0, r3
 800400a:	3728      	adds	r7, #40	@ 0x28
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004020:	f7fd fc62 	bl	80018e8 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	4413      	add	r3, r2
 800402e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004030:	f7fd fc5a 	bl	80018e8 <HAL_GetTick>
 8004034:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004036:	4b39      	ldr	r3, [pc, #228]	@ (800411c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	015b      	lsls	r3, r3, #5
 800403c:	0d1b      	lsrs	r3, r3, #20
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004046:	e054      	b.n	80040f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d050      	beq.n	80040f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004050:	f7fd fc4a 	bl	80018e8 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	429a      	cmp	r2, r3
 800405e:	d902      	bls.n	8004066 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d13d      	bne.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004074:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800407e:	d111      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004088:	d004      	beq.n	8004094 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004092:	d107      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ac:	d10f      	bne.n	80040ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e017      	b.n	8004112 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4013      	ands	r3, r2
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	bf0c      	ite	eq
 8004102:	2301      	moveq	r3, #1
 8004104:	2300      	movne	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	429a      	cmp	r2, r3
 800410e:	d19b      	bne.n	8004048 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000000 	.word	0x20000000

08004120 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	@ 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004132:	f7fd fbd9 	bl	80018e8 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	4413      	add	r3, r2
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004142:	f7fd fbd1 	bl	80018e8 <HAL_GetTick>
 8004146:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004150:	4b3d      	ldr	r3, [pc, #244]	@ (8004248 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	00da      	lsls	r2, r3, #3
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	0d1b      	lsrs	r3, r3, #20
 8004160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004168:	e060      	b.n	800422c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004170:	d107      	bne.n	8004182 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004180:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d050      	beq.n	800422c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800418a:	f7fd fbad 	bl	80018e8 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004196:	429a      	cmp	r2, r3
 8004198:	d902      	bls.n	80041a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	2b00      	cmp	r3, #0
 800419e:	d13d      	bne.n	800421c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041b8:	d111      	bne.n	80041de <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041c2:	d004      	beq.n	80041ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041cc:	d107      	bne.n	80041de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e6:	d10f      	bne.n	8004208 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004206:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e010      	b.n	800423e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	3b01      	subs	r3, #1
 800422a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4013      	ands	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d196      	bne.n	800416a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3728      	adds	r7, #40	@ 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000000 	.word	0x20000000

0800424c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004260:	d111      	bne.n	8004286 <SPI_EndRxTransaction+0x3a>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800426a:	d004      	beq.n	8004276 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004274:	d107      	bne.n	8004286 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004284:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2200      	movs	r2, #0
 800428e:	2180      	movs	r1, #128	@ 0x80
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff febd 	bl	8004010 <SPI_WaitFlagStateUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e023      	b.n	80042f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042b4:	d11d      	bne.n	80042f2 <SPI_EndRxTransaction+0xa6>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042be:	d004      	beq.n	80042ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c8:	d113      	bne.n	80042f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff ff22 	bl	8004120 <SPI_WaitFifoStateUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e000      	b.n	80042f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2200      	movs	r2, #0
 8004310:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff ff03 	bl	8004120 <SPI_WaitFifoStateUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004324:	f043 0220 	orr.w	r2, r3, #32
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e027      	b.n	8004380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2200      	movs	r2, #0
 8004338:	2180      	movs	r1, #128	@ 0x80
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff fe68 	bl	8004010 <SPI_WaitFlagStateUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434a:	f043 0220 	orr.w	r2, r3, #32
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e014      	b.n	8004380 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	2200      	movs	r2, #0
 800435e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff fedc 	bl	8004120 <SPI_WaitFifoStateUntilTimeout>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	f043 0220 	orr.w	r2, r3, #32
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e000      	b.n	8004380 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e049      	b.n	800442e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fd f8da 	bl	8001568 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f000 fc4e 	bl	8004c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <HAL_TIM_IC_Start_IT+0x1e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004452:	b2db      	uxtb	r3, r3
 8004454:	e023      	b.n	800449e <HAL_TIM_IC_Start_IT+0x66>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d104      	bne.n	8004466 <HAL_TIM_IC_Start_IT+0x2e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004462:	b2db      	uxtb	r3, r3
 8004464:	e01b      	b.n	800449e <HAL_TIM_IC_Start_IT+0x66>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d104      	bne.n	8004476 <HAL_TIM_IC_Start_IT+0x3e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004472:	b2db      	uxtb	r3, r3
 8004474:	e013      	b.n	800449e <HAL_TIM_IC_Start_IT+0x66>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d104      	bne.n	8004486 <HAL_TIM_IC_Start_IT+0x4e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004482:	b2db      	uxtb	r3, r3
 8004484:	e00b      	b.n	800449e <HAL_TIM_IC_Start_IT+0x66>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b10      	cmp	r3, #16
 800448a:	d104      	bne.n	8004496 <HAL_TIM_IC_Start_IT+0x5e>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004492:	b2db      	uxtb	r3, r3
 8004494:	e003      	b.n	800449e <HAL_TIM_IC_Start_IT+0x66>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800449c:	b2db      	uxtb	r3, r3
 800449e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <HAL_TIM_IC_Start_IT+0x78>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e013      	b.n	80044d8 <HAL_TIM_IC_Start_IT+0xa0>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d104      	bne.n	80044c0 <HAL_TIM_IC_Start_IT+0x88>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	e00b      	b.n	80044d8 <HAL_TIM_IC_Start_IT+0xa0>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d104      	bne.n	80044d0 <HAL_TIM_IC_Start_IT+0x98>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e003      	b.n	80044d8 <HAL_TIM_IC_Start_IT+0xa0>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80044da:	7bbb      	ldrb	r3, [r7, #14]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d102      	bne.n	80044e6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80044e0:	7b7b      	ldrb	r3, [r7, #13]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e0dd      	b.n	80046a6 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d104      	bne.n	80044fa <HAL_TIM_IC_Start_IT+0xc2>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f8:	e023      	b.n	8004542 <HAL_TIM_IC_Start_IT+0x10a>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d104      	bne.n	800450a <HAL_TIM_IC_Start_IT+0xd2>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004508:	e01b      	b.n	8004542 <HAL_TIM_IC_Start_IT+0x10a>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d104      	bne.n	800451a <HAL_TIM_IC_Start_IT+0xe2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004518:	e013      	b.n	8004542 <HAL_TIM_IC_Start_IT+0x10a>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b0c      	cmp	r3, #12
 800451e:	d104      	bne.n	800452a <HAL_TIM_IC_Start_IT+0xf2>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004528:	e00b      	b.n	8004542 <HAL_TIM_IC_Start_IT+0x10a>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b10      	cmp	r3, #16
 800452e:	d104      	bne.n	800453a <HAL_TIM_IC_Start_IT+0x102>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004538:	e003      	b.n	8004542 <HAL_TIM_IC_Start_IT+0x10a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <HAL_TIM_IC_Start_IT+0x11a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004550:	e013      	b.n	800457a <HAL_TIM_IC_Start_IT+0x142>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d104      	bne.n	8004562 <HAL_TIM_IC_Start_IT+0x12a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004560:	e00b      	b.n	800457a <HAL_TIM_IC_Start_IT+0x142>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d104      	bne.n	8004572 <HAL_TIM_IC_Start_IT+0x13a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004570:	e003      	b.n	800457a <HAL_TIM_IC_Start_IT+0x142>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b0c      	cmp	r3, #12
 800457e:	d841      	bhi.n	8004604 <HAL_TIM_IC_Start_IT+0x1cc>
 8004580:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <HAL_TIM_IC_Start_IT+0x150>)
 8004582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004586:	bf00      	nop
 8004588:	080045bd 	.word	0x080045bd
 800458c:	08004605 	.word	0x08004605
 8004590:	08004605 	.word	0x08004605
 8004594:	08004605 	.word	0x08004605
 8004598:	080045cf 	.word	0x080045cf
 800459c:	08004605 	.word	0x08004605
 80045a0:	08004605 	.word	0x08004605
 80045a4:	08004605 	.word	0x08004605
 80045a8:	080045e1 	.word	0x080045e1
 80045ac:	08004605 	.word	0x08004605
 80045b0:	08004605 	.word	0x08004605
 80045b4:	08004605 	.word	0x08004605
 80045b8:	080045f3 	.word	0x080045f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0202 	orr.w	r2, r2, #2
 80045ca:	60da      	str	r2, [r3, #12]
      break;
 80045cc:	e01d      	b.n	800460a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0204 	orr.w	r2, r2, #4
 80045dc:	60da      	str	r2, [r3, #12]
      break;
 80045de:	e014      	b.n	800460a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0208 	orr.w	r2, r2, #8
 80045ee:	60da      	str	r2, [r3, #12]
      break;
 80045f0:	e00b      	b.n	800460a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0210 	orr.w	r2, r2, #16
 8004600:	60da      	str	r2, [r3, #12]
      break;
 8004602:	e002      	b.n	800460a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      break;
 8004608:	bf00      	nop
  }

  if (status == HAL_OK)
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d149      	bne.n	80046a4 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2201      	movs	r2, #1
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fcef 	bl	8004ffc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a23      	ldr	r2, [pc, #140]	@ (80046b0 <HAL_TIM_IC_Start_IT+0x278>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d01d      	beq.n	8004664 <HAL_TIM_IC_Start_IT+0x22c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004630:	d018      	beq.n	8004664 <HAL_TIM_IC_Start_IT+0x22c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1f      	ldr	r2, [pc, #124]	@ (80046b4 <HAL_TIM_IC_Start_IT+0x27c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <HAL_TIM_IC_Start_IT+0x22c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1d      	ldr	r2, [pc, #116]	@ (80046b8 <HAL_TIM_IC_Start_IT+0x280>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00e      	beq.n	8004664 <HAL_TIM_IC_Start_IT+0x22c>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1c      	ldr	r2, [pc, #112]	@ (80046bc <HAL_TIM_IC_Start_IT+0x284>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_TIM_IC_Start_IT+0x22c>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1a      	ldr	r2, [pc, #104]	@ (80046c0 <HAL_TIM_IC_Start_IT+0x288>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_TIM_IC_Start_IT+0x22c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a19      	ldr	r2, [pc, #100]	@ (80046c4 <HAL_TIM_IC_Start_IT+0x28c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d115      	bne.n	8004690 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	4b17      	ldr	r3, [pc, #92]	@ (80046c8 <HAL_TIM_IC_Start_IT+0x290>)
 800466c:	4013      	ands	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	2b06      	cmp	r3, #6
 8004674:	d015      	beq.n	80046a2 <HAL_TIM_IC_Start_IT+0x26a>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800467c:	d011      	beq.n	80046a2 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	e008      	b.n	80046a2 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e000      	b.n	80046a4 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40013400 	.word	0x40013400
 80046c4:	40014000 	.word	0x40014000
 80046c8:	00010007 	.word	0x00010007

080046cc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d841      	bhi.n	8004764 <HAL_TIM_IC_Stop_IT+0x98>
 80046e0:	a201      	add	r2, pc, #4	@ (adr r2, 80046e8 <HAL_TIM_IC_Stop_IT+0x1c>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	0800471d 	.word	0x0800471d
 80046ec:	08004765 	.word	0x08004765
 80046f0:	08004765 	.word	0x08004765
 80046f4:	08004765 	.word	0x08004765
 80046f8:	0800472f 	.word	0x0800472f
 80046fc:	08004765 	.word	0x08004765
 8004700:	08004765 	.word	0x08004765
 8004704:	08004765 	.word	0x08004765
 8004708:	08004741 	.word	0x08004741
 800470c:	08004765 	.word	0x08004765
 8004710:	08004765 	.word	0x08004765
 8004714:	08004765 	.word	0x08004765
 8004718:	08004753 	.word	0x08004753
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0202 	bic.w	r2, r2, #2
 800472a:	60da      	str	r2, [r3, #12]
      break;
 800472c:	e01d      	b.n	800476a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0204 	bic.w	r2, r2, #4
 800473c:	60da      	str	r2, [r3, #12]
      break;
 800473e:	e014      	b.n	800476a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0208 	bic.w	r2, r2, #8
 800474e:	60da      	str	r2, [r3, #12]
      break;
 8004750:	e00b      	b.n	800476a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0210 	bic.w	r2, r2, #16
 8004760:	60da      	str	r2, [r3, #12]
      break;
 8004762:	e002      	b.n	800476a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      break;
 8004768:	bf00      	nop
  }

  if (status == HAL_OK)
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d166      	bne.n	800483e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2200      	movs	r2, #0
 8004776:	6839      	ldr	r1, [r7, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fc3f 	bl	8004ffc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6a1a      	ldr	r2, [r3, #32]
 8004784:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_TIM_IC_Stop_IT+0xe2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a1a      	ldr	r2, [r3, #32]
 8004794:	f240 4344 	movw	r3, #1092	@ 0x444
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d107      	bne.n	80047ae <HAL_TIM_IC_Stop_IT+0xe2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <HAL_TIM_IC_Stop_IT+0xf2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047bc:	e023      	b.n	8004806 <HAL_TIM_IC_Stop_IT+0x13a>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_IC_Stop_IT+0x102>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047cc:	e01b      	b.n	8004806 <HAL_TIM_IC_Stop_IT+0x13a>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d104      	bne.n	80047de <HAL_TIM_IC_Stop_IT+0x112>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047dc:	e013      	b.n	8004806 <HAL_TIM_IC_Stop_IT+0x13a>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_IC_Stop_IT+0x122>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047ec:	e00b      	b.n	8004806 <HAL_TIM_IC_Stop_IT+0x13a>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_IC_Stop_IT+0x132>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047fc:	e003      	b.n	8004806 <HAL_TIM_IC_Stop_IT+0x13a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <HAL_TIM_IC_Stop_IT+0x14a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004814:	e013      	b.n	800483e <HAL_TIM_IC_Stop_IT+0x172>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d104      	bne.n	8004826 <HAL_TIM_IC_Stop_IT+0x15a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004824:	e00b      	b.n	800483e <HAL_TIM_IC_Stop_IT+0x172>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d104      	bne.n	8004836 <HAL_TIM_IC_Stop_IT+0x16a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004834:	e003      	b.n	800483e <HAL_TIM_IC_Stop_IT+0x172>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d020      	beq.n	80048ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01b      	beq.n	80048ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0202 	mvn.w	r2, #2
 800487c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fc faa4 	bl	8000de0 <HAL_TIM_IC_CaptureCallback>
 8004898:	e005      	b.n	80048a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f9c6 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f9cd 	bl	8004c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d020      	beq.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0204 	mvn.w	r2, #4
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fc fa7e 	bl	8000de0 <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9a0 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f9a7 	bl	8004c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d020      	beq.n	8004944 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01b      	beq.n	8004944 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f06f 0208 	mvn.w	r2, #8
 8004914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2204      	movs	r2, #4
 800491a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc fa58 	bl	8000de0 <HAL_TIM_IC_CaptureCallback>
 8004930:	e005      	b.n	800493e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f97a 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f981 	bl	8004c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0210 	mvn.w	r2, #16
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2208      	movs	r2, #8
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fc fa32 	bl	8000de0 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f954 	bl	8004c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f95b 	bl	8004c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00c      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0201 	mvn.w	r2, #1
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f932 	bl	8004c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00c      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fbc5 	bl	800516c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00c      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fbbd 	bl	8005180 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00c      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 f915 	bl	8004c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00c      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f06f 0220 	mvn.w	r2, #32
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fb85 	bl	8005158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e088      	b.n	8004b86 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11b      	bne.n	8004aba <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004a92:	f000 f98f 	bl	8004db4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 020c 	bic.w	r2, r2, #12
 8004aa4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6999      	ldr	r1, [r3, #24]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	619a      	str	r2, [r3, #24]
 8004ab8:	e060      	b.n	8004b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d11c      	bne.n	8004afa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004ad0:	f000 f9de 	bl	8004e90 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699a      	ldr	r2, [r3, #24]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004ae2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6999      	ldr	r1, [r3, #24]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	021a      	lsls	r2, r3, #8
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	619a      	str	r2, [r3, #24]
 8004af8:	e040      	b.n	8004b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d11b      	bne.n	8004b38 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004b10:	f000 f9fb 	bl	8004f0a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 020c 	bic.w	r2, r2, #12
 8004b22:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69d9      	ldr	r1, [r3, #28]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	61da      	str	r2, [r3, #28]
 8004b36:	e021      	b.n	8004b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d11c      	bne.n	8004b78 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004b4e:	f000 fa18 	bl	8004f82 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69da      	ldr	r2, [r3, #28]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004b60:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69d9      	ldr	r1, [r3, #28]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	021a      	lsls	r2, r3, #8
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	61da      	str	r2, [r3, #28]
 8004b76:	e001      	b.n	8004b7c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b0c      	cmp	r3, #12
 8004ba2:	d831      	bhi.n	8004c08 <HAL_TIM_ReadCapturedValue+0x78>
 8004ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bac <HAL_TIM_ReadCapturedValue+0x1c>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004be1 	.word	0x08004be1
 8004bb0:	08004c09 	.word	0x08004c09
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004c09 	.word	0x08004c09
 8004bbc:	08004beb 	.word	0x08004beb
 8004bc0:	08004c09 	.word	0x08004c09
 8004bc4:	08004c09 	.word	0x08004c09
 8004bc8:	08004c09 	.word	0x08004c09
 8004bcc:	08004bf5 	.word	0x08004bf5
 8004bd0:	08004c09 	.word	0x08004c09
 8004bd4:	08004c09 	.word	0x08004c09
 8004bd8:	08004c09 	.word	0x08004c09
 8004bdc:	08004bff 	.word	0x08004bff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be6:	60fb      	str	r3, [r7, #12]

      break;
 8004be8:	e00f      	b.n	8004c0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	60fb      	str	r3, [r7, #12]

      break;
 8004bf2:	e00a      	b.n	8004c0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfa:	60fb      	str	r3, [r7, #12]

      break;
 8004bfc:	e005      	b.n	8004c0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	60fb      	str	r3, [r7, #12]

      break;
 8004c06:	e000      	b.n	8004c0a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004c08:	bf00      	nop
  }

  return tmpreg;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a46      	ldr	r2, [pc, #280]	@ (8004d94 <TIM_Base_SetConfig+0x12c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d013      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c86:	d00f      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a43      	ldr	r2, [pc, #268]	@ (8004d98 <TIM_Base_SetConfig+0x130>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a42      	ldr	r2, [pc, #264]	@ (8004d9c <TIM_Base_SetConfig+0x134>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a41      	ldr	r2, [pc, #260]	@ (8004da0 <TIM_Base_SetConfig+0x138>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a40      	ldr	r2, [pc, #256]	@ (8004da4 <TIM_Base_SetConfig+0x13c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d108      	bne.n	8004cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a35      	ldr	r2, [pc, #212]	@ (8004d94 <TIM_Base_SetConfig+0x12c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01f      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc8:	d01b      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a32      	ldr	r2, [pc, #200]	@ (8004d98 <TIM_Base_SetConfig+0x130>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d017      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a31      	ldr	r2, [pc, #196]	@ (8004d9c <TIM_Base_SetConfig+0x134>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a30      	ldr	r2, [pc, #192]	@ (8004da0 <TIM_Base_SetConfig+0x138>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00f      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8004da4 <TIM_Base_SetConfig+0x13c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2e      	ldr	r2, [pc, #184]	@ (8004da8 <TIM_Base_SetConfig+0x140>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8004dac <TIM_Base_SetConfig+0x144>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_Base_SetConfig+0x9a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8004db0 <TIM_Base_SetConfig+0x148>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d108      	bne.n	8004d14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	@ (8004d94 <TIM_Base_SetConfig+0x12c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00f      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a18      	ldr	r2, [pc, #96]	@ (8004da4 <TIM_Base_SetConfig+0x13c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00b      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	@ (8004da8 <TIM_Base_SetConfig+0x140>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d007      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a16      	ldr	r2, [pc, #88]	@ (8004dac <TIM_Base_SetConfig+0x144>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d003      	beq.n	8004d60 <TIM_Base_SetConfig+0xf8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a15      	ldr	r2, [pc, #84]	@ (8004db0 <TIM_Base_SetConfig+0x148>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d103      	bne.n	8004d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d105      	bne.n	8004d86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	611a      	str	r2, [r3, #16]
  }
}
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40012c00 	.word	0x40012c00
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40013400 	.word	0x40013400
 8004da8:	40014000 	.word	0x40014000
 8004dac:	40014400 	.word	0x40014400
 8004db0:	40014800 	.word	0x40014800

08004db4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f023 0201 	bic.w	r2, r3, #1
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a26      	ldr	r2, [pc, #152]	@ (8004e78 <TIM_TI1_SetConfig+0xc4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d017      	beq.n	8004e12 <TIM_TI1_SetConfig+0x5e>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de8:	d013      	beq.n	8004e12 <TIM_TI1_SetConfig+0x5e>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a23      	ldr	r2, [pc, #140]	@ (8004e7c <TIM_TI1_SetConfig+0xc8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00f      	beq.n	8004e12 <TIM_TI1_SetConfig+0x5e>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4a22      	ldr	r2, [pc, #136]	@ (8004e80 <TIM_TI1_SetConfig+0xcc>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00b      	beq.n	8004e12 <TIM_TI1_SetConfig+0x5e>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4a21      	ldr	r2, [pc, #132]	@ (8004e84 <TIM_TI1_SetConfig+0xd0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d007      	beq.n	8004e12 <TIM_TI1_SetConfig+0x5e>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a20      	ldr	r2, [pc, #128]	@ (8004e88 <TIM_TI1_SetConfig+0xd4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d003      	beq.n	8004e12 <TIM_TI1_SetConfig+0x5e>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004e8c <TIM_TI1_SetConfig+0xd8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d101      	bne.n	8004e16 <TIM_TI1_SetConfig+0x62>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <TIM_TI1_SetConfig+0x64>
 8004e16:	2300      	movs	r3, #0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0303 	bic.w	r3, r3, #3
 8004e22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e003      	b.n	8004e36 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f023 030a 	bic.w	r3, r3, #10
 8004e50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f003 030a 	and.w	r3, r3, #10
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40013400 	.word	0x40013400
 8004e8c:	40014000 	.word	0x40014000

08004e90 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f023 0210 	bic.w	r2, r3, #16
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	031b      	lsls	r3, r3, #12
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ee2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f023 0303 	bic.w	r3, r3, #3
 8004f36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fc0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	031b      	lsls	r3, r3, #12
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	031b      	lsls	r3, r3, #12
 8004fda:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	621a      	str	r2, [r3, #32]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	2201      	movs	r2, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1a      	ldr	r2, [r3, #32]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	43db      	mvns	r3, r3
 800501e:	401a      	ands	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1a      	ldr	r2, [r3, #32]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800505c:	2302      	movs	r3, #2
 800505e:	e068      	b.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a2e      	ldr	r2, [pc, #184]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2d      	ldr	r2, [pc, #180]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d108      	bne.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800509a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01d      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d2:	d018      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d013      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1a      	ldr	r2, [pc, #104]	@ (800514c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a18      	ldr	r2, [pc, #96]	@ (8005150 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d009      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a13      	ldr	r2, [pc, #76]	@ (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a14      	ldr	r2, [pc, #80]	@ (8005154 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d10c      	bne.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800510c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	4313      	orrs	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40013400 	.word	0x40013400
 8005148:	40000400 	.word	0x40000400
 800514c:	40000800 	.word	0x40000800
 8005150:	40000c00 	.word	0x40000c00
 8005154:	40014000 	.word	0x40014000

08005158 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e040      	b.n	8005228 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc fa1e 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2224      	movs	r2, #36	@ 0x24
 80051c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fb6a 	bl	80058b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f8af 	bl	8005344 <UART_SetConfig>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e01b      	b.n	8005228 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800520e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fbe9 	bl	80059f8 <UART_CheckIdleState>
 8005226:	4603      	mov	r3, r0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08a      	sub	sp, #40	@ 0x28
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	4613      	mov	r3, r2
 800523e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005244:	2b20      	cmp	r3, #32
 8005246:	d177      	bne.n	8005338 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_UART_Transmit+0x24>
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e070      	b.n	800533a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2221      	movs	r2, #33	@ 0x21
 8005264:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005266:	f7fc fb3f 	bl	80018e8 <HAL_GetTick>
 800526a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005284:	d108      	bne.n	8005298 <HAL_UART_Transmit+0x68>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	61bb      	str	r3, [r7, #24]
 8005296:	e003      	b.n	80052a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800529c:	2300      	movs	r3, #0
 800529e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052a0:	e02f      	b.n	8005302 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2180      	movs	r1, #128	@ 0x80
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fc4b 	bl	8005b48 <UART_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d004      	beq.n	80052c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e03b      	b.n	800533a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10b      	bne.n	80052e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d4:	b292      	uxth	r2, r2
 80052d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	3302      	adds	r3, #2
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	e007      	b.n	80052f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	781a      	ldrb	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3301      	adds	r3, #1
 80052ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1c9      	bne.n	80052a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	2140      	movs	r1, #64	@ 0x40
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fc15 	bl	8005b48 <UART_WaitOnFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d004      	beq.n	800532e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e005      	b.n	800533a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	e000      	b.n	800533a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005338:	2302      	movs	r3, #2
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005348:	b08a      	sub	sp, #40	@ 0x28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	431a      	orrs	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	4313      	orrs	r3, r2
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4ba4      	ldr	r3, [pc, #656]	@ (8005604 <UART_SetConfig+0x2c0>)
 8005374:	4013      	ands	r3, r2
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800537c:	430b      	orrs	r3, r1
 800537e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a99      	ldr	r2, [pc, #612]	@ (8005608 <UART_SetConfig+0x2c4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ac:	4313      	orrs	r3, r2
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c0:	430a      	orrs	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a90      	ldr	r2, [pc, #576]	@ (800560c <UART_SetConfig+0x2c8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d126      	bne.n	800541c <UART_SetConfig+0xd8>
 80053ce:	4b90      	ldr	r3, [pc, #576]	@ (8005610 <UART_SetConfig+0x2cc>)
 80053d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d81b      	bhi.n	8005414 <UART_SetConfig+0xd0>
 80053dc:	a201      	add	r2, pc, #4	@ (adr r2, 80053e4 <UART_SetConfig+0xa0>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	080053f5 	.word	0x080053f5
 80053e8:	08005405 	.word	0x08005405
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	0800540d 	.word	0x0800540d
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053fa:	e116      	b.n	800562a <UART_SetConfig+0x2e6>
 80053fc:	2302      	movs	r3, #2
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005402:	e112      	b.n	800562a <UART_SetConfig+0x2e6>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800540a:	e10e      	b.n	800562a <UART_SetConfig+0x2e6>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005412:	e10a      	b.n	800562a <UART_SetConfig+0x2e6>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800541a:	e106      	b.n	800562a <UART_SetConfig+0x2e6>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a7c      	ldr	r2, [pc, #496]	@ (8005614 <UART_SetConfig+0x2d0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d138      	bne.n	8005498 <UART_SetConfig+0x154>
 8005426:	4b7a      	ldr	r3, [pc, #488]	@ (8005610 <UART_SetConfig+0x2cc>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800542c:	f003 030c 	and.w	r3, r3, #12
 8005430:	2b0c      	cmp	r3, #12
 8005432:	d82d      	bhi.n	8005490 <UART_SetConfig+0x14c>
 8005434:	a201      	add	r2, pc, #4	@ (adr r2, 800543c <UART_SetConfig+0xf8>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005471 	.word	0x08005471
 8005440:	08005491 	.word	0x08005491
 8005444:	08005491 	.word	0x08005491
 8005448:	08005491 	.word	0x08005491
 800544c:	08005481 	.word	0x08005481
 8005450:	08005491 	.word	0x08005491
 8005454:	08005491 	.word	0x08005491
 8005458:	08005491 	.word	0x08005491
 800545c:	08005479 	.word	0x08005479
 8005460:	08005491 	.word	0x08005491
 8005464:	08005491 	.word	0x08005491
 8005468:	08005491 	.word	0x08005491
 800546c:	08005489 	.word	0x08005489
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005476:	e0d8      	b.n	800562a <UART_SetConfig+0x2e6>
 8005478:	2302      	movs	r3, #2
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547e:	e0d4      	b.n	800562a <UART_SetConfig+0x2e6>
 8005480:	2304      	movs	r3, #4
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005486:	e0d0      	b.n	800562a <UART_SetConfig+0x2e6>
 8005488:	2308      	movs	r3, #8
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800548e:	e0cc      	b.n	800562a <UART_SetConfig+0x2e6>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005496:	e0c8      	b.n	800562a <UART_SetConfig+0x2e6>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5e      	ldr	r2, [pc, #376]	@ (8005618 <UART_SetConfig+0x2d4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d125      	bne.n	80054ee <UART_SetConfig+0x1aa>
 80054a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005610 <UART_SetConfig+0x2cc>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054ac:	2b30      	cmp	r3, #48	@ 0x30
 80054ae:	d016      	beq.n	80054de <UART_SetConfig+0x19a>
 80054b0:	2b30      	cmp	r3, #48	@ 0x30
 80054b2:	d818      	bhi.n	80054e6 <UART_SetConfig+0x1a2>
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d00a      	beq.n	80054ce <UART_SetConfig+0x18a>
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d814      	bhi.n	80054e6 <UART_SetConfig+0x1a2>
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <UART_SetConfig+0x182>
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d008      	beq.n	80054d6 <UART_SetConfig+0x192>
 80054c4:	e00f      	b.n	80054e6 <UART_SetConfig+0x1a2>
 80054c6:	2300      	movs	r3, #0
 80054c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054cc:	e0ad      	b.n	800562a <UART_SetConfig+0x2e6>
 80054ce:	2302      	movs	r3, #2
 80054d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054d4:	e0a9      	b.n	800562a <UART_SetConfig+0x2e6>
 80054d6:	2304      	movs	r3, #4
 80054d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054dc:	e0a5      	b.n	800562a <UART_SetConfig+0x2e6>
 80054de:	2308      	movs	r3, #8
 80054e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054e4:	e0a1      	b.n	800562a <UART_SetConfig+0x2e6>
 80054e6:	2310      	movs	r3, #16
 80054e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ec:	e09d      	b.n	800562a <UART_SetConfig+0x2e6>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a4a      	ldr	r2, [pc, #296]	@ (800561c <UART_SetConfig+0x2d8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d125      	bne.n	8005544 <UART_SetConfig+0x200>
 80054f8:	4b45      	ldr	r3, [pc, #276]	@ (8005610 <UART_SetConfig+0x2cc>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005502:	2bc0      	cmp	r3, #192	@ 0xc0
 8005504:	d016      	beq.n	8005534 <UART_SetConfig+0x1f0>
 8005506:	2bc0      	cmp	r3, #192	@ 0xc0
 8005508:	d818      	bhi.n	800553c <UART_SetConfig+0x1f8>
 800550a:	2b80      	cmp	r3, #128	@ 0x80
 800550c:	d00a      	beq.n	8005524 <UART_SetConfig+0x1e0>
 800550e:	2b80      	cmp	r3, #128	@ 0x80
 8005510:	d814      	bhi.n	800553c <UART_SetConfig+0x1f8>
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <UART_SetConfig+0x1d8>
 8005516:	2b40      	cmp	r3, #64	@ 0x40
 8005518:	d008      	beq.n	800552c <UART_SetConfig+0x1e8>
 800551a:	e00f      	b.n	800553c <UART_SetConfig+0x1f8>
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005522:	e082      	b.n	800562a <UART_SetConfig+0x2e6>
 8005524:	2302      	movs	r3, #2
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800552a:	e07e      	b.n	800562a <UART_SetConfig+0x2e6>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005532:	e07a      	b.n	800562a <UART_SetConfig+0x2e6>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800553a:	e076      	b.n	800562a <UART_SetConfig+0x2e6>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005542:	e072      	b.n	800562a <UART_SetConfig+0x2e6>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a35      	ldr	r2, [pc, #212]	@ (8005620 <UART_SetConfig+0x2dc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d12a      	bne.n	80055a4 <UART_SetConfig+0x260>
 800554e:	4b30      	ldr	r3, [pc, #192]	@ (8005610 <UART_SetConfig+0x2cc>)
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005558:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800555c:	d01a      	beq.n	8005594 <UART_SetConfig+0x250>
 800555e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005562:	d81b      	bhi.n	800559c <UART_SetConfig+0x258>
 8005564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005568:	d00c      	beq.n	8005584 <UART_SetConfig+0x240>
 800556a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800556e:	d815      	bhi.n	800559c <UART_SetConfig+0x258>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <UART_SetConfig+0x238>
 8005574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005578:	d008      	beq.n	800558c <UART_SetConfig+0x248>
 800557a:	e00f      	b.n	800559c <UART_SetConfig+0x258>
 800557c:	2300      	movs	r3, #0
 800557e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005582:	e052      	b.n	800562a <UART_SetConfig+0x2e6>
 8005584:	2302      	movs	r3, #2
 8005586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800558a:	e04e      	b.n	800562a <UART_SetConfig+0x2e6>
 800558c:	2304      	movs	r3, #4
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005592:	e04a      	b.n	800562a <UART_SetConfig+0x2e6>
 8005594:	2308      	movs	r3, #8
 8005596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800559a:	e046      	b.n	800562a <UART_SetConfig+0x2e6>
 800559c:	2310      	movs	r3, #16
 800559e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055a2:	e042      	b.n	800562a <UART_SetConfig+0x2e6>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a17      	ldr	r2, [pc, #92]	@ (8005608 <UART_SetConfig+0x2c4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d13a      	bne.n	8005624 <UART_SetConfig+0x2e0>
 80055ae:	4b18      	ldr	r3, [pc, #96]	@ (8005610 <UART_SetConfig+0x2cc>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055bc:	d01a      	beq.n	80055f4 <UART_SetConfig+0x2b0>
 80055be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055c2:	d81b      	bhi.n	80055fc <UART_SetConfig+0x2b8>
 80055c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c8:	d00c      	beq.n	80055e4 <UART_SetConfig+0x2a0>
 80055ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055ce:	d815      	bhi.n	80055fc <UART_SetConfig+0x2b8>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <UART_SetConfig+0x298>
 80055d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055d8:	d008      	beq.n	80055ec <UART_SetConfig+0x2a8>
 80055da:	e00f      	b.n	80055fc <UART_SetConfig+0x2b8>
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055e2:	e022      	b.n	800562a <UART_SetConfig+0x2e6>
 80055e4:	2302      	movs	r3, #2
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ea:	e01e      	b.n	800562a <UART_SetConfig+0x2e6>
 80055ec:	2304      	movs	r3, #4
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f2:	e01a      	b.n	800562a <UART_SetConfig+0x2e6>
 80055f4:	2308      	movs	r3, #8
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055fa:	e016      	b.n	800562a <UART_SetConfig+0x2e6>
 80055fc:	2310      	movs	r3, #16
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005602:	e012      	b.n	800562a <UART_SetConfig+0x2e6>
 8005604:	efff69f3 	.word	0xefff69f3
 8005608:	40008000 	.word	0x40008000
 800560c:	40013800 	.word	0x40013800
 8005610:	40021000 	.word	0x40021000
 8005614:	40004400 	.word	0x40004400
 8005618:	40004800 	.word	0x40004800
 800561c:	40004c00 	.word	0x40004c00
 8005620:	40005000 	.word	0x40005000
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a9f      	ldr	r2, [pc, #636]	@ (80058ac <UART_SetConfig+0x568>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d17a      	bne.n	800572a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005634:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005638:	2b08      	cmp	r3, #8
 800563a:	d824      	bhi.n	8005686 <UART_SetConfig+0x342>
 800563c:	a201      	add	r2, pc, #4	@ (adr r2, 8005644 <UART_SetConfig+0x300>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005669 	.word	0x08005669
 8005648:	08005687 	.word	0x08005687
 800564c:	08005671 	.word	0x08005671
 8005650:	08005687 	.word	0x08005687
 8005654:	08005677 	.word	0x08005677
 8005658:	08005687 	.word	0x08005687
 800565c:	08005687 	.word	0x08005687
 8005660:	08005687 	.word	0x08005687
 8005664:	0800567f 	.word	0x0800567f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005668:	f7fd fa1a 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 800566c:	61f8      	str	r0, [r7, #28]
        break;
 800566e:	e010      	b.n	8005692 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005670:	4b8f      	ldr	r3, [pc, #572]	@ (80058b0 <UART_SetConfig+0x56c>)
 8005672:	61fb      	str	r3, [r7, #28]
        break;
 8005674:	e00d      	b.n	8005692 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005676:	f7fd f97b 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800567a:	61f8      	str	r0, [r7, #28]
        break;
 800567c:	e009      	b.n	8005692 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800567e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005682:	61fb      	str	r3, [r7, #28]
        break;
 8005684:	e005      	b.n	8005692 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80fb 	beq.w	8005890 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	4413      	add	r3, r2
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d305      	bcc.n	80056b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d903      	bls.n	80056be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056bc:	e0e8      	b.n	8005890 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	2200      	movs	r2, #0
 80056c2:	461c      	mov	r4, r3
 80056c4:	4615      	mov	r5, r2
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	022b      	lsls	r3, r5, #8
 80056d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80056d4:	0222      	lsls	r2, r4, #8
 80056d6:	68f9      	ldr	r1, [r7, #12]
 80056d8:	6849      	ldr	r1, [r1, #4]
 80056da:	0849      	lsrs	r1, r1, #1
 80056dc:	2000      	movs	r0, #0
 80056de:	4688      	mov	r8, r1
 80056e0:	4681      	mov	r9, r0
 80056e2:	eb12 0a08 	adds.w	sl, r2, r8
 80056e6:	eb43 0b09 	adc.w	fp, r3, r9
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	603b      	str	r3, [r7, #0]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f8:	4650      	mov	r0, sl
 80056fa:	4659      	mov	r1, fp
 80056fc:	f7fb f9ae 	bl	8000a5c <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4613      	mov	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800570e:	d308      	bcc.n	8005722 <UART_SetConfig+0x3de>
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005716:	d204      	bcs.n	8005722 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	60da      	str	r2, [r3, #12]
 8005720:	e0b6      	b.n	8005890 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005728:	e0b2      	b.n	8005890 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005732:	d15e      	bne.n	80057f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005734:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005738:	2b08      	cmp	r3, #8
 800573a:	d828      	bhi.n	800578e <UART_SetConfig+0x44a>
 800573c:	a201      	add	r2, pc, #4	@ (adr r2, 8005744 <UART_SetConfig+0x400>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	08005769 	.word	0x08005769
 8005748:	08005771 	.word	0x08005771
 800574c:	08005779 	.word	0x08005779
 8005750:	0800578f 	.word	0x0800578f
 8005754:	0800577f 	.word	0x0800577f
 8005758:	0800578f 	.word	0x0800578f
 800575c:	0800578f 	.word	0x0800578f
 8005760:	0800578f 	.word	0x0800578f
 8005764:	08005787 	.word	0x08005787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005768:	f7fd f99a 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 800576c:	61f8      	str	r0, [r7, #28]
        break;
 800576e:	e014      	b.n	800579a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005770:	f7fd f9ac 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 8005774:	61f8      	str	r0, [r7, #28]
        break;
 8005776:	e010      	b.n	800579a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005778:	4b4d      	ldr	r3, [pc, #308]	@ (80058b0 <UART_SetConfig+0x56c>)
 800577a:	61fb      	str	r3, [r7, #28]
        break;
 800577c:	e00d      	b.n	800579a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577e:	f7fd f8f7 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8005782:	61f8      	str	r0, [r7, #28]
        break;
 8005784:	e009      	b.n	800579a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800578a:	61fb      	str	r3, [r7, #28]
        break;
 800578c:	e005      	b.n	800579a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d077      	beq.n	8005890 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	005a      	lsls	r2, r3, #1
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	441a      	add	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b0f      	cmp	r3, #15
 80057ba:	d916      	bls.n	80057ea <UART_SetConfig+0x4a6>
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c2:	d212      	bcs.n	80057ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f023 030f 	bic.w	r3, r3, #15
 80057cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	085b      	lsrs	r3, r3, #1
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	b29a      	uxth	r2, r3
 80057da:	8afb      	ldrh	r3, [r7, #22]
 80057dc:	4313      	orrs	r3, r2
 80057de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	8afa      	ldrh	r2, [r7, #22]
 80057e6:	60da      	str	r2, [r3, #12]
 80057e8:	e052      	b.n	8005890 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057f0:	e04e      	b.n	8005890 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d827      	bhi.n	800584a <UART_SetConfig+0x506>
 80057fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005800 <UART_SetConfig+0x4bc>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005825 	.word	0x08005825
 8005804:	0800582d 	.word	0x0800582d
 8005808:	08005835 	.word	0x08005835
 800580c:	0800584b 	.word	0x0800584b
 8005810:	0800583b 	.word	0x0800583b
 8005814:	0800584b 	.word	0x0800584b
 8005818:	0800584b 	.word	0x0800584b
 800581c:	0800584b 	.word	0x0800584b
 8005820:	08005843 	.word	0x08005843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005824:	f7fd f93c 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 8005828:	61f8      	str	r0, [r7, #28]
        break;
 800582a:	e014      	b.n	8005856 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800582c:	f7fd f94e 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 8005830:	61f8      	str	r0, [r7, #28]
        break;
 8005832:	e010      	b.n	8005856 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005834:	4b1e      	ldr	r3, [pc, #120]	@ (80058b0 <UART_SetConfig+0x56c>)
 8005836:	61fb      	str	r3, [r7, #28]
        break;
 8005838:	e00d      	b.n	8005856 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583a:	f7fd f899 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800583e:	61f8      	str	r0, [r7, #28]
        break;
 8005840:	e009      	b.n	8005856 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005846:	61fb      	str	r3, [r7, #28]
        break;
 8005848:	e005      	b.n	8005856 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005854:	bf00      	nop
    }

    if (pclk != 0U)
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d019      	beq.n	8005890 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	085a      	lsrs	r2, r3, #1
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	441a      	add	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	fbb2 f3f3 	udiv	r3, r2, r3
 800586e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2b0f      	cmp	r3, #15
 8005874:	d909      	bls.n	800588a <UART_SetConfig+0x546>
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800587c:	d205      	bcs.n	800588a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	e002      	b.n	8005890 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800589c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3728      	adds	r7, #40	@ 0x28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058aa:	bf00      	nop
 80058ac:	40008000 	.word	0x40008000
 80058b0:	00f42400 	.word	0x00f42400

080058b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	430a      	orrs	r2, r1
 8005964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	430a      	orrs	r2, r1
 8005986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01a      	beq.n	80059ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059b2:	d10a      	bne.n	80059ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	605a      	str	r2, [r3, #4]
  }
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b098      	sub	sp, #96	@ 0x60
 80059fc:	af02      	add	r7, sp, #8
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a08:	f7fb ff6e 	bl	80018e8 <HAL_GetTick>
 8005a0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d12e      	bne.n	8005a7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a24:	2200      	movs	r2, #0
 8005a26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f88c 	bl	8005b48 <UART_WaitOnFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d021      	beq.n	8005a7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e6      	bne.n	8005a36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e062      	b.n	8005b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d149      	bne.n	8005b1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a90:	2200      	movs	r2, #0
 8005a92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f856 	bl	8005b48 <UART_WaitOnFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d03c      	beq.n	8005b1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	623b      	str	r3, [r7, #32]
   return(result);
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e6      	bne.n	8005aa2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3308      	adds	r3, #8
 8005af2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005af4:	61fa      	str	r2, [r7, #28]
 8005af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	69b9      	ldr	r1, [r7, #24]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	617b      	str	r3, [r7, #20]
   return(result);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e5      	bne.n	8005ad4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e011      	b.n	8005b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3758      	adds	r7, #88	@ 0x58
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b58:	e04f      	b.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d04b      	beq.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b62:	f7fb fec1 	bl	80018e8 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d302      	bcc.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e04e      	b.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d037      	beq.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b80      	cmp	r3, #128	@ 0x80
 8005b8e:	d034      	beq.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b40      	cmp	r3, #64	@ 0x40
 8005b94:	d031      	beq.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d110      	bne.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2208      	movs	r2, #8
 8005baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f838 	bl	8005c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2208      	movs	r2, #8
 8005bb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e029      	b.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bd4:	d111      	bne.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 f81e 	bl	8005c22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e00f      	b.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4013      	ands	r3, r2
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	bf0c      	ite	eq
 8005c0a:	2301      	moveq	r3, #1
 8005c0c:	2300      	movne	r3, #0
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	461a      	mov	r2, r3
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d0a0      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b095      	sub	sp, #84	@ 0x54
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e6      	bne.n	8005c2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e5      	bne.n	8005c5c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d118      	bne.n	8005cca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f023 0310 	bic.w	r3, r3, #16
 8005cac:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6979      	ldr	r1, [r7, #20]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e6      	bne.n	8005c98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005cde:	bf00      	nop
 8005ce0:	3754      	adds	r7, #84	@ 0x54
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
	...

08005cec <siprintf>:
 8005cec:	b40e      	push	{r1, r2, r3}
 8005cee:	b510      	push	{r4, lr}
 8005cf0:	b09d      	sub	sp, #116	@ 0x74
 8005cf2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005cf4:	9002      	str	r0, [sp, #8]
 8005cf6:	9006      	str	r0, [sp, #24]
 8005cf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005cfc:	480a      	ldr	r0, [pc, #40]	@ (8005d28 <siprintf+0x3c>)
 8005cfe:	9107      	str	r1, [sp, #28]
 8005d00:	9104      	str	r1, [sp, #16]
 8005d02:	490a      	ldr	r1, [pc, #40]	@ (8005d2c <siprintf+0x40>)
 8005d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d08:	9105      	str	r1, [sp, #20]
 8005d0a:	2400      	movs	r4, #0
 8005d0c:	a902      	add	r1, sp, #8
 8005d0e:	6800      	ldr	r0, [r0, #0]
 8005d10:	9301      	str	r3, [sp, #4]
 8005d12:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005d14:	f000 f994 	bl	8006040 <_svfiprintf_r>
 8005d18:	9b02      	ldr	r3, [sp, #8]
 8005d1a:	701c      	strb	r4, [r3, #0]
 8005d1c:	b01d      	add	sp, #116	@ 0x74
 8005d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d22:	b003      	add	sp, #12
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	2000000c 	.word	0x2000000c
 8005d2c:	ffff0208 	.word	0xffff0208

08005d30 <memset>:
 8005d30:	4402      	add	r2, r0
 8005d32:	4603      	mov	r3, r0
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d100      	bne.n	8005d3a <memset+0xa>
 8005d38:	4770      	bx	lr
 8005d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3e:	e7f9      	b.n	8005d34 <memset+0x4>

08005d40 <__errno>:
 8005d40:	4b01      	ldr	r3, [pc, #4]	@ (8005d48 <__errno+0x8>)
 8005d42:	6818      	ldr	r0, [r3, #0]
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	2000000c 	.word	0x2000000c

08005d4c <__libc_init_array>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8005d84 <__libc_init_array+0x38>)
 8005d50:	4c0d      	ldr	r4, [pc, #52]	@ (8005d88 <__libc_init_array+0x3c>)
 8005d52:	1b64      	subs	r4, r4, r5
 8005d54:	10a4      	asrs	r4, r4, #2
 8005d56:	2600      	movs	r6, #0
 8005d58:	42a6      	cmp	r6, r4
 8005d5a:	d109      	bne.n	8005d70 <__libc_init_array+0x24>
 8005d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d8c <__libc_init_array+0x40>)
 8005d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8005d90 <__libc_init_array+0x44>)
 8005d60:	f000 fc64 	bl	800662c <_init>
 8005d64:	1b64      	subs	r4, r4, r5
 8005d66:	10a4      	asrs	r4, r4, #2
 8005d68:	2600      	movs	r6, #0
 8005d6a:	42a6      	cmp	r6, r4
 8005d6c:	d105      	bne.n	8005d7a <__libc_init_array+0x2e>
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d74:	4798      	blx	r3
 8005d76:	3601      	adds	r6, #1
 8005d78:	e7ee      	b.n	8005d58 <__libc_init_array+0xc>
 8005d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d7e:	4798      	blx	r3
 8005d80:	3601      	adds	r6, #1
 8005d82:	e7f2      	b.n	8005d6a <__libc_init_array+0x1e>
 8005d84:	08006708 	.word	0x08006708
 8005d88:	08006708 	.word	0x08006708
 8005d8c:	08006708 	.word	0x08006708
 8005d90:	0800670c 	.word	0x0800670c

08005d94 <__retarget_lock_acquire_recursive>:
 8005d94:	4770      	bx	lr

08005d96 <__retarget_lock_release_recursive>:
 8005d96:	4770      	bx	lr

08005d98 <_free_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	d041      	beq.n	8005e24 <_free_r+0x8c>
 8005da0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005da4:	1f0c      	subs	r4, r1, #4
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	bfb8      	it	lt
 8005daa:	18e4      	addlt	r4, r4, r3
 8005dac:	f000 f8e0 	bl	8005f70 <__malloc_lock>
 8005db0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e28 <_free_r+0x90>)
 8005db2:	6813      	ldr	r3, [r2, #0]
 8005db4:	b933      	cbnz	r3, 8005dc4 <_free_r+0x2c>
 8005db6:	6063      	str	r3, [r4, #4]
 8005db8:	6014      	str	r4, [r2, #0]
 8005dba:	4628      	mov	r0, r5
 8005dbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dc0:	f000 b8dc 	b.w	8005f7c <__malloc_unlock>
 8005dc4:	42a3      	cmp	r3, r4
 8005dc6:	d908      	bls.n	8005dda <_free_r+0x42>
 8005dc8:	6820      	ldr	r0, [r4, #0]
 8005dca:	1821      	adds	r1, r4, r0
 8005dcc:	428b      	cmp	r3, r1
 8005dce:	bf01      	itttt	eq
 8005dd0:	6819      	ldreq	r1, [r3, #0]
 8005dd2:	685b      	ldreq	r3, [r3, #4]
 8005dd4:	1809      	addeq	r1, r1, r0
 8005dd6:	6021      	streq	r1, [r4, #0]
 8005dd8:	e7ed      	b.n	8005db6 <_free_r+0x1e>
 8005dda:	461a      	mov	r2, r3
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	b10b      	cbz	r3, 8005de4 <_free_r+0x4c>
 8005de0:	42a3      	cmp	r3, r4
 8005de2:	d9fa      	bls.n	8005dda <_free_r+0x42>
 8005de4:	6811      	ldr	r1, [r2, #0]
 8005de6:	1850      	adds	r0, r2, r1
 8005de8:	42a0      	cmp	r0, r4
 8005dea:	d10b      	bne.n	8005e04 <_free_r+0x6c>
 8005dec:	6820      	ldr	r0, [r4, #0]
 8005dee:	4401      	add	r1, r0
 8005df0:	1850      	adds	r0, r2, r1
 8005df2:	4283      	cmp	r3, r0
 8005df4:	6011      	str	r1, [r2, #0]
 8005df6:	d1e0      	bne.n	8005dba <_free_r+0x22>
 8005df8:	6818      	ldr	r0, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	6053      	str	r3, [r2, #4]
 8005dfe:	4408      	add	r0, r1
 8005e00:	6010      	str	r0, [r2, #0]
 8005e02:	e7da      	b.n	8005dba <_free_r+0x22>
 8005e04:	d902      	bls.n	8005e0c <_free_r+0x74>
 8005e06:	230c      	movs	r3, #12
 8005e08:	602b      	str	r3, [r5, #0]
 8005e0a:	e7d6      	b.n	8005dba <_free_r+0x22>
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	1821      	adds	r1, r4, r0
 8005e10:	428b      	cmp	r3, r1
 8005e12:	bf04      	itt	eq
 8005e14:	6819      	ldreq	r1, [r3, #0]
 8005e16:	685b      	ldreq	r3, [r3, #4]
 8005e18:	6063      	str	r3, [r4, #4]
 8005e1a:	bf04      	itt	eq
 8005e1c:	1809      	addeq	r1, r1, r0
 8005e1e:	6021      	streq	r1, [r4, #0]
 8005e20:	6054      	str	r4, [r2, #4]
 8005e22:	e7ca      	b.n	8005dba <_free_r+0x22>
 8005e24:	bd38      	pop	{r3, r4, r5, pc}
 8005e26:	bf00      	nop
 8005e28:	20000350 	.word	0x20000350

08005e2c <sbrk_aligned>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005e6c <sbrk_aligned+0x40>)
 8005e30:	460c      	mov	r4, r1
 8005e32:	6831      	ldr	r1, [r6, #0]
 8005e34:	4605      	mov	r5, r0
 8005e36:	b911      	cbnz	r1, 8005e3e <sbrk_aligned+0x12>
 8005e38:	f000 fba4 	bl	8006584 <_sbrk_r>
 8005e3c:	6030      	str	r0, [r6, #0]
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4628      	mov	r0, r5
 8005e42:	f000 fb9f 	bl	8006584 <_sbrk_r>
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	d103      	bne.n	8005e52 <sbrk_aligned+0x26>
 8005e4a:	f04f 34ff 	mov.w	r4, #4294967295
 8005e4e:	4620      	mov	r0, r4
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	1cc4      	adds	r4, r0, #3
 8005e54:	f024 0403 	bic.w	r4, r4, #3
 8005e58:	42a0      	cmp	r0, r4
 8005e5a:	d0f8      	beq.n	8005e4e <sbrk_aligned+0x22>
 8005e5c:	1a21      	subs	r1, r4, r0
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 fb90 	bl	8006584 <_sbrk_r>
 8005e64:	3001      	adds	r0, #1
 8005e66:	d1f2      	bne.n	8005e4e <sbrk_aligned+0x22>
 8005e68:	e7ef      	b.n	8005e4a <sbrk_aligned+0x1e>
 8005e6a:	bf00      	nop
 8005e6c:	2000034c 	.word	0x2000034c

08005e70 <_malloc_r>:
 8005e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e74:	1ccd      	adds	r5, r1, #3
 8005e76:	f025 0503 	bic.w	r5, r5, #3
 8005e7a:	3508      	adds	r5, #8
 8005e7c:	2d0c      	cmp	r5, #12
 8005e7e:	bf38      	it	cc
 8005e80:	250c      	movcc	r5, #12
 8005e82:	2d00      	cmp	r5, #0
 8005e84:	4606      	mov	r6, r0
 8005e86:	db01      	blt.n	8005e8c <_malloc_r+0x1c>
 8005e88:	42a9      	cmp	r1, r5
 8005e8a:	d904      	bls.n	8005e96 <_malloc_r+0x26>
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	2000      	movs	r0, #0
 8005e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f6c <_malloc_r+0xfc>
 8005e9a:	f000 f869 	bl	8005f70 <__malloc_lock>
 8005e9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea2:	461c      	mov	r4, r3
 8005ea4:	bb44      	cbnz	r4, 8005ef8 <_malloc_r+0x88>
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7ff ffbf 	bl	8005e2c <sbrk_aligned>
 8005eae:	1c43      	adds	r3, r0, #1
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	d158      	bne.n	8005f66 <_malloc_r+0xf6>
 8005eb4:	f8d8 4000 	ldr.w	r4, [r8]
 8005eb8:	4627      	mov	r7, r4
 8005eba:	2f00      	cmp	r7, #0
 8005ebc:	d143      	bne.n	8005f46 <_malloc_r+0xd6>
 8005ebe:	2c00      	cmp	r4, #0
 8005ec0:	d04b      	beq.n	8005f5a <_malloc_r+0xea>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	eb04 0903 	add.w	r9, r4, r3
 8005ecc:	f000 fb5a 	bl	8006584 <_sbrk_r>
 8005ed0:	4581      	cmp	r9, r0
 8005ed2:	d142      	bne.n	8005f5a <_malloc_r+0xea>
 8005ed4:	6821      	ldr	r1, [r4, #0]
 8005ed6:	1a6d      	subs	r5, r5, r1
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4630      	mov	r0, r6
 8005edc:	f7ff ffa6 	bl	8005e2c <sbrk_aligned>
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d03a      	beq.n	8005f5a <_malloc_r+0xea>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	442b      	add	r3, r5
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	f8d8 3000 	ldr.w	r3, [r8]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	bb62      	cbnz	r2, 8005f4c <_malloc_r+0xdc>
 8005ef2:	f8c8 7000 	str.w	r7, [r8]
 8005ef6:	e00f      	b.n	8005f18 <_malloc_r+0xa8>
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	1b52      	subs	r2, r2, r5
 8005efc:	d420      	bmi.n	8005f40 <_malloc_r+0xd0>
 8005efe:	2a0b      	cmp	r2, #11
 8005f00:	d917      	bls.n	8005f32 <_malloc_r+0xc2>
 8005f02:	1961      	adds	r1, r4, r5
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	6025      	str	r5, [r4, #0]
 8005f08:	bf18      	it	ne
 8005f0a:	6059      	strne	r1, [r3, #4]
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	bf08      	it	eq
 8005f10:	f8c8 1000 	streq.w	r1, [r8]
 8005f14:	5162      	str	r2, [r4, r5]
 8005f16:	604b      	str	r3, [r1, #4]
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f000 f82f 	bl	8005f7c <__malloc_unlock>
 8005f1e:	f104 000b 	add.w	r0, r4, #11
 8005f22:	1d23      	adds	r3, r4, #4
 8005f24:	f020 0007 	bic.w	r0, r0, #7
 8005f28:	1ac2      	subs	r2, r0, r3
 8005f2a:	bf1c      	itt	ne
 8005f2c:	1a1b      	subne	r3, r3, r0
 8005f2e:	50a3      	strne	r3, [r4, r2]
 8005f30:	e7af      	b.n	8005e92 <_malloc_r+0x22>
 8005f32:	6862      	ldr	r2, [r4, #4]
 8005f34:	42a3      	cmp	r3, r4
 8005f36:	bf0c      	ite	eq
 8005f38:	f8c8 2000 	streq.w	r2, [r8]
 8005f3c:	605a      	strne	r2, [r3, #4]
 8005f3e:	e7eb      	b.n	8005f18 <_malloc_r+0xa8>
 8005f40:	4623      	mov	r3, r4
 8005f42:	6864      	ldr	r4, [r4, #4]
 8005f44:	e7ae      	b.n	8005ea4 <_malloc_r+0x34>
 8005f46:	463c      	mov	r4, r7
 8005f48:	687f      	ldr	r7, [r7, #4]
 8005f4a:	e7b6      	b.n	8005eba <_malloc_r+0x4a>
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	42a3      	cmp	r3, r4
 8005f52:	d1fb      	bne.n	8005f4c <_malloc_r+0xdc>
 8005f54:	2300      	movs	r3, #0
 8005f56:	6053      	str	r3, [r2, #4]
 8005f58:	e7de      	b.n	8005f18 <_malloc_r+0xa8>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	6033      	str	r3, [r6, #0]
 8005f5e:	4630      	mov	r0, r6
 8005f60:	f000 f80c 	bl	8005f7c <__malloc_unlock>
 8005f64:	e794      	b.n	8005e90 <_malloc_r+0x20>
 8005f66:	6005      	str	r5, [r0, #0]
 8005f68:	e7d6      	b.n	8005f18 <_malloc_r+0xa8>
 8005f6a:	bf00      	nop
 8005f6c:	20000350 	.word	0x20000350

08005f70 <__malloc_lock>:
 8005f70:	4801      	ldr	r0, [pc, #4]	@ (8005f78 <__malloc_lock+0x8>)
 8005f72:	f7ff bf0f 	b.w	8005d94 <__retarget_lock_acquire_recursive>
 8005f76:	bf00      	nop
 8005f78:	20000348 	.word	0x20000348

08005f7c <__malloc_unlock>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	@ (8005f84 <__malloc_unlock+0x8>)
 8005f7e:	f7ff bf0a 	b.w	8005d96 <__retarget_lock_release_recursive>
 8005f82:	bf00      	nop
 8005f84:	20000348 	.word	0x20000348

08005f88 <__ssputs_r>:
 8005f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f8c:	688e      	ldr	r6, [r1, #8]
 8005f8e:	461f      	mov	r7, r3
 8005f90:	42be      	cmp	r6, r7
 8005f92:	680b      	ldr	r3, [r1, #0]
 8005f94:	4682      	mov	sl, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	4690      	mov	r8, r2
 8005f9a:	d82d      	bhi.n	8005ff8 <__ssputs_r+0x70>
 8005f9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005fa4:	d026      	beq.n	8005ff4 <__ssputs_r+0x6c>
 8005fa6:	6965      	ldr	r5, [r4, #20]
 8005fa8:	6909      	ldr	r1, [r1, #16]
 8005faa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fae:	eba3 0901 	sub.w	r9, r3, r1
 8005fb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fb6:	1c7b      	adds	r3, r7, #1
 8005fb8:	444b      	add	r3, r9
 8005fba:	106d      	asrs	r5, r5, #1
 8005fbc:	429d      	cmp	r5, r3
 8005fbe:	bf38      	it	cc
 8005fc0:	461d      	movcc	r5, r3
 8005fc2:	0553      	lsls	r3, r2, #21
 8005fc4:	d527      	bpl.n	8006016 <__ssputs_r+0x8e>
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7ff ff52 	bl	8005e70 <_malloc_r>
 8005fcc:	4606      	mov	r6, r0
 8005fce:	b360      	cbz	r0, 800602a <__ssputs_r+0xa2>
 8005fd0:	6921      	ldr	r1, [r4, #16]
 8005fd2:	464a      	mov	r2, r9
 8005fd4:	f000 fae6 	bl	80065a4 <memcpy>
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	6126      	str	r6, [r4, #16]
 8005fe6:	6165      	str	r5, [r4, #20]
 8005fe8:	444e      	add	r6, r9
 8005fea:	eba5 0509 	sub.w	r5, r5, r9
 8005fee:	6026      	str	r6, [r4, #0]
 8005ff0:	60a5      	str	r5, [r4, #8]
 8005ff2:	463e      	mov	r6, r7
 8005ff4:	42be      	cmp	r6, r7
 8005ff6:	d900      	bls.n	8005ffa <__ssputs_r+0x72>
 8005ff8:	463e      	mov	r6, r7
 8005ffa:	6820      	ldr	r0, [r4, #0]
 8005ffc:	4632      	mov	r2, r6
 8005ffe:	4641      	mov	r1, r8
 8006000:	f000 faa6 	bl	8006550 <memmove>
 8006004:	68a3      	ldr	r3, [r4, #8]
 8006006:	1b9b      	subs	r3, r3, r6
 8006008:	60a3      	str	r3, [r4, #8]
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	4433      	add	r3, r6
 800600e:	6023      	str	r3, [r4, #0]
 8006010:	2000      	movs	r0, #0
 8006012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006016:	462a      	mov	r2, r5
 8006018:	f000 fad2 	bl	80065c0 <_realloc_r>
 800601c:	4606      	mov	r6, r0
 800601e:	2800      	cmp	r0, #0
 8006020:	d1e0      	bne.n	8005fe4 <__ssputs_r+0x5c>
 8006022:	6921      	ldr	r1, [r4, #16]
 8006024:	4650      	mov	r0, sl
 8006026:	f7ff feb7 	bl	8005d98 <_free_r>
 800602a:	230c      	movs	r3, #12
 800602c:	f8ca 3000 	str.w	r3, [sl]
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	e7e9      	b.n	8006012 <__ssputs_r+0x8a>
	...

08006040 <_svfiprintf_r>:
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	4698      	mov	r8, r3
 8006046:	898b      	ldrh	r3, [r1, #12]
 8006048:	061b      	lsls	r3, r3, #24
 800604a:	b09d      	sub	sp, #116	@ 0x74
 800604c:	4607      	mov	r7, r0
 800604e:	460d      	mov	r5, r1
 8006050:	4614      	mov	r4, r2
 8006052:	d510      	bpl.n	8006076 <_svfiprintf_r+0x36>
 8006054:	690b      	ldr	r3, [r1, #16]
 8006056:	b973      	cbnz	r3, 8006076 <_svfiprintf_r+0x36>
 8006058:	2140      	movs	r1, #64	@ 0x40
 800605a:	f7ff ff09 	bl	8005e70 <_malloc_r>
 800605e:	6028      	str	r0, [r5, #0]
 8006060:	6128      	str	r0, [r5, #16]
 8006062:	b930      	cbnz	r0, 8006072 <_svfiprintf_r+0x32>
 8006064:	230c      	movs	r3, #12
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	f04f 30ff 	mov.w	r0, #4294967295
 800606c:	b01d      	add	sp, #116	@ 0x74
 800606e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006072:	2340      	movs	r3, #64	@ 0x40
 8006074:	616b      	str	r3, [r5, #20]
 8006076:	2300      	movs	r3, #0
 8006078:	9309      	str	r3, [sp, #36]	@ 0x24
 800607a:	2320      	movs	r3, #32
 800607c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006080:	f8cd 800c 	str.w	r8, [sp, #12]
 8006084:	2330      	movs	r3, #48	@ 0x30
 8006086:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006224 <_svfiprintf_r+0x1e4>
 800608a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800608e:	f04f 0901 	mov.w	r9, #1
 8006092:	4623      	mov	r3, r4
 8006094:	469a      	mov	sl, r3
 8006096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800609a:	b10a      	cbz	r2, 80060a0 <_svfiprintf_r+0x60>
 800609c:	2a25      	cmp	r2, #37	@ 0x25
 800609e:	d1f9      	bne.n	8006094 <_svfiprintf_r+0x54>
 80060a0:	ebba 0b04 	subs.w	fp, sl, r4
 80060a4:	d00b      	beq.n	80060be <_svfiprintf_r+0x7e>
 80060a6:	465b      	mov	r3, fp
 80060a8:	4622      	mov	r2, r4
 80060aa:	4629      	mov	r1, r5
 80060ac:	4638      	mov	r0, r7
 80060ae:	f7ff ff6b 	bl	8005f88 <__ssputs_r>
 80060b2:	3001      	adds	r0, #1
 80060b4:	f000 80a7 	beq.w	8006206 <_svfiprintf_r+0x1c6>
 80060b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060ba:	445a      	add	r2, fp
 80060bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80060be:	f89a 3000 	ldrb.w	r3, [sl]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 809f 	beq.w	8006206 <_svfiprintf_r+0x1c6>
 80060c8:	2300      	movs	r3, #0
 80060ca:	f04f 32ff 	mov.w	r2, #4294967295
 80060ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060d2:	f10a 0a01 	add.w	sl, sl, #1
 80060d6:	9304      	str	r3, [sp, #16]
 80060d8:	9307      	str	r3, [sp, #28]
 80060da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80060de:	931a      	str	r3, [sp, #104]	@ 0x68
 80060e0:	4654      	mov	r4, sl
 80060e2:	2205      	movs	r2, #5
 80060e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e8:	484e      	ldr	r0, [pc, #312]	@ (8006224 <_svfiprintf_r+0x1e4>)
 80060ea:	f7fa f879 	bl	80001e0 <memchr>
 80060ee:	9a04      	ldr	r2, [sp, #16]
 80060f0:	b9d8      	cbnz	r0, 800612a <_svfiprintf_r+0xea>
 80060f2:	06d0      	lsls	r0, r2, #27
 80060f4:	bf44      	itt	mi
 80060f6:	2320      	movmi	r3, #32
 80060f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060fc:	0711      	lsls	r1, r2, #28
 80060fe:	bf44      	itt	mi
 8006100:	232b      	movmi	r3, #43	@ 0x2b
 8006102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006106:	f89a 3000 	ldrb.w	r3, [sl]
 800610a:	2b2a      	cmp	r3, #42	@ 0x2a
 800610c:	d015      	beq.n	800613a <_svfiprintf_r+0xfa>
 800610e:	9a07      	ldr	r2, [sp, #28]
 8006110:	4654      	mov	r4, sl
 8006112:	2000      	movs	r0, #0
 8006114:	f04f 0c0a 	mov.w	ip, #10
 8006118:	4621      	mov	r1, r4
 800611a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800611e:	3b30      	subs	r3, #48	@ 0x30
 8006120:	2b09      	cmp	r3, #9
 8006122:	d94b      	bls.n	80061bc <_svfiprintf_r+0x17c>
 8006124:	b1b0      	cbz	r0, 8006154 <_svfiprintf_r+0x114>
 8006126:	9207      	str	r2, [sp, #28]
 8006128:	e014      	b.n	8006154 <_svfiprintf_r+0x114>
 800612a:	eba0 0308 	sub.w	r3, r0, r8
 800612e:	fa09 f303 	lsl.w	r3, r9, r3
 8006132:	4313      	orrs	r3, r2
 8006134:	9304      	str	r3, [sp, #16]
 8006136:	46a2      	mov	sl, r4
 8006138:	e7d2      	b.n	80060e0 <_svfiprintf_r+0xa0>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	1d19      	adds	r1, r3, #4
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	9103      	str	r1, [sp, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	bfbb      	ittet	lt
 8006146:	425b      	neglt	r3, r3
 8006148:	f042 0202 	orrlt.w	r2, r2, #2
 800614c:	9307      	strge	r3, [sp, #28]
 800614e:	9307      	strlt	r3, [sp, #28]
 8006150:	bfb8      	it	lt
 8006152:	9204      	strlt	r2, [sp, #16]
 8006154:	7823      	ldrb	r3, [r4, #0]
 8006156:	2b2e      	cmp	r3, #46	@ 0x2e
 8006158:	d10a      	bne.n	8006170 <_svfiprintf_r+0x130>
 800615a:	7863      	ldrb	r3, [r4, #1]
 800615c:	2b2a      	cmp	r3, #42	@ 0x2a
 800615e:	d132      	bne.n	80061c6 <_svfiprintf_r+0x186>
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	1d1a      	adds	r2, r3, #4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	9203      	str	r2, [sp, #12]
 8006168:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800616c:	3402      	adds	r4, #2
 800616e:	9305      	str	r3, [sp, #20]
 8006170:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006234 <_svfiprintf_r+0x1f4>
 8006174:	7821      	ldrb	r1, [r4, #0]
 8006176:	2203      	movs	r2, #3
 8006178:	4650      	mov	r0, sl
 800617a:	f7fa f831 	bl	80001e0 <memchr>
 800617e:	b138      	cbz	r0, 8006190 <_svfiprintf_r+0x150>
 8006180:	9b04      	ldr	r3, [sp, #16]
 8006182:	eba0 000a 	sub.w	r0, r0, sl
 8006186:	2240      	movs	r2, #64	@ 0x40
 8006188:	4082      	lsls	r2, r0
 800618a:	4313      	orrs	r3, r2
 800618c:	3401      	adds	r4, #1
 800618e:	9304      	str	r3, [sp, #16]
 8006190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006194:	4824      	ldr	r0, [pc, #144]	@ (8006228 <_svfiprintf_r+0x1e8>)
 8006196:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800619a:	2206      	movs	r2, #6
 800619c:	f7fa f820 	bl	80001e0 <memchr>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d036      	beq.n	8006212 <_svfiprintf_r+0x1d2>
 80061a4:	4b21      	ldr	r3, [pc, #132]	@ (800622c <_svfiprintf_r+0x1ec>)
 80061a6:	bb1b      	cbnz	r3, 80061f0 <_svfiprintf_r+0x1b0>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	3307      	adds	r3, #7
 80061ac:	f023 0307 	bic.w	r3, r3, #7
 80061b0:	3308      	adds	r3, #8
 80061b2:	9303      	str	r3, [sp, #12]
 80061b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b6:	4433      	add	r3, r6
 80061b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ba:	e76a      	b.n	8006092 <_svfiprintf_r+0x52>
 80061bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80061c0:	460c      	mov	r4, r1
 80061c2:	2001      	movs	r0, #1
 80061c4:	e7a8      	b.n	8006118 <_svfiprintf_r+0xd8>
 80061c6:	2300      	movs	r3, #0
 80061c8:	3401      	adds	r4, #1
 80061ca:	9305      	str	r3, [sp, #20]
 80061cc:	4619      	mov	r1, r3
 80061ce:	f04f 0c0a 	mov.w	ip, #10
 80061d2:	4620      	mov	r0, r4
 80061d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061d8:	3a30      	subs	r2, #48	@ 0x30
 80061da:	2a09      	cmp	r2, #9
 80061dc:	d903      	bls.n	80061e6 <_svfiprintf_r+0x1a6>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d0c6      	beq.n	8006170 <_svfiprintf_r+0x130>
 80061e2:	9105      	str	r1, [sp, #20]
 80061e4:	e7c4      	b.n	8006170 <_svfiprintf_r+0x130>
 80061e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061ea:	4604      	mov	r4, r0
 80061ec:	2301      	movs	r3, #1
 80061ee:	e7f0      	b.n	80061d2 <_svfiprintf_r+0x192>
 80061f0:	ab03      	add	r3, sp, #12
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	462a      	mov	r2, r5
 80061f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006230 <_svfiprintf_r+0x1f0>)
 80061f8:	a904      	add	r1, sp, #16
 80061fa:	4638      	mov	r0, r7
 80061fc:	f3af 8000 	nop.w
 8006200:	1c42      	adds	r2, r0, #1
 8006202:	4606      	mov	r6, r0
 8006204:	d1d6      	bne.n	80061b4 <_svfiprintf_r+0x174>
 8006206:	89ab      	ldrh	r3, [r5, #12]
 8006208:	065b      	lsls	r3, r3, #25
 800620a:	f53f af2d 	bmi.w	8006068 <_svfiprintf_r+0x28>
 800620e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006210:	e72c      	b.n	800606c <_svfiprintf_r+0x2c>
 8006212:	ab03      	add	r3, sp, #12
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	462a      	mov	r2, r5
 8006218:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <_svfiprintf_r+0x1f0>)
 800621a:	a904      	add	r1, sp, #16
 800621c:	4638      	mov	r0, r7
 800621e:	f000 f879 	bl	8006314 <_printf_i>
 8006222:	e7ed      	b.n	8006200 <_svfiprintf_r+0x1c0>
 8006224:	080066cc 	.word	0x080066cc
 8006228:	080066d6 	.word	0x080066d6
 800622c:	00000000 	.word	0x00000000
 8006230:	08005f89 	.word	0x08005f89
 8006234:	080066d2 	.word	0x080066d2

08006238 <_printf_common>:
 8006238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800623c:	4616      	mov	r6, r2
 800623e:	4698      	mov	r8, r3
 8006240:	688a      	ldr	r2, [r1, #8]
 8006242:	690b      	ldr	r3, [r1, #16]
 8006244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006248:	4293      	cmp	r3, r2
 800624a:	bfb8      	it	lt
 800624c:	4613      	movlt	r3, r2
 800624e:	6033      	str	r3, [r6, #0]
 8006250:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006254:	4607      	mov	r7, r0
 8006256:	460c      	mov	r4, r1
 8006258:	b10a      	cbz	r2, 800625e <_printf_common+0x26>
 800625a:	3301      	adds	r3, #1
 800625c:	6033      	str	r3, [r6, #0]
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	0699      	lsls	r1, r3, #26
 8006262:	bf42      	ittt	mi
 8006264:	6833      	ldrmi	r3, [r6, #0]
 8006266:	3302      	addmi	r3, #2
 8006268:	6033      	strmi	r3, [r6, #0]
 800626a:	6825      	ldr	r5, [r4, #0]
 800626c:	f015 0506 	ands.w	r5, r5, #6
 8006270:	d106      	bne.n	8006280 <_printf_common+0x48>
 8006272:	f104 0a19 	add.w	sl, r4, #25
 8006276:	68e3      	ldr	r3, [r4, #12]
 8006278:	6832      	ldr	r2, [r6, #0]
 800627a:	1a9b      	subs	r3, r3, r2
 800627c:	42ab      	cmp	r3, r5
 800627e:	dc26      	bgt.n	80062ce <_printf_common+0x96>
 8006280:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006284:	6822      	ldr	r2, [r4, #0]
 8006286:	3b00      	subs	r3, #0
 8006288:	bf18      	it	ne
 800628a:	2301      	movne	r3, #1
 800628c:	0692      	lsls	r2, r2, #26
 800628e:	d42b      	bmi.n	80062e8 <_printf_common+0xb0>
 8006290:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006294:	4641      	mov	r1, r8
 8006296:	4638      	mov	r0, r7
 8006298:	47c8      	blx	r9
 800629a:	3001      	adds	r0, #1
 800629c:	d01e      	beq.n	80062dc <_printf_common+0xa4>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	6922      	ldr	r2, [r4, #16]
 80062a2:	f003 0306 	and.w	r3, r3, #6
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	bf02      	ittt	eq
 80062aa:	68e5      	ldreq	r5, [r4, #12]
 80062ac:	6833      	ldreq	r3, [r6, #0]
 80062ae:	1aed      	subeq	r5, r5, r3
 80062b0:	68a3      	ldr	r3, [r4, #8]
 80062b2:	bf0c      	ite	eq
 80062b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062b8:	2500      	movne	r5, #0
 80062ba:	4293      	cmp	r3, r2
 80062bc:	bfc4      	itt	gt
 80062be:	1a9b      	subgt	r3, r3, r2
 80062c0:	18ed      	addgt	r5, r5, r3
 80062c2:	2600      	movs	r6, #0
 80062c4:	341a      	adds	r4, #26
 80062c6:	42b5      	cmp	r5, r6
 80062c8:	d11a      	bne.n	8006300 <_printf_common+0xc8>
 80062ca:	2000      	movs	r0, #0
 80062cc:	e008      	b.n	80062e0 <_printf_common+0xa8>
 80062ce:	2301      	movs	r3, #1
 80062d0:	4652      	mov	r2, sl
 80062d2:	4641      	mov	r1, r8
 80062d4:	4638      	mov	r0, r7
 80062d6:	47c8      	blx	r9
 80062d8:	3001      	adds	r0, #1
 80062da:	d103      	bne.n	80062e4 <_printf_common+0xac>
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e4:	3501      	adds	r5, #1
 80062e6:	e7c6      	b.n	8006276 <_printf_common+0x3e>
 80062e8:	18e1      	adds	r1, r4, r3
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	2030      	movs	r0, #48	@ 0x30
 80062ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062f2:	4422      	add	r2, r4
 80062f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062fc:	3302      	adds	r3, #2
 80062fe:	e7c7      	b.n	8006290 <_printf_common+0x58>
 8006300:	2301      	movs	r3, #1
 8006302:	4622      	mov	r2, r4
 8006304:	4641      	mov	r1, r8
 8006306:	4638      	mov	r0, r7
 8006308:	47c8      	blx	r9
 800630a:	3001      	adds	r0, #1
 800630c:	d0e6      	beq.n	80062dc <_printf_common+0xa4>
 800630e:	3601      	adds	r6, #1
 8006310:	e7d9      	b.n	80062c6 <_printf_common+0x8e>
	...

08006314 <_printf_i>:
 8006314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006318:	7e0f      	ldrb	r7, [r1, #24]
 800631a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800631c:	2f78      	cmp	r7, #120	@ 0x78
 800631e:	4691      	mov	r9, r2
 8006320:	4680      	mov	r8, r0
 8006322:	460c      	mov	r4, r1
 8006324:	469a      	mov	sl, r3
 8006326:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800632a:	d807      	bhi.n	800633c <_printf_i+0x28>
 800632c:	2f62      	cmp	r7, #98	@ 0x62
 800632e:	d80a      	bhi.n	8006346 <_printf_i+0x32>
 8006330:	2f00      	cmp	r7, #0
 8006332:	f000 80d1 	beq.w	80064d8 <_printf_i+0x1c4>
 8006336:	2f58      	cmp	r7, #88	@ 0x58
 8006338:	f000 80b8 	beq.w	80064ac <_printf_i+0x198>
 800633c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006340:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006344:	e03a      	b.n	80063bc <_printf_i+0xa8>
 8006346:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800634a:	2b15      	cmp	r3, #21
 800634c:	d8f6      	bhi.n	800633c <_printf_i+0x28>
 800634e:	a101      	add	r1, pc, #4	@ (adr r1, 8006354 <_printf_i+0x40>)
 8006350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006354:	080063ad 	.word	0x080063ad
 8006358:	080063c1 	.word	0x080063c1
 800635c:	0800633d 	.word	0x0800633d
 8006360:	0800633d 	.word	0x0800633d
 8006364:	0800633d 	.word	0x0800633d
 8006368:	0800633d 	.word	0x0800633d
 800636c:	080063c1 	.word	0x080063c1
 8006370:	0800633d 	.word	0x0800633d
 8006374:	0800633d 	.word	0x0800633d
 8006378:	0800633d 	.word	0x0800633d
 800637c:	0800633d 	.word	0x0800633d
 8006380:	080064bf 	.word	0x080064bf
 8006384:	080063eb 	.word	0x080063eb
 8006388:	08006479 	.word	0x08006479
 800638c:	0800633d 	.word	0x0800633d
 8006390:	0800633d 	.word	0x0800633d
 8006394:	080064e1 	.word	0x080064e1
 8006398:	0800633d 	.word	0x0800633d
 800639c:	080063eb 	.word	0x080063eb
 80063a0:	0800633d 	.word	0x0800633d
 80063a4:	0800633d 	.word	0x0800633d
 80063a8:	08006481 	.word	0x08006481
 80063ac:	6833      	ldr	r3, [r6, #0]
 80063ae:	1d1a      	adds	r2, r3, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6032      	str	r2, [r6, #0]
 80063b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063bc:	2301      	movs	r3, #1
 80063be:	e09c      	b.n	80064fa <_printf_i+0x1e6>
 80063c0:	6833      	ldr	r3, [r6, #0]
 80063c2:	6820      	ldr	r0, [r4, #0]
 80063c4:	1d19      	adds	r1, r3, #4
 80063c6:	6031      	str	r1, [r6, #0]
 80063c8:	0606      	lsls	r6, r0, #24
 80063ca:	d501      	bpl.n	80063d0 <_printf_i+0xbc>
 80063cc:	681d      	ldr	r5, [r3, #0]
 80063ce:	e003      	b.n	80063d8 <_printf_i+0xc4>
 80063d0:	0645      	lsls	r5, r0, #25
 80063d2:	d5fb      	bpl.n	80063cc <_printf_i+0xb8>
 80063d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063d8:	2d00      	cmp	r5, #0
 80063da:	da03      	bge.n	80063e4 <_printf_i+0xd0>
 80063dc:	232d      	movs	r3, #45	@ 0x2d
 80063de:	426d      	negs	r5, r5
 80063e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e4:	4858      	ldr	r0, [pc, #352]	@ (8006548 <_printf_i+0x234>)
 80063e6:	230a      	movs	r3, #10
 80063e8:	e011      	b.n	800640e <_printf_i+0xfa>
 80063ea:	6821      	ldr	r1, [r4, #0]
 80063ec:	6833      	ldr	r3, [r6, #0]
 80063ee:	0608      	lsls	r0, r1, #24
 80063f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80063f4:	d402      	bmi.n	80063fc <_printf_i+0xe8>
 80063f6:	0649      	lsls	r1, r1, #25
 80063f8:	bf48      	it	mi
 80063fa:	b2ad      	uxthmi	r5, r5
 80063fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80063fe:	4852      	ldr	r0, [pc, #328]	@ (8006548 <_printf_i+0x234>)
 8006400:	6033      	str	r3, [r6, #0]
 8006402:	bf14      	ite	ne
 8006404:	230a      	movne	r3, #10
 8006406:	2308      	moveq	r3, #8
 8006408:	2100      	movs	r1, #0
 800640a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800640e:	6866      	ldr	r6, [r4, #4]
 8006410:	60a6      	str	r6, [r4, #8]
 8006412:	2e00      	cmp	r6, #0
 8006414:	db05      	blt.n	8006422 <_printf_i+0x10e>
 8006416:	6821      	ldr	r1, [r4, #0]
 8006418:	432e      	orrs	r6, r5
 800641a:	f021 0104 	bic.w	r1, r1, #4
 800641e:	6021      	str	r1, [r4, #0]
 8006420:	d04b      	beq.n	80064ba <_printf_i+0x1a6>
 8006422:	4616      	mov	r6, r2
 8006424:	fbb5 f1f3 	udiv	r1, r5, r3
 8006428:	fb03 5711 	mls	r7, r3, r1, r5
 800642c:	5dc7      	ldrb	r7, [r0, r7]
 800642e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006432:	462f      	mov	r7, r5
 8006434:	42bb      	cmp	r3, r7
 8006436:	460d      	mov	r5, r1
 8006438:	d9f4      	bls.n	8006424 <_printf_i+0x110>
 800643a:	2b08      	cmp	r3, #8
 800643c:	d10b      	bne.n	8006456 <_printf_i+0x142>
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	07df      	lsls	r7, r3, #31
 8006442:	d508      	bpl.n	8006456 <_printf_i+0x142>
 8006444:	6923      	ldr	r3, [r4, #16]
 8006446:	6861      	ldr	r1, [r4, #4]
 8006448:	4299      	cmp	r1, r3
 800644a:	bfde      	ittt	le
 800644c:	2330      	movle	r3, #48	@ 0x30
 800644e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006452:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006456:	1b92      	subs	r2, r2, r6
 8006458:	6122      	str	r2, [r4, #16]
 800645a:	f8cd a000 	str.w	sl, [sp]
 800645e:	464b      	mov	r3, r9
 8006460:	aa03      	add	r2, sp, #12
 8006462:	4621      	mov	r1, r4
 8006464:	4640      	mov	r0, r8
 8006466:	f7ff fee7 	bl	8006238 <_printf_common>
 800646a:	3001      	adds	r0, #1
 800646c:	d14a      	bne.n	8006504 <_printf_i+0x1f0>
 800646e:	f04f 30ff 	mov.w	r0, #4294967295
 8006472:	b004      	add	sp, #16
 8006474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	f043 0320 	orr.w	r3, r3, #32
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	4832      	ldr	r0, [pc, #200]	@ (800654c <_printf_i+0x238>)
 8006482:	2778      	movs	r7, #120	@ 0x78
 8006484:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	6831      	ldr	r1, [r6, #0]
 800648c:	061f      	lsls	r7, r3, #24
 800648e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006492:	d402      	bmi.n	800649a <_printf_i+0x186>
 8006494:	065f      	lsls	r7, r3, #25
 8006496:	bf48      	it	mi
 8006498:	b2ad      	uxthmi	r5, r5
 800649a:	6031      	str	r1, [r6, #0]
 800649c:	07d9      	lsls	r1, r3, #31
 800649e:	bf44      	itt	mi
 80064a0:	f043 0320 	orrmi.w	r3, r3, #32
 80064a4:	6023      	strmi	r3, [r4, #0]
 80064a6:	b11d      	cbz	r5, 80064b0 <_printf_i+0x19c>
 80064a8:	2310      	movs	r3, #16
 80064aa:	e7ad      	b.n	8006408 <_printf_i+0xf4>
 80064ac:	4826      	ldr	r0, [pc, #152]	@ (8006548 <_printf_i+0x234>)
 80064ae:	e7e9      	b.n	8006484 <_printf_i+0x170>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	f023 0320 	bic.w	r3, r3, #32
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	e7f6      	b.n	80064a8 <_printf_i+0x194>
 80064ba:	4616      	mov	r6, r2
 80064bc:	e7bd      	b.n	800643a <_printf_i+0x126>
 80064be:	6833      	ldr	r3, [r6, #0]
 80064c0:	6825      	ldr	r5, [r4, #0]
 80064c2:	6961      	ldr	r1, [r4, #20]
 80064c4:	1d18      	adds	r0, r3, #4
 80064c6:	6030      	str	r0, [r6, #0]
 80064c8:	062e      	lsls	r6, r5, #24
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	d501      	bpl.n	80064d2 <_printf_i+0x1be>
 80064ce:	6019      	str	r1, [r3, #0]
 80064d0:	e002      	b.n	80064d8 <_printf_i+0x1c4>
 80064d2:	0668      	lsls	r0, r5, #25
 80064d4:	d5fb      	bpl.n	80064ce <_printf_i+0x1ba>
 80064d6:	8019      	strh	r1, [r3, #0]
 80064d8:	2300      	movs	r3, #0
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	4616      	mov	r6, r2
 80064de:	e7bc      	b.n	800645a <_printf_i+0x146>
 80064e0:	6833      	ldr	r3, [r6, #0]
 80064e2:	1d1a      	adds	r2, r3, #4
 80064e4:	6032      	str	r2, [r6, #0]
 80064e6:	681e      	ldr	r6, [r3, #0]
 80064e8:	6862      	ldr	r2, [r4, #4]
 80064ea:	2100      	movs	r1, #0
 80064ec:	4630      	mov	r0, r6
 80064ee:	f7f9 fe77 	bl	80001e0 <memchr>
 80064f2:	b108      	cbz	r0, 80064f8 <_printf_i+0x1e4>
 80064f4:	1b80      	subs	r0, r0, r6
 80064f6:	6060      	str	r0, [r4, #4]
 80064f8:	6863      	ldr	r3, [r4, #4]
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	2300      	movs	r3, #0
 80064fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006502:	e7aa      	b.n	800645a <_printf_i+0x146>
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	4632      	mov	r2, r6
 8006508:	4649      	mov	r1, r9
 800650a:	4640      	mov	r0, r8
 800650c:	47d0      	blx	sl
 800650e:	3001      	adds	r0, #1
 8006510:	d0ad      	beq.n	800646e <_printf_i+0x15a>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	079b      	lsls	r3, r3, #30
 8006516:	d413      	bmi.n	8006540 <_printf_i+0x22c>
 8006518:	68e0      	ldr	r0, [r4, #12]
 800651a:	9b03      	ldr	r3, [sp, #12]
 800651c:	4298      	cmp	r0, r3
 800651e:	bfb8      	it	lt
 8006520:	4618      	movlt	r0, r3
 8006522:	e7a6      	b.n	8006472 <_printf_i+0x15e>
 8006524:	2301      	movs	r3, #1
 8006526:	4632      	mov	r2, r6
 8006528:	4649      	mov	r1, r9
 800652a:	4640      	mov	r0, r8
 800652c:	47d0      	blx	sl
 800652e:	3001      	adds	r0, #1
 8006530:	d09d      	beq.n	800646e <_printf_i+0x15a>
 8006532:	3501      	adds	r5, #1
 8006534:	68e3      	ldr	r3, [r4, #12]
 8006536:	9903      	ldr	r1, [sp, #12]
 8006538:	1a5b      	subs	r3, r3, r1
 800653a:	42ab      	cmp	r3, r5
 800653c:	dcf2      	bgt.n	8006524 <_printf_i+0x210>
 800653e:	e7eb      	b.n	8006518 <_printf_i+0x204>
 8006540:	2500      	movs	r5, #0
 8006542:	f104 0619 	add.w	r6, r4, #25
 8006546:	e7f5      	b.n	8006534 <_printf_i+0x220>
 8006548:	080066dd 	.word	0x080066dd
 800654c:	080066ee 	.word	0x080066ee

08006550 <memmove>:
 8006550:	4288      	cmp	r0, r1
 8006552:	b510      	push	{r4, lr}
 8006554:	eb01 0402 	add.w	r4, r1, r2
 8006558:	d902      	bls.n	8006560 <memmove+0x10>
 800655a:	4284      	cmp	r4, r0
 800655c:	4623      	mov	r3, r4
 800655e:	d807      	bhi.n	8006570 <memmove+0x20>
 8006560:	1e43      	subs	r3, r0, #1
 8006562:	42a1      	cmp	r1, r4
 8006564:	d008      	beq.n	8006578 <memmove+0x28>
 8006566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800656a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800656e:	e7f8      	b.n	8006562 <memmove+0x12>
 8006570:	4402      	add	r2, r0
 8006572:	4601      	mov	r1, r0
 8006574:	428a      	cmp	r2, r1
 8006576:	d100      	bne.n	800657a <memmove+0x2a>
 8006578:	bd10      	pop	{r4, pc}
 800657a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800657e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006582:	e7f7      	b.n	8006574 <memmove+0x24>

08006584 <_sbrk_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4d06      	ldr	r5, [pc, #24]	@ (80065a0 <_sbrk_r+0x1c>)
 8006588:	2300      	movs	r3, #0
 800658a:	4604      	mov	r4, r0
 800658c:	4608      	mov	r0, r1
 800658e:	602b      	str	r3, [r5, #0]
 8006590:	f7fb f8c8 	bl	8001724 <_sbrk>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d102      	bne.n	800659e <_sbrk_r+0x1a>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	b103      	cbz	r3, 800659e <_sbrk_r+0x1a>
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	20000344 	.word	0x20000344

080065a4 <memcpy>:
 80065a4:	440a      	add	r2, r1
 80065a6:	4291      	cmp	r1, r2
 80065a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065ac:	d100      	bne.n	80065b0 <memcpy+0xc>
 80065ae:	4770      	bx	lr
 80065b0:	b510      	push	{r4, lr}
 80065b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ba:	4291      	cmp	r1, r2
 80065bc:	d1f9      	bne.n	80065b2 <memcpy+0xe>
 80065be:	bd10      	pop	{r4, pc}

080065c0 <_realloc_r>:
 80065c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c4:	4607      	mov	r7, r0
 80065c6:	4614      	mov	r4, r2
 80065c8:	460d      	mov	r5, r1
 80065ca:	b921      	cbnz	r1, 80065d6 <_realloc_r+0x16>
 80065cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d0:	4611      	mov	r1, r2
 80065d2:	f7ff bc4d 	b.w	8005e70 <_malloc_r>
 80065d6:	b92a      	cbnz	r2, 80065e4 <_realloc_r+0x24>
 80065d8:	f7ff fbde 	bl	8005d98 <_free_r>
 80065dc:	4625      	mov	r5, r4
 80065de:	4628      	mov	r0, r5
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	f000 f81a 	bl	800661c <_malloc_usable_size_r>
 80065e8:	4284      	cmp	r4, r0
 80065ea:	4606      	mov	r6, r0
 80065ec:	d802      	bhi.n	80065f4 <_realloc_r+0x34>
 80065ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065f2:	d8f4      	bhi.n	80065de <_realloc_r+0x1e>
 80065f4:	4621      	mov	r1, r4
 80065f6:	4638      	mov	r0, r7
 80065f8:	f7ff fc3a 	bl	8005e70 <_malloc_r>
 80065fc:	4680      	mov	r8, r0
 80065fe:	b908      	cbnz	r0, 8006604 <_realloc_r+0x44>
 8006600:	4645      	mov	r5, r8
 8006602:	e7ec      	b.n	80065de <_realloc_r+0x1e>
 8006604:	42b4      	cmp	r4, r6
 8006606:	4622      	mov	r2, r4
 8006608:	4629      	mov	r1, r5
 800660a:	bf28      	it	cs
 800660c:	4632      	movcs	r2, r6
 800660e:	f7ff ffc9 	bl	80065a4 <memcpy>
 8006612:	4629      	mov	r1, r5
 8006614:	4638      	mov	r0, r7
 8006616:	f7ff fbbf 	bl	8005d98 <_free_r>
 800661a:	e7f1      	b.n	8006600 <_realloc_r+0x40>

0800661c <_malloc_usable_size_r>:
 800661c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006620:	1f18      	subs	r0, r3, #4
 8006622:	2b00      	cmp	r3, #0
 8006624:	bfbc      	itt	lt
 8006626:	580b      	ldrlt	r3, [r1, r0]
 8006628:	18c0      	addlt	r0, r0, r3
 800662a:	4770      	bx	lr

0800662c <_init>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr

08006638 <_fini>:
 8006638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663a:	bf00      	nop
 800663c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663e:	bc08      	pop	{r3}
 8006640:	469e      	mov	lr, r3
 8006642:	4770      	bx	lr
