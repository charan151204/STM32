
09_flash_ultra.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005160  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080052f0  080052f0  000062f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d0  080053d0  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080053d0  080053d0  000063d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053d8  080053d8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d8  080053d8  000063d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053dc  080053dc  000063dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080053e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000005c  0800543c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800543c  00007384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f681  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd9  00000000  00000000  0001670d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  000184e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb8  00000000  00000000  000193e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f97  00000000  00000000  00019fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011065  00000000  00000000  00040f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f44ef  00000000  00000000  00051f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014648b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b4  00000000  00000000  001464d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0014a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052d8 	.word	0x080052d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080052d8 	.word	0x080052d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <W25Q_SectorErase>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void W25Q_SectorErase(uint32_t addr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint8_t cmd[4];
  W25Q_WriteEnable();
 80005b4:	f000 f82c 	bl	8000610 <W25Q_WriteEnable>
  cmd[0] = W25Q_SECTOR_ERASE;
 80005b8:	2320      	movs	r3, #32
 80005ba:	733b      	strb	r3, [r7, #12]
  cmd[1] = (addr >> 16) & 0xFF;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	737b      	strb	r3, [r7, #13]
  cmd[2] = (addr >> 8) & 0xFF;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	73bb      	strb	r3, [r7, #14]
  cmd[3] = addr & 0xFF;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	73fb      	strb	r3, [r7, #15]
  FLASH_CS_LOW();
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d8:	480b      	ldr	r0, [pc, #44]	@ (8000608 <W25Q_SectorErase+0x5c>)
 80005da:	f001 f85d 	bl	8001698 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 80005de:	f107 010c 	add.w	r1, r7, #12
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	2204      	movs	r2, #4
 80005e8:	4808      	ldr	r0, [pc, #32]	@ (800060c <W25Q_SectorErase+0x60>)
 80005ea:	f002 fc30 	bl	8002e4e <HAL_SPI_Transmit>
  FLASH_CS_HIGH();
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005f4:	4804      	ldr	r0, [pc, #16]	@ (8000608 <W25Q_SectorErase+0x5c>)
 80005f6:	f001 f84f 	bl	8001698 <HAL_GPIO_WritePin>
  W25Q_WaitBusy();
 80005fa:	f000 f853 	bl	80006a4 <W25Q_WaitBusy>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	48000400 	.word	0x48000400
 800060c:	20000078 	.word	0x20000078

08000610 <W25Q_WriteEnable>:

void W25Q_WriteEnable(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  uint8_t cmd = W25Q_WRITE_ENABLE;
 8000616:	2306      	movs	r3, #6
 8000618:	71fb      	strb	r3, [r7, #7]
  FLASH_CS_LOW();
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000620:	4809      	ldr	r0, [pc, #36]	@ (8000648 <W25Q_WriteEnable+0x38>)
 8000622:	f001 f839 	bl	8001698 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	2201      	movs	r2, #1
 800062e:	4807      	ldr	r0, [pc, #28]	@ (800064c <W25Q_WriteEnable+0x3c>)
 8000630:	f002 fc0d 	bl	8002e4e <HAL_SPI_Transmit>
  FLASH_CS_HIGH();
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800063a:	4803      	ldr	r0, [pc, #12]	@ (8000648 <W25Q_WriteEnable+0x38>)
 800063c:	f001 f82c 	bl	8001698 <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	48000400 	.word	0x48000400
 800064c:	20000078 	.word	0x20000078

08000650 <W25Q_ReadStatus>:

uint8_t W25Q_ReadStatus(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  uint8_t cmd = W25Q_READ_STATUS;
 8000656:	2305      	movs	r3, #5
 8000658:	71fb      	strb	r3, [r7, #7]
  uint8_t status = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	71bb      	strb	r3, [r7, #6]
  FLASH_CS_LOW();
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000664:	480d      	ldr	r0, [pc, #52]	@ (800069c <W25Q_ReadStatus+0x4c>)
 8000666:	f001 f817 	bl	8001698 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 800066a:	1df9      	adds	r1, r7, #7
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	2201      	movs	r2, #1
 8000672:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <W25Q_ReadStatus+0x50>)
 8000674:	f002 fbeb 	bl	8002e4e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &status, 1, HAL_MAX_DELAY);
 8000678:	1db9      	adds	r1, r7, #6
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	2201      	movs	r2, #1
 8000680:	4807      	ldr	r0, [pc, #28]	@ (80006a0 <W25Q_ReadStatus+0x50>)
 8000682:	f002 fd5a 	bl	800313a <HAL_SPI_Receive>
  FLASH_CS_HIGH();
 8000686:	2201      	movs	r2, #1
 8000688:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800068c:	4803      	ldr	r0, [pc, #12]	@ (800069c <W25Q_ReadStatus+0x4c>)
 800068e:	f001 f803 	bl	8001698 <HAL_GPIO_WritePin>
  return status;
 8000692:	79bb      	ldrb	r3, [r7, #6]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	48000400 	.word	0x48000400
 80006a0:	20000078 	.word	0x20000078

080006a4 <W25Q_WaitBusy>:

void W25Q_WaitBusy(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  while (W25Q_ReadStatus() & 0x01) { /* BUSY bit */ }
 80006a8:	bf00      	nop
 80006aa:	f7ff ffd1 	bl	8000650 <W25Q_ReadStatus>
 80006ae:	4603      	mov	r3, r0
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f8      	bne.n	80006aa <W25Q_WaitBusy+0x6>
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <W25Q_PageProgram>:

void W25Q_PageProgram(uint32_t addr, uint8_t* data, uint16_t len)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	4613      	mov	r3, r2
 80006cc:	80fb      	strh	r3, [r7, #6]
  uint8_t cmd[4];
  W25Q_WriteEnable();
 80006ce:	f7ff ff9f 	bl	8000610 <W25Q_WriteEnable>
  cmd[0] = W25Q_PAGE_PROGRAM;
 80006d2:	2302      	movs	r3, #2
 80006d4:	753b      	strb	r3, [r7, #20]
  cmd[1] = (addr >> 16) & 0xFF;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	0c1b      	lsrs	r3, r3, #16
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	757b      	strb	r3, [r7, #21]
  cmd[2] = (addr >> 8) & 0xFF;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	75bb      	strb	r3, [r7, #22]
  cmd[3] = addr & 0xFF;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	75fb      	strb	r3, [r7, #23]

  FLASH_CS_LOW();
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f2:	480f      	ldr	r0, [pc, #60]	@ (8000730 <W25Q_PageProgram+0x70>)
 80006f4:	f000 ffd0 	bl	8001698 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 80006f8:	f107 0114 	add.w	r1, r7, #20
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2204      	movs	r2, #4
 8000702:	480c      	ldr	r0, [pc, #48]	@ (8000734 <W25Q_PageProgram+0x74>)
 8000704:	f002 fba3 	bl	8002e4e <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, data, len, HAL_MAX_DELAY);
 8000708:	88fa      	ldrh	r2, [r7, #6]
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	68b9      	ldr	r1, [r7, #8]
 8000710:	4808      	ldr	r0, [pc, #32]	@ (8000734 <W25Q_PageProgram+0x74>)
 8000712:	f002 fb9c 	bl	8002e4e <HAL_SPI_Transmit>
  FLASH_CS_HIGH();
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071c:	4804      	ldr	r0, [pc, #16]	@ (8000730 <W25Q_PageProgram+0x70>)
 800071e:	f000 ffbb 	bl	8001698 <HAL_GPIO_WritePin>
  W25Q_WaitBusy();
 8000722:	f7ff ffbf 	bl	80006a4 <W25Q_WaitBusy>
}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	48000400 	.word	0x48000400
 8000734:	20000078 	.word	0x20000078

08000738 <W25Q_ReadData>:

void W25Q_ReadData(uint32_t addr, uint8_t* buf, uint16_t len)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	4613      	mov	r3, r2
 8000744:	80fb      	strh	r3, [r7, #6]
  uint8_t cmd[4];
  cmd[0] = W25Q_READ_DATA;
 8000746:	2303      	movs	r3, #3
 8000748:	753b      	strb	r3, [r7, #20]
  cmd[1] = (addr >> 16) & 0xFF;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	0c1b      	lsrs	r3, r3, #16
 800074e:	b2db      	uxtb	r3, r3
 8000750:	757b      	strb	r3, [r7, #21]
  cmd[2] = (addr >> 8) & 0xFF;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	0a1b      	lsrs	r3, r3, #8
 8000756:	b2db      	uxtb	r3, r3
 8000758:	75bb      	strb	r3, [r7, #22]
  cmd[3] = addr & 0xFF;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	75fb      	strb	r3, [r7, #23]

  FLASH_CS_LOW();
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <W25Q_ReadData+0x68>)
 8000768:	f000 ff96 	bl	8001698 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 800076c:	f107 0114 	add.w	r1, r7, #20
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	2204      	movs	r2, #4
 8000776:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <W25Q_ReadData+0x6c>)
 8000778:	f002 fb69 	bl	8002e4e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, buf, len, HAL_MAX_DELAY);
 800077c:	88fa      	ldrh	r2, [r7, #6]
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	68b9      	ldr	r1, [r7, #8]
 8000784:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <W25Q_ReadData+0x6c>)
 8000786:	f002 fcd8 	bl	800313a <HAL_SPI_Receive>
  FLASH_CS_HIGH();
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <W25Q_ReadData+0x68>)
 8000792:	f000 ff81 	bl	8001698 <HAL_GPIO_WritePin>
}
 8000796:	bf00      	nop
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	48000400 	.word	0x48000400
 80007a4:	20000078 	.word	0x20000078

080007a8 <W25Q32_ReadID>:

uint32_t W25Q32_ReadID(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  uint8_t cmd = W25Q_JEDEC_ID;
 80007ae:	239f      	movs	r3, #159	@ 0x9f
 80007b0:	71fb      	strb	r3, [r7, #7]
  uint8_t id[3] = {0};
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2100      	movs	r1, #0
 80007b6:	460a      	mov	r2, r1
 80007b8:	801a      	strh	r2, [r3, #0]
 80007ba:	460a      	mov	r2, r1
 80007bc:	709a      	strb	r2, [r3, #2]
  FLASH_CS_LOW();
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007c4:	4810      	ldr	r0, [pc, #64]	@ (8000808 <W25Q32_ReadID+0x60>)
 80007c6:	f000 ff67 	bl	8001698 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80007ca:	1df9      	adds	r1, r7, #7
 80007cc:	f04f 33ff 	mov.w	r3, #4294967295
 80007d0:	2201      	movs	r2, #1
 80007d2:	480e      	ldr	r0, [pc, #56]	@ (800080c <W25Q32_ReadID+0x64>)
 80007d4:	f002 fb3b 	bl	8002e4e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, id, 3, HAL_MAX_DELAY);
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	2203      	movs	r2, #3
 80007e0:	480a      	ldr	r0, [pc, #40]	@ (800080c <W25Q32_ReadID+0x64>)
 80007e2:	f002 fcaa 	bl	800313a <HAL_SPI_Receive>
  FLASH_CS_HIGH();
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ec:	4806      	ldr	r0, [pc, #24]	@ (8000808 <W25Q32_ReadID+0x60>)
 80007ee:	f000 ff53 	bl	8001698 <HAL_GPIO_WritePin>
  return (id[0] << 16) | (id[1] << 8) | id[2];
 80007f2:	793b      	ldrb	r3, [r7, #4]
 80007f4:	041a      	lsls	r2, r3, #16
 80007f6:	797b      	ldrb	r3, [r7, #5]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	4313      	orrs	r3, r2
 80007fc:	79ba      	ldrb	r2, [r7, #6]
 80007fe:	4313      	orrs	r3, r2
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	48000400 	.word	0x48000400
 800080c:	20000078 	.word	0x20000078

08000810 <Delay_us>:

/* TIM2 is configured 1 MHz -> 1 tick = 1 us */
void Delay_us(uint16_t us)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
  uint32_t start = __HAL_TIM_GET_COUNTER(&htim2);
 800081a:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <Delay_us+0x34>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000820:	60fb      	str	r3, [r7, #12]
  while (((__HAL_TIM_GET_COUNTER(&htim2) - start) & 0xFFFF) < us) { }
 8000822:	bf00      	nop
 8000824:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <Delay_us+0x34>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29a      	uxth	r2, r3
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d3f6      	bcc.n	8000824 <Delay_us+0x14>
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000164 	.word	0x20000164

08000848 <HCSR04_Read_cm>:

/* HC-SR04 one-shot distance (cm) using busy-wait timing */
uint32_t HCSR04_Read_cm(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
    uint32_t t1, t2;

    // 10 µs TRIG pulse
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2101      	movs	r1, #1
 8000852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000856:	f000 ff1f 	bl	8001698 <HAL_GPIO_WritePin>
    Delay_us(2);
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff ffd8 	bl	8000810 <Delay_us>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000868:	f000 ff16 	bl	8001698 <HAL_GPIO_WritePin>
    Delay_us(10);
 800086c:	200a      	movs	r0, #10
 800086e:	f7ff ffcf 	bl	8000810 <Delay_us>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2101      	movs	r1, #1
 8000876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087a:	f000 ff0d 	bl	8001698 <HAL_GPIO_WritePin>

    // Wait for ECHO high
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET);
 800087e:	bf00      	nop
 8000880:	2102      	movs	r1, #2
 8000882:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000886:	f000 feef 	bl	8001668 <HAL_GPIO_ReadPin>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0f7      	beq.n	8000880 <HCSR04_Read_cm+0x38>

    t1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <HCSR04_Read_cm+0x98>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000896:	60fb      	str	r3, [r7, #12]

    // Wait for ECHO low
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET);
 8000898:	bf00      	nop
 800089a:	2102      	movs	r1, #2
 800089c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a0:	f000 fee2 	bl	8001668 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d0f7      	beq.n	800089a <HCSR04_Read_cm+0x52>

    t2 = __HAL_TIM_GET_COUNTER(&htim2);
 80008aa:	4b0d      	ldr	r3, [pc, #52]	@ (80008e0 <HCSR04_Read_cm+0x98>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008b0:	60bb      	str	r3, [r7, #8]

    // Compute pulse width (with wrap handling)
    uint32_t pulse = (t2 >= t1) ? (t2 - t1) : (0x10000 - t1 + t2);
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d303      	bcc.n	80008c2 <HCSR04_Read_cm+0x7a>
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	e004      	b.n	80008cc <HCSR04_Read_cm+0x84>
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80008cc:	607b      	str	r3, [r7, #4]

    return (pulse / 58U); // convert µs → cm
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a04      	ldr	r2, [pc, #16]	@ (80008e4 <HCSR04_Read_cm+0x9c>)
 80008d2:	fba2 2303 	umull	r2, r3, r2, r3
 80008d6:	095b      	lsrs	r3, r3, #5
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000164 	.word	0x20000164
 80008e4:	8d3dcb09 	.word	0x8d3dcb09

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f000 fb8b 	bl	8001008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f2:	f000 f8af 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f6:	f000 f9a1 	bl	8000c3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008fa:	f000 f93b 	bl	8000b74 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80008fe:	f000 f8fb 	bl	8000af8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000902:	f000 f967 	bl	8000bd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); // start microsecond timer
 8000906:	484b      	ldr	r0, [pc, #300]	@ (8000a34 <main+0x14c>)
 8000908:	f003 f98c 	bl	8003c24 <HAL_TIM_Base_Start>

  sprintf(uart_buf, "W25Q32 + HC-SR04 Logger Start\r\n");
 800090c:	494a      	ldr	r1, [pc, #296]	@ (8000a38 <main+0x150>)
 800090e:	484b      	ldr	r0, [pc, #300]	@ (8000a3c <main+0x154>)
 8000910:	f004 f842 	bl	8004998 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000914:	4849      	ldr	r0, [pc, #292]	@ (8000a3c <main+0x154>)
 8000916:	f7ff fc5b 	bl	80001d0 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	4946      	ldr	r1, [pc, #280]	@ (8000a3c <main+0x154>)
 8000924:	4846      	ldr	r0, [pc, #280]	@ (8000a40 <main+0x158>)
 8000926:	f003 fad9 	bl	8003edc <HAL_UART_Transmit>

  uint32_t id = W25Q32_ReadID();
 800092a:	f7ff ff3d 	bl	80007a8 <W25Q32_ReadID>
 800092e:	6178      	str	r0, [r7, #20]
  sprintf(uart_buf, "JEDEC ID: 0x%06lX\r\n", id);
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	4944      	ldr	r1, [pc, #272]	@ (8000a44 <main+0x15c>)
 8000934:	4841      	ldr	r0, [pc, #260]	@ (8000a3c <main+0x154>)
 8000936:	f004 f82f 	bl	8004998 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 800093a:	4840      	ldr	r0, [pc, #256]	@ (8000a3c <main+0x154>)
 800093c:	f7ff fc48 	bl	80001d0 <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	b29a      	uxth	r2, r3
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	493c      	ldr	r1, [pc, #240]	@ (8000a3c <main+0x154>)
 800094a:	483d      	ldr	r0, [pc, #244]	@ (8000a40 <main+0x158>)
 800094c:	f003 fac6 	bl	8003edc <HAL_UART_Transmit>

  // Erase first sector before first write to ensure clean 0xFF state
  W25Q_SectorErase(flash_addr);
 8000950:	4b3d      	ldr	r3, [pc, #244]	@ (8000a48 <main+0x160>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe29 	bl	80005ac <W25Q_SectorErase>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 1) Read distance
    uint32_t dist_cm = HCSR04_Read_cm();
 800095a:	f7ff ff75 	bl	8000848 <HCSR04_Read_cm>
 800095e:	6138      	str	r0, [r7, #16]

    // 2) Print over UART
    sprintf(uart_buf, "Distance: %lu cm\r\n", dist_cm);
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	493a      	ldr	r1, [pc, #232]	@ (8000a4c <main+0x164>)
 8000964:	4835      	ldr	r0, [pc, #212]	@ (8000a3c <main+0x154>)
 8000966:	f004 f817 	bl	8004998 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 800096a:	4834      	ldr	r0, [pc, #208]	@ (8000a3c <main+0x154>)
 800096c:	f7ff fc30 	bl	80001d0 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	f04f 33ff 	mov.w	r3, #4294967295
 8000978:	4930      	ldr	r1, [pc, #192]	@ (8000a3c <main+0x154>)
 800097a:	4831      	ldr	r0, [pc, #196]	@ (8000a40 <main+0x158>)
 800097c:	f003 faae 	bl	8003edc <HAL_UART_Transmit>

    // 3) Append to flash as 4-byte little-endian
    uint8_t four[4];
    four[0] = (uint8_t)(dist_cm & 0xFF);
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	723b      	strb	r3, [r7, #8]
    four[1] = (uint8_t)((dist_cm >> 8) & 0xFF);
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	b2db      	uxtb	r3, r3
 800098c:	727b      	strb	r3, [r7, #9]
    four[2] = (uint8_t)((dist_cm >> 16) & 0xFF);
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	0c1b      	lsrs	r3, r3, #16
 8000992:	b2db      	uxtb	r3, r3
 8000994:	72bb      	strb	r3, [r7, #10]
    four[3] = (uint8_t)((dist_cm >> 24) & 0xFF);
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	0e1b      	lsrs	r3, r3, #24
 800099a:	b2db      	uxtb	r3, r3
 800099c:	72fb      	strb	r3, [r7, #11]

    // If crossing a sector boundary and rewriting same area often, erase that sector first
    if ((flash_addr % SECTOR_SIZE_BYTES) == 0)
 800099e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a48 <main+0x160>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d104      	bne.n	80009b4 <main+0xcc>
    {
      W25Q_SectorErase(flash_addr);
 80009aa:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <main+0x160>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fdfc 	bl	80005ac <W25Q_SectorErase>
    }

    W25Q_PageProgram(flash_addr, four, 4);
 80009b4:	4b24      	ldr	r3, [pc, #144]	@ (8000a48 <main+0x160>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f107 0108 	add.w	r1, r7, #8
 80009bc:	2204      	movs	r2, #4
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe7e 	bl	80006c0 <W25Q_PageProgram>

    // Optional: read back and print
    uint8_t back[4];
    W25Q_ReadData(flash_addr, back, 4);
 80009c4:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <main+0x160>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	1d39      	adds	r1, r7, #4
 80009ca:	2204      	movs	r2, #4
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff feb3 	bl	8000738 <W25Q_ReadData>
    uint32_t verify = (uint32_t)back[0] | ((uint32_t)back[1] << 8) | ((uint32_t)back[2] << 16) | ((uint32_t)back[3] << 24);
 80009d2:	793b      	ldrb	r3, [r7, #4]
 80009d4:	461a      	mov	r2, r3
 80009d6:	797b      	ldrb	r3, [r7, #5]
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	431a      	orrs	r2, r3
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	041b      	lsls	r3, r3, #16
 80009e0:	431a      	orrs	r2, r3
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	061b      	lsls	r3, r3, #24
 80009e6:	4313      	orrs	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
    sprintf(uart_buf, "Logged: %lu cm @ 0x%06lX\r\n", verify, flash_addr);
 80009ea:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <main+0x160>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	4917      	ldr	r1, [pc, #92]	@ (8000a50 <main+0x168>)
 80009f2:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <main+0x154>)
 80009f4:	f003 ffd0 	bl	8004998 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80009f8:	4810      	ldr	r0, [pc, #64]	@ (8000a3c <main+0x154>)
 80009fa:	f7ff fbe9 	bl	80001d0 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	f04f 33ff 	mov.w	r3, #4294967295
 8000a06:	490d      	ldr	r1, [pc, #52]	@ (8000a3c <main+0x154>)
 8000a08:	480d      	ldr	r0, [pc, #52]	@ (8000a40 <main+0x158>)
 8000a0a:	f003 fa67 	bl	8003edc <HAL_UART_Transmit>

    flash_addr += 4;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <main+0x160>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3304      	adds	r3, #4
 8000a14:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <main+0x160>)
 8000a16:	6013      	str	r3, [r2, #0]
    if (flash_addr >= FLASH_SIZE_BYTES) flash_addr = 0;  // wrap around
 8000a18:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <main+0x160>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000a20:	d302      	bcc.n	8000a28 <main+0x140>
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <main+0x160>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]

    HAL_Delay(1000); // 1 Hz logging
 8000a28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a2c:	f000 fb68 	bl	8001100 <HAL_Delay>
  {
 8000a30:	e793      	b.n	800095a <main+0x72>
 8000a32:	bf00      	nop
 8000a34:	20000164 	.word	0x20000164
 8000a38:	080052f0 	.word	0x080052f0
 8000a3c:	200001b4 	.word	0x200001b4
 8000a40:	200000dc 	.word	0x200000dc
 8000a44:	08005310 	.word	0x08005310
 8000a48:	200001b0 	.word	0x200001b0
 8000a4c:	08005324 	.word	0x08005324
 8000a50:	08005338 	.word	0x08005338

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b096      	sub	sp, #88	@ 0x58
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2244      	movs	r2, #68	@ 0x44
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f003 ffba 	bl	80049dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	463b      	mov	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a7a:	f000 fe33 	bl	80016e4 <HAL_PWREx_ControlVoltageScaling>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a84:	f000 f94e 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a92:	2310      	movs	r3, #16
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fe6a 	bl	8001790 <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ac2:	f000 f92f 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  // 80 MHz
 8000aca:	2303      	movs	r3, #3
 8000acc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;         // 80 MHz
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;          // 80 MHz -> TIM2 gets 80 MHz
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;          // 80 MHz
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ada:	463b      	mov	r3, r7
 8000adc:	2104      	movs	r1, #4
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fa32 	bl	8001f48 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aea:	f000 f91b 	bl	8000d24 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3758      	adds	r7, #88	@ 0x58
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000afe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b70 <MX_SPI2_Init+0x78>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b12:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b16:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b2a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b2e:	2210      	movs	r2, #16
 8000b30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b46:	2207      	movs	r2, #7
 8000b48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b52:	2208      	movs	r2, #8
 8000b54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_SPI2_Init+0x74>)
 8000b58:	f002 f8d6 	bl	8002d08 <HAL_SPI_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b62:	f000 f8df 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000078 	.word	0x20000078
 8000b70:	40003800 	.word	0x40003800

08000b74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b78:	4b14      	ldr	r3, [pc, #80]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b7a:	4a15      	ldr	r2, [pc, #84]	@ (8000bd0 <MX_USART2_UART_Init+0x5c>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_USART2_UART_Init+0x58>)
 8000bb8:	f003 f942 	bl	8003e40 <HAL_UART_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bc2:	f000 f8af 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000dc 	.word	0x200000dc
 8000bd0:	40004400 	.word	0x40004400

08000bd4 <MX_TIM2_Init>:

/* USER CODE BEGIN 4 */
static void MX_TIM2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_TIM2_Init+0x60>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bde:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <MX_TIM2_Init+0x60>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <MX_TIM2_Init+0x60>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  htim2.Instance = TIM2;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_TIM2_Init+0x64>)
 8000bf4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80 - 1;              // 80 MHz / 80 = 1 MHz -> 1 us per tick
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_TIM2_Init+0x64>)
 8000bfc:	224f      	movs	r2, #79	@ 0x4f
 8000bfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <MX_TIM2_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;                 // 16-bit free running
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_TIM2_Init+0x64>)
 8000c08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <MX_TIM2_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <MX_TIM2_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c1a:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <MX_TIM2_Init+0x64>)
 8000c1c:	f002 ffa0 	bl	8003b60 <HAL_TIM_Base_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c26:	f000 f87d 	bl	8000d24 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000
 8000c38:	20000164 	.word	0x20000164

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b32      	ldr	r3, [pc, #200]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	4a31      	ldr	r2, [pc, #196]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c76:	4b29      	ldr	r3, [pc, #164]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c86:	4a25      	ldr	r2, [pc, #148]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8e:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <MX_GPIO_Init+0xe0>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb8:	4819      	ldr	r0, [pc, #100]	@ (8000d20 <MX_GPIO_Init+0xe4>)
 8000cba:	f000 fced 	bl	8001698 <HAL_GPIO_WritePin>

  /* FLASH CS: PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4812      	ldr	r0, [pc, #72]	@ (8000d20 <MX_GPIO_Init+0xe4>)
 8000cd8:	f000 fb1c 	bl	8001314 <HAL_GPIO_Init>

  /* HC-SR04 TRIG: PA0 output */
  GPIO_InitStruct.Pin = TRIG_PIN;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_PORT, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf6:	f000 fb0d 	bl	8001314 <HAL_GPIO_Init>

  /* HC-SR04 ECHO: PA1 input (with external 5V->3V3 divider on hardware) */
  GPIO_InitStruct.Pin = ECHO_PIN;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHO_PORT, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d10:	f000 fb00 	bl	8001314 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	@ 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	48000400 	.word	0x48000400

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1) { }
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <Error_Handler+0x8>

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_MspInit+0x44>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a17      	ldr	r2, [pc, #92]	@ (8000df4 <HAL_SPI_MspInit+0x7c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d128      	bne.n	8000dec <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d9a:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <HAL_SPI_MspInit+0x80>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9e:	4a16      	ldr	r2, [pc, #88]	@ (8000df8 <HAL_SPI_MspInit+0x80>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da6:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <HAL_SPI_MspInit+0x80>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <HAL_SPI_MspInit+0x80>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <HAL_SPI_MspInit+0x80>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <HAL_SPI_MspInit+0x80>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ddc:	2305      	movs	r3, #5
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <HAL_SPI_MspInit+0x84>)
 8000de8:	f000 fa94 	bl	8001314 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	@ 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40003800 	.word	0x40003800
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	48000400 	.word	0x48000400

08000e00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0ac      	sub	sp, #176	@ 0xb0
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2288      	movs	r2, #136	@ 0x88
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f003 fddb 	bl	80049dc <memset>
  if(huart->Instance==USART2)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a21      	ldr	r2, [pc, #132]	@ (8000eb0 <HAL_UART_MspInit+0xb0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d13b      	bne.n	8000ea8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 faa7 	bl	8002390 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e48:	f7ff ff6c 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4c:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_UART_MspInit+0xb4>)
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e50:	4a18      	ldr	r2, [pc, #96]	@ (8000eb4 <HAL_UART_MspInit+0xb4>)
 8000e52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <HAL_UART_MspInit+0xb4>)
 8000e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <HAL_UART_MspInit+0xb4>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e68:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <HAL_UART_MspInit+0xb4>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e70:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <HAL_UART_MspInit+0xb4>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e94:	2307      	movs	r3, #7
 8000e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea4:	f000 fa36 	bl	8001314 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ea8:	bf00      	nop
 8000eaa:	37b0      	adds	r7, #176	@ 0xb0
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40004400 	.word	0x40004400
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0e:	f000 f8d7 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_IRQn 0 */
 // HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	@ (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f003 fd4a 	bl	80049ec <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20018000 	.word	0x20018000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	20000234 	.word	0x20000234
 8000f8c:	20000388 	.word	0x20000388

08000f90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb8:	f7ff ffea 	bl	8000f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fbc:	480c      	ldr	r0, [pc, #48]	@ (8000ff0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fbe:	490d      	ldr	r1, [pc, #52]	@ (8000ff4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <LoopForever+0xe>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001000 <LoopForever+0x16>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fe2:	f003 fd09 	bl	80049f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe6:	f7ff fc7f 	bl	80008e8 <main>

08000fea <LoopForever>:

LoopForever:
    b LoopForever
 8000fea:	e7fe      	b.n	8000fea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ff8:	080053e0 	.word	0x080053e0
  ldr r2, =_sbss
 8000ffc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001000:	20000384 	.word	0x20000384

08001004 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001004:	e7fe      	b.n	8001004 <ADC1_2_IRQHandler>
	...

08001008 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_Init+0x3c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <HAL_Init+0x3c>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101e:	2003      	movs	r0, #3
 8001020:	f000 f944 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001024:	2000      	movs	r0, #0
 8001026:	f000 f80f 	bl	8001048 <HAL_InitTick>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	e001      	b.n	800103a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001036:	f7ff fe7b 	bl	8000d30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103a:	79fb      	ldrb	r3, [r7, #7]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40022000 	.word	0x40022000

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <HAL_InitTick+0x6c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d023      	beq.n	80010a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <HAL_InitTick+0x70>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <HAL_InitTick+0x6c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f941 	bl	80012fa <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10f      	bne.n	800109e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d809      	bhi.n	8001098 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f919 	bl	80012c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_InitTick+0x74>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	e007      	b.n	80010a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	73fb      	strb	r3, [r7, #15]
 800109c:	e004      	b.n	80010a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	73fb      	strb	r3, [r7, #15]
 80010a2:	e001      	b.n	80010a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000004 	.word	0x20000004

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000238 	.word	0x20000238

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000238 	.word	0x20000238

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	@ (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	@ (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	@ 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff8e 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff47 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff5c 	bl	8001190 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff8e 	bl	8001200 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5d 	bl	80011ac <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffb0 	bl	8001268 <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001322:	e17f      	b.n	8001624 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	2101      	movs	r1, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 8171 	beq.w	800161e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b01      	cmp	r3, #1
 8001346:	d005      	beq.n	8001354 <HAL_GPIO_Init+0x40>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d130      	bne.n	80013b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800138a:	2201      	movs	r2, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	f003 0201 	and.w	r2, r3, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d118      	bne.n	80013f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013c8:	2201      	movs	r2, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	f003 0201 	and.w	r2, r3, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d017      	beq.n	8001430 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d123      	bne.n	8001484 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220f      	movs	r2, #15
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	08da      	lsrs	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3208      	adds	r2, #8
 800147e:	6939      	ldr	r1, [r7, #16]
 8001480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0203 	and.w	r2, r3, #3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80ac 	beq.w	800161e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001644 <HAL_GPIO_Init+0x330>)
 80014c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001644 <HAL_GPIO_Init+0x330>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001644 <HAL_GPIO_Init+0x330>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014de:	4a5a      	ldr	r2, [pc, #360]	@ (8001648 <HAL_GPIO_Init+0x334>)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001508:	d025      	beq.n	8001556 <HAL_GPIO_Init+0x242>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4f      	ldr	r2, [pc, #316]	@ (800164c <HAL_GPIO_Init+0x338>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d01f      	beq.n	8001552 <HAL_GPIO_Init+0x23e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4e      	ldr	r2, [pc, #312]	@ (8001650 <HAL_GPIO_Init+0x33c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d019      	beq.n	800154e <HAL_GPIO_Init+0x23a>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4d      	ldr	r2, [pc, #308]	@ (8001654 <HAL_GPIO_Init+0x340>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0x236>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4c      	ldr	r2, [pc, #304]	@ (8001658 <HAL_GPIO_Init+0x344>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d00d      	beq.n	8001546 <HAL_GPIO_Init+0x232>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4b      	ldr	r2, [pc, #300]	@ (800165c <HAL_GPIO_Init+0x348>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d007      	beq.n	8001542 <HAL_GPIO_Init+0x22e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4a      	ldr	r2, [pc, #296]	@ (8001660 <HAL_GPIO_Init+0x34c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d101      	bne.n	800153e <HAL_GPIO_Init+0x22a>
 800153a:	2306      	movs	r3, #6
 800153c:	e00c      	b.n	8001558 <HAL_GPIO_Init+0x244>
 800153e:	2307      	movs	r3, #7
 8001540:	e00a      	b.n	8001558 <HAL_GPIO_Init+0x244>
 8001542:	2305      	movs	r3, #5
 8001544:	e008      	b.n	8001558 <HAL_GPIO_Init+0x244>
 8001546:	2304      	movs	r3, #4
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x244>
 800154a:	2303      	movs	r3, #3
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x244>
 800154e:	2302      	movs	r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x244>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x244>
 8001556:	2300      	movs	r3, #0
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	f002 0203 	and.w	r2, r2, #3
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001568:	4937      	ldr	r1, [pc, #220]	@ (8001648 <HAL_GPIO_Init+0x334>)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001576:	4b3b      	ldr	r3, [pc, #236]	@ (8001664 <HAL_GPIO_Init+0x350>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43db      	mvns	r3, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800159a:	4a32      	ldr	r2, [pc, #200]	@ (8001664 <HAL_GPIO_Init+0x350>)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015a0:	4b30      	ldr	r3, [pc, #192]	@ (8001664 <HAL_GPIO_Init+0x350>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c4:	4a27      	ldr	r2, [pc, #156]	@ (8001664 <HAL_GPIO_Init+0x350>)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ca:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <HAL_GPIO_Init+0x350>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <HAL_GPIO_Init+0x350>)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_GPIO_Init+0x350>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001618:	4a12      	ldr	r2, [pc, #72]	@ (8001664 <HAL_GPIO_Init+0x350>)
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa22 f303 	lsr.w	r3, r2, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	f47f ae78 	bne.w	8001324 <HAL_GPIO_Init+0x10>
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	48000400 	.word	0x48000400
 8001650:	48000800 	.word	0x48000800
 8001654:	48000c00 	.word	0x48000c00
 8001658:	48001000 	.word	0x48001000
 800165c:	48001400 	.word	0x48001400
 8001660:	48001800 	.word	0x48001800
 8001664:	40010400 	.word	0x40010400

08001668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	4013      	ands	r3, r2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e001      	b.n	800168a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
 80016a4:	4613      	mov	r3, r2
 80016a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000

080016e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016f2:	d130      	bne.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f4:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001700:	d038      	beq.n	8001774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001702:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800170a:	4a1e      	ldr	r2, [pc, #120]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2232      	movs	r2, #50	@ 0x32
 8001718:	fb02 f303 	mul.w	r3, r2, r3
 800171c:	4a1b      	ldr	r2, [pc, #108]	@ (800178c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	0c9b      	lsrs	r3, r3, #18
 8001724:	3301      	adds	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001728:	e002      	b.n	8001730 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3b01      	subs	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800173c:	d102      	bne.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x60>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f2      	bne.n	800172a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001744:	4b0f      	ldr	r3, [pc, #60]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001750:	d110      	bne.n	8001774 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e00f      	b.n	8001776 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800175e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001762:	d007      	beq.n	8001774 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001764:	4b07      	ldr	r3, [pc, #28]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800176c:	4a05      	ldr	r2, [pc, #20]	@ (8001784 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001772:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40007000 	.word	0x40007000
 8001788:	20000000 	.word	0x20000000
 800178c:	431bde83 	.word	0x431bde83

08001790 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e3ca      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017a2:	4b97      	ldr	r3, [pc, #604]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ac:	4b94      	ldr	r3, [pc, #592]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 80e4 	beq.w	800198c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_RCC_OscConfig+0x4a>
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	f040 808b 	bne.w	80018e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	f040 8087 	bne.w	80018e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017da:	4b89      	ldr	r3, [pc, #548]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x62>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e3a2      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1a      	ldr	r2, [r3, #32]
 80017f6:	4b82      	ldr	r3, [pc, #520]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d004      	beq.n	800180c <HAL_RCC_OscConfig+0x7c>
 8001802:	4b7f      	ldr	r3, [pc, #508]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800180a:	e005      	b.n	8001818 <HAL_RCC_OscConfig+0x88>
 800180c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800180e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001818:	4293      	cmp	r3, r2
 800181a:	d223      	bcs.n	8001864 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fd55 	bl	80022d0 <RCC_SetFlashLatencyFromMSIRange>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e383      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001830:	4b73      	ldr	r3, [pc, #460]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a72      	ldr	r2, [pc, #456]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b70      	ldr	r3, [pc, #448]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	496d      	ldr	r1, [pc, #436]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800184a:	4313      	orrs	r3, r2
 800184c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	4968      	ldr	r1, [pc, #416]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
 8001862:	e025      	b.n	80018b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001864:	4b66      	ldr	r3, [pc, #408]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a65      	ldr	r2, [pc, #404]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800186a:	f043 0308 	orr.w	r3, r3, #8
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b63      	ldr	r3, [pc, #396]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4960      	ldr	r1, [pc, #384]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001882:	4b5f      	ldr	r3, [pc, #380]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	495b      	ldr	r1, [pc, #364]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fd15 	bl	80022d0 <RCC_SetFlashLatencyFromMSIRange>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e343      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018b0:	f000 fc4a 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80018b4:	4602      	mov	r2, r0
 80018b6:	4b52      	ldr	r3, [pc, #328]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	4950      	ldr	r1, [pc, #320]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018c2:	5ccb      	ldrb	r3, [r1, r3]
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a08 <HAL_RCC_OscConfig+0x278>)
 80018ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018d0:	4b4e      	ldr	r3, [pc, #312]	@ (8001a0c <HAL_RCC_OscConfig+0x27c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fbb7 	bl	8001048 <HAL_InitTick>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d052      	beq.n	800198a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	e327      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d032      	beq.n	8001956 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f0:	4b43      	ldr	r3, [pc, #268]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a42      	ldr	r2, [pc, #264]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018fc:	f7ff fbf4 	bl	80010e8 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001904:	f7ff fbf0 	bl	80010e8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e310      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001916:	4b3a      	ldr	r3, [pc, #232]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001922:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a36      	ldr	r2, [pc, #216]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b34      	ldr	r3, [pc, #208]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4931      	ldr	r1, [pc, #196]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001940:	4b2f      	ldr	r3, [pc, #188]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	492c      	ldr	r1, [pc, #176]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e01a      	b.n	800198c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001956:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a29      	ldr	r2, [pc, #164]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001962:	f7ff fbc1 	bl	80010e8 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800196a:	f7ff fbbd 	bl	80010e8 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e2dd      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800197c:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x1da>
 8001988:	e000      	b.n	800198c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800198a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d074      	beq.n	8001a82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b08      	cmp	r3, #8
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x21a>
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b0c      	cmp	r3, #12
 80019a2:	d10e      	bne.n	80019c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d10b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019aa:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d064      	beq.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d160      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e2ba      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x24a>
 80019cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e026      	b.n	8001a28 <HAL_RCC_OscConfig+0x298>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019e2:	d115      	bne.n	8001a10 <HAL_RCC_OscConfig+0x280>
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a02      	ldr	r2, [pc, #8]	@ (8001a00 <HAL_RCC_OscConfig+0x270>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x298>
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	08005354 	.word	0x08005354
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	4ba0      	ldr	r3, [pc, #640]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a9f      	ldr	r2, [pc, #636]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b9d      	ldr	r3, [pc, #628]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a9c      	ldr	r2, [pc, #624]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d013      	beq.n	8001a58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff fb5a 	bl	80010e8 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fb56 	bl	80010e8 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	@ 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e276      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a4a:	4b92      	ldr	r3, [pc, #584]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x2a8>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fb46 	bl	80010e8 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fb42 	bl	80010e8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	@ 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e262      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a72:	4b88      	ldr	r3, [pc, #544]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x2d0>
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d060      	beq.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x310>
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d119      	bne.n	8001ace <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d116      	bne.n	8001ace <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa0:	4b7c      	ldr	r3, [pc, #496]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x328>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e23f      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab8:	4b76      	ldr	r3, [pc, #472]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	4973      	ldr	r1, [pc, #460]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001acc:	e040      	b.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d023      	beq.n	8001b1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad6:	4b6f      	ldr	r3, [pc, #444]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a6e      	ldr	r2, [pc, #440]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fb01 	bl	80010e8 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff fafd 	bl	80010e8 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e21d      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afc:	4b65      	ldr	r3, [pc, #404]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b62      	ldr	r3, [pc, #392]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	061b      	lsls	r3, r3, #24
 8001b16:	495f      	ldr	r1, [pc, #380]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
 8001b1c:	e018      	b.n	8001b50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a5c      	ldr	r2, [pc, #368]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fadd 	bl	80010e8 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff fad9 	bl	80010e8 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e1f9      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b44:	4b53      	ldr	r3, [pc, #332]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d03c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b64:	4b4b      	ldr	r3, [pc, #300]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6a:	4a4a      	ldr	r2, [pc, #296]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff fab8 	bl	80010e8 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff fab4 	bl	80010e8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1d4      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8e:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ef      	beq.n	8001b7c <HAL_RCC_OscConfig+0x3ec>
 8001b9c:	e01b      	b.n	8001bd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff fa9b 	bl	80010e8 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fa97 	bl	80010e8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1b7      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc8:	4b32      	ldr	r3, [pc, #200]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ef      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80a6 	beq.w	8001d30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001be8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10d      	bne.n	8001c10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf4:	4b27      	ldr	r3, [pc, #156]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf8:	4a26      	ldr	r2, [pc, #152]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c10:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <HAL_RCC_OscConfig+0x508>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d118      	bne.n	8001c4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <HAL_RCC_OscConfig+0x508>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1d      	ldr	r2, [pc, #116]	@ (8001c98 <HAL_RCC_OscConfig+0x508>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c28:	f7ff fa5e 	bl	80010e8 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c30:	f7ff fa5a 	bl	80010e8 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e17a      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_RCC_OscConfig+0x508>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d108      	bne.n	8001c68 <HAL_RCC_OscConfig+0x4d8>
 8001c56:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c66:	e029      	b.n	8001cbc <HAL_RCC_OscConfig+0x52c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d115      	bne.n	8001c9c <HAL_RCC_OscConfig+0x50c>
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c76:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c86:	4a03      	ldr	r2, [pc, #12]	@ (8001c94 <HAL_RCC_OscConfig+0x504>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c90:	e014      	b.n	8001cbc <HAL_RCC_OscConfig+0x52c>
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40007000 	.word	0x40007000
 8001c9c:	4b9c      	ldr	r3, [pc, #624]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca2:	4a9b      	ldr	r2, [pc, #620]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cac:	4b98      	ldr	r3, [pc, #608]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb2:	4a97      	ldr	r2, [pc, #604]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d016      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fa10 	bl	80010e8 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fa0c 	bl	80010e8 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e12a      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ed      	beq.n	8001ccc <HAL_RCC_OscConfig+0x53c>
 8001cf0:	e015      	b.n	8001d1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff f9f9 	bl	80010e8 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff f9f5 	bl	80010e8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e113      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d10:	4b7f      	ldr	r3, [pc, #508]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ed      	bne.n	8001cfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d24:	4b7a      	ldr	r3, [pc, #488]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	4a79      	ldr	r2, [pc, #484]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 80fe 	beq.w	8001f36 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	f040 80d0 	bne.w	8001ee4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d44:	4b72      	ldr	r3, [pc, #456]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d130      	bne.n	8001dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	3b01      	subs	r3, #1
 8001d64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d127      	bne.n	8001dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d74:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d11f      	bne.n	8001dba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d84:	2a07      	cmp	r2, #7
 8001d86:	bf14      	ite	ne
 8001d88:	2201      	movne	r2, #1
 8001d8a:	2200      	moveq	r2, #0
 8001d8c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d113      	bne.n	8001dba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9c:	085b      	lsrs	r3, r3, #1
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d109      	bne.n	8001dba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	3b01      	subs	r3, #1
 8001db4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d06e      	beq.n	8001e98 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d069      	beq.n	8001e94 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dc0:	4b53      	ldr	r3, [pc, #332]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dcc:	4b50      	ldr	r3, [pc, #320]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e0ad      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a4b      	ldr	r2, [pc, #300]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001de6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001de8:	f7ff f97e 	bl	80010e8 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7ff f97a 	bl	80010e8 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e09a      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e02:	4b43      	ldr	r3, [pc, #268]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0e:	4b40      	ldr	r3, [pc, #256]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	4b40      	ldr	r3, [pc, #256]	@ (8001f14 <HAL_RCC_OscConfig+0x784>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e1e:	3a01      	subs	r2, #1
 8001e20:	0112      	lsls	r2, r2, #4
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e28:	0212      	lsls	r2, r2, #8
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e30:	0852      	lsrs	r2, r2, #1
 8001e32:	3a01      	subs	r2, #1
 8001e34:	0552      	lsls	r2, r2, #21
 8001e36:	4311      	orrs	r1, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e3c:	0852      	lsrs	r2, r2, #1
 8001e3e:	3a01      	subs	r2, #1
 8001e40:	0652      	lsls	r2, r2, #25
 8001e42:	4311      	orrs	r1, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e48:	0912      	lsrs	r2, r2, #4
 8001e4a:	0452      	lsls	r2, r2, #17
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	4930      	ldr	r1, [pc, #192]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e54:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2d      	ldr	r2, [pc, #180]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b2b      	ldr	r3, [pc, #172]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a2a      	ldr	r2, [pc, #168]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e6c:	f7ff f93c 	bl	80010e8 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f938 	bl	80010e8 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e058      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e92:	e050      	b.n	8001f36 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e04f      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e98:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d148      	bne.n	8001f36 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001eaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb0:	4b17      	ldr	r3, [pc, #92]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4a16      	ldr	r2, [pc, #88]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ebc:	f7ff f914 	bl	80010e8 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec4:	f7ff f910 	bl	80010e8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e030      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x734>
 8001ee2:	e028      	b.n	8001f36 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d023      	beq.n	8001f32 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a08      	ldr	r2, [pc, #32]	@ (8001f10 <HAL_RCC_OscConfig+0x780>)
 8001ef0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f8f7 	bl	80010e8 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efc:	e00c      	b.n	8001f18 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efe:	f7ff f8f3 	bl	80010e8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d905      	bls.n	8001f18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e013      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_RCC_OscConfig+0x7b0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ec      	bne.n	8001efe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_RCC_OscConfig+0x7b0>)
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	4905      	ldr	r1, [pc, #20]	@ (8001f40 <HAL_RCC_OscConfig+0x7b0>)
 8001f2a:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_RCC_OscConfig+0x7b4>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
 8001f30:	e001      	b.n	8001f36 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	feeefffc 	.word	0xfeeefffc

08001f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0e7      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b75      	ldr	r3, [pc, #468]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d910      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b72      	ldr	r3, [pc, #456]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 0207 	bic.w	r2, r3, #7
 8001f72:	4970      	ldr	r1, [pc, #448]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0cf      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d010      	beq.n	8001fba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	4b66      	ldr	r3, [pc, #408]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d908      	bls.n	8001fba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa8:	4b63      	ldr	r3, [pc, #396]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	4960      	ldr	r1, [pc, #384]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d04c      	beq.n	8002060 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fce:	4b5a      	ldr	r3, [pc, #360]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d121      	bne.n	800201e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0a6      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d107      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe6:	4b54      	ldr	r3, [pc, #336]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d115      	bne.n	800201e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e09a      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e08e      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800200e:	4b4a      	ldr	r3, [pc, #296]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e086      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800201e:	4b46      	ldr	r3, [pc, #280]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f023 0203 	bic.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4943      	ldr	r1, [pc, #268]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002030:	f7ff f85a 	bl	80010e8 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	e00a      	b.n	800204e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002038:	f7ff f856 	bl	80010e8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e06e      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204e:	4b3a      	ldr	r3, [pc, #232]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 020c 	and.w	r2, r3, #12
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	429a      	cmp	r2, r3
 800205e:	d1eb      	bne.n	8002038 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002078:	429a      	cmp	r2, r3
 800207a:	d208      	bcs.n	800208e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207c:	4b2e      	ldr	r3, [pc, #184]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	492b      	ldr	r1, [pc, #172]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800208e:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d210      	bcs.n	80020be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209c:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 0207 	bic.w	r2, r3, #7
 80020a4:	4923      	ldr	r1, [pc, #140]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ac:	4b21      	ldr	r3, [pc, #132]	@ (8002134 <HAL_RCC_ClockConfig+0x1ec>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d001      	beq.n	80020be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e036      	b.n	800212c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d008      	beq.n	80020dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	4918      	ldr	r1, [pc, #96]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d009      	beq.n	80020fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4910      	ldr	r1, [pc, #64]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020fc:	f000 f824 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <HAL_RCC_ClockConfig+0x1f0>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	091b      	lsrs	r3, r3, #4
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	490b      	ldr	r1, [pc, #44]	@ (800213c <HAL_RCC_ClockConfig+0x1f4>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
 8002118:	4a09      	ldr	r2, [pc, #36]	@ (8002140 <HAL_RCC_ClockConfig+0x1f8>)
 800211a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800211c:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <HAL_RCC_ClockConfig+0x1fc>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe ff91 	bl	8001048 <HAL_InitTick>
 8002126:	4603      	mov	r3, r0
 8002128:	72fb      	strb	r3, [r7, #11]

  return status;
 800212a:	7afb      	ldrb	r3, [r7, #11]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40022000 	.word	0x40022000
 8002138:	40021000 	.word	0x40021000
 800213c:	08005354 	.word	0x08005354
 8002140:	20000000 	.word	0x20000000
 8002144:	20000004 	.word	0x20000004

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	@ 0x24
 800214c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002156:	4b3e      	ldr	r3, [pc, #248]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x34>
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d121      	bne.n	80021ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d11e      	bne.n	80021ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800217c:	4b34      	ldr	r3, [pc, #208]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d107      	bne.n	8002198 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002188:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e005      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002198:	4b2d      	ldr	r3, [pc, #180]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d102      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021c0:	4b25      	ldr	r3, [pc, #148]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x110>)
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	e004      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021cc:	4b23      	ldr	r3, [pc, #140]	@ (800225c <HAL_RCC_GetSysClockFreq+0x114>)
 80021ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d134      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_GetSysClockFreq+0xa6>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d003      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0xac>
 80021ec:	e005      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x110>)
 80021f0:	617b      	str	r3, [r7, #20]
      break;
 80021f2:	e005      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021f4:	4b19      	ldr	r3, [pc, #100]	@ (800225c <HAL_RCC_GetSysClockFreq+0x114>)
 80021f6:	617b      	str	r3, [r7, #20]
      break;
 80021f8:	e002      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	617b      	str	r3, [r7, #20]
      break;
 80021fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	3301      	adds	r3, #1
 800220c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	fb03 f202 	mul.w	r2, r3, r2
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002226:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <HAL_RCC_GetSysClockFreq+0x108>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	0e5b      	lsrs	r3, r3, #25
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	3301      	adds	r3, #1
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002240:	69bb      	ldr	r3, [r7, #24]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	@ 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000
 8002254:	0800536c 	.word	0x0800536c
 8002258:	00f42400 	.word	0x00f42400
 800225c:	007a1200 	.word	0x007a1200

08002260 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002264:	4b03      	ldr	r3, [pc, #12]	@ (8002274 <HAL_RCC_GetHCLKFreq+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000

08002278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800227c:	f7ff fff0 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	4904      	ldr	r1, [pc, #16]	@ (80022a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800228e:	5ccb      	ldrb	r3, [r1, r3]
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	08005364 	.word	0x08005364

080022a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022a8:	f7ff ffda 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	0adb      	lsrs	r3, r3, #11
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4904      	ldr	r1, [pc, #16]	@ (80022cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08005364 	.word	0x08005364

080022d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022e8:	f7ff f9ee 	bl	80016c8 <HAL_PWREx_GetVoltageRange>
 80022ec:	6178      	str	r0, [r7, #20]
 80022ee:	e014      	b.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f4:	4a24      	ldr	r2, [pc, #144]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80022fc:	4b22      	ldr	r3, [pc, #136]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002308:	f7ff f9de 	bl	80016c8 <HAL_PWREx_GetVoltageRange>
 800230c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	4a1d      	ldr	r2, [pc, #116]	@ (8002388 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002318:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002320:	d10b      	bne.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b80      	cmp	r3, #128	@ 0x80
 8002326:	d919      	bls.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2ba0      	cmp	r3, #160	@ 0xa0
 800232c:	d902      	bls.n	8002334 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800232e:	2302      	movs	r3, #2
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	e013      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002334:	2301      	movs	r3, #1
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e010      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b80      	cmp	r3, #128	@ 0x80
 800233e:	d902      	bls.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002340:	2303      	movs	r3, #3
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e00a      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b80      	cmp	r3, #128	@ 0x80
 800234a:	d102      	bne.n	8002352 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800234c:	2302      	movs	r3, #2
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e004      	b.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b70      	cmp	r3, #112	@ 0x70
 8002356:	d101      	bne.n	800235c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002358:	2301      	movs	r3, #1
 800235a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 0207 	bic.w	r2, r3, #7
 8002364:	4909      	ldr	r1, [pc, #36]	@ (800238c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800236c:	4b07      	ldr	r3, [pc, #28]	@ (800238c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	429a      	cmp	r2, r3
 8002378:	d001      	beq.n	800237e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	40022000 	.word	0x40022000

08002390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002398:	2300      	movs	r3, #0
 800239a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800239c:	2300      	movs	r3, #0
 800239e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d041      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023b4:	d02a      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023ba:	d824      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023c0:	d008      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023c6:	d81e      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00a      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d0:	d010      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023d2:	e018      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023d4:	4b86      	ldr	r3, [pc, #536]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	4a85      	ldr	r2, [pc, #532]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023e0:	e015      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fabb 	bl	8002964 <RCCEx_PLLSAI1_Config>
 80023ee:	4603      	mov	r3, r0
 80023f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023f2:	e00c      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3320      	adds	r3, #32
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fba6 	bl	8002b4c <RCCEx_PLLSAI2_Config>
 8002400:	4603      	mov	r3, r0
 8002402:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002404:	e003      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	74fb      	strb	r3, [r7, #19]
      break;
 800240a:	e000      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800240c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002414:	4b76      	ldr	r3, [pc, #472]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002422:	4973      	ldr	r1, [pc, #460]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800242a:	e001      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d041      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002440:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002444:	d02a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002446:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800244a:	d824      	bhi.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800244c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002450:	d008      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002452:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002456:	d81e      	bhi.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002460:	d010      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002462:	e018      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002464:	4b62      	ldr	r3, [pc, #392]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a61      	ldr	r2, [pc, #388]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002470:	e015      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3304      	adds	r3, #4
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fa73 	bl	8002964 <RCCEx_PLLSAI1_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002482:	e00c      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3320      	adds	r3, #32
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fb5e 	bl	8002b4c <RCCEx_PLLSAI2_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002494:	e003      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	74fb      	strb	r3, [r7, #19]
      break;
 800249a:	e000      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800249c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024a4:	4b52      	ldr	r3, [pc, #328]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024b2:	494f      	ldr	r1, [pc, #316]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024ba:	e001      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	7cfb      	ldrb	r3, [r7, #19]
 80024be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a0 	beq.w	800260e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024d2:	4b47      	ldr	r3, [pc, #284]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00d      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4b41      	ldr	r3, [pc, #260]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ec:	4a40      	ldr	r2, [pc, #256]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024f4:	4b3e      	ldr	r3, [pc, #248]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002500:	2301      	movs	r3, #1
 8002502:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002504:	4b3b      	ldr	r3, [pc, #236]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a3a      	ldr	r2, [pc, #232]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800250e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002510:	f7fe fdea 	bl	80010e8 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002516:	e009      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002518:	f7fe fde6 	bl	80010e8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	74fb      	strb	r3, [r7, #19]
        break;
 800252a:	e005      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800252c:	4b31      	ldr	r3, [pc, #196]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d15c      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800253e:	4b2c      	ldr	r3, [pc, #176]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002548:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01f      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	429a      	cmp	r2, r3
 800255a:	d019      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800255c:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002566:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002568:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256e:	4a20      	ldr	r2, [pc, #128]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002578:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257e:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002580:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002588:	4a19      	ldr	r2, [pc, #100]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fda5 	bl	80010e8 <HAL_GetTick>
 800259e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a0:	e00b      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fda1 	bl	80010e8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d902      	bls.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	74fb      	strb	r3, [r7, #19]
            break;
 80025b8:	e006      	b.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ba:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ec      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ce:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025de:	4904      	ldr	r1, [pc, #16]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025e6:	e009      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	74bb      	strb	r3, [r7, #18]
 80025ec:	e006      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025fc:	7c7b      	ldrb	r3, [r7, #17]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d105      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002602:	4b9e      	ldr	r3, [pc, #632]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	4a9d      	ldr	r2, [pc, #628]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800260c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800261a:	4b98      	ldr	r3, [pc, #608]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002620:	f023 0203 	bic.w	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002628:	4994      	ldr	r1, [pc, #592]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800263c:	4b8f      	ldr	r3, [pc, #572]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002642:	f023 020c 	bic.w	r2, r3, #12
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264a:	498c      	ldr	r1, [pc, #560]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800265e:	4b87      	ldr	r3, [pc, #540]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002664:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	4983      	ldr	r1, [pc, #524]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002680:	4b7e      	ldr	r3, [pc, #504]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	497b      	ldr	r1, [pc, #492]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026a2:	4b76      	ldr	r3, [pc, #472]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026b0:	4972      	ldr	r1, [pc, #456]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026c4:	4b6d      	ldr	r3, [pc, #436]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d2:	496a      	ldr	r1, [pc, #424]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026e6:	4b65      	ldr	r3, [pc, #404]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	4961      	ldr	r1, [pc, #388]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002708:	4b5c      	ldr	r3, [pc, #368]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002716:	4959      	ldr	r1, [pc, #356]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800272a:	4b54      	ldr	r3, [pc, #336]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002730:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002738:	4950      	ldr	r1, [pc, #320]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002752:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275a:	4948      	ldr	r1, [pc, #288]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800276e:	4b43      	ldr	r3, [pc, #268]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002774:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	493f      	ldr	r1, [pc, #252]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d028      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002790:	4b3a      	ldr	r3, [pc, #232]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002796:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800279e:	4937      	ldr	r1, [pc, #220]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027ae:	d106      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b0:	4b32      	ldr	r3, [pc, #200]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a31      	ldr	r2, [pc, #196]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ba:	60d3      	str	r3, [r2, #12]
 80027bc:	e011      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3304      	adds	r3, #4
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f8c8 	bl	8002964 <RCCEx_PLLSAI1_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027de:	7cfb      	ldrb	r3, [r7, #19]
 80027e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d028      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027ee:	4b23      	ldr	r3, [pc, #140]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fc:	491f      	ldr	r1, [pc, #124]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800280c:	d106      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280e:	4b1b      	ldr	r3, [pc, #108]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a1a      	ldr	r2, [pc, #104]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002814:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002818:	60d3      	str	r3, [r2, #12]
 800281a:	e011      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002820:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002824:	d10c      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f899 	bl	8002964 <RCCEx_PLLSAI1_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d02b      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800284c:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002852:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285a:	4908      	ldr	r1, [pc, #32]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800286a:	d109      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800286c:	4b03      	ldr	r3, [pc, #12]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4a02      	ldr	r2, [pc, #8]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002876:	60d3      	str	r3, [r2, #12]
 8002878:	e014      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002884:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	2101      	movs	r1, #1
 8002890:	4618      	mov	r0, r3
 8002892:	f000 f867 	bl	8002964 <RCCEx_PLLSAI1_Config>
 8002896:	4603      	mov	r3, r0
 8002898:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800289a:	7cfb      	ldrb	r3, [r7, #19]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d02f      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028be:	4928      	ldr	r1, [pc, #160]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028ce:	d10d      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	2102      	movs	r1, #2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f844 	bl	8002964 <RCCEx_PLLSAI1_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d014      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	74bb      	strb	r3, [r7, #18]
 80028ea:	e011      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3320      	adds	r3, #32
 80028fa:	2102      	movs	r1, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f925 	bl	8002b4c <RCCEx_PLLSAI2_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800291c:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002922:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002944:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800294e:	4904      	ldr	r1, [pc, #16]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002956:	7cbb      	ldrb	r3, [r7, #18]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000

08002964 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002972:	4b75      	ldr	r3, [pc, #468]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d018      	beq.n	80029b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800297e:	4b72      	ldr	r3, [pc, #456]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0203 	and.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d10d      	bne.n	80029aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
       ||
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002996:	4b6c      	ldr	r3, [pc, #432]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
       ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d047      	beq.n	8002a3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e044      	b.n	8002a3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d018      	beq.n	80029ea <RCCEx_PLLSAI1_Config+0x86>
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d825      	bhi.n	8002a08 <RCCEx_PLLSAI1_Config+0xa4>
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d002      	beq.n	80029c6 <RCCEx_PLLSAI1_Config+0x62>
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d009      	beq.n	80029d8 <RCCEx_PLLSAI1_Config+0x74>
 80029c4:	e020      	b.n	8002a08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029c6:	4b60      	ldr	r3, [pc, #384]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d11d      	bne.n	8002a0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d6:	e01a      	b.n	8002a0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d116      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e013      	b.n	8002a12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ea:	4b57      	ldr	r3, [pc, #348]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029f6:	4b54      	ldr	r3, [pc, #336]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a06:	e006      	b.n	8002a16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a0c:	e004      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e002      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a12:	bf00      	nop
 8002a14:	e000      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10d      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6819      	ldr	r1, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	430b      	orrs	r3, r1
 8002a34:	4944      	ldr	r1, [pc, #272]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d17d      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a40:	4b41      	ldr	r3, [pc, #260]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a40      	ldr	r2, [pc, #256]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fb4c 	bl	80010e8 <HAL_GetTick>
 8002a50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a52:	e009      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a54:	f7fe fb48 	bl	80010e8 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d902      	bls.n	8002a68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	73fb      	strb	r3, [r7, #15]
        break;
 8002a66:	e005      	b.n	8002a74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a68:	4b37      	ldr	r3, [pc, #220]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1ef      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d160      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a80:	4b31      	ldr	r3, [pc, #196]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	0211      	lsls	r1, r2, #8
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68d2      	ldr	r2, [r2, #12]
 8002a96:	0912      	lsrs	r2, r2, #4
 8002a98:	0452      	lsls	r2, r2, #17
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	492a      	ldr	r1, [pc, #168]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	610b      	str	r3, [r1, #16]
 8002aa2:	e027      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d112      	bne.n	8002ad0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aaa:	4b27      	ldr	r3, [pc, #156]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ab2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6892      	ldr	r2, [r2, #8]
 8002aba:	0211      	lsls	r1, r2, #8
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6912      	ldr	r2, [r2, #16]
 8002ac0:	0852      	lsrs	r2, r2, #1
 8002ac2:	3a01      	subs	r2, #1
 8002ac4:	0552      	lsls	r2, r2, #21
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	491f      	ldr	r1, [pc, #124]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	610b      	str	r3, [r1, #16]
 8002ace:	e011      	b.n	8002af4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ad8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6892      	ldr	r2, [r2, #8]
 8002ae0:	0211      	lsls	r1, r2, #8
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6952      	ldr	r2, [r2, #20]
 8002ae6:	0852      	lsrs	r2, r2, #1
 8002ae8:	3a01      	subs	r2, #1
 8002aea:	0652      	lsls	r2, r2, #25
 8002aec:	430a      	orrs	r2, r1
 8002aee:	4916      	ldr	r1, [pc, #88]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002af4:	4b14      	ldr	r3, [pc, #80]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a13      	ldr	r2, [pc, #76]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe faf2 	bl	80010e8 <HAL_GetTick>
 8002b04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b06:	e009      	b.n	8002b1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b08:	f7fe faee 	bl	80010e8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d902      	bls.n	8002b1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	73fb      	strb	r3, [r7, #15]
          break;
 8002b1a:	e005      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ef      	beq.n	8002b08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b2e:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	4904      	ldr	r1, [pc, #16]	@ (8002b48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000

08002b4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d018      	beq.n	8002b98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b66:	4b67      	ldr	r3, [pc, #412]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0203 	and.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d10d      	bne.n	8002b92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
       ||
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b7e:	4b61      	ldr	r3, [pc, #388]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d047      	beq.n	8002c22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e044      	b.n	8002c22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d018      	beq.n	8002bd2 <RCCEx_PLLSAI2_Config+0x86>
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d825      	bhi.n	8002bf0 <RCCEx_PLLSAI2_Config+0xa4>
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d002      	beq.n	8002bae <RCCEx_PLLSAI2_Config+0x62>
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d009      	beq.n	8002bc0 <RCCEx_PLLSAI2_Config+0x74>
 8002bac:	e020      	b.n	8002bf0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bae:	4b55      	ldr	r3, [pc, #340]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11d      	bne.n	8002bf6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbe:	e01a      	b.n	8002bf6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bc0:	4b50      	ldr	r3, [pc, #320]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd0:	e013      	b.n	8002bfa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bd2:	4b4c      	ldr	r3, [pc, #304]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10f      	bne.n	8002bfe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bde:	4b49      	ldr	r3, [pc, #292]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d109      	bne.n	8002bfe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bee:	e006      	b.n	8002bfe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e004      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10d      	bne.n	8002c22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c06:	4b3f      	ldr	r3, [pc, #252]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	4939      	ldr	r1, [pc, #228]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d167      	bne.n	8002cf8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c28:	4b36      	ldr	r3, [pc, #216]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a35      	ldr	r2, [pc, #212]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fa58 	bl	80010e8 <HAL_GetTick>
 8002c38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c3a:	e009      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c3c:	f7fe fa54 	bl	80010e8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d902      	bls.n	8002c50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c4e:	e005      	b.n	8002c5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c50:	4b2c      	ldr	r3, [pc, #176]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ef      	bne.n	8002c3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d14a      	bne.n	8002cf8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d111      	bne.n	8002c8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c68:	4b26      	ldr	r3, [pc, #152]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6892      	ldr	r2, [r2, #8]
 8002c78:	0211      	lsls	r1, r2, #8
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68d2      	ldr	r2, [r2, #12]
 8002c7e:	0912      	lsrs	r2, r2, #4
 8002c80:	0452      	lsls	r2, r2, #17
 8002c82:	430a      	orrs	r2, r1
 8002c84:	491f      	ldr	r1, [pc, #124]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	614b      	str	r3, [r1, #20]
 8002c8a:	e011      	b.n	8002cb0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6892      	ldr	r2, [r2, #8]
 8002c9c:	0211      	lsls	r1, r2, #8
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6912      	ldr	r2, [r2, #16]
 8002ca2:	0852      	lsrs	r2, r2, #1
 8002ca4:	3a01      	subs	r2, #1
 8002ca6:	0652      	lsls	r2, r2, #25
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	4916      	ldr	r1, [pc, #88]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cb0:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a13      	ldr	r2, [pc, #76]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fa14 	bl	80010e8 <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cc2:	e009      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cc4:	f7fe fa10 	bl	80010e8 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d902      	bls.n	8002cd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	73fb      	strb	r3, [r7, #15]
          break;
 8002cd6:	e005      	b.n	8002ce4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ef      	beq.n	8002cc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4904      	ldr	r1, [pc, #16]	@ (8002d04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000

08002d08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e095      	b.n	8002e46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d108      	bne.n	8002d34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d2a:	d009      	beq.n	8002d40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
 8002d32:	e005      	b.n	8002d40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe f80c 	bl	8000d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d80:	d902      	bls.n	8002d88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	e002      	b.n	8002d8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d96:	d007      	beq.n	8002da8 <HAL_SPI_Init+0xa0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002da0:	d002      	beq.n	8002da8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002db8:	431a      	orrs	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dea:	ea42 0103 	orr.w	r1, r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	0c1b      	lsrs	r3, r3, #16
 8002e04:	f003 0204 	and.w	r2, r3, #4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b088      	sub	sp, #32
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e5e:	f7fe f943 	bl	80010e8 <HAL_GetTick>
 8002e62:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d001      	beq.n	8002e78 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
 8002e76:	e15c      	b.n	8003132 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_SPI_Transmit+0x36>
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e154      	b.n	8003132 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_SPI_Transmit+0x48>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e14d      	b.n	8003132 <HAL_SPI_Transmit+0x2e4>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	88fa      	ldrh	r2, [r7, #6]
 8002eb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee8:	d10f      	bne.n	8002f0a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ef8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f14:	2b40      	cmp	r3, #64	@ 0x40
 8002f16:	d007      	beq.n	8002f28 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f30:	d952      	bls.n	8002fd8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_SPI_Transmit+0xf2>
 8002f3a:	8b7b      	ldrh	r3, [r7, #26]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d145      	bne.n	8002fcc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f44:	881a      	ldrh	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f50:	1c9a      	adds	r2, r3, #2
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f64:	e032      	b.n	8002fcc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d112      	bne.n	8002f9a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f84:	1c9a      	adds	r2, r3, #2
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f98:	e018      	b.n	8002fcc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f9a:	f7fe f8a5 	bl	80010e8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d803      	bhi.n	8002fb2 <HAL_SPI_Transmit+0x164>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d102      	bne.n	8002fb8 <HAL_SPI_Transmit+0x16a>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0b2      	b.n	8003132 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1c7      	bne.n	8002f66 <HAL_SPI_Transmit+0x118>
 8002fd6:	e083      	b.n	80030e0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_SPI_Transmit+0x198>
 8002fe0:	8b7b      	ldrh	r3, [r7, #26]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d177      	bne.n	80030d6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d912      	bls.n	8003016 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	881a      	ldrh	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003000:	1c9a      	adds	r2, r3, #2
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b02      	subs	r3, #2
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003014:	e05f      	b.n	80030d6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	7812      	ldrb	r2, [r2, #0]
 8003022:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800303c:	e04b      	b.n	80030d6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b02      	cmp	r3, #2
 800304a:	d12b      	bne.n	80030a4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d912      	bls.n	800307c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003066:	1c9a      	adds	r2, r3, #2
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b02      	subs	r3, #2
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800307a:	e02c      	b.n	80030d6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	7812      	ldrb	r2, [r2, #0]
 8003088:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030a2:	e018      	b.n	80030d6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030a4:	f7fe f820 	bl	80010e8 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d803      	bhi.n	80030bc <HAL_SPI_Transmit+0x26e>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ba:	d102      	bne.n	80030c2 <HAL_SPI_Transmit+0x274>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e02d      	b.n	8003132 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ae      	bne.n	800303e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	6839      	ldr	r1, [r7, #0]
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fcf5 	bl	8003ad4 <SPI_EndRxTxTransaction>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003130:	2300      	movs	r3, #0
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b088      	sub	sp, #32
 800313e:	af02      	add	r7, sp, #8
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	603b      	str	r3, [r7, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003156:	2302      	movs	r3, #2
 8003158:	e123      	b.n	80033a2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003162:	d112      	bne.n	800318a <HAL_SPI_Receive+0x50>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10e      	bne.n	800318a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2204      	movs	r2, #4
 8003170:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003174:	88fa      	ldrh	r2, [r7, #6]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	4613      	mov	r3, r2
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f912 	bl	80033aa <HAL_SPI_TransmitReceive>
 8003186:	4603      	mov	r3, r0
 8003188:	e10b      	b.n	80033a2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800318a:	f7fd ffad 	bl	80010e8 <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_SPI_Receive+0x62>
 8003196:	88fb      	ldrh	r3, [r7, #6]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e100      	b.n	80033a2 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_SPI_Receive+0x74>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0f9      	b.n	80033a2 <HAL_SPI_Receive+0x268>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2204      	movs	r2, #4
 80031ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	88fa      	ldrh	r2, [r7, #6]
 80031d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003200:	d908      	bls.n	8003214 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	e007      	b.n	8003224 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003222:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800322c:	d10f      	bne.n	800324e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800323c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800324c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	d007      	beq.n	800326c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003274:	d875      	bhi.n	8003362 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003276:	e037      	b.n	80032e8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d117      	bne.n	80032b6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f103 020c 	add.w	r2, r3, #12
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	7812      	ldrb	r2, [r2, #0]
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80032b4:	e018      	b.n	80032e8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032b6:	f7fd ff17 	bl	80010e8 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d803      	bhi.n	80032ce <HAL_SPI_Receive+0x194>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d102      	bne.n	80032d4 <HAL_SPI_Receive+0x19a>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e05c      	b.n	80033a2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1c1      	bne.n	8003278 <HAL_SPI_Receive+0x13e>
 80032f4:	e03b      	b.n	800336e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d115      	bne.n	8003330 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	b292      	uxth	r2, r2
 8003310:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	1c9a      	adds	r2, r3, #2
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800332e:	e018      	b.n	8003362 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003330:	f7fd feda 	bl	80010e8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d803      	bhi.n	8003348 <HAL_SPI_Receive+0x20e>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d102      	bne.n	800334e <HAL_SPI_Receive+0x214>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e01f      	b.n	80033a2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1c3      	bne.n	80032f6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	6839      	ldr	r1, [r7, #0]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fb56 	bl	8003a24 <SPI_EndRxTransaction>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b08a      	sub	sp, #40	@ 0x28
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80033b8:	2301      	movs	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033bc:	f7fd fe94 	bl	80010e8 <HAL_GetTick>
 80033c0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033c8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80033d0:	887b      	ldrh	r3, [r7, #2]
 80033d2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80033d4:	887b      	ldrh	r3, [r7, #2]
 80033d6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d00c      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x4e>
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033e4:	d106      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x4a>
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d001      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80033f4:	2302      	movs	r3, #2
 80033f6:	e1f3      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <HAL_SPI_TransmitReceive+0x60>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_SPI_TransmitReceive+0x60>
 8003404:	887b      	ldrh	r3, [r7, #2]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e1e8      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_SPI_TransmitReceive+0x72>
 8003418:	2302      	movs	r3, #2
 800341a:	e1e1      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x436>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b04      	cmp	r3, #4
 800342e:	d003      	beq.n	8003438 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2205      	movs	r2, #5
 8003434:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	887a      	ldrh	r2, [r7, #2]
 800345e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800347a:	d802      	bhi.n	8003482 <HAL_SPI_TransmitReceive+0xd8>
 800347c:	8abb      	ldrh	r3, [r7, #20]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d908      	bls.n	8003494 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	e007      	b.n	80034a4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ae:	2b40      	cmp	r3, #64	@ 0x40
 80034b0:	d007      	beq.n	80034c2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034ca:	f240 8083 	bls.w	80035d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_SPI_TransmitReceive+0x132>
 80034d6:	8afb      	ldrh	r3, [r7, #22]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d16f      	bne.n	80035bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	881a      	ldrh	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	1c9a      	adds	r2, r3, #2
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003500:	e05c      	b.n	80035bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b02      	cmp	r3, #2
 800350e:	d11b      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x19e>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_SPI_TransmitReceive+0x19e>
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	2b01      	cmp	r3, #1
 800351e:	d113      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	881a      	ldrh	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003530:	1c9a      	adds	r2, r3, #2
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d11c      	bne.n	8003590 <HAL_SPI_TransmitReceive+0x1e6>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d016      	beq.n	8003590 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	b292      	uxth	r2, r2
 800356e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	1c9a      	adds	r2, r3, #2
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800358c:	2301      	movs	r3, #1
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003590:	f7fd fdaa 	bl	80010e8 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800359c:	429a      	cmp	r2, r3
 800359e:	d80d      	bhi.n	80035bc <HAL_SPI_TransmitReceive+0x212>
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d009      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e111      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d19d      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x158>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d197      	bne.n	8003502 <HAL_SPI_TransmitReceive+0x158>
 80035d2:	e0e5      	b.n	80037a0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_SPI_TransmitReceive+0x23a>
 80035dc:	8afb      	ldrh	r3, [r7, #22]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	f040 80d1 	bne.w	8003786 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d912      	bls.n	8003614 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f2:	881a      	ldrh	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fe:	1c9a      	adds	r2, r3, #2
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b02      	subs	r3, #2
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003612:	e0b8      	b.n	8003786 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800363a:	e0a4      	b.n	8003786 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d134      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x30a>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800364e:	b29b      	uxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d02f      	beq.n	80036b4 <HAL_SPI_TransmitReceive+0x30a>
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	2b01      	cmp	r3, #1
 8003658:	d12c      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d912      	bls.n	800368a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003674:	1c9a      	adds	r2, r3, #2
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b02      	subs	r3, #2
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003688:	e012      	b.n	80036b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d148      	bne.n	8003754 <HAL_SPI_TransmitReceive+0x3aa>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d042      	beq.n	8003754 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d923      	bls.n	8003722 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	b292      	uxth	r2, r2
 80036e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	1c9a      	adds	r2, r3, #2
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b02      	subs	r3, #2
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d81f      	bhi.n	8003750 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800371e:	605a      	str	r2, [r3, #4]
 8003720:	e016      	b.n	8003750 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f103 020c 	add.w	r2, r3, #12
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	7812      	ldrb	r2, [r2, #0]
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003750:	2301      	movs	r3, #1
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003754:	f7fd fcc8 	bl	80010e8 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003760:	429a      	cmp	r2, r3
 8003762:	d803      	bhi.n	800376c <HAL_SPI_TransmitReceive+0x3c2>
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376a:	d102      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x3c8>
 800376c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e02c      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	f47f af55 	bne.w	800363c <HAL_SPI_TransmitReceive+0x292>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	f47f af4e 	bne.w	800363c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037a0:	6a3a      	ldr	r2, [r7, #32]
 80037a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f995 	bl	8003ad4 <SPI_EndRxTxTransaction>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e00e      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80037de:	2300      	movs	r3, #0
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3728      	adds	r7, #40	@ 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f8:	f7fd fc76 	bl	80010e8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	4413      	add	r3, r2
 8003806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003808:	f7fd fc6e 	bl	80010e8 <HAL_GetTick>
 800380c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800380e:	4b39      	ldr	r3, [pc, #228]	@ (80038f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	015b      	lsls	r3, r3, #5
 8003814:	0d1b      	lsrs	r3, r3, #20
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800381e:	e054      	b.n	80038ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d050      	beq.n	80038ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003828:	f7fd fc5e 	bl	80010e8 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	429a      	cmp	r2, r3
 8003836:	d902      	bls.n	800383e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d13d      	bne.n	80038ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800384c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003856:	d111      	bne.n	800387c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003860:	d004      	beq.n	800386c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386a:	d107      	bne.n	800387c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003884:	d10f      	bne.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e017      	b.n	80038ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d19b      	bne.n	8003820 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000

080038f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	@ 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800390a:	f7fd fbed 	bl	80010e8 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	4413      	add	r3, r2
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800391a:	f7fd fbe5 	bl	80010e8 <HAL_GetTick>
 800391e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003928:	4b3d      	ldr	r3, [pc, #244]	@ (8003a20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	00da      	lsls	r2, r3, #3
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	0d1b      	lsrs	r3, r3, #20
 8003938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003940:	e060      	b.n	8003a04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003948:	d107      	bne.n	800395a <SPI_WaitFifoStateUntilTimeout+0x62>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003958:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d050      	beq.n	8003a04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003962:	f7fd fbc1 	bl	80010e8 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396e:	429a      	cmp	r2, r3
 8003970:	d902      	bls.n	8003978 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	2b00      	cmp	r3, #0
 8003976:	d13d      	bne.n	80039f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003986:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003990:	d111      	bne.n	80039b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800399a:	d004      	beq.n	80039a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a4:	d107      	bne.n	80039b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039be:	d10f      	bne.n	80039e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e010      	b.n	8003a16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d196      	bne.n	8003942 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3728      	adds	r7, #40	@ 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000000 	.word	0x20000000

08003a24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a38:	d111      	bne.n	8003a5e <SPI_EndRxTransaction+0x3a>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a42:	d004      	beq.n	8003a4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a4c:	d107      	bne.n	8003a5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2180      	movs	r1, #128	@ 0x80
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f7ff febd 	bl	80037e8 <SPI_WaitFlagStateUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a78:	f043 0220 	orr.w	r2, r3, #32
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e023      	b.n	8003acc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a8c:	d11d      	bne.n	8003aca <SPI_EndRxTransaction+0xa6>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a96:	d004      	beq.n	8003aa2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa0:	d113      	bne.n	8003aca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f7ff ff22 	bl	80038f8 <SPI_WaitFifoStateUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e000      	b.n	8003acc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7ff ff03 	bl	80038f8 <SPI_WaitFifoStateUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e027      	b.n	8003b58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2180      	movs	r1, #128	@ 0x80
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f7ff fe68 	bl	80037e8 <SPI_WaitFlagStateUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e014      	b.n	8003b58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f7ff fedc 	bl	80038f8 <SPI_WaitFifoStateUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4a:	f043 0220 	orr.w	r2, r3, #32
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e000      	b.n	8003b58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e049      	b.n	8003c06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f841 	bl	8003c0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f000 f8a8 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d001      	beq.n	8003c3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e047      	b.n	8003ccc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a23      	ldr	r2, [pc, #140]	@ (8003cd8 <HAL_TIM_Base_Start+0xb4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01d      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c56:	d018      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <HAL_TIM_Base_Start+0xb8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce0 <HAL_TIM_Base_Start+0xbc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce4 <HAL_TIM_Base_Start+0xc0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce8 <HAL_TIM_Base_Start+0xc4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIM_Base_Start+0x66>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a19      	ldr	r2, [pc, #100]	@ (8003cec <HAL_TIM_Base_Start+0xc8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d115      	bne.n	8003cb6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	4b17      	ldr	r3, [pc, #92]	@ (8003cf0 <HAL_TIM_Base_Start+0xcc>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b06      	cmp	r3, #6
 8003c9a:	d015      	beq.n	8003cc8 <HAL_TIM_Base_Start+0xa4>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca2:	d011      	beq.n	8003cc8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	e008      	b.n	8003cc8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0201 	orr.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e000      	b.n	8003cca <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40000400 	.word	0x40000400
 8003ce0:	40000800 	.word	0x40000800
 8003ce4:	40000c00 	.word	0x40000c00
 8003ce8:	40013400 	.word	0x40013400
 8003cec:	40014000 	.word	0x40014000
 8003cf0:	00010007 	.word	0x00010007

08003cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a46      	ldr	r2, [pc, #280]	@ (8003e20 <TIM_Base_SetConfig+0x12c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d12:	d00f      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a43      	ldr	r2, [pc, #268]	@ (8003e24 <TIM_Base_SetConfig+0x130>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00b      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a42      	ldr	r2, [pc, #264]	@ (8003e28 <TIM_Base_SetConfig+0x134>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a41      	ldr	r2, [pc, #260]	@ (8003e2c <TIM_Base_SetConfig+0x138>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a40      	ldr	r2, [pc, #256]	@ (8003e30 <TIM_Base_SetConfig+0x13c>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d108      	bne.n	8003d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a35      	ldr	r2, [pc, #212]	@ (8003e20 <TIM_Base_SetConfig+0x12c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01f      	beq.n	8003d8e <TIM_Base_SetConfig+0x9a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d54:	d01b      	beq.n	8003d8e <TIM_Base_SetConfig+0x9a>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a32      	ldr	r2, [pc, #200]	@ (8003e24 <TIM_Base_SetConfig+0x130>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d017      	beq.n	8003d8e <TIM_Base_SetConfig+0x9a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a31      	ldr	r2, [pc, #196]	@ (8003e28 <TIM_Base_SetConfig+0x134>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <TIM_Base_SetConfig+0x9a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a30      	ldr	r2, [pc, #192]	@ (8003e2c <TIM_Base_SetConfig+0x138>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00f      	beq.n	8003d8e <TIM_Base_SetConfig+0x9a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2f      	ldr	r2, [pc, #188]	@ (8003e30 <TIM_Base_SetConfig+0x13c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_Base_SetConfig+0x9a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2e      	ldr	r2, [pc, #184]	@ (8003e34 <TIM_Base_SetConfig+0x140>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0x9a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2d      	ldr	r2, [pc, #180]	@ (8003e38 <TIM_Base_SetConfig+0x144>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0x9a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2c      	ldr	r2, [pc, #176]	@ (8003e3c <TIM_Base_SetConfig+0x148>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a16      	ldr	r2, [pc, #88]	@ (8003e20 <TIM_Base_SetConfig+0x12c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00f      	beq.n	8003dec <TIM_Base_SetConfig+0xf8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a18      	ldr	r2, [pc, #96]	@ (8003e30 <TIM_Base_SetConfig+0x13c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_Base_SetConfig+0xf8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a17      	ldr	r2, [pc, #92]	@ (8003e34 <TIM_Base_SetConfig+0x140>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_Base_SetConfig+0xf8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a16      	ldr	r2, [pc, #88]	@ (8003e38 <TIM_Base_SetConfig+0x144>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0xf8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a15      	ldr	r2, [pc, #84]	@ (8003e3c <TIM_Base_SetConfig+0x148>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d103      	bne.n	8003df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d105      	bne.n	8003e12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f023 0201 	bic.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	611a      	str	r2, [r3, #16]
  }
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800
 8003e2c:	40000c00 	.word	0x40000c00
 8003e30:	40013400 	.word	0x40013400
 8003e34:	40014000 	.word	0x40014000
 8003e38:	40014400 	.word	0x40014400
 8003e3c:	40014800 	.word	0x40014800

08003e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e040      	b.n	8003ed4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fc ffcc 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	@ 0x24
 8003e6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fb6a 	bl	8004560 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f8af 	bl	8003ff0 <UART_SetConfig>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e01b      	b.n	8003ed4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fbe9 	bl	80046a4 <UART_CheckIdleState>
 8003ed2:	4603      	mov	r3, r0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	@ 0x28
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d177      	bne.n	8003fe4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_UART_Transmit+0x24>
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e070      	b.n	8003fe6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2221      	movs	r2, #33	@ 0x21
 8003f10:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f12:	f7fd f8e9 	bl	80010e8 <HAL_GetTick>
 8003f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	88fa      	ldrh	r2, [r7, #6]
 8003f1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	88fa      	ldrh	r2, [r7, #6]
 8003f24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f30:	d108      	bne.n	8003f44 <HAL_UART_Transmit+0x68>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d104      	bne.n	8003f44 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	e003      	b.n	8003f4c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f4c:	e02f      	b.n	8003fae <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2180      	movs	r1, #128	@ 0x80
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fc4b 	bl	80047f4 <UART_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d004      	beq.n	8003f6e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e03b      	b.n	8003fe6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10b      	bne.n	8003f8c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	881a      	ldrh	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f80:	b292      	uxth	r2, r2
 8003f82:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	3302      	adds	r3, #2
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	e007      	b.n	8003f9c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1c9      	bne.n	8003f4e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2140      	movs	r1, #64	@ 0x40
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fc15 	bl	80047f4 <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e005      	b.n	8003fe6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e000      	b.n	8003fe6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff4:	b08a      	sub	sp, #40	@ 0x28
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	431a      	orrs	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	431a      	orrs	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	69db      	ldr	r3, [r3, #28]
 8004014:	4313      	orrs	r3, r2
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4ba4      	ldr	r3, [pc, #656]	@ (80042b0 <UART_SetConfig+0x2c0>)
 8004020:	4013      	ands	r3, r2
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004028:	430b      	orrs	r3, r1
 800402a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a99      	ldr	r2, [pc, #612]	@ (80042b4 <UART_SetConfig+0x2c4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d004      	beq.n	800405c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004058:	4313      	orrs	r3, r2
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a90      	ldr	r2, [pc, #576]	@ (80042b8 <UART_SetConfig+0x2c8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d126      	bne.n	80040c8 <UART_SetConfig+0xd8>
 800407a:	4b90      	ldr	r3, [pc, #576]	@ (80042bc <UART_SetConfig+0x2cc>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b03      	cmp	r3, #3
 8004086:	d81b      	bhi.n	80040c0 <UART_SetConfig+0xd0>
 8004088:	a201      	add	r2, pc, #4	@ (adr r2, 8004090 <UART_SetConfig+0xa0>)
 800408a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408e:	bf00      	nop
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040b1 	.word	0x080040b1
 8004098:	080040a9 	.word	0x080040a9
 800409c:	080040b9 	.word	0x080040b9
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a6:	e116      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80040a8:	2302      	movs	r3, #2
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ae:	e112      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80040b0:	2304      	movs	r3, #4
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b6:	e10e      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80040b8:	2308      	movs	r3, #8
 80040ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040be:	e10a      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80040c0:	2310      	movs	r3, #16
 80040c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c6:	e106      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a7c      	ldr	r2, [pc, #496]	@ (80042c0 <UART_SetConfig+0x2d0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d138      	bne.n	8004144 <UART_SetConfig+0x154>
 80040d2:	4b7a      	ldr	r3, [pc, #488]	@ (80042bc <UART_SetConfig+0x2cc>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d8:	f003 030c 	and.w	r3, r3, #12
 80040dc:	2b0c      	cmp	r3, #12
 80040de:	d82d      	bhi.n	800413c <UART_SetConfig+0x14c>
 80040e0:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <UART_SetConfig+0xf8>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	0800411d 	.word	0x0800411d
 80040ec:	0800413d 	.word	0x0800413d
 80040f0:	0800413d 	.word	0x0800413d
 80040f4:	0800413d 	.word	0x0800413d
 80040f8:	0800412d 	.word	0x0800412d
 80040fc:	0800413d 	.word	0x0800413d
 8004100:	0800413d 	.word	0x0800413d
 8004104:	0800413d 	.word	0x0800413d
 8004108:	08004125 	.word	0x08004125
 800410c:	0800413d 	.word	0x0800413d
 8004110:	0800413d 	.word	0x0800413d
 8004114:	0800413d 	.word	0x0800413d
 8004118:	08004135 	.word	0x08004135
 800411c:	2300      	movs	r3, #0
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004122:	e0d8      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004124:	2302      	movs	r3, #2
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800412a:	e0d4      	b.n	80042d6 <UART_SetConfig+0x2e6>
 800412c:	2304      	movs	r3, #4
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004132:	e0d0      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004134:	2308      	movs	r3, #8
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800413a:	e0cc      	b.n	80042d6 <UART_SetConfig+0x2e6>
 800413c:	2310      	movs	r3, #16
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004142:	e0c8      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a5e      	ldr	r2, [pc, #376]	@ (80042c4 <UART_SetConfig+0x2d4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d125      	bne.n	800419a <UART_SetConfig+0x1aa>
 800414e:	4b5b      	ldr	r3, [pc, #364]	@ (80042bc <UART_SetConfig+0x2cc>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004158:	2b30      	cmp	r3, #48	@ 0x30
 800415a:	d016      	beq.n	800418a <UART_SetConfig+0x19a>
 800415c:	2b30      	cmp	r3, #48	@ 0x30
 800415e:	d818      	bhi.n	8004192 <UART_SetConfig+0x1a2>
 8004160:	2b20      	cmp	r3, #32
 8004162:	d00a      	beq.n	800417a <UART_SetConfig+0x18a>
 8004164:	2b20      	cmp	r3, #32
 8004166:	d814      	bhi.n	8004192 <UART_SetConfig+0x1a2>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <UART_SetConfig+0x182>
 800416c:	2b10      	cmp	r3, #16
 800416e:	d008      	beq.n	8004182 <UART_SetConfig+0x192>
 8004170:	e00f      	b.n	8004192 <UART_SetConfig+0x1a2>
 8004172:	2300      	movs	r3, #0
 8004174:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004178:	e0ad      	b.n	80042d6 <UART_SetConfig+0x2e6>
 800417a:	2302      	movs	r3, #2
 800417c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004180:	e0a9      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004182:	2304      	movs	r3, #4
 8004184:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004188:	e0a5      	b.n	80042d6 <UART_SetConfig+0x2e6>
 800418a:	2308      	movs	r3, #8
 800418c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004190:	e0a1      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004192:	2310      	movs	r3, #16
 8004194:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004198:	e09d      	b.n	80042d6 <UART_SetConfig+0x2e6>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a4a      	ldr	r2, [pc, #296]	@ (80042c8 <UART_SetConfig+0x2d8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d125      	bne.n	80041f0 <UART_SetConfig+0x200>
 80041a4:	4b45      	ldr	r3, [pc, #276]	@ (80042bc <UART_SetConfig+0x2cc>)
 80041a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80041b0:	d016      	beq.n	80041e0 <UART_SetConfig+0x1f0>
 80041b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80041b4:	d818      	bhi.n	80041e8 <UART_SetConfig+0x1f8>
 80041b6:	2b80      	cmp	r3, #128	@ 0x80
 80041b8:	d00a      	beq.n	80041d0 <UART_SetConfig+0x1e0>
 80041ba:	2b80      	cmp	r3, #128	@ 0x80
 80041bc:	d814      	bhi.n	80041e8 <UART_SetConfig+0x1f8>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <UART_SetConfig+0x1d8>
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	d008      	beq.n	80041d8 <UART_SetConfig+0x1e8>
 80041c6:	e00f      	b.n	80041e8 <UART_SetConfig+0x1f8>
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ce:	e082      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80041d0:	2302      	movs	r3, #2
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041d6:	e07e      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80041d8:	2304      	movs	r3, #4
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041de:	e07a      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80041e0:	2308      	movs	r3, #8
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041e6:	e076      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80041e8:	2310      	movs	r3, #16
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ee:	e072      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a35      	ldr	r2, [pc, #212]	@ (80042cc <UART_SetConfig+0x2dc>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d12a      	bne.n	8004250 <UART_SetConfig+0x260>
 80041fa:	4b30      	ldr	r3, [pc, #192]	@ (80042bc <UART_SetConfig+0x2cc>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004208:	d01a      	beq.n	8004240 <UART_SetConfig+0x250>
 800420a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800420e:	d81b      	bhi.n	8004248 <UART_SetConfig+0x258>
 8004210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004214:	d00c      	beq.n	8004230 <UART_SetConfig+0x240>
 8004216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800421a:	d815      	bhi.n	8004248 <UART_SetConfig+0x258>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <UART_SetConfig+0x238>
 8004220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004224:	d008      	beq.n	8004238 <UART_SetConfig+0x248>
 8004226:	e00f      	b.n	8004248 <UART_SetConfig+0x258>
 8004228:	2300      	movs	r3, #0
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422e:	e052      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004230:	2302      	movs	r3, #2
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004236:	e04e      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004238:	2304      	movs	r3, #4
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800423e:	e04a      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004240:	2308      	movs	r3, #8
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004246:	e046      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004248:	2310      	movs	r3, #16
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800424e:	e042      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a17      	ldr	r2, [pc, #92]	@ (80042b4 <UART_SetConfig+0x2c4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d13a      	bne.n	80042d0 <UART_SetConfig+0x2e0>
 800425a:	4b18      	ldr	r3, [pc, #96]	@ (80042bc <UART_SetConfig+0x2cc>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004260:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004264:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004268:	d01a      	beq.n	80042a0 <UART_SetConfig+0x2b0>
 800426a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800426e:	d81b      	bhi.n	80042a8 <UART_SetConfig+0x2b8>
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004274:	d00c      	beq.n	8004290 <UART_SetConfig+0x2a0>
 8004276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800427a:	d815      	bhi.n	80042a8 <UART_SetConfig+0x2b8>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <UART_SetConfig+0x298>
 8004280:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004284:	d008      	beq.n	8004298 <UART_SetConfig+0x2a8>
 8004286:	e00f      	b.n	80042a8 <UART_SetConfig+0x2b8>
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428e:	e022      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004290:	2302      	movs	r3, #2
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004296:	e01e      	b.n	80042d6 <UART_SetConfig+0x2e6>
 8004298:	2304      	movs	r3, #4
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429e:	e01a      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80042a0:	2308      	movs	r3, #8
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a6:	e016      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80042a8:	2310      	movs	r3, #16
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ae:	e012      	b.n	80042d6 <UART_SetConfig+0x2e6>
 80042b0:	efff69f3 	.word	0xefff69f3
 80042b4:	40008000 	.word	0x40008000
 80042b8:	40013800 	.word	0x40013800
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40004400 	.word	0x40004400
 80042c4:	40004800 	.word	0x40004800
 80042c8:	40004c00 	.word	0x40004c00
 80042cc:	40005000 	.word	0x40005000
 80042d0:	2310      	movs	r3, #16
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a9f      	ldr	r2, [pc, #636]	@ (8004558 <UART_SetConfig+0x568>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d17a      	bne.n	80043d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d824      	bhi.n	8004332 <UART_SetConfig+0x342>
 80042e8:	a201      	add	r2, pc, #4	@ (adr r2, 80042f0 <UART_SetConfig+0x300>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004315 	.word	0x08004315
 80042f4:	08004333 	.word	0x08004333
 80042f8:	0800431d 	.word	0x0800431d
 80042fc:	08004333 	.word	0x08004333
 8004300:	08004323 	.word	0x08004323
 8004304:	08004333 	.word	0x08004333
 8004308:	08004333 	.word	0x08004333
 800430c:	08004333 	.word	0x08004333
 8004310:	0800432b 	.word	0x0800432b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004314:	f7fd ffb0 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 8004318:	61f8      	str	r0, [r7, #28]
        break;
 800431a:	e010      	b.n	800433e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800431c:	4b8f      	ldr	r3, [pc, #572]	@ (800455c <UART_SetConfig+0x56c>)
 800431e:	61fb      	str	r3, [r7, #28]
        break;
 8004320:	e00d      	b.n	800433e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004322:	f7fd ff11 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8004326:	61f8      	str	r0, [r7, #28]
        break;
 8004328:	e009      	b.n	800433e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800432e:	61fb      	str	r3, [r7, #28]
        break;
 8004330:	e005      	b.n	800433e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800433c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 80fb 	beq.w	800453c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	4413      	add	r3, r2
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	429a      	cmp	r2, r3
 8004354:	d305      	bcc.n	8004362 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	429a      	cmp	r2, r3
 8004360:	d903      	bls.n	800436a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004368:	e0e8      	b.n	800453c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	2200      	movs	r2, #0
 800436e:	461c      	mov	r4, r3
 8004370:	4615      	mov	r5, r2
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	022b      	lsls	r3, r5, #8
 800437c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004380:	0222      	lsls	r2, r4, #8
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	6849      	ldr	r1, [r1, #4]
 8004386:	0849      	lsrs	r1, r1, #1
 8004388:	2000      	movs	r0, #0
 800438a:	4688      	mov	r8, r1
 800438c:	4681      	mov	r9, r0
 800438e:	eb12 0a08 	adds.w	sl, r2, r8
 8004392:	eb43 0b09 	adc.w	fp, r3, r9
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043a4:	4650      	mov	r0, sl
 80043a6:	4659      	mov	r1, fp
 80043a8:	f7fb ff6a 	bl	8000280 <__aeabi_uldivmod>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4613      	mov	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ba:	d308      	bcc.n	80043ce <UART_SetConfig+0x3de>
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c2:	d204      	bcs.n	80043ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	60da      	str	r2, [r3, #12]
 80043cc:	e0b6      	b.n	800453c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043d4:	e0b2      	b.n	800453c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043de:	d15e      	bne.n	800449e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80043e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d828      	bhi.n	800443a <UART_SetConfig+0x44a>
 80043e8:	a201      	add	r2, pc, #4	@ (adr r2, 80043f0 <UART_SetConfig+0x400>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004415 	.word	0x08004415
 80043f4:	0800441d 	.word	0x0800441d
 80043f8:	08004425 	.word	0x08004425
 80043fc:	0800443b 	.word	0x0800443b
 8004400:	0800442b 	.word	0x0800442b
 8004404:	0800443b 	.word	0x0800443b
 8004408:	0800443b 	.word	0x0800443b
 800440c:	0800443b 	.word	0x0800443b
 8004410:	08004433 	.word	0x08004433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004414:	f7fd ff30 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 8004418:	61f8      	str	r0, [r7, #28]
        break;
 800441a:	e014      	b.n	8004446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800441c:	f7fd ff42 	bl	80022a4 <HAL_RCC_GetPCLK2Freq>
 8004420:	61f8      	str	r0, [r7, #28]
        break;
 8004422:	e010      	b.n	8004446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004424:	4b4d      	ldr	r3, [pc, #308]	@ (800455c <UART_SetConfig+0x56c>)
 8004426:	61fb      	str	r3, [r7, #28]
        break;
 8004428:	e00d      	b.n	8004446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800442a:	f7fd fe8d 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 800442e:	61f8      	str	r0, [r7, #28]
        break;
 8004430:	e009      	b.n	8004446 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004436:	61fb      	str	r3, [r7, #28]
        break;
 8004438:	e005      	b.n	8004446 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d077      	beq.n	800453c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	005a      	lsls	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	441a      	add	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b0f      	cmp	r3, #15
 8004466:	d916      	bls.n	8004496 <UART_SetConfig+0x4a6>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800446e:	d212      	bcs.n	8004496 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f023 030f 	bic.w	r3, r3, #15
 8004478:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	b29b      	uxth	r3, r3
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	b29a      	uxth	r2, r3
 8004486:	8afb      	ldrh	r3, [r7, #22]
 8004488:	4313      	orrs	r3, r2
 800448a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	8afa      	ldrh	r2, [r7, #22]
 8004492:	60da      	str	r2, [r3, #12]
 8004494:	e052      	b.n	800453c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800449c:	e04e      	b.n	800453c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800449e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d827      	bhi.n	80044f6 <UART_SetConfig+0x506>
 80044a6:	a201      	add	r2, pc, #4	@ (adr r2, 80044ac <UART_SetConfig+0x4bc>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044e1 	.word	0x080044e1
 80044b8:	080044f7 	.word	0x080044f7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044f7 	.word	0x080044f7
 80044c4:	080044f7 	.word	0x080044f7
 80044c8:	080044f7 	.word	0x080044f7
 80044cc:	080044ef 	.word	0x080044ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7fd fed2 	bl	8002278 <HAL_RCC_GetPCLK1Freq>
 80044d4:	61f8      	str	r0, [r7, #28]
        break;
 80044d6:	e014      	b.n	8004502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d8:	f7fd fee4 	bl	80022a4 <HAL_RCC_GetPCLK2Freq>
 80044dc:	61f8      	str	r0, [r7, #28]
        break;
 80044de:	e010      	b.n	8004502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e0:	4b1e      	ldr	r3, [pc, #120]	@ (800455c <UART_SetConfig+0x56c>)
 80044e2:	61fb      	str	r3, [r7, #28]
        break;
 80044e4:	e00d      	b.n	8004502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044e6:	f7fd fe2f 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80044ea:	61f8      	str	r0, [r7, #28]
        break;
 80044ec:	e009      	b.n	8004502 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044f2:	61fb      	str	r3, [r7, #28]
        break;
 80044f4:	e005      	b.n	8004502 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004500:	bf00      	nop
    }

    if (pclk != 0U)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d019      	beq.n	800453c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	085a      	lsrs	r2, r3, #1
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	441a      	add	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d909      	bls.n	8004536 <UART_SetConfig+0x546>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004528:	d205      	bcs.n	8004536 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60da      	str	r2, [r3, #12]
 8004534:	e002      	b.n	800453c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004548:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800454c:	4618      	mov	r0, r3
 800454e:	3728      	adds	r7, #40	@ 0x28
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004556:	bf00      	nop
 8004558:	40008000 	.word	0x40008000
 800455c:	00f42400 	.word	0x00f42400

08004560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01a      	beq.n	8004676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800465e:	d10a      	bne.n	8004676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b098      	sub	sp, #96	@ 0x60
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046b4:	f7fc fd18 	bl	80010e8 <HAL_GetTick>
 80046b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d12e      	bne.n	8004726 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046d0:	2200      	movs	r2, #0
 80046d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f88c 	bl	80047f4 <UART_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d021      	beq.n	8004726 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004700:	647b      	str	r3, [r7, #68]	@ 0x44
 8004702:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800470e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e6      	bne.n	80046e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e062      	b.n	80047ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b04      	cmp	r3, #4
 8004732:	d149      	bne.n	80047c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004734:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f856 	bl	80047f4 <UART_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d03c      	beq.n	80047c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	623b      	str	r3, [r7, #32]
   return(result);
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800476c:	633b      	str	r3, [r7, #48]	@ 0x30
 800476e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e6      	bne.n	800474e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	e853 3f00 	ldrex	r3, [r3]
 800478e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047a0:	61fa      	str	r2, [r7, #28]
 80047a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	69b9      	ldr	r1, [r7, #24]
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	e841 2300 	strex	r3, r2, [r1]
 80047ac:	617b      	str	r3, [r7, #20]
   return(result);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1e5      	bne.n	8004780 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e011      	b.n	80047ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3758      	adds	r7, #88	@ 0x58
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004804:	e04f      	b.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d04b      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fc fc6b 	bl	80010e8 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <UART_WaitOnFlagUntilTimeout+0x30>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e04e      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	d037      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b80      	cmp	r3, #128	@ 0x80
 800483a:	d034      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b40      	cmp	r3, #64	@ 0x40
 8004840:	d031      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b08      	cmp	r3, #8
 800484e:	d110      	bne.n	8004872 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2208      	movs	r2, #8
 8004856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f838 	bl	80048ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2208      	movs	r2, #8
 8004862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e029      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004880:	d111      	bne.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800488a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f81e 	bl	80048ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e00f      	b.n	80048c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d0a0      	beq.n	8004806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b095      	sub	sp, #84	@ 0x54
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	61fb      	str	r3, [r7, #28]
   return(result);
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004928:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800492a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800492e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e5      	bne.n	8004908 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004940:	2b01      	cmp	r3, #1
 8004942:	d118      	bne.n	8004976 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	60bb      	str	r3, [r7, #8]
   return(result);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f023 0310 	bic.w	r3, r3, #16
 8004958:	647b      	str	r3, [r7, #68]	@ 0x44
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	6979      	ldr	r1, [r7, #20]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	613b      	str	r3, [r7, #16]
   return(result);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e6      	bne.n	8004944 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800498a:	bf00      	nop
 800498c:	3754      	adds	r7, #84	@ 0x54
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <siprintf>:
 8004998:	b40e      	push	{r1, r2, r3}
 800499a:	b510      	push	{r4, lr}
 800499c:	b09d      	sub	sp, #116	@ 0x74
 800499e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80049a0:	9002      	str	r0, [sp, #8]
 80049a2:	9006      	str	r0, [sp, #24]
 80049a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049a8:	480a      	ldr	r0, [pc, #40]	@ (80049d4 <siprintf+0x3c>)
 80049aa:	9107      	str	r1, [sp, #28]
 80049ac:	9104      	str	r1, [sp, #16]
 80049ae:	490a      	ldr	r1, [pc, #40]	@ (80049d8 <siprintf+0x40>)
 80049b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80049b4:	9105      	str	r1, [sp, #20]
 80049b6:	2400      	movs	r4, #0
 80049b8:	a902      	add	r1, sp, #8
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80049c0:	f000 f994 	bl	8004cec <_svfiprintf_r>
 80049c4:	9b02      	ldr	r3, [sp, #8]
 80049c6:	701c      	strb	r4, [r3, #0]
 80049c8:	b01d      	add	sp, #116	@ 0x74
 80049ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ce:	b003      	add	sp, #12
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	2000000c 	.word	0x2000000c
 80049d8:	ffff0208 	.word	0xffff0208

080049dc <memset>:
 80049dc:	4402      	add	r2, r0
 80049de:	4603      	mov	r3, r0
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d100      	bne.n	80049e6 <memset+0xa>
 80049e4:	4770      	bx	lr
 80049e6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ea:	e7f9      	b.n	80049e0 <memset+0x4>

080049ec <__errno>:
 80049ec:	4b01      	ldr	r3, [pc, #4]	@ (80049f4 <__errno+0x8>)
 80049ee:	6818      	ldr	r0, [r3, #0]
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	2000000c 	.word	0x2000000c

080049f8 <__libc_init_array>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004a30 <__libc_init_array+0x38>)
 80049fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004a34 <__libc_init_array+0x3c>)
 80049fe:	1b64      	subs	r4, r4, r5
 8004a00:	10a4      	asrs	r4, r4, #2
 8004a02:	2600      	movs	r6, #0
 8004a04:	42a6      	cmp	r6, r4
 8004a06:	d109      	bne.n	8004a1c <__libc_init_array+0x24>
 8004a08:	4d0b      	ldr	r5, [pc, #44]	@ (8004a38 <__libc_init_array+0x40>)
 8004a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8004a3c <__libc_init_array+0x44>)
 8004a0c:	f000 fc64 	bl	80052d8 <_init>
 8004a10:	1b64      	subs	r4, r4, r5
 8004a12:	10a4      	asrs	r4, r4, #2
 8004a14:	2600      	movs	r6, #0
 8004a16:	42a6      	cmp	r6, r4
 8004a18:	d105      	bne.n	8004a26 <__libc_init_array+0x2e>
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
 8004a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a20:	4798      	blx	r3
 8004a22:	3601      	adds	r6, #1
 8004a24:	e7ee      	b.n	8004a04 <__libc_init_array+0xc>
 8004a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2a:	4798      	blx	r3
 8004a2c:	3601      	adds	r6, #1
 8004a2e:	e7f2      	b.n	8004a16 <__libc_init_array+0x1e>
 8004a30:	080053d8 	.word	0x080053d8
 8004a34:	080053d8 	.word	0x080053d8
 8004a38:	080053d8 	.word	0x080053d8
 8004a3c:	080053dc 	.word	0x080053dc

08004a40 <__retarget_lock_acquire_recursive>:
 8004a40:	4770      	bx	lr

08004a42 <__retarget_lock_release_recursive>:
 8004a42:	4770      	bx	lr

08004a44 <_free_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4605      	mov	r5, r0
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d041      	beq.n	8004ad0 <_free_r+0x8c>
 8004a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a50:	1f0c      	subs	r4, r1, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bfb8      	it	lt
 8004a56:	18e4      	addlt	r4, r4, r3
 8004a58:	f000 f8e0 	bl	8004c1c <__malloc_lock>
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad4 <_free_r+0x90>)
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	b933      	cbnz	r3, 8004a70 <_free_r+0x2c>
 8004a62:	6063      	str	r3, [r4, #4]
 8004a64:	6014      	str	r4, [r2, #0]
 8004a66:	4628      	mov	r0, r5
 8004a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a6c:	f000 b8dc 	b.w	8004c28 <__malloc_unlock>
 8004a70:	42a3      	cmp	r3, r4
 8004a72:	d908      	bls.n	8004a86 <_free_r+0x42>
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	1821      	adds	r1, r4, r0
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	bf01      	itttt	eq
 8004a7c:	6819      	ldreq	r1, [r3, #0]
 8004a7e:	685b      	ldreq	r3, [r3, #4]
 8004a80:	1809      	addeq	r1, r1, r0
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	e7ed      	b.n	8004a62 <_free_r+0x1e>
 8004a86:	461a      	mov	r2, r3
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	b10b      	cbz	r3, 8004a90 <_free_r+0x4c>
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	d9fa      	bls.n	8004a86 <_free_r+0x42>
 8004a90:	6811      	ldr	r1, [r2, #0]
 8004a92:	1850      	adds	r0, r2, r1
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d10b      	bne.n	8004ab0 <_free_r+0x6c>
 8004a98:	6820      	ldr	r0, [r4, #0]
 8004a9a:	4401      	add	r1, r0
 8004a9c:	1850      	adds	r0, r2, r1
 8004a9e:	4283      	cmp	r3, r0
 8004aa0:	6011      	str	r1, [r2, #0]
 8004aa2:	d1e0      	bne.n	8004a66 <_free_r+0x22>
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	6053      	str	r3, [r2, #4]
 8004aaa:	4408      	add	r0, r1
 8004aac:	6010      	str	r0, [r2, #0]
 8004aae:	e7da      	b.n	8004a66 <_free_r+0x22>
 8004ab0:	d902      	bls.n	8004ab8 <_free_r+0x74>
 8004ab2:	230c      	movs	r3, #12
 8004ab4:	602b      	str	r3, [r5, #0]
 8004ab6:	e7d6      	b.n	8004a66 <_free_r+0x22>
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	1821      	adds	r1, r4, r0
 8004abc:	428b      	cmp	r3, r1
 8004abe:	bf04      	itt	eq
 8004ac0:	6819      	ldreq	r1, [r3, #0]
 8004ac2:	685b      	ldreq	r3, [r3, #4]
 8004ac4:	6063      	str	r3, [r4, #4]
 8004ac6:	bf04      	itt	eq
 8004ac8:	1809      	addeq	r1, r1, r0
 8004aca:	6021      	streq	r1, [r4, #0]
 8004acc:	6054      	str	r4, [r2, #4]
 8004ace:	e7ca      	b.n	8004a66 <_free_r+0x22>
 8004ad0:	bd38      	pop	{r3, r4, r5, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000380 	.word	0x20000380

08004ad8 <sbrk_aligned>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	4e0f      	ldr	r6, [pc, #60]	@ (8004b18 <sbrk_aligned+0x40>)
 8004adc:	460c      	mov	r4, r1
 8004ade:	6831      	ldr	r1, [r6, #0]
 8004ae0:	4605      	mov	r5, r0
 8004ae2:	b911      	cbnz	r1, 8004aea <sbrk_aligned+0x12>
 8004ae4:	f000 fba4 	bl	8005230 <_sbrk_r>
 8004ae8:	6030      	str	r0, [r6, #0]
 8004aea:	4621      	mov	r1, r4
 8004aec:	4628      	mov	r0, r5
 8004aee:	f000 fb9f 	bl	8005230 <_sbrk_r>
 8004af2:	1c43      	adds	r3, r0, #1
 8004af4:	d103      	bne.n	8004afe <sbrk_aligned+0x26>
 8004af6:	f04f 34ff 	mov.w	r4, #4294967295
 8004afa:	4620      	mov	r0, r4
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
 8004afe:	1cc4      	adds	r4, r0, #3
 8004b00:	f024 0403 	bic.w	r4, r4, #3
 8004b04:	42a0      	cmp	r0, r4
 8004b06:	d0f8      	beq.n	8004afa <sbrk_aligned+0x22>
 8004b08:	1a21      	subs	r1, r4, r0
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 fb90 	bl	8005230 <_sbrk_r>
 8004b10:	3001      	adds	r0, #1
 8004b12:	d1f2      	bne.n	8004afa <sbrk_aligned+0x22>
 8004b14:	e7ef      	b.n	8004af6 <sbrk_aligned+0x1e>
 8004b16:	bf00      	nop
 8004b18:	2000037c 	.word	0x2000037c

08004b1c <_malloc_r>:
 8004b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b20:	1ccd      	adds	r5, r1, #3
 8004b22:	f025 0503 	bic.w	r5, r5, #3
 8004b26:	3508      	adds	r5, #8
 8004b28:	2d0c      	cmp	r5, #12
 8004b2a:	bf38      	it	cc
 8004b2c:	250c      	movcc	r5, #12
 8004b2e:	2d00      	cmp	r5, #0
 8004b30:	4606      	mov	r6, r0
 8004b32:	db01      	blt.n	8004b38 <_malloc_r+0x1c>
 8004b34:	42a9      	cmp	r1, r5
 8004b36:	d904      	bls.n	8004b42 <_malloc_r+0x26>
 8004b38:	230c      	movs	r3, #12
 8004b3a:	6033      	str	r3, [r6, #0]
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c18 <_malloc_r+0xfc>
 8004b46:	f000 f869 	bl	8004c1c <__malloc_lock>
 8004b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b4e:	461c      	mov	r4, r3
 8004b50:	bb44      	cbnz	r4, 8004ba4 <_malloc_r+0x88>
 8004b52:	4629      	mov	r1, r5
 8004b54:	4630      	mov	r0, r6
 8004b56:	f7ff ffbf 	bl	8004ad8 <sbrk_aligned>
 8004b5a:	1c43      	adds	r3, r0, #1
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	d158      	bne.n	8004c12 <_malloc_r+0xf6>
 8004b60:	f8d8 4000 	ldr.w	r4, [r8]
 8004b64:	4627      	mov	r7, r4
 8004b66:	2f00      	cmp	r7, #0
 8004b68:	d143      	bne.n	8004bf2 <_malloc_r+0xd6>
 8004b6a:	2c00      	cmp	r4, #0
 8004b6c:	d04b      	beq.n	8004c06 <_malloc_r+0xea>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	4639      	mov	r1, r7
 8004b72:	4630      	mov	r0, r6
 8004b74:	eb04 0903 	add.w	r9, r4, r3
 8004b78:	f000 fb5a 	bl	8005230 <_sbrk_r>
 8004b7c:	4581      	cmp	r9, r0
 8004b7e:	d142      	bne.n	8004c06 <_malloc_r+0xea>
 8004b80:	6821      	ldr	r1, [r4, #0]
 8004b82:	1a6d      	subs	r5, r5, r1
 8004b84:	4629      	mov	r1, r5
 8004b86:	4630      	mov	r0, r6
 8004b88:	f7ff ffa6 	bl	8004ad8 <sbrk_aligned>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d03a      	beq.n	8004c06 <_malloc_r+0xea>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	442b      	add	r3, r5
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	bb62      	cbnz	r2, 8004bf8 <_malloc_r+0xdc>
 8004b9e:	f8c8 7000 	str.w	r7, [r8]
 8004ba2:	e00f      	b.n	8004bc4 <_malloc_r+0xa8>
 8004ba4:	6822      	ldr	r2, [r4, #0]
 8004ba6:	1b52      	subs	r2, r2, r5
 8004ba8:	d420      	bmi.n	8004bec <_malloc_r+0xd0>
 8004baa:	2a0b      	cmp	r2, #11
 8004bac:	d917      	bls.n	8004bde <_malloc_r+0xc2>
 8004bae:	1961      	adds	r1, r4, r5
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	6025      	str	r5, [r4, #0]
 8004bb4:	bf18      	it	ne
 8004bb6:	6059      	strne	r1, [r3, #4]
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	bf08      	it	eq
 8004bbc:	f8c8 1000 	streq.w	r1, [r8]
 8004bc0:	5162      	str	r2, [r4, r5]
 8004bc2:	604b      	str	r3, [r1, #4]
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f000 f82f 	bl	8004c28 <__malloc_unlock>
 8004bca:	f104 000b 	add.w	r0, r4, #11
 8004bce:	1d23      	adds	r3, r4, #4
 8004bd0:	f020 0007 	bic.w	r0, r0, #7
 8004bd4:	1ac2      	subs	r2, r0, r3
 8004bd6:	bf1c      	itt	ne
 8004bd8:	1a1b      	subne	r3, r3, r0
 8004bda:	50a3      	strne	r3, [r4, r2]
 8004bdc:	e7af      	b.n	8004b3e <_malloc_r+0x22>
 8004bde:	6862      	ldr	r2, [r4, #4]
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	bf0c      	ite	eq
 8004be4:	f8c8 2000 	streq.w	r2, [r8]
 8004be8:	605a      	strne	r2, [r3, #4]
 8004bea:	e7eb      	b.n	8004bc4 <_malloc_r+0xa8>
 8004bec:	4623      	mov	r3, r4
 8004bee:	6864      	ldr	r4, [r4, #4]
 8004bf0:	e7ae      	b.n	8004b50 <_malloc_r+0x34>
 8004bf2:	463c      	mov	r4, r7
 8004bf4:	687f      	ldr	r7, [r7, #4]
 8004bf6:	e7b6      	b.n	8004b66 <_malloc_r+0x4a>
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	d1fb      	bne.n	8004bf8 <_malloc_r+0xdc>
 8004c00:	2300      	movs	r3, #0
 8004c02:	6053      	str	r3, [r2, #4]
 8004c04:	e7de      	b.n	8004bc4 <_malloc_r+0xa8>
 8004c06:	230c      	movs	r3, #12
 8004c08:	6033      	str	r3, [r6, #0]
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 f80c 	bl	8004c28 <__malloc_unlock>
 8004c10:	e794      	b.n	8004b3c <_malloc_r+0x20>
 8004c12:	6005      	str	r5, [r0, #0]
 8004c14:	e7d6      	b.n	8004bc4 <_malloc_r+0xa8>
 8004c16:	bf00      	nop
 8004c18:	20000380 	.word	0x20000380

08004c1c <__malloc_lock>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	@ (8004c24 <__malloc_lock+0x8>)
 8004c1e:	f7ff bf0f 	b.w	8004a40 <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	20000378 	.word	0x20000378

08004c28 <__malloc_unlock>:
 8004c28:	4801      	ldr	r0, [pc, #4]	@ (8004c30 <__malloc_unlock+0x8>)
 8004c2a:	f7ff bf0a 	b.w	8004a42 <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000378 	.word	0x20000378

08004c34 <__ssputs_r>:
 8004c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c38:	688e      	ldr	r6, [r1, #8]
 8004c3a:	461f      	mov	r7, r3
 8004c3c:	42be      	cmp	r6, r7
 8004c3e:	680b      	ldr	r3, [r1, #0]
 8004c40:	4682      	mov	sl, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	4690      	mov	r8, r2
 8004c46:	d82d      	bhi.n	8004ca4 <__ssputs_r+0x70>
 8004c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c50:	d026      	beq.n	8004ca0 <__ssputs_r+0x6c>
 8004c52:	6965      	ldr	r5, [r4, #20]
 8004c54:	6909      	ldr	r1, [r1, #16]
 8004c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c5a:	eba3 0901 	sub.w	r9, r3, r1
 8004c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c62:	1c7b      	adds	r3, r7, #1
 8004c64:	444b      	add	r3, r9
 8004c66:	106d      	asrs	r5, r5, #1
 8004c68:	429d      	cmp	r5, r3
 8004c6a:	bf38      	it	cc
 8004c6c:	461d      	movcc	r5, r3
 8004c6e:	0553      	lsls	r3, r2, #21
 8004c70:	d527      	bpl.n	8004cc2 <__ssputs_r+0x8e>
 8004c72:	4629      	mov	r1, r5
 8004c74:	f7ff ff52 	bl	8004b1c <_malloc_r>
 8004c78:	4606      	mov	r6, r0
 8004c7a:	b360      	cbz	r0, 8004cd6 <__ssputs_r+0xa2>
 8004c7c:	6921      	ldr	r1, [r4, #16]
 8004c7e:	464a      	mov	r2, r9
 8004c80:	f000 fae6 	bl	8005250 <memcpy>
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8e:	81a3      	strh	r3, [r4, #12]
 8004c90:	6126      	str	r6, [r4, #16]
 8004c92:	6165      	str	r5, [r4, #20]
 8004c94:	444e      	add	r6, r9
 8004c96:	eba5 0509 	sub.w	r5, r5, r9
 8004c9a:	6026      	str	r6, [r4, #0]
 8004c9c:	60a5      	str	r5, [r4, #8]
 8004c9e:	463e      	mov	r6, r7
 8004ca0:	42be      	cmp	r6, r7
 8004ca2:	d900      	bls.n	8004ca6 <__ssputs_r+0x72>
 8004ca4:	463e      	mov	r6, r7
 8004ca6:	6820      	ldr	r0, [r4, #0]
 8004ca8:	4632      	mov	r2, r6
 8004caa:	4641      	mov	r1, r8
 8004cac:	f000 faa6 	bl	80051fc <memmove>
 8004cb0:	68a3      	ldr	r3, [r4, #8]
 8004cb2:	1b9b      	subs	r3, r3, r6
 8004cb4:	60a3      	str	r3, [r4, #8]
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	4433      	add	r3, r6
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc2:	462a      	mov	r2, r5
 8004cc4:	f000 fad2 	bl	800526c <_realloc_r>
 8004cc8:	4606      	mov	r6, r0
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d1e0      	bne.n	8004c90 <__ssputs_r+0x5c>
 8004cce:	6921      	ldr	r1, [r4, #16]
 8004cd0:	4650      	mov	r0, sl
 8004cd2:	f7ff feb7 	bl	8004a44 <_free_r>
 8004cd6:	230c      	movs	r3, #12
 8004cd8:	f8ca 3000 	str.w	r3, [sl]
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	e7e9      	b.n	8004cbe <__ssputs_r+0x8a>
	...

08004cec <_svfiprintf_r>:
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	4698      	mov	r8, r3
 8004cf2:	898b      	ldrh	r3, [r1, #12]
 8004cf4:	061b      	lsls	r3, r3, #24
 8004cf6:	b09d      	sub	sp, #116	@ 0x74
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	460d      	mov	r5, r1
 8004cfc:	4614      	mov	r4, r2
 8004cfe:	d510      	bpl.n	8004d22 <_svfiprintf_r+0x36>
 8004d00:	690b      	ldr	r3, [r1, #16]
 8004d02:	b973      	cbnz	r3, 8004d22 <_svfiprintf_r+0x36>
 8004d04:	2140      	movs	r1, #64	@ 0x40
 8004d06:	f7ff ff09 	bl	8004b1c <_malloc_r>
 8004d0a:	6028      	str	r0, [r5, #0]
 8004d0c:	6128      	str	r0, [r5, #16]
 8004d0e:	b930      	cbnz	r0, 8004d1e <_svfiprintf_r+0x32>
 8004d10:	230c      	movs	r3, #12
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	b01d      	add	sp, #116	@ 0x74
 8004d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1e:	2340      	movs	r3, #64	@ 0x40
 8004d20:	616b      	str	r3, [r5, #20]
 8004d22:	2300      	movs	r3, #0
 8004d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d26:	2320      	movs	r3, #32
 8004d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d30:	2330      	movs	r3, #48	@ 0x30
 8004d32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ed0 <_svfiprintf_r+0x1e4>
 8004d36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d3a:	f04f 0901 	mov.w	r9, #1
 8004d3e:	4623      	mov	r3, r4
 8004d40:	469a      	mov	sl, r3
 8004d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d46:	b10a      	cbz	r2, 8004d4c <_svfiprintf_r+0x60>
 8004d48:	2a25      	cmp	r2, #37	@ 0x25
 8004d4a:	d1f9      	bne.n	8004d40 <_svfiprintf_r+0x54>
 8004d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d50:	d00b      	beq.n	8004d6a <_svfiprintf_r+0x7e>
 8004d52:	465b      	mov	r3, fp
 8004d54:	4622      	mov	r2, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	4638      	mov	r0, r7
 8004d5a:	f7ff ff6b 	bl	8004c34 <__ssputs_r>
 8004d5e:	3001      	adds	r0, #1
 8004d60:	f000 80a7 	beq.w	8004eb2 <_svfiprintf_r+0x1c6>
 8004d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d66:	445a      	add	r2, fp
 8004d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 809f 	beq.w	8004eb2 <_svfiprintf_r+0x1c6>
 8004d74:	2300      	movs	r3, #0
 8004d76:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d7e:	f10a 0a01 	add.w	sl, sl, #1
 8004d82:	9304      	str	r3, [sp, #16]
 8004d84:	9307      	str	r3, [sp, #28]
 8004d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d8c:	4654      	mov	r4, sl
 8004d8e:	2205      	movs	r2, #5
 8004d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d94:	484e      	ldr	r0, [pc, #312]	@ (8004ed0 <_svfiprintf_r+0x1e4>)
 8004d96:	f7fb fa23 	bl	80001e0 <memchr>
 8004d9a:	9a04      	ldr	r2, [sp, #16]
 8004d9c:	b9d8      	cbnz	r0, 8004dd6 <_svfiprintf_r+0xea>
 8004d9e:	06d0      	lsls	r0, r2, #27
 8004da0:	bf44      	itt	mi
 8004da2:	2320      	movmi	r3, #32
 8004da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004da8:	0711      	lsls	r1, r2, #28
 8004daa:	bf44      	itt	mi
 8004dac:	232b      	movmi	r3, #43	@ 0x2b
 8004dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004db2:	f89a 3000 	ldrb.w	r3, [sl]
 8004db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004db8:	d015      	beq.n	8004de6 <_svfiprintf_r+0xfa>
 8004dba:	9a07      	ldr	r2, [sp, #28]
 8004dbc:	4654      	mov	r4, sl
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	f04f 0c0a 	mov.w	ip, #10
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dca:	3b30      	subs	r3, #48	@ 0x30
 8004dcc:	2b09      	cmp	r3, #9
 8004dce:	d94b      	bls.n	8004e68 <_svfiprintf_r+0x17c>
 8004dd0:	b1b0      	cbz	r0, 8004e00 <_svfiprintf_r+0x114>
 8004dd2:	9207      	str	r2, [sp, #28]
 8004dd4:	e014      	b.n	8004e00 <_svfiprintf_r+0x114>
 8004dd6:	eba0 0308 	sub.w	r3, r0, r8
 8004dda:	fa09 f303 	lsl.w	r3, r9, r3
 8004dde:	4313      	orrs	r3, r2
 8004de0:	9304      	str	r3, [sp, #16]
 8004de2:	46a2      	mov	sl, r4
 8004de4:	e7d2      	b.n	8004d8c <_svfiprintf_r+0xa0>
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	1d19      	adds	r1, r3, #4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	9103      	str	r1, [sp, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfbb      	ittet	lt
 8004df2:	425b      	neglt	r3, r3
 8004df4:	f042 0202 	orrlt.w	r2, r2, #2
 8004df8:	9307      	strge	r3, [sp, #28]
 8004dfa:	9307      	strlt	r3, [sp, #28]
 8004dfc:	bfb8      	it	lt
 8004dfe:	9204      	strlt	r2, [sp, #16]
 8004e00:	7823      	ldrb	r3, [r4, #0]
 8004e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e04:	d10a      	bne.n	8004e1c <_svfiprintf_r+0x130>
 8004e06:	7863      	ldrb	r3, [r4, #1]
 8004e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e0a:	d132      	bne.n	8004e72 <_svfiprintf_r+0x186>
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	1d1a      	adds	r2, r3, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	9203      	str	r2, [sp, #12]
 8004e14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e18:	3402      	adds	r4, #2
 8004e1a:	9305      	str	r3, [sp, #20]
 8004e1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ee0 <_svfiprintf_r+0x1f4>
 8004e20:	7821      	ldrb	r1, [r4, #0]
 8004e22:	2203      	movs	r2, #3
 8004e24:	4650      	mov	r0, sl
 8004e26:	f7fb f9db 	bl	80001e0 <memchr>
 8004e2a:	b138      	cbz	r0, 8004e3c <_svfiprintf_r+0x150>
 8004e2c:	9b04      	ldr	r3, [sp, #16]
 8004e2e:	eba0 000a 	sub.w	r0, r0, sl
 8004e32:	2240      	movs	r2, #64	@ 0x40
 8004e34:	4082      	lsls	r2, r0
 8004e36:	4313      	orrs	r3, r2
 8004e38:	3401      	adds	r4, #1
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e40:	4824      	ldr	r0, [pc, #144]	@ (8004ed4 <_svfiprintf_r+0x1e8>)
 8004e42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e46:	2206      	movs	r2, #6
 8004e48:	f7fb f9ca 	bl	80001e0 <memchr>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d036      	beq.n	8004ebe <_svfiprintf_r+0x1d2>
 8004e50:	4b21      	ldr	r3, [pc, #132]	@ (8004ed8 <_svfiprintf_r+0x1ec>)
 8004e52:	bb1b      	cbnz	r3, 8004e9c <_svfiprintf_r+0x1b0>
 8004e54:	9b03      	ldr	r3, [sp, #12]
 8004e56:	3307      	adds	r3, #7
 8004e58:	f023 0307 	bic.w	r3, r3, #7
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	9303      	str	r3, [sp, #12]
 8004e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e62:	4433      	add	r3, r6
 8004e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e66:	e76a      	b.n	8004d3e <_svfiprintf_r+0x52>
 8004e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	2001      	movs	r0, #1
 8004e70:	e7a8      	b.n	8004dc4 <_svfiprintf_r+0xd8>
 8004e72:	2300      	movs	r3, #0
 8004e74:	3401      	adds	r4, #1
 8004e76:	9305      	str	r3, [sp, #20]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f04f 0c0a 	mov.w	ip, #10
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e84:	3a30      	subs	r2, #48	@ 0x30
 8004e86:	2a09      	cmp	r2, #9
 8004e88:	d903      	bls.n	8004e92 <_svfiprintf_r+0x1a6>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0c6      	beq.n	8004e1c <_svfiprintf_r+0x130>
 8004e8e:	9105      	str	r1, [sp, #20]
 8004e90:	e7c4      	b.n	8004e1c <_svfiprintf_r+0x130>
 8004e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e96:	4604      	mov	r4, r0
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e7f0      	b.n	8004e7e <_svfiprintf_r+0x192>
 8004e9c:	ab03      	add	r3, sp, #12
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	462a      	mov	r2, r5
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8004edc <_svfiprintf_r+0x1f0>)
 8004ea4:	a904      	add	r1, sp, #16
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	f3af 8000 	nop.w
 8004eac:	1c42      	adds	r2, r0, #1
 8004eae:	4606      	mov	r6, r0
 8004eb0:	d1d6      	bne.n	8004e60 <_svfiprintf_r+0x174>
 8004eb2:	89ab      	ldrh	r3, [r5, #12]
 8004eb4:	065b      	lsls	r3, r3, #25
 8004eb6:	f53f af2d 	bmi.w	8004d14 <_svfiprintf_r+0x28>
 8004eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ebc:	e72c      	b.n	8004d18 <_svfiprintf_r+0x2c>
 8004ebe:	ab03      	add	r3, sp, #12
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	462a      	mov	r2, r5
 8004ec4:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <_svfiprintf_r+0x1f0>)
 8004ec6:	a904      	add	r1, sp, #16
 8004ec8:	4638      	mov	r0, r7
 8004eca:	f000 f879 	bl	8004fc0 <_printf_i>
 8004ece:	e7ed      	b.n	8004eac <_svfiprintf_r+0x1c0>
 8004ed0:	0800539c 	.word	0x0800539c
 8004ed4:	080053a6 	.word	0x080053a6
 8004ed8:	00000000 	.word	0x00000000
 8004edc:	08004c35 	.word	0x08004c35
 8004ee0:	080053a2 	.word	0x080053a2

08004ee4 <_printf_common>:
 8004ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee8:	4616      	mov	r6, r2
 8004eea:	4698      	mov	r8, r3
 8004eec:	688a      	ldr	r2, [r1, #8]
 8004eee:	690b      	ldr	r3, [r1, #16]
 8004ef0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	bfb8      	it	lt
 8004ef8:	4613      	movlt	r3, r2
 8004efa:	6033      	str	r3, [r6, #0]
 8004efc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f00:	4607      	mov	r7, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	b10a      	cbz	r2, 8004f0a <_printf_common+0x26>
 8004f06:	3301      	adds	r3, #1
 8004f08:	6033      	str	r3, [r6, #0]
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	0699      	lsls	r1, r3, #26
 8004f0e:	bf42      	ittt	mi
 8004f10:	6833      	ldrmi	r3, [r6, #0]
 8004f12:	3302      	addmi	r3, #2
 8004f14:	6033      	strmi	r3, [r6, #0]
 8004f16:	6825      	ldr	r5, [r4, #0]
 8004f18:	f015 0506 	ands.w	r5, r5, #6
 8004f1c:	d106      	bne.n	8004f2c <_printf_common+0x48>
 8004f1e:	f104 0a19 	add.w	sl, r4, #25
 8004f22:	68e3      	ldr	r3, [r4, #12]
 8004f24:	6832      	ldr	r2, [r6, #0]
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	dc26      	bgt.n	8004f7a <_printf_common+0x96>
 8004f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f30:	6822      	ldr	r2, [r4, #0]
 8004f32:	3b00      	subs	r3, #0
 8004f34:	bf18      	it	ne
 8004f36:	2301      	movne	r3, #1
 8004f38:	0692      	lsls	r2, r2, #26
 8004f3a:	d42b      	bmi.n	8004f94 <_printf_common+0xb0>
 8004f3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f40:	4641      	mov	r1, r8
 8004f42:	4638      	mov	r0, r7
 8004f44:	47c8      	blx	r9
 8004f46:	3001      	adds	r0, #1
 8004f48:	d01e      	beq.n	8004f88 <_printf_common+0xa4>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	6922      	ldr	r2, [r4, #16]
 8004f4e:	f003 0306 	and.w	r3, r3, #6
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	bf02      	ittt	eq
 8004f56:	68e5      	ldreq	r5, [r4, #12]
 8004f58:	6833      	ldreq	r3, [r6, #0]
 8004f5a:	1aed      	subeq	r5, r5, r3
 8004f5c:	68a3      	ldr	r3, [r4, #8]
 8004f5e:	bf0c      	ite	eq
 8004f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f64:	2500      	movne	r5, #0
 8004f66:	4293      	cmp	r3, r2
 8004f68:	bfc4      	itt	gt
 8004f6a:	1a9b      	subgt	r3, r3, r2
 8004f6c:	18ed      	addgt	r5, r5, r3
 8004f6e:	2600      	movs	r6, #0
 8004f70:	341a      	adds	r4, #26
 8004f72:	42b5      	cmp	r5, r6
 8004f74:	d11a      	bne.n	8004fac <_printf_common+0xc8>
 8004f76:	2000      	movs	r0, #0
 8004f78:	e008      	b.n	8004f8c <_printf_common+0xa8>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	4641      	mov	r1, r8
 8004f80:	4638      	mov	r0, r7
 8004f82:	47c8      	blx	r9
 8004f84:	3001      	adds	r0, #1
 8004f86:	d103      	bne.n	8004f90 <_printf_common+0xac>
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f90:	3501      	adds	r5, #1
 8004f92:	e7c6      	b.n	8004f22 <_printf_common+0x3e>
 8004f94:	18e1      	adds	r1, r4, r3
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	2030      	movs	r0, #48	@ 0x30
 8004f9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f9e:	4422      	add	r2, r4
 8004fa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fa8:	3302      	adds	r3, #2
 8004faa:	e7c7      	b.n	8004f3c <_printf_common+0x58>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4622      	mov	r2, r4
 8004fb0:	4641      	mov	r1, r8
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	47c8      	blx	r9
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d0e6      	beq.n	8004f88 <_printf_common+0xa4>
 8004fba:	3601      	adds	r6, #1
 8004fbc:	e7d9      	b.n	8004f72 <_printf_common+0x8e>
	...

08004fc0 <_printf_i>:
 8004fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc4:	7e0f      	ldrb	r7, [r1, #24]
 8004fc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fc8:	2f78      	cmp	r7, #120	@ 0x78
 8004fca:	4691      	mov	r9, r2
 8004fcc:	4680      	mov	r8, r0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	469a      	mov	sl, r3
 8004fd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fd6:	d807      	bhi.n	8004fe8 <_printf_i+0x28>
 8004fd8:	2f62      	cmp	r7, #98	@ 0x62
 8004fda:	d80a      	bhi.n	8004ff2 <_printf_i+0x32>
 8004fdc:	2f00      	cmp	r7, #0
 8004fde:	f000 80d1 	beq.w	8005184 <_printf_i+0x1c4>
 8004fe2:	2f58      	cmp	r7, #88	@ 0x58
 8004fe4:	f000 80b8 	beq.w	8005158 <_printf_i+0x198>
 8004fe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ff0:	e03a      	b.n	8005068 <_printf_i+0xa8>
 8004ff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ff6:	2b15      	cmp	r3, #21
 8004ff8:	d8f6      	bhi.n	8004fe8 <_printf_i+0x28>
 8004ffa:	a101      	add	r1, pc, #4	@ (adr r1, 8005000 <_printf_i+0x40>)
 8004ffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005000:	08005059 	.word	0x08005059
 8005004:	0800506d 	.word	0x0800506d
 8005008:	08004fe9 	.word	0x08004fe9
 800500c:	08004fe9 	.word	0x08004fe9
 8005010:	08004fe9 	.word	0x08004fe9
 8005014:	08004fe9 	.word	0x08004fe9
 8005018:	0800506d 	.word	0x0800506d
 800501c:	08004fe9 	.word	0x08004fe9
 8005020:	08004fe9 	.word	0x08004fe9
 8005024:	08004fe9 	.word	0x08004fe9
 8005028:	08004fe9 	.word	0x08004fe9
 800502c:	0800516b 	.word	0x0800516b
 8005030:	08005097 	.word	0x08005097
 8005034:	08005125 	.word	0x08005125
 8005038:	08004fe9 	.word	0x08004fe9
 800503c:	08004fe9 	.word	0x08004fe9
 8005040:	0800518d 	.word	0x0800518d
 8005044:	08004fe9 	.word	0x08004fe9
 8005048:	08005097 	.word	0x08005097
 800504c:	08004fe9 	.word	0x08004fe9
 8005050:	08004fe9 	.word	0x08004fe9
 8005054:	0800512d 	.word	0x0800512d
 8005058:	6833      	ldr	r3, [r6, #0]
 800505a:	1d1a      	adds	r2, r3, #4
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6032      	str	r2, [r6, #0]
 8005060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005068:	2301      	movs	r3, #1
 800506a:	e09c      	b.n	80051a6 <_printf_i+0x1e6>
 800506c:	6833      	ldr	r3, [r6, #0]
 800506e:	6820      	ldr	r0, [r4, #0]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	6031      	str	r1, [r6, #0]
 8005074:	0606      	lsls	r6, r0, #24
 8005076:	d501      	bpl.n	800507c <_printf_i+0xbc>
 8005078:	681d      	ldr	r5, [r3, #0]
 800507a:	e003      	b.n	8005084 <_printf_i+0xc4>
 800507c:	0645      	lsls	r5, r0, #25
 800507e:	d5fb      	bpl.n	8005078 <_printf_i+0xb8>
 8005080:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005084:	2d00      	cmp	r5, #0
 8005086:	da03      	bge.n	8005090 <_printf_i+0xd0>
 8005088:	232d      	movs	r3, #45	@ 0x2d
 800508a:	426d      	negs	r5, r5
 800508c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005090:	4858      	ldr	r0, [pc, #352]	@ (80051f4 <_printf_i+0x234>)
 8005092:	230a      	movs	r3, #10
 8005094:	e011      	b.n	80050ba <_printf_i+0xfa>
 8005096:	6821      	ldr	r1, [r4, #0]
 8005098:	6833      	ldr	r3, [r6, #0]
 800509a:	0608      	lsls	r0, r1, #24
 800509c:	f853 5b04 	ldr.w	r5, [r3], #4
 80050a0:	d402      	bmi.n	80050a8 <_printf_i+0xe8>
 80050a2:	0649      	lsls	r1, r1, #25
 80050a4:	bf48      	it	mi
 80050a6:	b2ad      	uxthmi	r5, r5
 80050a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050aa:	4852      	ldr	r0, [pc, #328]	@ (80051f4 <_printf_i+0x234>)
 80050ac:	6033      	str	r3, [r6, #0]
 80050ae:	bf14      	ite	ne
 80050b0:	230a      	movne	r3, #10
 80050b2:	2308      	moveq	r3, #8
 80050b4:	2100      	movs	r1, #0
 80050b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ba:	6866      	ldr	r6, [r4, #4]
 80050bc:	60a6      	str	r6, [r4, #8]
 80050be:	2e00      	cmp	r6, #0
 80050c0:	db05      	blt.n	80050ce <_printf_i+0x10e>
 80050c2:	6821      	ldr	r1, [r4, #0]
 80050c4:	432e      	orrs	r6, r5
 80050c6:	f021 0104 	bic.w	r1, r1, #4
 80050ca:	6021      	str	r1, [r4, #0]
 80050cc:	d04b      	beq.n	8005166 <_printf_i+0x1a6>
 80050ce:	4616      	mov	r6, r2
 80050d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80050d4:	fb03 5711 	mls	r7, r3, r1, r5
 80050d8:	5dc7      	ldrb	r7, [r0, r7]
 80050da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050de:	462f      	mov	r7, r5
 80050e0:	42bb      	cmp	r3, r7
 80050e2:	460d      	mov	r5, r1
 80050e4:	d9f4      	bls.n	80050d0 <_printf_i+0x110>
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d10b      	bne.n	8005102 <_printf_i+0x142>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	07df      	lsls	r7, r3, #31
 80050ee:	d508      	bpl.n	8005102 <_printf_i+0x142>
 80050f0:	6923      	ldr	r3, [r4, #16]
 80050f2:	6861      	ldr	r1, [r4, #4]
 80050f4:	4299      	cmp	r1, r3
 80050f6:	bfde      	ittt	le
 80050f8:	2330      	movle	r3, #48	@ 0x30
 80050fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005102:	1b92      	subs	r2, r2, r6
 8005104:	6122      	str	r2, [r4, #16]
 8005106:	f8cd a000 	str.w	sl, [sp]
 800510a:	464b      	mov	r3, r9
 800510c:	aa03      	add	r2, sp, #12
 800510e:	4621      	mov	r1, r4
 8005110:	4640      	mov	r0, r8
 8005112:	f7ff fee7 	bl	8004ee4 <_printf_common>
 8005116:	3001      	adds	r0, #1
 8005118:	d14a      	bne.n	80051b0 <_printf_i+0x1f0>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	b004      	add	sp, #16
 8005120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	f043 0320 	orr.w	r3, r3, #32
 800512a:	6023      	str	r3, [r4, #0]
 800512c:	4832      	ldr	r0, [pc, #200]	@ (80051f8 <_printf_i+0x238>)
 800512e:	2778      	movs	r7, #120	@ 0x78
 8005130:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	6831      	ldr	r1, [r6, #0]
 8005138:	061f      	lsls	r7, r3, #24
 800513a:	f851 5b04 	ldr.w	r5, [r1], #4
 800513e:	d402      	bmi.n	8005146 <_printf_i+0x186>
 8005140:	065f      	lsls	r7, r3, #25
 8005142:	bf48      	it	mi
 8005144:	b2ad      	uxthmi	r5, r5
 8005146:	6031      	str	r1, [r6, #0]
 8005148:	07d9      	lsls	r1, r3, #31
 800514a:	bf44      	itt	mi
 800514c:	f043 0320 	orrmi.w	r3, r3, #32
 8005150:	6023      	strmi	r3, [r4, #0]
 8005152:	b11d      	cbz	r5, 800515c <_printf_i+0x19c>
 8005154:	2310      	movs	r3, #16
 8005156:	e7ad      	b.n	80050b4 <_printf_i+0xf4>
 8005158:	4826      	ldr	r0, [pc, #152]	@ (80051f4 <_printf_i+0x234>)
 800515a:	e7e9      	b.n	8005130 <_printf_i+0x170>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	f023 0320 	bic.w	r3, r3, #32
 8005162:	6023      	str	r3, [r4, #0]
 8005164:	e7f6      	b.n	8005154 <_printf_i+0x194>
 8005166:	4616      	mov	r6, r2
 8005168:	e7bd      	b.n	80050e6 <_printf_i+0x126>
 800516a:	6833      	ldr	r3, [r6, #0]
 800516c:	6825      	ldr	r5, [r4, #0]
 800516e:	6961      	ldr	r1, [r4, #20]
 8005170:	1d18      	adds	r0, r3, #4
 8005172:	6030      	str	r0, [r6, #0]
 8005174:	062e      	lsls	r6, r5, #24
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	d501      	bpl.n	800517e <_printf_i+0x1be>
 800517a:	6019      	str	r1, [r3, #0]
 800517c:	e002      	b.n	8005184 <_printf_i+0x1c4>
 800517e:	0668      	lsls	r0, r5, #25
 8005180:	d5fb      	bpl.n	800517a <_printf_i+0x1ba>
 8005182:	8019      	strh	r1, [r3, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	6123      	str	r3, [r4, #16]
 8005188:	4616      	mov	r6, r2
 800518a:	e7bc      	b.n	8005106 <_printf_i+0x146>
 800518c:	6833      	ldr	r3, [r6, #0]
 800518e:	1d1a      	adds	r2, r3, #4
 8005190:	6032      	str	r2, [r6, #0]
 8005192:	681e      	ldr	r6, [r3, #0]
 8005194:	6862      	ldr	r2, [r4, #4]
 8005196:	2100      	movs	r1, #0
 8005198:	4630      	mov	r0, r6
 800519a:	f7fb f821 	bl	80001e0 <memchr>
 800519e:	b108      	cbz	r0, 80051a4 <_printf_i+0x1e4>
 80051a0:	1b80      	subs	r0, r0, r6
 80051a2:	6060      	str	r0, [r4, #4]
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	6123      	str	r3, [r4, #16]
 80051a8:	2300      	movs	r3, #0
 80051aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051ae:	e7aa      	b.n	8005106 <_printf_i+0x146>
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	4632      	mov	r2, r6
 80051b4:	4649      	mov	r1, r9
 80051b6:	4640      	mov	r0, r8
 80051b8:	47d0      	blx	sl
 80051ba:	3001      	adds	r0, #1
 80051bc:	d0ad      	beq.n	800511a <_printf_i+0x15a>
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	079b      	lsls	r3, r3, #30
 80051c2:	d413      	bmi.n	80051ec <_printf_i+0x22c>
 80051c4:	68e0      	ldr	r0, [r4, #12]
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	4298      	cmp	r0, r3
 80051ca:	bfb8      	it	lt
 80051cc:	4618      	movlt	r0, r3
 80051ce:	e7a6      	b.n	800511e <_printf_i+0x15e>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4632      	mov	r2, r6
 80051d4:	4649      	mov	r1, r9
 80051d6:	4640      	mov	r0, r8
 80051d8:	47d0      	blx	sl
 80051da:	3001      	adds	r0, #1
 80051dc:	d09d      	beq.n	800511a <_printf_i+0x15a>
 80051de:	3501      	adds	r5, #1
 80051e0:	68e3      	ldr	r3, [r4, #12]
 80051e2:	9903      	ldr	r1, [sp, #12]
 80051e4:	1a5b      	subs	r3, r3, r1
 80051e6:	42ab      	cmp	r3, r5
 80051e8:	dcf2      	bgt.n	80051d0 <_printf_i+0x210>
 80051ea:	e7eb      	b.n	80051c4 <_printf_i+0x204>
 80051ec:	2500      	movs	r5, #0
 80051ee:	f104 0619 	add.w	r6, r4, #25
 80051f2:	e7f5      	b.n	80051e0 <_printf_i+0x220>
 80051f4:	080053ad 	.word	0x080053ad
 80051f8:	080053be 	.word	0x080053be

080051fc <memmove>:
 80051fc:	4288      	cmp	r0, r1
 80051fe:	b510      	push	{r4, lr}
 8005200:	eb01 0402 	add.w	r4, r1, r2
 8005204:	d902      	bls.n	800520c <memmove+0x10>
 8005206:	4284      	cmp	r4, r0
 8005208:	4623      	mov	r3, r4
 800520a:	d807      	bhi.n	800521c <memmove+0x20>
 800520c:	1e43      	subs	r3, r0, #1
 800520e:	42a1      	cmp	r1, r4
 8005210:	d008      	beq.n	8005224 <memmove+0x28>
 8005212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800521a:	e7f8      	b.n	800520e <memmove+0x12>
 800521c:	4402      	add	r2, r0
 800521e:	4601      	mov	r1, r0
 8005220:	428a      	cmp	r2, r1
 8005222:	d100      	bne.n	8005226 <memmove+0x2a>
 8005224:	bd10      	pop	{r4, pc}
 8005226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800522a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800522e:	e7f7      	b.n	8005220 <memmove+0x24>

08005230 <_sbrk_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d06      	ldr	r5, [pc, #24]	@ (800524c <_sbrk_r+0x1c>)
 8005234:	2300      	movs	r3, #0
 8005236:	4604      	mov	r4, r0
 8005238:	4608      	mov	r0, r1
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	f7fb fe72 	bl	8000f24 <_sbrk>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_sbrk_r+0x1a>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_sbrk_r+0x1a>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	20000374 	.word	0x20000374

08005250 <memcpy>:
 8005250:	440a      	add	r2, r1
 8005252:	4291      	cmp	r1, r2
 8005254:	f100 33ff 	add.w	r3, r0, #4294967295
 8005258:	d100      	bne.n	800525c <memcpy+0xc>
 800525a:	4770      	bx	lr
 800525c:	b510      	push	{r4, lr}
 800525e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005266:	4291      	cmp	r1, r2
 8005268:	d1f9      	bne.n	800525e <memcpy+0xe>
 800526a:	bd10      	pop	{r4, pc}

0800526c <_realloc_r>:
 800526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005270:	4607      	mov	r7, r0
 8005272:	4614      	mov	r4, r2
 8005274:	460d      	mov	r5, r1
 8005276:	b921      	cbnz	r1, 8005282 <_realloc_r+0x16>
 8005278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800527c:	4611      	mov	r1, r2
 800527e:	f7ff bc4d 	b.w	8004b1c <_malloc_r>
 8005282:	b92a      	cbnz	r2, 8005290 <_realloc_r+0x24>
 8005284:	f7ff fbde 	bl	8004a44 <_free_r>
 8005288:	4625      	mov	r5, r4
 800528a:	4628      	mov	r0, r5
 800528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005290:	f000 f81a 	bl	80052c8 <_malloc_usable_size_r>
 8005294:	4284      	cmp	r4, r0
 8005296:	4606      	mov	r6, r0
 8005298:	d802      	bhi.n	80052a0 <_realloc_r+0x34>
 800529a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800529e:	d8f4      	bhi.n	800528a <_realloc_r+0x1e>
 80052a0:	4621      	mov	r1, r4
 80052a2:	4638      	mov	r0, r7
 80052a4:	f7ff fc3a 	bl	8004b1c <_malloc_r>
 80052a8:	4680      	mov	r8, r0
 80052aa:	b908      	cbnz	r0, 80052b0 <_realloc_r+0x44>
 80052ac:	4645      	mov	r5, r8
 80052ae:	e7ec      	b.n	800528a <_realloc_r+0x1e>
 80052b0:	42b4      	cmp	r4, r6
 80052b2:	4622      	mov	r2, r4
 80052b4:	4629      	mov	r1, r5
 80052b6:	bf28      	it	cs
 80052b8:	4632      	movcs	r2, r6
 80052ba:	f7ff ffc9 	bl	8005250 <memcpy>
 80052be:	4629      	mov	r1, r5
 80052c0:	4638      	mov	r0, r7
 80052c2:	f7ff fbbf 	bl	8004a44 <_free_r>
 80052c6:	e7f1      	b.n	80052ac <_realloc_r+0x40>

080052c8 <_malloc_usable_size_r>:
 80052c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052cc:	1f18      	subs	r0, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bfbc      	itt	lt
 80052d2:	580b      	ldrlt	r3, [r1, r0]
 80052d4:	18c0      	addlt	r0, r0, r3
 80052d6:	4770      	bx	lr

080052d8 <_init>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	bf00      	nop
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr

080052e4 <_fini>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	bf00      	nop
 80052e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ea:	bc08      	pop	{r3}
 80052ec:	469e      	mov	lr, r3
 80052ee:	4770      	bx	lr
