
08_STM_External_Flash2_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004dcc  08004dcc  00005dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e94  08004e94  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e94  08004e94  00005e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e9c  08004e9c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e9c  08004e9c  00005e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ea0  08004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004ea4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000005c  08004f00  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08004f00  000062f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c752  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b14  00000000  00000000  000127de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  000142f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087d  00000000  00000000  00014e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d9d  00000000  00000000  0001567d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0a2  00000000  00000000  0003c41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3548  00000000  00000000  000494bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ca04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003228  00000000  00000000  0013ca48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0013fc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004db4 	.word	0x08004db4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004db4 	.word	0x08004db4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <W25Q_SectorErase>:
uint32_t W25Q32_ReadID(void);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void W25Q_SectorErase(uint32_t addr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
    uint8_t cmd[4];
    W25Q_WriteEnable();
 80005b4:	f000 f82c 	bl	8000610 <W25Q_WriteEnable>
    cmd[0] = W25Q_SECTOR_ERASE;
 80005b8:	2320      	movs	r3, #32
 80005ba:	733b      	strb	r3, [r7, #12]
    cmd[1] = (addr >> 16) & 0xFF;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	737b      	strb	r3, [r7, #13]
    cmd[2] = (addr >> 8) & 0xFF;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	73bb      	strb	r3, [r7, #14]
    cmd[3] = addr & 0xFF;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	73fb      	strb	r3, [r7, #15]
    FLASH_CS_LOW();
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005d8:	480b      	ldr	r0, [pc, #44]	@ (8000608 <W25Q_SectorErase+0x5c>)
 80005da:	f000 ff3b 	bl	8001454 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 80005de:	f107 010c 	add.w	r1, r7, #12
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	2204      	movs	r2, #4
 80005e8:	4808      	ldr	r0, [pc, #32]	@ (800060c <W25Q_SectorErase+0x60>)
 80005ea:	f002 fb0e 	bl	8002c0a <HAL_SPI_Transmit>
    FLASH_CS_HIGH();
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005f4:	4804      	ldr	r0, [pc, #16]	@ (8000608 <W25Q_SectorErase+0x5c>)
 80005f6:	f000 ff2d 	bl	8001454 <HAL_GPIO_WritePin>
    W25Q_WaitBusy();
 80005fa:	f000 f851 	bl	80006a0 <W25Q_WaitBusy>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	48000400 	.word	0x48000400
 800060c:	20000078 	.word	0x20000078

08000610 <W25Q_WriteEnable>:

void W25Q_WriteEnable(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  uint8_t cmd = W25Q_WRITE_ENABLE;
 8000616:	2306      	movs	r3, #6
 8000618:	71fb      	strb	r3, [r7, #7]
  FLASH_CS_LOW();
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000620:	4809      	ldr	r0, [pc, #36]	@ (8000648 <W25Q_WriteEnable+0x38>)
 8000622:	f000 ff17 	bl	8001454 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	2201      	movs	r2, #1
 800062e:	4807      	ldr	r0, [pc, #28]	@ (800064c <W25Q_WriteEnable+0x3c>)
 8000630:	f002 faeb 	bl	8002c0a <HAL_SPI_Transmit>
  FLASH_CS_HIGH();
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800063a:	4803      	ldr	r0, [pc, #12]	@ (8000648 <W25Q_WriteEnable+0x38>)
 800063c:	f000 ff0a 	bl	8001454 <HAL_GPIO_WritePin>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	48000400 	.word	0x48000400
 800064c:	20000078 	.word	0x20000078

08000650 <W25Q_ReadStatus>:

uint8_t W25Q_ReadStatus(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  uint8_t cmd = W25Q_READ_STATUS;
 8000656:	2305      	movs	r3, #5
 8000658:	71fb      	strb	r3, [r7, #7]
  uint8_t status;
  FLASH_CS_LOW();
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <W25Q_ReadStatus+0x48>)
 8000662:	f000 fef7 	bl	8001454 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000666:	1df9      	adds	r1, r7, #7
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
 800066c:	2201      	movs	r2, #1
 800066e:	480b      	ldr	r0, [pc, #44]	@ (800069c <W25Q_ReadStatus+0x4c>)
 8000670:	f002 facb 	bl	8002c0a <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, &status, 1, HAL_MAX_DELAY);
 8000674:	1db9      	adds	r1, r7, #6
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	4807      	ldr	r0, [pc, #28]	@ (800069c <W25Q_ReadStatus+0x4c>)
 800067e:	f002 fc3a 	bl	8002ef6 <HAL_SPI_Receive>
  FLASH_CS_HIGH();
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000688:	4803      	ldr	r0, [pc, #12]	@ (8000698 <W25Q_ReadStatus+0x48>)
 800068a:	f000 fee3 	bl	8001454 <HAL_GPIO_WritePin>
  return status;
 800068e:	79bb      	ldrb	r3, [r7, #6]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	48000400 	.word	0x48000400
 800069c:	20000078 	.word	0x20000078

080006a0 <W25Q_WaitBusy>:

void W25Q_WaitBusy(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  while(W25Q_ReadStatus() & 0x01);
 80006a4:	bf00      	nop
 80006a6:	f7ff ffd3 	bl	8000650 <W25Q_ReadStatus>
 80006aa:	4603      	mov	r3, r0
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1f8      	bne.n	80006a6 <W25Q_WaitBusy+0x6>
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <W25Q_PageProgram>:

void W25Q_PageProgram(uint32_t addr, uint8_t* data, uint16_t len)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	4613      	mov	r3, r2
 80006c8:	80fb      	strh	r3, [r7, #6]
  uint8_t cmd[4];
  W25Q_WriteEnable();
 80006ca:	f7ff ffa1 	bl	8000610 <W25Q_WriteEnable>
  cmd[0] = W25Q_PAGE_PROGRAM;
 80006ce:	2302      	movs	r3, #2
 80006d0:	753b      	strb	r3, [r7, #20]
  cmd[1] = (addr >> 16) & 0xFF;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	0c1b      	lsrs	r3, r3, #16
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	757b      	strb	r3, [r7, #21]
  cmd[2] = (addr >> 8) & 0xFF;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	75bb      	strb	r3, [r7, #22]
  cmd[3] = addr & 0xFF;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	75fb      	strb	r3, [r7, #23]

  FLASH_CS_LOW();
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ee:	480f      	ldr	r0, [pc, #60]	@ (800072c <W25Q_PageProgram+0x70>)
 80006f0:	f000 feb0 	bl	8001454 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 80006f4:	f107 0114 	add.w	r1, r7, #20
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
 80006fc:	2204      	movs	r2, #4
 80006fe:	480c      	ldr	r0, [pc, #48]	@ (8000730 <W25Q_PageProgram+0x74>)
 8000700:	f002 fa83 	bl	8002c0a <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, data, len, HAL_MAX_DELAY);
 8000704:	88fa      	ldrh	r2, [r7, #6]
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	4808      	ldr	r0, [pc, #32]	@ (8000730 <W25Q_PageProgram+0x74>)
 800070e:	f002 fa7c 	bl	8002c0a <HAL_SPI_Transmit>
  FLASH_CS_HIGH();
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <W25Q_PageProgram+0x70>)
 800071a:	f000 fe9b 	bl	8001454 <HAL_GPIO_WritePin>
  W25Q_WaitBusy();
 800071e:	f7ff ffbf 	bl	80006a0 <W25Q_WaitBusy>
}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	48000400 	.word	0x48000400
 8000730:	20000078 	.word	0x20000078

08000734 <W25Q_ReadData>:

void W25Q_ReadData(uint32_t addr, uint8_t* buf, uint16_t len)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	4613      	mov	r3, r2
 8000740:	80fb      	strh	r3, [r7, #6]
  uint8_t cmd[4];
  cmd[0] = W25Q_READ_DATA;
 8000742:	2303      	movs	r3, #3
 8000744:	753b      	strb	r3, [r7, #20]
  cmd[1] = (addr >> 16) & 0xFF;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	0c1b      	lsrs	r3, r3, #16
 800074a:	b2db      	uxtb	r3, r3
 800074c:	757b      	strb	r3, [r7, #21]
  cmd[2] = (addr >> 8) & 0xFF;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	0a1b      	lsrs	r3, r3, #8
 8000752:	b2db      	uxtb	r3, r3
 8000754:	75bb      	strb	r3, [r7, #22]
  cmd[3] = addr & 0xFF;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	75fb      	strb	r3, [r7, #23]

  FLASH_CS_LOW();
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000762:	480e      	ldr	r0, [pc, #56]	@ (800079c <W25Q_ReadData+0x68>)
 8000764:	f000 fe76 	bl	8001454 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, cmd, 4, HAL_MAX_DELAY);
 8000768:	f107 0114 	add.w	r1, r7, #20
 800076c:	f04f 33ff 	mov.w	r3, #4294967295
 8000770:	2204      	movs	r2, #4
 8000772:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <W25Q_ReadData+0x6c>)
 8000774:	f002 fa49 	bl	8002c0a <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi2, buf, len, HAL_MAX_DELAY);
 8000778:	88fa      	ldrh	r2, [r7, #6]
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	68b9      	ldr	r1, [r7, #8]
 8000780:	4807      	ldr	r0, [pc, #28]	@ (80007a0 <W25Q_ReadData+0x6c>)
 8000782:	f002 fbb8 	bl	8002ef6 <HAL_SPI_Receive>
  FLASH_CS_HIGH();
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <W25Q_ReadData+0x68>)
 800078e:	f000 fe61 	bl	8001454 <HAL_GPIO_WritePin>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	48000400 	.word	0x48000400
 80007a0:	20000078 	.word	0x20000078

080007a4 <W25Q32_ReadID>:

uint32_t W25Q32_ReadID(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
    uint8_t cmd = W25Q_JEDEC_ID;
 80007aa:	239f      	movs	r3, #159	@ 0x9f
 80007ac:	71fb      	strb	r3, [r7, #7]
    uint8_t id[3];
    FLASH_CS_LOW();
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b4:	4810      	ldr	r0, [pc, #64]	@ (80007f8 <W25Q32_ReadID+0x54>)
 80007b6:	f000 fe4d 	bl	8001454 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 80007ba:	1df9      	adds	r1, r7, #7
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	2201      	movs	r2, #1
 80007c2:	480e      	ldr	r0, [pc, #56]	@ (80007fc <W25Q32_ReadID+0x58>)
 80007c4:	f002 fa21 	bl	8002c0a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi2, id, 3, HAL_MAX_DELAY);
 80007c8:	1d39      	adds	r1, r7, #4
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	2203      	movs	r2, #3
 80007d0:	480a      	ldr	r0, [pc, #40]	@ (80007fc <W25Q32_ReadID+0x58>)
 80007d2:	f002 fb90 	bl	8002ef6 <HAL_SPI_Receive>
    FLASH_CS_HIGH();
 80007d6:	2201      	movs	r2, #1
 80007d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007dc:	4806      	ldr	r0, [pc, #24]	@ (80007f8 <W25Q32_ReadID+0x54>)
 80007de:	f000 fe39 	bl	8001454 <HAL_GPIO_WritePin>

    return (id[0]<<16) | (id[1]<<8) | id[2];
 80007e2:	793b      	ldrb	r3, [r7, #4]
 80007e4:	041a      	lsls	r2, r3, #16
 80007e6:	797b      	ldrb	r3, [r7, #5]
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	4313      	orrs	r3, r2
 80007ec:	79ba      	ldrb	r2, [r7, #6]
 80007ee:	4313      	orrs	r3, r2
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	48000400 	.word	0x48000400
 80007fc:	20000078 	.word	0x20000078

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
  HAL_Init();
 8000806:	f000 faf5 	bl	8000df4 <HAL_Init>
  SystemClock_Config();
 800080a:	f000 f869 	bl	80008e0 <SystemClock_Config>

  MX_GPIO_Init();
 800080e:	f000 f927 	bl	8000a60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000812:	f000 f8f5 	bl	8000a00 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000816:	f000 f8b5 	bl	8000984 <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  sprintf(uart_buf, "W25Q32 Flash Test Start\r\n");
 800081a:	492a      	ldr	r1, [pc, #168]	@ (80008c4 <main+0xc4>)
 800081c:	482a      	ldr	r0, [pc, #168]	@ (80008c8 <main+0xc8>)
 800081e:	f003 fe29 	bl	8004474 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000822:	4829      	ldr	r0, [pc, #164]	@ (80008c8 <main+0xc8>)
 8000824:	f7ff fcd4 	bl	80001d0 <strlen>
 8000828:	4603      	mov	r3, r0
 800082a:	b29a      	uxth	r2, r3
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	4925      	ldr	r1, [pc, #148]	@ (80008c8 <main+0xc8>)
 8000832:	4826      	ldr	r0, [pc, #152]	@ (80008cc <main+0xcc>)
 8000834:	f003 f8c0 	bl	80039b8 <HAL_UART_Transmit>

  uint32_t id = W25Q32_ReadID();
 8000838:	f7ff ffb4 	bl	80007a4 <W25Q32_ReadID>
 800083c:	6178      	str	r0, [r7, #20]
  sprintf(uart_buf, "JEDEC ID: 0x%06lX\r\n", id);
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	4923      	ldr	r1, [pc, #140]	@ (80008d0 <main+0xd0>)
 8000842:	4821      	ldr	r0, [pc, #132]	@ (80008c8 <main+0xc8>)
 8000844:	f003 fe16 	bl	8004474 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 8000848:	481f      	ldr	r0, [pc, #124]	@ (80008c8 <main+0xc8>)
 800084a:	f7ff fcc1 	bl	80001d0 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	491c      	ldr	r1, [pc, #112]	@ (80008c8 <main+0xc8>)
 8000858:	481c      	ldr	r0, [pc, #112]	@ (80008cc <main+0xcc>)
 800085a:	f003 f8ad 	bl	80039b8 <HAL_UART_Transmit>

  // Erase first sector before writing
  W25Q_SectorErase(flash_addr);
 800085e:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <main+0xd4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff fea2 	bl	80005ac <W25Q_SectorErase>

  uint8_t buf1[] = "Hello";    // write data
 8000868:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <main+0xd8>)
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000872:	6018      	str	r0, [r3, #0]
 8000874:	3304      	adds	r3, #4
 8000876:	8019      	strh	r1, [r3, #0]
  W25Q_PageProgram(flash_addr, buf1, 5);
 8000878:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <main+0xd4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f107 010c 	add.w	r1, r7, #12
 8000880:	2205      	movs	r2, #5
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff1a 	bl	80006bc <W25Q_PageProgram>

  uint8_t read_buf[5];
  W25Q_ReadData(flash_addr, read_buf, 5);
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <main+0xd4>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	1d39      	adds	r1, r7, #4
 800088e:	2205      	movs	r2, #5
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff4f 	bl	8000734 <W25Q_ReadData>

  sprintf(uart_buf, "FLASH READ: %.*s\r\n", 5, read_buf);
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2205      	movs	r2, #5
 800089a:	4910      	ldr	r1, [pc, #64]	@ (80008dc <main+0xdc>)
 800089c:	480a      	ldr	r0, [pc, #40]	@ (80008c8 <main+0xc8>)
 800089e:	f003 fde9 	bl	8004474 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, strlen(uart_buf), HAL_MAX_DELAY);
 80008a2:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <main+0xc8>)
 80008a4:	f7ff fc94 	bl	80001d0 <strlen>
 80008a8:	4603      	mov	r3, r0
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
 80008b0:	4905      	ldr	r1, [pc, #20]	@ (80008c8 <main+0xc8>)
 80008b2:	4806      	ldr	r0, [pc, #24]	@ (80008cc <main+0xcc>)
 80008b4:	f003 f880 	bl	80039b8 <HAL_UART_Transmit>

  while (1)
  {
    HAL_Delay(1000);
 80008b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008bc:	f000 fb16 	bl	8000eec <HAL_Delay>
 80008c0:	e7fa      	b.n	80008b8 <main+0xb8>
 80008c2:	bf00      	nop
 80008c4:	08004dcc 	.word	0x08004dcc
 80008c8:	20000168 	.word	0x20000168
 80008cc:	200000dc 	.word	0x200000dc
 80008d0:	08004de8 	.word	0x08004de8
 80008d4:	20000164 	.word	0x20000164
 80008d8:	08004e10 	.word	0x08004e10
 80008dc:	08004dfc 	.word	0x08004dfc

080008e0 <SystemClock_Config>:
  }
}
/* USER CODE END 2 */
/* ---------------- HAL INIT FUNCTIONS ---------------- */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	@ 0x58
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2244      	movs	r2, #68	@ 0x44
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 fde2 	bl	80044b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) { Error_Handler(); }
 8000902:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000906:	f000 fdcb 	bl	80014a0 <HAL_PWREx_ControlVoltageScaling>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x34>
 8000910:	f000 f8fe 	bl	8000b10 <Error_Handler>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000914:	2302      	movs	r3, #2
 8000916:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800091c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091e:	2310      	movs	r3, #16
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000926:	2302      	movs	r3, #2
 8000928:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092a:	2301      	movs	r3, #1
 800092c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800092e:	230a      	movs	r3, #10
 8000930:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000932:	2307      	movs	r3, #7
 8000934:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000936:	2302      	movs	r3, #2
 8000938:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800093a:	2302      	movs	r3, #2
 800093c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fe02 	bl	800154c <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x72>
 800094e:	f000 f8df 	bl	8000b10 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2303      	movs	r3, #3
 8000958:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) { Error_Handler(); }
 8000966:	463b      	mov	r3, r7
 8000968:	2104      	movs	r1, #4
 800096a:	4618      	mov	r0, r3
 800096c:	f001 f9ca 	bl	8001d04 <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x9a>
 8000976:	f000 f8cb 	bl	8000b10 <Error_Handler>
}
 800097a:	bf00      	nop
 800097c:	3758      	adds	r7, #88	@ 0x58
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <MX_SPI2_Init>:

static void MX_SPI2_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  hspi2.Instance = SPI2;
 8000988:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <MX_SPI2_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	@ (80009fc <MX_SPI2_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_SPI2_Init+0x74>)
 8000990:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000994:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000996:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <MX_SPI2_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800099c:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <MX_SPI2_Init+0x74>)
 800099e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009ba:	2210      	movs	r2, #16
 80009bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009d2:	2207      	movs	r2, #7
 80009d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009de:	2208      	movs	r2, #8
 80009e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK) { Error_Handler(); }
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_SPI2_Init+0x74>)
 80009e4:	f002 f86e 	bl	8002ac4 <HAL_SPI_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_SPI2_Init+0x6e>
 80009ee:	f000 f88f 	bl	8000b10 <Error_Handler>
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000078 	.word	0x20000078
 80009fc:	40003800 	.word	0x40003800

08000a00 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	@ (8000a5c <MX_USART2_UART_Init+0x5c>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) { Error_Handler(); }
 8000a42:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a44:	f002 ff6a 	bl	800391c <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x52>
 8000a4e:	f000 f85f 	bl	8000b10 <Error_Handler>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000dc 	.word	0x200000dc
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b24      	ldr	r3, [pc, #144]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	4a23      	ldr	r2, [pc, #140]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a82:	4b21      	ldr	r3, [pc, #132]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	4a1d      	ldr	r2, [pc, #116]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	4a17      	ldr	r2, [pc, #92]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	4a11      	ldr	r2, [pc, #68]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aca:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <MX_GPIO_Init+0xa8>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000adc:	480b      	ldr	r0, [pc, #44]	@ (8000b0c <MX_GPIO_Init+0xac>)
 8000ade:	f000 fcb9 	bl	8001454 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ae2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af0:	2302      	movs	r3, #2
 8000af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_GPIO_Init+0xac>)
 8000afc:	f000 fb00 	bl	8001100 <HAL_GPIO_Init>
}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	@ 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48000400 	.word	0x48000400

08000b10 <Error_Handler>:

void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  __disable_irq();
  while (1) { }
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a17      	ldr	r2, [pc, #92]	@ (8000be0 <HAL_SPI_MspInit+0x7c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d128      	bne.n	8000bd8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b86:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <HAL_SPI_MspInit+0x80>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	4a16      	ldr	r2, [pc, #88]	@ (8000be4 <HAL_SPI_MspInit+0x80>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <HAL_SPI_MspInit+0x80>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <HAL_SPI_MspInit+0x80>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <HAL_SPI_MspInit+0x80>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <HAL_SPI_MspInit+0x80>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bb6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bc8:	2305      	movs	r3, #5
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <HAL_SPI_MspInit+0x84>)
 8000bd4:	f000 fa94 	bl	8001100 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	@ 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40003800 	.word	0x40003800
 8000be4:	40021000 	.word	0x40021000
 8000be8:	48000400 	.word	0x48000400

08000bec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0ac      	sub	sp, #176	@ 0xb0
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2288      	movs	r2, #136	@ 0x88
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fc53 	bl	80044b8 <memset>
  if(huart->Instance==USART2)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <HAL_UART_MspInit+0xb0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d13b      	bne.n	8000c94 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fa8f 	bl	800214c <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c34:	f7ff ff6c 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3c:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c54:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <HAL_UART_MspInit+0xb4>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c68:	230c      	movs	r3, #12
 8000c6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c80:	2307      	movs	r3, #7
 8000c82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c90:	f000 fa36 	bl	8001100 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c94:	bf00      	nop
 8000c96:	37b0      	adds	r7, #176	@ 0xb0
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40004400 	.word	0x40004400
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <NMI_Handler+0x4>

08000cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfa:	f000 f8d7 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_IRQn 0 */
 // HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f003 fbc2 	bl	80044c8 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20018000 	.word	0x20018000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	200001a8 	.word	0x200001a8
 8000d78:	200002f8 	.word	0x200002f8

08000d7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da4:	f7ff ffea 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f003 fb81 	bl	80044d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fd15 	bl	8000800 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000de4:	08004ea4 	.word	0x08004ea4
  ldr r2, =_sbss
 8000de8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dec:	200002f8 	.word	0x200002f8

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <HAL_Init+0x3c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a0b      	ldr	r2, [pc, #44]	@ (8000e30 <HAL_Init+0x3c>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 f944 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 f80f 	bl	8000e34 <HAL_InitTick>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	e001      	b.n	8000e26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e22:	f7ff fe7b 	bl	8000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e26:	79fb      	ldrb	r3, [r7, #7]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40022000 	.word	0x40022000

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <HAL_InitTick+0x6c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d023      	beq.n	8000e90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_InitTick+0x70>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f941 	bl	80010e6 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10f      	bne.n	8000e8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d809      	bhi.n	8000e84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f919 	bl	80010ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_InitTick+0x74>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e007      	b.n	8000e94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e004      	b.n	8000e94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e001      	b.n	8000e94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	200001ac 	.word	0x200001ac

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	@ (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200001ac 	.word	0x200001ac

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	@ (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	@ (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	@ (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	@ 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	@ 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	@ (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff47 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff5c 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffb0 	bl	8001054 <SysTick_Config>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800110e:	e17f      	b.n	8001410 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8171 	beq.w	800140a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d005      	beq.n	8001140 <HAL_GPIO_Init+0x40>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d130      	bne.n	80011a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001176:	2201      	movs	r2, #1
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	091b      	lsrs	r3, r3, #4
 800118c:	f003 0201 	and.w	r2, r3, #1
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d118      	bne.n	80011e0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011b4:	2201      	movs	r2, #1
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	08db      	lsrs	r3, r3, #3
 80011ca:	f003 0201 	and.w	r2, r3, #1
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d017      	beq.n	800121c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d123      	bne.n	8001270 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	08da      	lsrs	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3208      	adds	r2, #8
 800126a:	6939      	ldr	r1, [r7, #16]
 800126c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	2203      	movs	r2, #3
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0203 	and.w	r2, r3, #3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80ac 	beq.w	800140a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001430 <HAL_GPIO_Init+0x330>)
 80012b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001430 <HAL_GPIO_Init+0x330>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012be:	4b5c      	ldr	r3, [pc, #368]	@ (8001430 <HAL_GPIO_Init+0x330>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001434 <HAL_GPIO_Init+0x334>)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x242>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001438 <HAL_GPIO_Init+0x338>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x23e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4e      	ldr	r2, [pc, #312]	@ (800143c <HAL_GPIO_Init+0x33c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x23a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4d      	ldr	r2, [pc, #308]	@ (8001440 <HAL_GPIO_Init+0x340>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x236>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4c      	ldr	r2, [pc, #304]	@ (8001444 <HAL_GPIO_Init+0x344>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x232>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4b      	ldr	r2, [pc, #300]	@ (8001448 <HAL_GPIO_Init+0x348>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x22e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4a      	ldr	r2, [pc, #296]	@ (800144c <HAL_GPIO_Init+0x34c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x22a>
 8001326:	2306      	movs	r3, #6
 8001328:	e00c      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800132a:	2307      	movs	r3, #7
 800132c:	e00a      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800132e:	2305      	movs	r3, #5
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001332:	2304      	movs	r3, #4
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x244>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x244>
 8001342:	2300      	movs	r3, #0
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001354:	4937      	ldr	r1, [pc, #220]	@ (8001434 <HAL_GPIO_Init+0x334>)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001362:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <HAL_GPIO_Init+0x350>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001386:	4a32      	ldr	r2, [pc, #200]	@ (8001450 <HAL_GPIO_Init+0x350>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800138c:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <HAL_GPIO_Init+0x350>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013b0:	4a27      	ldr	r2, [pc, #156]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013b6:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013da:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <HAL_GPIO_Init+0x350>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001404:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <HAL_GPIO_Init+0x350>)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa22 f303 	lsr.w	r3, r2, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	f47f ae78 	bne.w	8001110 <HAL_GPIO_Init+0x10>
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	48001000 	.word	0x48001000
 8001448:	48001400 	.word	0x48001400
 800144c:	48001800 	.word	0x48001800
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
 8001460:	4613      	mov	r3, r2
 8001462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001464:	787b      	ldrb	r3, [r7, #1]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800146a:	887a      	ldrh	r2, [r7, #2]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001470:	e002      	b.n	8001478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <HAL_PWREx_GetVoltageRange+0x18>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000

080014a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014ae:	d130      	bne.n	8001512 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014b0:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014bc:	d038      	beq.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014be:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2232      	movs	r2, #50	@ 0x32
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	3301      	adds	r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014e4:	e002      	b.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ec:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014f8:	d102      	bne.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f2      	bne.n	80014e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150c:	d110      	bne.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e00f      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800151a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151e:	d007      	beq.n	8001530 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001528:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800152e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40007000 	.word	0x40007000
 8001544:	20000000 	.word	0x20000000
 8001548:	431bde83 	.word	0x431bde83

0800154c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e3ca      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800155e:	4b97      	ldr	r3, [pc, #604]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001568:	4b94      	ldr	r3, [pc, #592]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80e4 	beq.w	8001748 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <HAL_RCC_OscConfig+0x4a>
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b0c      	cmp	r3, #12
 800158a:	f040 808b 	bne.w	80016a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b01      	cmp	r3, #1
 8001592:	f040 8087 	bne.w	80016a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001596:	4b89      	ldr	r3, [pc, #548]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d005      	beq.n	80015ae <HAL_RCC_OscConfig+0x62>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e3a2      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1a      	ldr	r2, [r3, #32]
 80015b2:	4b82      	ldr	r3, [pc, #520]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <HAL_RCC_OscConfig+0x7c>
 80015be:	4b7f      	ldr	r3, [pc, #508]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015c6:	e005      	b.n	80015d4 <HAL_RCC_OscConfig+0x88>
 80015c8:	4b7c      	ldr	r3, [pc, #496]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80015ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d223      	bcs.n	8001620 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fd55 	bl	800208c <RCC_SetFlashLatencyFromMSIRange>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e383      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ec:	4b73      	ldr	r3, [pc, #460]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a72      	ldr	r2, [pc, #456]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80015f2:	f043 0308 	orr.w	r3, r3, #8
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b70      	ldr	r3, [pc, #448]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	496d      	ldr	r1, [pc, #436]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 8001606:	4313      	orrs	r3, r2
 8001608:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800160a:	4b6c      	ldr	r3, [pc, #432]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	4968      	ldr	r1, [pc, #416]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
 800161e:	e025      	b.n	800166c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001620:	4b66      	ldr	r3, [pc, #408]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a65      	ldr	r2, [pc, #404]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b63      	ldr	r3, [pc, #396]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4960      	ldr	r1, [pc, #384]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800163e:	4b5f      	ldr	r3, [pc, #380]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	495b      	ldr	r1, [pc, #364]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fd15 	bl	800208c <RCC_SetFlashLatencyFromMSIRange>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e343      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800166c:	f000 fc4a 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	4b52      	ldr	r3, [pc, #328]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	4950      	ldr	r1, [pc, #320]	@ (80017c0 <HAL_RCC_OscConfig+0x274>)
 800167e:	5ccb      	ldrb	r3, [r1, r3]
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	fa22 f303 	lsr.w	r3, r2, r3
 8001688:	4a4e      	ldr	r2, [pc, #312]	@ (80017c4 <HAL_RCC_OscConfig+0x278>)
 800168a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800168c:	4b4e      	ldr	r3, [pc, #312]	@ (80017c8 <HAL_RCC_OscConfig+0x27c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fbcf 	bl	8000e34 <HAL_InitTick>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d052      	beq.n	8001746 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	e327      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d032      	beq.n	8001712 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016ac:	4b43      	ldr	r3, [pc, #268]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a42      	ldr	r2, [pc, #264]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc0c 	bl	8000ed4 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016c0:	f7ff fc08 	bl	8000ed4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e310      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d2:	4b3a      	ldr	r3, [pc, #232]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016de:	4b37      	ldr	r3, [pc, #220]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a36      	ldr	r2, [pc, #216]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b34      	ldr	r3, [pc, #208]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4931      	ldr	r1, [pc, #196]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fc:	4b2f      	ldr	r3, [pc, #188]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	492c      	ldr	r1, [pc, #176]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e01a      	b.n	8001748 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001712:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a29      	ldr	r2, [pc, #164]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800171e:	f7ff fbd9 	bl	8000ed4 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001726:	f7ff fbd5 	bl	8000ed4 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e2dd      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001738:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x1da>
 8001744:	e000      	b.n	8001748 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001746:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b00      	cmp	r3, #0
 8001752:	d074      	beq.n	800183e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2b08      	cmp	r3, #8
 8001758:	d005      	beq.n	8001766 <HAL_RCC_OscConfig+0x21a>
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d10e      	bne.n	800177e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d10b      	bne.n	800177e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d064      	beq.n	800183c <HAL_RCC_OscConfig+0x2f0>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d160      	bne.n	800183c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e2ba      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001786:	d106      	bne.n	8001796 <HAL_RCC_OscConfig+0x24a>
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0b      	ldr	r2, [pc, #44]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e026      	b.n	80017e4 <HAL_RCC_OscConfig+0x298>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800179e:	d115      	bne.n	80017cc <HAL_RCC_OscConfig+0x280>
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80017a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a02      	ldr	r2, [pc, #8]	@ (80017bc <HAL_RCC_OscConfig+0x270>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x298>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	08004e18 	.word	0x08004e18
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000004 	.word	0x20000004
 80017cc:	4ba0      	ldr	r3, [pc, #640]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a9f      	ldr	r2, [pc, #636]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80017d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b9d      	ldr	r3, [pc, #628]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a9c      	ldr	r2, [pc, #624]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d013      	beq.n	8001814 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb72 	bl	8000ed4 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fb6e 	bl	8000ed4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	@ 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e276      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001806:	4b92      	ldr	r3, [pc, #584]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x2a8>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fb5e 	bl	8000ed4 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fb5a 	bl	8000ed4 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	@ 0x64
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e262      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800182e:	4b88      	ldr	r3, [pc, #544]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x2d0>
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d060      	beq.n	800190c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x310>
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d119      	bne.n	800188a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d116      	bne.n	800188a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800185c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_RCC_OscConfig+0x328>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e23f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b76      	ldr	r3, [pc, #472]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	061b      	lsls	r3, r3, #24
 8001882:	4973      	ldr	r1, [pc, #460]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001888:	e040      	b.n	800190c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d023      	beq.n	80018da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001892:	4b6f      	ldr	r3, [pc, #444]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a6e      	ldr	r2, [pc, #440]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800189c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff fb19 	bl	8000ed4 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fb15 	bl	8000ed4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e21d      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	4b65      	ldr	r3, [pc, #404]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b62      	ldr	r3, [pc, #392]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	061b      	lsls	r3, r3, #24
 80018d2:	495f      	ldr	r1, [pc, #380]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
 80018d8:	e018      	b.n	800190c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018da:	4b5d      	ldr	r3, [pc, #372]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a5c      	ldr	r2, [pc, #368]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80018e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e6:	f7ff faf5 	bl	8000ed4 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ee:	f7ff faf1 	bl	8000ed4 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1f9      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001900:	4b53      	ldr	r3, [pc, #332]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d03c      	beq.n	8001992 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01c      	beq.n	800195a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001920:	4b4b      	ldr	r3, [pc, #300]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001926:	4a4a      	ldr	r2, [pc, #296]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7ff fad0 	bl	8000ed4 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff facc 	bl	8000ed4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1d4      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800194a:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 800194c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0ef      	beq.n	8001938 <HAL_RCC_OscConfig+0x3ec>
 8001958:	e01b      	b.n	8001992 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800195a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 800195c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001960:	4a3b      	ldr	r2, [pc, #236]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff fab3 	bl	8000ed4 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff faaf 	bl	8000ed4 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e1b7      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001984:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ef      	bne.n	8001972 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80a6 	beq.w	8001aec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10d      	bne.n	80019cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b4:	4a26      	ldr	r2, [pc, #152]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80019bc:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c8:	2301      	movs	r3, #1
 80019ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <HAL_RCC_OscConfig+0x508>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d118      	bne.n	8001a0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <HAL_RCC_OscConfig+0x508>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a54 <HAL_RCC_OscConfig+0x508>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e4:	f7ff fa76 	bl	8000ed4 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ec:	f7ff fa72 	bl	8000ed4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e17a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_RCC_OscConfig+0x508>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_RCC_OscConfig+0x4d8>
 8001a12:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a22:	e029      	b.n	8001a78 <HAL_RCC_OscConfig+0x52c>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d115      	bne.n	8001a58 <HAL_RCC_OscConfig+0x50c>
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a32:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a42:	4a03      	ldr	r2, [pc, #12]	@ (8001a50 <HAL_RCC_OscConfig+0x504>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a4c:	e014      	b.n	8001a78 <HAL_RCC_OscConfig+0x52c>
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40007000 	.word	0x40007000
 8001a58:	4b9c      	ldr	r3, [pc, #624]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5e:	4a9b      	ldr	r2, [pc, #620]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a68:	4b98      	ldr	r3, [pc, #608]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a6e:	4a97      	ldr	r2, [pc, #604]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d016      	beq.n	8001aae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fa28 	bl	8000ed4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff fa24 	bl	8000ed4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e12a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0ed      	beq.n	8001a88 <HAL_RCC_OscConfig+0x53c>
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aae:	f7ff fa11 	bl	8000ed4 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff fa0d 	bl	8000ed4 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e113      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001acc:	4b7f      	ldr	r3, [pc, #508]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ed      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ada:	7ffb      	ldrb	r3, [r7, #31]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b7a      	ldr	r3, [pc, #488]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae4:	4a79      	ldr	r2, [pc, #484]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80fe 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	f040 80d0 	bne.w	8001ca0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b00:	4b72      	ldr	r3, [pc, #456]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d130      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d127      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d11f      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b40:	2a07      	cmp	r2, #7
 8001b42:	bf14      	ite	ne
 8001b44:	2201      	movne	r2, #1
 8001b46:	2200      	moveq	r2, #0
 8001b48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d113      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b58:	085b      	lsrs	r3, r3, #1
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d06e      	beq.n	8001c54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b0c      	cmp	r3, #12
 8001b7a:	d069      	beq.n	8001c50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b7c:	4b53      	ldr	r3, [pc, #332]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d105      	bne.n	8001b94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b88:	4b50      	ldr	r3, [pc, #320]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0ad      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b98:	4b4c      	ldr	r3, [pc, #304]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a4b      	ldr	r2, [pc, #300]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001b9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ba2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ba4:	f7ff f996 	bl	8000ed4 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f992 	bl	8000ed4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e09a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbe:	4b43      	ldr	r3, [pc, #268]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bca:	4b40      	ldr	r3, [pc, #256]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	4b40      	ldr	r3, [pc, #256]	@ (8001cd0 <HAL_RCC_OscConfig+0x784>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001be4:	0212      	lsls	r2, r2, #8
 8001be6:	4311      	orrs	r1, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bec:	0852      	lsrs	r2, r2, #1
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	0552      	lsls	r2, r2, #21
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bf8:	0852      	lsrs	r2, r2, #1
 8001bfa:	3a01      	subs	r2, #1
 8001bfc:	0652      	lsls	r2, r2, #25
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c04:	0912      	lsrs	r2, r2, #4
 8001c06:	0452      	lsls	r2, r2, #17
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	4930      	ldr	r1, [pc, #192]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c10:	4b2e      	ldr	r3, [pc, #184]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2d      	ldr	r2, [pc, #180]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a2a      	ldr	r2, [pc, #168]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c28:	f7ff f954 	bl	8000ed4 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f950 	bl	8000ed4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e058      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b22      	ldr	r3, [pc, #136]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c4e:	e050      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e04f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d148      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a19      	ldr	r2, [pc, #100]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	4a16      	ldr	r2, [pc, #88]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c78:	f7ff f92c 	bl	8000ed4 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f928 	bl	8000ed4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e030      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x734>
 8001c9e:	e028      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d023      	beq.n	8001cee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a08      	ldr	r2, [pc, #32]	@ (8001ccc <HAL_RCC_OscConfig+0x780>)
 8001cac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f90f 	bl	8000ed4 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb8:	e00c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cba:	f7ff f90b 	bl	8000ed4 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d905      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e013      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_OscConfig+0x7b0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ec      	bne.n	8001cba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_RCC_OscConfig+0x7b0>)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	4905      	ldr	r1, [pc, #20]	@ (8001cfc <HAL_RCC_OscConfig+0x7b0>)
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_RCC_OscConfig+0x7b4>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60cb      	str	r3, [r1, #12]
 8001cec:	e001      	b.n	8001cf2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	feeefffc 	.word	0xfeeefffc

08001d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0e7      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b75      	ldr	r3, [pc, #468]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b72      	ldr	r3, [pc, #456]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4970      	ldr	r1, [pc, #448]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b6e      	ldr	r3, [pc, #440]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0cf      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d010      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b66      	ldr	r3, [pc, #408]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d908      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d64:	4b63      	ldr	r3, [pc, #396]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4960      	ldr	r1, [pc, #384]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d04c      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d121      	bne.n	8001dda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e0a6      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da2:	4b54      	ldr	r3, [pc, #336]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d115      	bne.n	8001dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e09a      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dba:	4b4e      	ldr	r3, [pc, #312]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e08e      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dca:	4b4a      	ldr	r3, [pc, #296]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e086      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dda:	4b46      	ldr	r3, [pc, #280]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f023 0203 	bic.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4943      	ldr	r1, [pc, #268]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dec:	f7ff f872 	bl	8000ed4 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7ff f86e 	bl	8000ed4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e06e      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 020c 	and.w	r2, r3, #12
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1eb      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d010      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	4b31      	ldr	r3, [pc, #196]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d208      	bcs.n	8001e4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	492b      	ldr	r1, [pc, #172]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4a:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d210      	bcs.n	8001e7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e58:	4b25      	ldr	r3, [pc, #148]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 0207 	bic.w	r2, r3, #7
 8001e60:	4923      	ldr	r1, [pc, #140]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e68:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e036      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d008      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e86:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	4918      	ldr	r1, [pc, #96]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4910      	ldr	r1, [pc, #64]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb8:	f000 f824 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	490b      	ldr	r1, [pc, #44]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	4a09      	ldr	r2, [pc, #36]	@ (8001efc <HAL_RCC_ClockConfig+0x1f8>)
 8001ed6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ed8:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <HAL_RCC_ClockConfig+0x1fc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe ffa9 	bl	8000e34 <HAL_InitTick>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08004e18 	.word	0x08004e18
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	@ 0x24
 8001f08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f12:	4b3e      	ldr	r3, [pc, #248]	@ (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x34>
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d121      	bne.n	8001f76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d11e      	bne.n	8001f76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f38:	4b34      	ldr	r3, [pc, #208]	@ (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f44:	4b31      	ldr	r3, [pc, #196]	@ (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e005      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f54:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f60:	4a2b      	ldr	r2, [pc, #172]	@ (8002010 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10d      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d102      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f7c:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	e004      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f88:	4b23      	ldr	r3, [pc, #140]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d134      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f92:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0xa6>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d003      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xac>
 8001fa8:	e005      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fac:	617b      	str	r3, [r7, #20]
      break;
 8001fae:	e005      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fb0:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fb2:	617b      	str	r3, [r7, #20]
      break;
 8001fb4:	e002      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	617b      	str	r3, [r7, #20]
      break;
 8001fba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fbc:	4b13      	ldr	r3, [pc, #76]	@ (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fca:	4b10      	ldr	r3, [pc, #64]	@ (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	fb03 f202 	mul.w	r2, r3, r2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	0e5b      	lsrs	r3, r3, #25
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	3301      	adds	r3, #1
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	08004e30 	.word	0x08004e30
 8002014:	00f42400 	.word	0x00f42400
 8002018:	007a1200 	.word	0x007a1200

0800201c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <HAL_RCC_GetHCLKFreq+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000000 	.word	0x20000000

08002034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002038:	f7ff fff0 	bl	800201c <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4904      	ldr	r1, [pc, #16]	@ (800205c <HAL_RCC_GetPCLK1Freq+0x28>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	08004e28 	.word	0x08004e28

08002060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002064:	f7ff ffda 	bl	800201c <HAL_RCC_GetHCLKFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0adb      	lsrs	r3, r3, #11
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4904      	ldr	r1, [pc, #16]	@ (8002088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	08004e28 	.word	0x08004e28

0800208c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002098:	4b2a      	ldr	r3, [pc, #168]	@ (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020a4:	f7ff f9ee 	bl	8001484 <HAL_PWREx_GetVoltageRange>
 80020a8:	6178      	str	r0, [r7, #20]
 80020aa:	e014      	b.n	80020d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	4a24      	ldr	r2, [pc, #144]	@ (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b8:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020c4:	f7ff f9de 	bl	8001484 <HAL_PWREx_GetVoltageRange>
 80020c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020dc:	d10b      	bne.n	80020f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b80      	cmp	r3, #128	@ 0x80
 80020e2:	d919      	bls.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80020e8:	d902      	bls.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ea:	2302      	movs	r3, #2
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	e013      	b.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f0:	2301      	movs	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	e010      	b.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b80      	cmp	r3, #128	@ 0x80
 80020fa:	d902      	bls.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020fc:	2303      	movs	r3, #3
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e00a      	b.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b80      	cmp	r3, #128	@ 0x80
 8002106:	d102      	bne.n	800210e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002108:	2302      	movs	r3, #2
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	e004      	b.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b70      	cmp	r3, #112	@ 0x70
 8002112:	d101      	bne.n	8002118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002114:	2301      	movs	r3, #1
 8002116:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 0207 	bic.w	r2, r3, #7
 8002120:	4909      	ldr	r1, [pc, #36]	@ (8002148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002128:	4b07      	ldr	r3, [pc, #28]	@ (8002148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	429a      	cmp	r2, r3
 8002134:	d001      	beq.n	800213a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	40022000 	.word	0x40022000

0800214c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002154:	2300      	movs	r3, #0
 8002156:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002158:	2300      	movs	r3, #0
 800215a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002164:	2b00      	cmp	r3, #0
 8002166:	d041      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800216c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002170:	d02a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002172:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002176:	d824      	bhi.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002178:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800217c:	d008      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800217e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002182:	d81e      	bhi.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002188:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800218c:	d010      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800218e:	e018      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002190:	4b86      	ldr	r3, [pc, #536]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a85      	ldr	r2, [pc, #532]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800219c:	e015      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fabb 	bl	8002720 <RCCEx_PLLSAI1_Config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ae:	e00c      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3320      	adds	r3, #32
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fba6 	bl	8002908 <RCCEx_PLLSAI2_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021c0:	e003      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	74fb      	strb	r3, [r7, #19]
      break;
 80021c6:	e000      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021d0:	4b76      	ldr	r3, [pc, #472]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021de:	4973      	ldr	r1, [pc, #460]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021e6:	e001      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d041      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002200:	d02a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002202:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002206:	d824      	bhi.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002208:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800220c:	d008      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800220e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002212:	d81e      	bhi.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800221c:	d010      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800221e:	e018      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002220:	4b62      	ldr	r3, [pc, #392]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a61      	ldr	r2, [pc, #388]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800222a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800222c:	e015      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fa73 	bl	8002720 <RCCEx_PLLSAI1_Config>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800223e:	e00c      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3320      	adds	r3, #32
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f000 fb5e 	bl	8002908 <RCCEx_PLLSAI2_Config>
 800224c:	4603      	mov	r3, r0
 800224e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002250:	e003      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	74fb      	strb	r3, [r7, #19]
      break;
 8002256:	e000      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002260:	4b52      	ldr	r3, [pc, #328]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800226e:	494f      	ldr	r1, [pc, #316]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002276:	e001      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80a0 	beq.w	80023ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800228e:	4b47      	ldr	r3, [pc, #284]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800229e:	2300      	movs	r3, #0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a8:	4a40      	ldr	r2, [pc, #256]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b0:	4b3e      	ldr	r3, [pc, #248]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022bc:	2301      	movs	r3, #1
 80022be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022c0:	4b3b      	ldr	r3, [pc, #236]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a3a      	ldr	r2, [pc, #232]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022cc:	f7fe fe02 	bl	8000ed4 <HAL_GetTick>
 80022d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022d2:	e009      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d4:	f7fe fdfe 	bl	8000ed4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d902      	bls.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	74fb      	strb	r3, [r7, #19]
        break;
 80022e6:	e005      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e8:	4b31      	ldr	r3, [pc, #196]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ef      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d15c      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022fa:	4b2c      	ldr	r3, [pc, #176]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002300:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002304:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01f      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	d019      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002318:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002322:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002324:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800232a:	4a20      	ldr	r2, [pc, #128]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002334:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002344:	4a19      	ldr	r2, [pc, #100]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fdbd 	bl	8000ed4 <HAL_GetTick>
 800235a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800235c:	e00b      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7fe fdb9 	bl	8000ed4 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d902      	bls.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	74fb      	strb	r3, [r7, #19]
            break;
 8002374:	e006      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002376:	4b0d      	ldr	r3, [pc, #52]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ec      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002384:	7cfb      	ldrb	r3, [r7, #19]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238a:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800239a:	4904      	ldr	r1, [pc, #16]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023a2:	e009      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
 80023a8:	e006      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b8:	7c7b      	ldrb	r3, [r7, #17]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d105      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023be:	4b9e      	ldr	r3, [pc, #632]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c2:	4a9d      	ldr	r2, [pc, #628]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d6:	4b98      	ldr	r3, [pc, #608]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023dc:	f023 0203 	bic.w	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e4:	4994      	ldr	r1, [pc, #592]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00a      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fe:	f023 020c 	bic.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002406:	498c      	ldr	r1, [pc, #560]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800241a:	4b87      	ldr	r3, [pc, #540]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002420:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	4983      	ldr	r1, [pc, #524]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800243c:	4b7e      	ldr	r3, [pc, #504]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002442:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	497b      	ldr	r1, [pc, #492]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800245e:	4b76      	ldr	r3, [pc, #472]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246c:	4972      	ldr	r1, [pc, #456]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002480:	4b6d      	ldr	r3, [pc, #436]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002486:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	496a      	ldr	r1, [pc, #424]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024a2:	4b65      	ldr	r3, [pc, #404]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	4961      	ldr	r1, [pc, #388]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024c4:	4b5c      	ldr	r3, [pc, #368]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d2:	4959      	ldr	r1, [pc, #356]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e6:	4b54      	ldr	r3, [pc, #336]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f4:	4950      	ldr	r1, [pc, #320]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002508:	4b4b      	ldr	r3, [pc, #300]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002516:	4948      	ldr	r1, [pc, #288]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800252a:	4b43      	ldr	r3, [pc, #268]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002530:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002538:	493f      	ldr	r1, [pc, #252]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d028      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800254c:	4b3a      	ldr	r3, [pc, #232]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002552:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800255a:	4937      	ldr	r1, [pc, #220]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800256a:	d106      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800256c:	4b32      	ldr	r3, [pc, #200]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a31      	ldr	r2, [pc, #196]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002576:	60d3      	str	r3, [r2, #12]
 8002578:	e011      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800257e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002582:	d10c      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	2101      	movs	r1, #1
 800258a:	4618      	mov	r0, r3
 800258c:	f000 f8c8 	bl	8002720 <RCCEx_PLLSAI1_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d028      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025aa:	4b23      	ldr	r3, [pc, #140]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b8:	491f      	ldr	r1, [pc, #124]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80025c8:	d106      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025d4:	60d3      	str	r3, [r2, #12]
 80025d6:	e011      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025e0:	d10c      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3304      	adds	r3, #4
 80025e6:	2101      	movs	r1, #1
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 f899 	bl	8002720 <RCCEx_PLLSAI1_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d02b      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002616:	4908      	ldr	r1, [pc, #32]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002626:	d109      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a02      	ldr	r2, [pc, #8]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002632:	60d3      	str	r3, [r2, #12]
 8002634:	e014      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002640:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002644:	d10c      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	2101      	movs	r1, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f867 	bl	8002720 <RCCEx_PLLSAI1_Config>
 8002652:	4603      	mov	r3, r0
 8002654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800265c:	7cfb      	ldrb	r3, [r7, #19]
 800265e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02f      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800266c:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002672:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800267a:	4928      	ldr	r1, [pc, #160]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800268a:	d10d      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3304      	adds	r3, #4
 8002690:	2102      	movs	r1, #2
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f844 	bl	8002720 <RCCEx_PLLSAI1_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d014      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	74bb      	strb	r3, [r7, #18]
 80026a6:	e011      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3320      	adds	r3, #32
 80026b6:	2102      	movs	r1, #2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 f925 	bl	8002908 <RCCEx_PLLSAI2_Config>
 80026be:	4603      	mov	r3, r0
 80026c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026d8:	4b10      	ldr	r3, [pc, #64]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026e6:	490d      	ldr	r1, [pc, #52]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026fa:	4b08      	ldr	r3, [pc, #32]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002700:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800270a:	4904      	ldr	r1, [pc, #16]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002712:	7cbb      	ldrb	r3, [r7, #18]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40021000 	.word	0x40021000

08002720 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800272e:	4b75      	ldr	r3, [pc, #468]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d018      	beq.n	800276c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800273a:	4b72      	ldr	r3, [pc, #456]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0203 	and.w	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d10d      	bne.n	8002766 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
       ||
 800274e:	2b00      	cmp	r3, #0
 8002750:	d009      	beq.n	8002766 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002752:	4b6c      	ldr	r3, [pc, #432]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
       ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d047      	beq.n	80027f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	e044      	b.n	80027f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d018      	beq.n	80027a6 <RCCEx_PLLSAI1_Config+0x86>
 8002774:	2b03      	cmp	r3, #3
 8002776:	d825      	bhi.n	80027c4 <RCCEx_PLLSAI1_Config+0xa4>
 8002778:	2b01      	cmp	r3, #1
 800277a:	d002      	beq.n	8002782 <RCCEx_PLLSAI1_Config+0x62>
 800277c:	2b02      	cmp	r3, #2
 800277e:	d009      	beq.n	8002794 <RCCEx_PLLSAI1_Config+0x74>
 8002780:	e020      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002782:	4b60      	ldr	r3, [pc, #384]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11d      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002792:	e01a      	b.n	80027ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002794:	4b5b      	ldr	r3, [pc, #364]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d116      	bne.n	80027ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a4:	e013      	b.n	80027ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027a6:	4b57      	ldr	r3, [pc, #348]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027b2:	4b54      	ldr	r3, [pc, #336]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027c2:	e006      	b.n	80027d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      break;
 80027c8:	e004      	b.n	80027d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ca:	bf00      	nop
 80027cc:	e002      	b.n	80027d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ce:	bf00      	nop
 80027d0:	e000      	b.n	80027d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027da:	4b4a      	ldr	r3, [pc, #296]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	430b      	orrs	r3, r1
 80027f0:	4944      	ldr	r1, [pc, #272]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d17d      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027fc:	4b41      	ldr	r3, [pc, #260]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a40      	ldr	r2, [pc, #256]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002802:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002808:	f7fe fb64 	bl	8000ed4 <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800280e:	e009      	b.n	8002824 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002810:	f7fe fb60 	bl	8000ed4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d902      	bls.n	8002824 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	73fb      	strb	r3, [r7, #15]
        break;
 8002822:	e005      	b.n	8002830 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002824:	4b37      	ldr	r3, [pc, #220]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ef      	bne.n	8002810 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002830:	7bfb      	ldrb	r3, [r7, #15]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d160      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800283c:	4b31      	ldr	r3, [pc, #196]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6892      	ldr	r2, [r2, #8]
 800284c:	0211      	lsls	r1, r2, #8
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68d2      	ldr	r2, [r2, #12]
 8002852:	0912      	lsrs	r2, r2, #4
 8002854:	0452      	lsls	r2, r2, #17
 8002856:	430a      	orrs	r2, r1
 8002858:	492a      	ldr	r1, [pc, #168]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	610b      	str	r3, [r1, #16]
 800285e:	e027      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d112      	bne.n	800288c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002866:	4b27      	ldr	r3, [pc, #156]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800286e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6892      	ldr	r2, [r2, #8]
 8002876:	0211      	lsls	r1, r2, #8
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6912      	ldr	r2, [r2, #16]
 800287c:	0852      	lsrs	r2, r2, #1
 800287e:	3a01      	subs	r2, #1
 8002880:	0552      	lsls	r2, r2, #21
 8002882:	430a      	orrs	r2, r1
 8002884:	491f      	ldr	r1, [pc, #124]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	610b      	str	r3, [r1, #16]
 800288a:	e011      	b.n	80028b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800288c:	4b1d      	ldr	r3, [pc, #116]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002894:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6892      	ldr	r2, [r2, #8]
 800289c:	0211      	lsls	r1, r2, #8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6952      	ldr	r2, [r2, #20]
 80028a2:	0852      	lsrs	r2, r2, #1
 80028a4:	3a01      	subs	r2, #1
 80028a6:	0652      	lsls	r2, r2, #25
 80028a8:	430a      	orrs	r2, r1
 80028aa:	4916      	ldr	r1, [pc, #88]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028b0:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a13      	ldr	r2, [pc, #76]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe fb0a 	bl	8000ed4 <HAL_GetTick>
 80028c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028c2:	e009      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c4:	f7fe fb06 	bl	8000ed4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d902      	bls.n	80028d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	73fb      	strb	r3, [r7, #15]
          break;
 80028d6:	e005      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ef      	beq.n	80028c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	4904      	ldr	r1, [pc, #16]	@ (8002904 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000

08002908 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002916:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002922:	4b67      	ldr	r3, [pc, #412]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0203 	and.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d10d      	bne.n	800294e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
       ||
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800293a:	4b61      	ldr	r3, [pc, #388]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
       ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d047      	beq.n	80029de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	e044      	b.n	80029de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d018      	beq.n	800298e <RCCEx_PLLSAI2_Config+0x86>
 800295c:	2b03      	cmp	r3, #3
 800295e:	d825      	bhi.n	80029ac <RCCEx_PLLSAI2_Config+0xa4>
 8002960:	2b01      	cmp	r3, #1
 8002962:	d002      	beq.n	800296a <RCCEx_PLLSAI2_Config+0x62>
 8002964:	2b02      	cmp	r3, #2
 8002966:	d009      	beq.n	800297c <RCCEx_PLLSAI2_Config+0x74>
 8002968:	e020      	b.n	80029ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800296a:	4b55      	ldr	r3, [pc, #340]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d11d      	bne.n	80029b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800297a:	e01a      	b.n	80029b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800297c:	4b50      	ldr	r3, [pc, #320]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d116      	bne.n	80029b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298c:	e013      	b.n	80029b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800298e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10f      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800299a:	4b49      	ldr	r3, [pc, #292]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029aa:	e006      	b.n	80029ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      break;
 80029b0:	e004      	b.n	80029bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029b2:	bf00      	nop
 80029b4:	e002      	b.n	80029bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029c2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	430b      	orrs	r3, r1
 80029d8:	4939      	ldr	r1, [pc, #228]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d167      	bne.n	8002ab4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029e4:	4b36      	ldr	r3, [pc, #216]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a35      	ldr	r2, [pc, #212]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f0:	f7fe fa70 	bl	8000ed4 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029f6:	e009      	b.n	8002a0c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029f8:	f7fe fa6c 	bl	8000ed4 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d902      	bls.n	8002a0c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	73fb      	strb	r3, [r7, #15]
        break;
 8002a0a:	e005      	b.n	8002a18 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ef      	bne.n	80029f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d14a      	bne.n	8002ab4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d111      	bne.n	8002a48 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a24:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6892      	ldr	r2, [r2, #8]
 8002a34:	0211      	lsls	r1, r2, #8
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68d2      	ldr	r2, [r2, #12]
 8002a3a:	0912      	lsrs	r2, r2, #4
 8002a3c:	0452      	lsls	r2, r2, #17
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	491f      	ldr	r1, [pc, #124]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	614b      	str	r3, [r1, #20]
 8002a46:	e011      	b.n	8002a6c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a48:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a50:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6892      	ldr	r2, [r2, #8]
 8002a58:	0211      	lsls	r1, r2, #8
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6912      	ldr	r2, [r2, #16]
 8002a5e:	0852      	lsrs	r2, r2, #1
 8002a60:	3a01      	subs	r2, #1
 8002a62:	0652      	lsls	r2, r2, #25
 8002a64:	430a      	orrs	r2, r1
 8002a66:	4916      	ldr	r1, [pc, #88]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a6c:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a13      	ldr	r2, [pc, #76]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fa2c 	bl	8000ed4 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a7e:	e009      	b.n	8002a94 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a80:	f7fe fa28 	bl	8000ed4 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d902      	bls.n	8002a94 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	73fb      	strb	r3, [r7, #15]
          break;
 8002a92:	e005      	b.n	8002aa0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ef      	beq.n	8002a80 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	4904      	ldr	r1, [pc, #16]	@ (8002ac0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e095      	b.n	8002c02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d108      	bne.n	8002af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ae6:	d009      	beq.n	8002afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	61da      	str	r2, [r3, #28]
 8002aee:	e005      	b.n	8002afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe f824 	bl	8000b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b3c:	d902      	bls.n	8002b44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	e002      	b.n	8002b4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b52:	d007      	beq.n	8002b64 <HAL_SPI_Init+0xa0>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b5c:	d002      	beq.n	8002b64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba6:	ea42 0103 	orr.w	r1, r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bae:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	f003 0204 	and.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b088      	sub	sp, #32
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c1a:	f7fe f95b 	bl	8000ed4 <HAL_GetTick>
 8002c1e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d001      	beq.n	8002c34 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	e15c      	b.n	8002eee <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_SPI_Transmit+0x36>
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e154      	b.n	8002eee <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_SPI_Transmit+0x48>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e14d      	b.n	8002eee <HAL_SPI_Transmit+0x2e4>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	88fa      	ldrh	r2, [r7, #6]
 8002c72:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	88fa      	ldrh	r2, [r7, #6]
 8002c78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca4:	d10f      	bne.n	8002cc6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd0:	2b40      	cmp	r3, #64	@ 0x40
 8002cd2:	d007      	beq.n	8002ce4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cec:	d952      	bls.n	8002d94 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_SPI_Transmit+0xf2>
 8002cf6:	8b7b      	ldrh	r3, [r7, #26]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d145      	bne.n	8002d88 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d00:	881a      	ldrh	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0c:	1c9a      	adds	r2, r3, #2
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d20:	e032      	b.n	8002d88 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d112      	bne.n	8002d56 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d34:	881a      	ldrh	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d40:	1c9a      	adds	r2, r3, #2
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d54:	e018      	b.n	8002d88 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d56:	f7fe f8bd 	bl	8000ed4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d803      	bhi.n	8002d6e <HAL_SPI_Transmit+0x164>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6c:	d102      	bne.n	8002d74 <HAL_SPI_Transmit+0x16a>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d109      	bne.n	8002d88 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e0b2      	b.n	8002eee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1c7      	bne.n	8002d22 <HAL_SPI_Transmit+0x118>
 8002d92:	e083      	b.n	8002e9c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_SPI_Transmit+0x198>
 8002d9c:	8b7b      	ldrh	r3, [r7, #26]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d177      	bne.n	8002e92 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d912      	bls.n	8002dd2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbc:	1c9a      	adds	r2, r3, #2
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b02      	subs	r3, #2
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002dd0:	e05f      	b.n	8002e92 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002df8:	e04b      	b.n	8002e92 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d12b      	bne.n	8002e60 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d912      	bls.n	8002e38 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e16:	881a      	ldrh	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e22:	1c9a      	adds	r2, r3, #2
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b02      	subs	r3, #2
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e36:	e02c      	b.n	8002e92 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	7812      	ldrb	r2, [r2, #0]
 8002e44:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e5e:	e018      	b.n	8002e92 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e60:	f7fe f838 	bl	8000ed4 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d803      	bhi.n	8002e78 <HAL_SPI_Transmit+0x26e>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e76:	d102      	bne.n	8002e7e <HAL_SPI_Transmit+0x274>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e02d      	b.n	8002eee <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ae      	bne.n	8002dfa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	6839      	ldr	r1, [r7, #0]
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fcf5 	bl	8003890 <SPI_EndRxTxTransaction>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b088      	sub	sp, #32
 8002efa:	af02      	add	r7, sp, #8
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	4613      	mov	r3, r2
 8002f04:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d001      	beq.n	8002f16 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
 8002f14:	e123      	b.n	800315e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f1e:	d112      	bne.n	8002f46 <HAL_SPI_Receive+0x50>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10e      	bne.n	8002f46 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f912 	bl	8003166 <HAL_SPI_TransmitReceive>
 8002f42:	4603      	mov	r3, r0
 8002f44:	e10b      	b.n	800315e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f46:	f7fd ffc5 	bl	8000ed4 <HAL_GetTick>
 8002f4a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_SPI_Receive+0x62>
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e100      	b.n	800315e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_SPI_Receive+0x74>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0f9      	b.n	800315e <HAL_SPI_Receive+0x268>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2204      	movs	r2, #4
 8002f76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	88fa      	ldrh	r2, [r7, #6]
 8002f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fbc:	d908      	bls.n	8002fd0 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	e007      	b.n	8002fe0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fe8:	d10f      	bne.n	800300a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ff8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003014:	2b40      	cmp	r3, #64	@ 0x40
 8003016:	d007      	beq.n	8003028 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003026:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003030:	d875      	bhi.n	800311e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003032:	e037      	b.n	80030a4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d117      	bne.n	8003072 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f103 020c 	add.w	r2, r3, #12
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003070:	e018      	b.n	80030a4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003072:	f7fd ff2f 	bl	8000ed4 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d803      	bhi.n	800308a <HAL_SPI_Receive+0x194>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d102      	bne.n	8003090 <HAL_SPI_Receive+0x19a>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e05c      	b.n	800315e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1c1      	bne.n	8003034 <HAL_SPI_Receive+0x13e>
 80030b0:	e03b      	b.n	800312a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d115      	bne.n	80030ec <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	b292      	uxth	r2, r2
 80030cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	1c9a      	adds	r2, r3, #2
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80030ea:	e018      	b.n	800311e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ec:	f7fd fef2 	bl	8000ed4 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d803      	bhi.n	8003104 <HAL_SPI_Receive+0x20e>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d102      	bne.n	800310a <HAL_SPI_Receive+0x214>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e01f      	b.n	800315e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1c3      	bne.n	80030b2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	6839      	ldr	r1, [r7, #0]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fb56 	bl	80037e0 <SPI_EndRxTransaction>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800315c:	2300      	movs	r3, #0
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b08a      	sub	sp, #40	@ 0x28
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
 8003172:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003174:	2301      	movs	r3, #1
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003178:	f7fd feac 	bl	8000ed4 <HAL_GetTick>
 800317c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003184:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003194:	7ffb      	ldrb	r3, [r7, #31]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d00c      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x4e>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031a0:	d106      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d102      	bne.n	80031b0 <HAL_SPI_TransmitReceive+0x4a>
 80031aa:	7ffb      	ldrb	r3, [r7, #31]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d001      	beq.n	80031b4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
 80031b2:	e1f3      	b.n	800359c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_SPI_TransmitReceive+0x60>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_SPI_TransmitReceive+0x60>
 80031c0:	887b      	ldrh	r3, [r7, #2]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1e8      	b.n	800359c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x72>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e1e1      	b.n	800359c <HAL_SPI_TransmitReceive+0x436>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d003      	beq.n	80031f4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2205      	movs	r2, #5
 80031f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	887a      	ldrh	r2, [r7, #2]
 8003204:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	887a      	ldrh	r2, [r7, #2]
 800321a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003236:	d802      	bhi.n	800323e <HAL_SPI_TransmitReceive+0xd8>
 8003238:	8abb      	ldrh	r3, [r7, #20]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d908      	bls.n	8003250 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	e007      	b.n	8003260 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800325e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326a:	2b40      	cmp	r3, #64	@ 0x40
 800326c:	d007      	beq.n	800327e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003286:	f240 8083 	bls.w	8003390 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x132>
 8003292:	8afb      	ldrh	r3, [r7, #22]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d16f      	bne.n	8003378 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329c:	881a      	ldrh	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a8:	1c9a      	adds	r2, r3, #2
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032bc:	e05c      	b.n	8003378 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d11b      	bne.n	8003304 <HAL_SPI_TransmitReceive+0x19e>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <HAL_SPI_TransmitReceive+0x19e>
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d113      	bne.n	8003304 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ec:	1c9a      	adds	r2, r3, #2
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d11c      	bne.n	800334c <HAL_SPI_TransmitReceive+0x1e6>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	b292      	uxth	r2, r2
 800332a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	1c9a      	adds	r2, r3, #2
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003348:	2301      	movs	r3, #1
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800334c:	f7fd fdc2 	bl	8000ed4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003358:	429a      	cmp	r2, r3
 800335a:	d80d      	bhi.n	8003378 <HAL_SPI_TransmitReceive+0x212>
 800335c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d009      	beq.n	8003378 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e111      	b.n	800359c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d19d      	bne.n	80032be <HAL_SPI_TransmitReceive+0x158>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d197      	bne.n	80032be <HAL_SPI_TransmitReceive+0x158>
 800338e:	e0e5      	b.n	800355c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x23a>
 8003398:	8afb      	ldrh	r3, [r7, #22]
 800339a:	2b01      	cmp	r3, #1
 800339c:	f040 80d1 	bne.w	8003542 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d912      	bls.n	80033d0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ae:	881a      	ldrh	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ba:	1c9a      	adds	r2, r3, #2
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b02      	subs	r3, #2
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033ce:	e0b8      	b.n	8003542 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	7812      	ldrb	r2, [r2, #0]
 80033dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033f6:	e0a4      	b.n	8003542 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b02      	cmp	r3, #2
 8003404:	d134      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x30a>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02f      	beq.n	8003470 <HAL_SPI_TransmitReceive+0x30a>
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	2b01      	cmp	r3, #1
 8003414:	d12c      	bne.n	8003470 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d912      	bls.n	8003446 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003424:	881a      	ldrh	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003430:	1c9a      	adds	r2, r3, #2
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b02      	subs	r3, #2
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003444:	e012      	b.n	800346c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b01      	cmp	r3, #1
 800347c:	d148      	bne.n	8003510 <HAL_SPI_TransmitReceive+0x3aa>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d042      	beq.n	8003510 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d923      	bls.n	80034de <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	b292      	uxth	r2, r2
 80034a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	1c9a      	adds	r2, r3, #2
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b02      	subs	r3, #2
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d81f      	bhi.n	800350c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	e016      	b.n	800350c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f103 020c 	add.w	r2, r3, #12
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	7812      	ldrb	r2, [r2, #0]
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800350c:	2301      	movs	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003510:	f7fd fce0 	bl	8000ed4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800351c:	429a      	cmp	r2, r3
 800351e:	d803      	bhi.n	8003528 <HAL_SPI_TransmitReceive+0x3c2>
 8003520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003526:	d102      	bne.n	800352e <HAL_SPI_TransmitReceive+0x3c8>
 8003528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e02c      	b.n	800359c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	f47f af55 	bne.w	80033f8 <HAL_SPI_TransmitReceive+0x292>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	f47f af4e 	bne.w	80033f8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f995 	bl	8003890 <SPI_EndRxTxTransaction>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e00e      	b.n	800359c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800359a:	2300      	movs	r3, #0
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	3728      	adds	r7, #40	@ 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035b4:	f7fd fc8e 	bl	8000ed4 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	4413      	add	r3, r2
 80035c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035c4:	f7fd fc86 	bl	8000ed4 <HAL_GetTick>
 80035c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035ca:	4b39      	ldr	r3, [pc, #228]	@ (80036b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	015b      	lsls	r3, r3, #5
 80035d0:	0d1b      	lsrs	r3, r3, #20
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	fb02 f303 	mul.w	r3, r2, r3
 80035d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035da:	e054      	b.n	8003686 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d050      	beq.n	8003686 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035e4:	f7fd fc76 	bl	8000ed4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d902      	bls.n	80035fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d13d      	bne.n	8003676 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003608:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003612:	d111      	bne.n	8003638 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800361c:	d004      	beq.n	8003628 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003626:	d107      	bne.n	8003638 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003636:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003640:	d10f      	bne.n	8003662 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003660:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e017      	b.n	80036a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3b01      	subs	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4013      	ands	r3, r2
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	429a      	cmp	r2, r3
 8003694:	bf0c      	ite	eq
 8003696:	2301      	moveq	r3, #1
 8003698:	2300      	movne	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d19b      	bne.n	80035dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000000 	.word	0x20000000

080036b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80036c6:	f7fd fc05 	bl	8000ed4 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	4413      	add	r3, r2
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036d6:	f7fd fbfd 	bl	8000ed4 <HAL_GetTick>
 80036da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036e4:	4b3d      	ldr	r3, [pc, #244]	@ (80037dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00da      	lsls	r2, r3, #3
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	0d1b      	lsrs	r3, r3, #20
 80036f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036fc:	e060      	b.n	80037c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003704:	d107      	bne.n	8003716 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003714:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d050      	beq.n	80037c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800371e:	f7fd fbd9 	bl	8000ed4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372a:	429a      	cmp	r2, r3
 800372c:	d902      	bls.n	8003734 <SPI_WaitFifoStateUntilTimeout+0x80>
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	2b00      	cmp	r3, #0
 8003732:	d13d      	bne.n	80037b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003742:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800374c:	d111      	bne.n	8003772 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003756:	d004      	beq.n	8003762 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003760:	d107      	bne.n	8003772 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003770:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800377a:	d10f      	bne.n	800379c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800379a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e010      	b.n	80037d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	3b01      	subs	r3, #1
 80037be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d196      	bne.n	80036fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3728      	adds	r7, #40	@ 0x28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000

080037e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037f4:	d111      	bne.n	800381a <SPI_EndRxTransaction+0x3a>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037fe:	d004      	beq.n	800380a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003808:	d107      	bne.n	800381a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2200      	movs	r2, #0
 8003822:	2180      	movs	r1, #128	@ 0x80
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff febd 	bl	80035a4 <SPI_WaitFlagStateUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e023      	b.n	8003888 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003848:	d11d      	bne.n	8003886 <SPI_EndRxTransaction+0xa6>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003852:	d004      	beq.n	800385e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385c:	d113      	bne.n	8003886 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2200      	movs	r2, #0
 8003866:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff ff22 	bl	80036b4 <SPI_WaitFifoStateUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387a:	f043 0220 	orr.w	r2, r3, #32
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e000      	b.n	8003888 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7ff ff03 	bl	80036b4 <SPI_WaitFifoStateUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e027      	b.n	8003914 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2200      	movs	r2, #0
 80038cc:	2180      	movs	r1, #128	@ 0x80
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff fe68 	bl	80035a4 <SPI_WaitFlagStateUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d007      	beq.n	80038ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038de:	f043 0220 	orr.w	r2, r3, #32
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e014      	b.n	8003914 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f7ff fedc 	bl	80036b4 <SPI_WaitFifoStateUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003906:	f043 0220 	orr.w	r2, r3, #32
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e000      	b.n	8003914 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e040      	b.n	80039b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd f954 	bl	8000bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2224      	movs	r2, #36	@ 0x24
 8003948:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fb6a 	bl	800403c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f8af 	bl	8003acc <UART_SetConfig>
 800396e:	4603      	mov	r3, r0
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e01b      	b.n	80039b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fbe9 	bl	8004180 <UART_CheckIdleState>
 80039ae:	4603      	mov	r3, r0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	@ 0x28
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d177      	bne.n	8003ac0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_UART_Transmit+0x24>
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e070      	b.n	8003ac2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2221      	movs	r2, #33	@ 0x21
 80039ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ee:	f7fd fa71 	bl	8000ed4 <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	88fa      	ldrh	r2, [r7, #6]
 8003a00:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a0c:	d108      	bne.n	8003a20 <HAL_UART_Transmit+0x68>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	e003      	b.n	8003a28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a28:	e02f      	b.n	8003a8a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2180      	movs	r1, #128	@ 0x80
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fc4b 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e03b      	b.n	8003ac2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	881a      	ldrh	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	3302      	adds	r3, #2
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e007      	b.n	8003a78 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	781a      	ldrb	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3301      	adds	r3, #1
 8003a76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1c9      	bne.n	8003a2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2140      	movs	r1, #64	@ 0x40
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fc15 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e005      	b.n	8003ac2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e000      	b.n	8003ac2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
  }
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad0:	b08a      	sub	sp, #40	@ 0x28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4ba4      	ldr	r3, [pc, #656]	@ (8003d8c <UART_SetConfig+0x2c0>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a99      	ldr	r2, [pc, #612]	@ (8003d90 <UART_SetConfig+0x2c4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b34:	4313      	orrs	r3, r2
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a90      	ldr	r2, [pc, #576]	@ (8003d94 <UART_SetConfig+0x2c8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d126      	bne.n	8003ba4 <UART_SetConfig+0xd8>
 8003b56:	4b90      	ldr	r3, [pc, #576]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d81b      	bhi.n	8003b9c <UART_SetConfig+0xd0>
 8003b64:	a201      	add	r2, pc, #4	@ (adr r2, 8003b6c <UART_SetConfig+0xa0>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003b8d 	.word	0x08003b8d
 8003b74:	08003b85 	.word	0x08003b85
 8003b78:	08003b95 	.word	0x08003b95
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b82:	e116      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003b84:	2302      	movs	r3, #2
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8a:	e112      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b92:	e10e      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003b94:	2308      	movs	r3, #8
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	e10a      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba2:	e106      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a7c      	ldr	r2, [pc, #496]	@ (8003d9c <UART_SetConfig+0x2d0>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d138      	bne.n	8003c20 <UART_SetConfig+0x154>
 8003bae:	4b7a      	ldr	r3, [pc, #488]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d82d      	bhi.n	8003c18 <UART_SetConfig+0x14c>
 8003bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc4 <UART_SetConfig+0xf8>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003c19 	.word	0x08003c19
 8003bcc:	08003c19 	.word	0x08003c19
 8003bd0:	08003c19 	.word	0x08003c19
 8003bd4:	08003c09 	.word	0x08003c09
 8003bd8:	08003c19 	.word	0x08003c19
 8003bdc:	08003c19 	.word	0x08003c19
 8003be0:	08003c19 	.word	0x08003c19
 8003be4:	08003c01 	.word	0x08003c01
 8003be8:	08003c19 	.word	0x08003c19
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c11 	.word	0x08003c11
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfe:	e0d8      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c00:	2302      	movs	r3, #2
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c06:	e0d4      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0e:	e0d0      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c10:	2308      	movs	r3, #8
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c16:	e0cc      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	e0c8      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a5e      	ldr	r2, [pc, #376]	@ (8003da0 <UART_SetConfig+0x2d4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d125      	bne.n	8003c76 <UART_SetConfig+0x1aa>
 8003c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c34:	2b30      	cmp	r3, #48	@ 0x30
 8003c36:	d016      	beq.n	8003c66 <UART_SetConfig+0x19a>
 8003c38:	2b30      	cmp	r3, #48	@ 0x30
 8003c3a:	d818      	bhi.n	8003c6e <UART_SetConfig+0x1a2>
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d00a      	beq.n	8003c56 <UART_SetConfig+0x18a>
 8003c40:	2b20      	cmp	r3, #32
 8003c42:	d814      	bhi.n	8003c6e <UART_SetConfig+0x1a2>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <UART_SetConfig+0x182>
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d008      	beq.n	8003c5e <UART_SetConfig+0x192>
 8003c4c:	e00f      	b.n	8003c6e <UART_SetConfig+0x1a2>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c54:	e0ad      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c56:	2302      	movs	r3, #2
 8003c58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c5c:	e0a9      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c5e:	2304      	movs	r3, #4
 8003c60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c64:	e0a5      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c66:	2308      	movs	r3, #8
 8003c68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c6c:	e0a1      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c6e:	2310      	movs	r3, #16
 8003c70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c74:	e09d      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a4a      	ldr	r2, [pc, #296]	@ (8003da4 <UART_SetConfig+0x2d8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d125      	bne.n	8003ccc <UART_SetConfig+0x200>
 8003c80:	4b45      	ldr	r3, [pc, #276]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c8c:	d016      	beq.n	8003cbc <UART_SetConfig+0x1f0>
 8003c8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c90:	d818      	bhi.n	8003cc4 <UART_SetConfig+0x1f8>
 8003c92:	2b80      	cmp	r3, #128	@ 0x80
 8003c94:	d00a      	beq.n	8003cac <UART_SetConfig+0x1e0>
 8003c96:	2b80      	cmp	r3, #128	@ 0x80
 8003c98:	d814      	bhi.n	8003cc4 <UART_SetConfig+0x1f8>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <UART_SetConfig+0x1d8>
 8003c9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ca0:	d008      	beq.n	8003cb4 <UART_SetConfig+0x1e8>
 8003ca2:	e00f      	b.n	8003cc4 <UART_SetConfig+0x1f8>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003caa:	e082      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cb2:	e07e      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cba:	e07a      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc2:	e076      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cca:	e072      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a35      	ldr	r2, [pc, #212]	@ (8003da8 <UART_SetConfig+0x2dc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d12a      	bne.n	8003d2c <UART_SetConfig+0x260>
 8003cd6:	4b30      	ldr	r3, [pc, #192]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ce0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ce4:	d01a      	beq.n	8003d1c <UART_SetConfig+0x250>
 8003ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cea:	d81b      	bhi.n	8003d24 <UART_SetConfig+0x258>
 8003cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cf0:	d00c      	beq.n	8003d0c <UART_SetConfig+0x240>
 8003cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cf6:	d815      	bhi.n	8003d24 <UART_SetConfig+0x258>
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <UART_SetConfig+0x238>
 8003cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d00:	d008      	beq.n	8003d14 <UART_SetConfig+0x248>
 8003d02:	e00f      	b.n	8003d24 <UART_SetConfig+0x258>
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d0a:	e052      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d12:	e04e      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d14:	2304      	movs	r3, #4
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d1a:	e04a      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d1c:	2308      	movs	r3, #8
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d22:	e046      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d24:	2310      	movs	r3, #16
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d2a:	e042      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a17      	ldr	r2, [pc, #92]	@ (8003d90 <UART_SetConfig+0x2c4>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d13a      	bne.n	8003dac <UART_SetConfig+0x2e0>
 8003d36:	4b18      	ldr	r3, [pc, #96]	@ (8003d98 <UART_SetConfig+0x2cc>)
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d44:	d01a      	beq.n	8003d7c <UART_SetConfig+0x2b0>
 8003d46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d4a:	d81b      	bhi.n	8003d84 <UART_SetConfig+0x2b8>
 8003d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d50:	d00c      	beq.n	8003d6c <UART_SetConfig+0x2a0>
 8003d52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d56:	d815      	bhi.n	8003d84 <UART_SetConfig+0x2b8>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <UART_SetConfig+0x298>
 8003d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d60:	d008      	beq.n	8003d74 <UART_SetConfig+0x2a8>
 8003d62:	e00f      	b.n	8003d84 <UART_SetConfig+0x2b8>
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6a:	e022      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d72:	e01e      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d74:	2304      	movs	r3, #4
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7a:	e01a      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d82:	e016      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d84:	2310      	movs	r3, #16
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d8a:	e012      	b.n	8003db2 <UART_SetConfig+0x2e6>
 8003d8c:	efff69f3 	.word	0xefff69f3
 8003d90:	40008000 	.word	0x40008000
 8003d94:	40013800 	.word	0x40013800
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40004400 	.word	0x40004400
 8003da0:	40004800 	.word	0x40004800
 8003da4:	40004c00 	.word	0x40004c00
 8003da8:	40005000 	.word	0x40005000
 8003dac:	2310      	movs	r3, #16
 8003dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a9f      	ldr	r2, [pc, #636]	@ (8004034 <UART_SetConfig+0x568>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d17a      	bne.n	8003eb2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d824      	bhi.n	8003e0e <UART_SetConfig+0x342>
 8003dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <UART_SetConfig+0x300>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003e0f 	.word	0x08003e0f
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e0f 	.word	0x08003e0f
 8003ddc:	08003dff 	.word	0x08003dff
 8003de0:	08003e0f 	.word	0x08003e0f
 8003de4:	08003e0f 	.word	0x08003e0f
 8003de8:	08003e0f 	.word	0x08003e0f
 8003dec:	08003e07 	.word	0x08003e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df0:	f7fe f920 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 8003df4:	61f8      	str	r0, [r7, #28]
        break;
 8003df6:	e010      	b.n	8003e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df8:	4b8f      	ldr	r3, [pc, #572]	@ (8004038 <UART_SetConfig+0x56c>)
 8003dfa:	61fb      	str	r3, [r7, #28]
        break;
 8003dfc:	e00d      	b.n	8003e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfe:	f7fe f881 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8003e02:	61f8      	str	r0, [r7, #28]
        break;
 8003e04:	e009      	b.n	8003e1a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e0a:	61fb      	str	r3, [r7, #28]
        break;
 8003e0c:	e005      	b.n	8003e1a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80fb 	beq.w	8004018 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d305      	bcc.n	8003e3e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e38:	69fa      	ldr	r2, [r7, #28]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d903      	bls.n	8003e46 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e44:	e0e8      	b.n	8004018 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	461c      	mov	r4, r3
 8003e4c:	4615      	mov	r5, r2
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	022b      	lsls	r3, r5, #8
 8003e58:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e5c:	0222      	lsls	r2, r4, #8
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	6849      	ldr	r1, [r1, #4]
 8003e62:	0849      	lsrs	r1, r1, #1
 8003e64:	2000      	movs	r0, #0
 8003e66:	4688      	mov	r8, r1
 8003e68:	4681      	mov	r9, r0
 8003e6a:	eb12 0a08 	adds.w	sl, r2, r8
 8003e6e:	eb43 0b09 	adc.w	fp, r3, r9
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e80:	4650      	mov	r0, sl
 8003e82:	4659      	mov	r1, fp
 8003e84:	f7fc f9fc 	bl	8000280 <__aeabi_uldivmod>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e96:	d308      	bcc.n	8003eaa <UART_SetConfig+0x3de>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e9e:	d204      	bcs.n	8003eaa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	e0b6      	b.n	8004018 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003eb0:	e0b2      	b.n	8004018 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eba:	d15e      	bne.n	8003f7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d828      	bhi.n	8003f16 <UART_SetConfig+0x44a>
 8003ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ecc <UART_SetConfig+0x400>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003ef9 	.word	0x08003ef9
 8003ed4:	08003f01 	.word	0x08003f01
 8003ed8:	08003f17 	.word	0x08003f17
 8003edc:	08003f07 	.word	0x08003f07
 8003ee0:	08003f17 	.word	0x08003f17
 8003ee4:	08003f17 	.word	0x08003f17
 8003ee8:	08003f17 	.word	0x08003f17
 8003eec:	08003f0f 	.word	0x08003f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7fe f8a0 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	61f8      	str	r0, [r7, #28]
        break;
 8003ef6:	e014      	b.n	8003f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef8:	f7fe f8b2 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8003efc:	61f8      	str	r0, [r7, #28]
        break;
 8003efe:	e010      	b.n	8003f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f00:	4b4d      	ldr	r3, [pc, #308]	@ (8004038 <UART_SetConfig+0x56c>)
 8003f02:	61fb      	str	r3, [r7, #28]
        break;
 8003f04:	e00d      	b.n	8003f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f06:	f7fd fffd 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8003f0a:	61f8      	str	r0, [r7, #28]
        break;
 8003f0c:	e009      	b.n	8003f22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f12:	61fb      	str	r3, [r7, #28]
        break;
 8003f14:	e005      	b.n	8003f22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d077      	beq.n	8004018 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	005a      	lsls	r2, r3, #1
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	441a      	add	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b0f      	cmp	r3, #15
 8003f42:	d916      	bls.n	8003f72 <UART_SetConfig+0x4a6>
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f4a:	d212      	bcs.n	8003f72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	f023 030f 	bic.w	r3, r3, #15
 8003f54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	8afb      	ldrh	r3, [r7, #22]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	8afa      	ldrh	r2, [r7, #22]
 8003f6e:	60da      	str	r2, [r3, #12]
 8003f70:	e052      	b.n	8004018 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f78:	e04e      	b.n	8004018 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d827      	bhi.n	8003fd2 <UART_SetConfig+0x506>
 8003f82:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <UART_SetConfig+0x4bc>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	08003fb5 	.word	0x08003fb5
 8003f90:	08003fbd 	.word	0x08003fbd
 8003f94:	08003fd3 	.word	0x08003fd3
 8003f98:	08003fc3 	.word	0x08003fc3
 8003f9c:	08003fd3 	.word	0x08003fd3
 8003fa0:	08003fd3 	.word	0x08003fd3
 8003fa4:	08003fd3 	.word	0x08003fd3
 8003fa8:	08003fcb 	.word	0x08003fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fac:	f7fe f842 	bl	8002034 <HAL_RCC_GetPCLK1Freq>
 8003fb0:	61f8      	str	r0, [r7, #28]
        break;
 8003fb2:	e014      	b.n	8003fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb4:	f7fe f854 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8003fb8:	61f8      	str	r0, [r7, #28]
        break;
 8003fba:	e010      	b.n	8003fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004038 <UART_SetConfig+0x56c>)
 8003fbe:	61fb      	str	r3, [r7, #28]
        break;
 8003fc0:	e00d      	b.n	8003fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc2:	f7fd ff9f 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8003fc6:	61f8      	str	r0, [r7, #28]
        break;
 8003fc8:	e009      	b.n	8003fde <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fce:	61fb      	str	r3, [r7, #28]
        break;
 8003fd0:	e005      	b.n	8003fde <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003fdc:	bf00      	nop
    }

    if (pclk != 0U)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d019      	beq.n	8004018 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	085a      	lsrs	r2, r3, #1
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	441a      	add	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	d909      	bls.n	8004012 <UART_SetConfig+0x546>
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004004:	d205      	bcs.n	8004012 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60da      	str	r2, [r3, #12]
 8004010:	e002      	b.n	8004018 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004024:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004028:	4618      	mov	r0, r3
 800402a:	3728      	adds	r7, #40	@ 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004032:	bf00      	nop
 8004034:	40008000 	.word	0x40008000
 8004038:	00f42400 	.word	0x00f42400

0800403c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01a      	beq.n	8004152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800413a:	d10a      	bne.n	8004152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b098      	sub	sp, #96	@ 0x60
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004190:	f7fc fea0 	bl	8000ed4 <HAL_GetTick>
 8004194:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d12e      	bne.n	8004202 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ac:	2200      	movs	r2, #0
 80041ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f88c 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d021      	beq.n	8004202 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e6      	bne.n	80041be <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e062      	b.n	80042c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	2b04      	cmp	r3, #4
 800420e:	d149      	bne.n	80042a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004210:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004218:	2200      	movs	r2, #0
 800421a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f856 	bl	80042d0 <UART_WaitOnFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d03c      	beq.n	80042a4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	623b      	str	r3, [r7, #32]
   return(result);
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800423e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004248:	633b      	str	r3, [r7, #48]	@ 0x30
 800424a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800424e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e6      	bne.n	800422a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60fb      	str	r3, [r7, #12]
   return(result);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800427c:	61fa      	str	r2, [r7, #28]
 800427e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	69b9      	ldr	r1, [r7, #24]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	617b      	str	r3, [r7, #20]
   return(result);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e5      	bne.n	800425c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e011      	b.n	80042c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3758      	adds	r7, #88	@ 0x58
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e0:	e04f      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d04b      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ea:	f7fc fdf3 	bl	8000ed4 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <UART_WaitOnFlagUntilTimeout+0x30>
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e04e      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d037      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b80      	cmp	r3, #128	@ 0x80
 8004316:	d034      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b40      	cmp	r3, #64	@ 0x40
 800431c:	d031      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b08      	cmp	r3, #8
 800432a:	d110      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2208      	movs	r2, #8
 8004332:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f838 	bl	80043aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2208      	movs	r2, #8
 800433e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e029      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800435c:	d111      	bne.n	8004382 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f81e 	bl	80043aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e00f      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	4013      	ands	r3, r2
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	429a      	cmp	r2, r3
 8004390:	bf0c      	ite	eq
 8004392:	2301      	moveq	r3, #1
 8004394:	2300      	movne	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	429a      	cmp	r2, r3
 800439e:	d0a0      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b095      	sub	sp, #84	@ 0x54
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80043d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e6      	bne.n	80043b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3308      	adds	r3, #8
 80043ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3308      	adds	r3, #8
 8004402:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004404:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004406:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800440a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e5      	bne.n	80043e4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800441c:	2b01      	cmp	r3, #1
 800441e:	d118      	bne.n	8004452 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	60bb      	str	r3, [r7, #8]
   return(result);
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f023 0310 	bic.w	r3, r3, #16
 8004434:	647b      	str	r3, [r7, #68]	@ 0x44
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6979      	ldr	r1, [r7, #20]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	613b      	str	r3, [r7, #16]
   return(result);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e6      	bne.n	8004420 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004466:	bf00      	nop
 8004468:	3754      	adds	r7, #84	@ 0x54
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <siprintf>:
 8004474:	b40e      	push	{r1, r2, r3}
 8004476:	b510      	push	{r4, lr}
 8004478:	b09d      	sub	sp, #116	@ 0x74
 800447a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800447c:	9002      	str	r0, [sp, #8]
 800447e:	9006      	str	r0, [sp, #24]
 8004480:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004484:	480a      	ldr	r0, [pc, #40]	@ (80044b0 <siprintf+0x3c>)
 8004486:	9107      	str	r1, [sp, #28]
 8004488:	9104      	str	r1, [sp, #16]
 800448a:	490a      	ldr	r1, [pc, #40]	@ (80044b4 <siprintf+0x40>)
 800448c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004490:	9105      	str	r1, [sp, #20]
 8004492:	2400      	movs	r4, #0
 8004494:	a902      	add	r1, sp, #8
 8004496:	6800      	ldr	r0, [r0, #0]
 8004498:	9301      	str	r3, [sp, #4]
 800449a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800449c:	f000 f994 	bl	80047c8 <_svfiprintf_r>
 80044a0:	9b02      	ldr	r3, [sp, #8]
 80044a2:	701c      	strb	r4, [r3, #0]
 80044a4:	b01d      	add	sp, #116	@ 0x74
 80044a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044aa:	b003      	add	sp, #12
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	2000000c 	.word	0x2000000c
 80044b4:	ffff0208 	.word	0xffff0208

080044b8 <memset>:
 80044b8:	4402      	add	r2, r0
 80044ba:	4603      	mov	r3, r0
 80044bc:	4293      	cmp	r3, r2
 80044be:	d100      	bne.n	80044c2 <memset+0xa>
 80044c0:	4770      	bx	lr
 80044c2:	f803 1b01 	strb.w	r1, [r3], #1
 80044c6:	e7f9      	b.n	80044bc <memset+0x4>

080044c8 <__errno>:
 80044c8:	4b01      	ldr	r3, [pc, #4]	@ (80044d0 <__errno+0x8>)
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	2000000c 	.word	0x2000000c

080044d4 <__libc_init_array>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	4d0d      	ldr	r5, [pc, #52]	@ (800450c <__libc_init_array+0x38>)
 80044d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004510 <__libc_init_array+0x3c>)
 80044da:	1b64      	subs	r4, r4, r5
 80044dc:	10a4      	asrs	r4, r4, #2
 80044de:	2600      	movs	r6, #0
 80044e0:	42a6      	cmp	r6, r4
 80044e2:	d109      	bne.n	80044f8 <__libc_init_array+0x24>
 80044e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004514 <__libc_init_array+0x40>)
 80044e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004518 <__libc_init_array+0x44>)
 80044e8:	f000 fc64 	bl	8004db4 <_init>
 80044ec:	1b64      	subs	r4, r4, r5
 80044ee:	10a4      	asrs	r4, r4, #2
 80044f0:	2600      	movs	r6, #0
 80044f2:	42a6      	cmp	r6, r4
 80044f4:	d105      	bne.n	8004502 <__libc_init_array+0x2e>
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
 80044f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044fc:	4798      	blx	r3
 80044fe:	3601      	adds	r6, #1
 8004500:	e7ee      	b.n	80044e0 <__libc_init_array+0xc>
 8004502:	f855 3b04 	ldr.w	r3, [r5], #4
 8004506:	4798      	blx	r3
 8004508:	3601      	adds	r6, #1
 800450a:	e7f2      	b.n	80044f2 <__libc_init_array+0x1e>
 800450c:	08004e9c 	.word	0x08004e9c
 8004510:	08004e9c 	.word	0x08004e9c
 8004514:	08004e9c 	.word	0x08004e9c
 8004518:	08004ea0 	.word	0x08004ea0

0800451c <__retarget_lock_acquire_recursive>:
 800451c:	4770      	bx	lr

0800451e <__retarget_lock_release_recursive>:
 800451e:	4770      	bx	lr

08004520 <_free_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	4605      	mov	r5, r0
 8004524:	2900      	cmp	r1, #0
 8004526:	d041      	beq.n	80045ac <_free_r+0x8c>
 8004528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800452c:	1f0c      	subs	r4, r1, #4
 800452e:	2b00      	cmp	r3, #0
 8004530:	bfb8      	it	lt
 8004532:	18e4      	addlt	r4, r4, r3
 8004534:	f000 f8e0 	bl	80046f8 <__malloc_lock>
 8004538:	4a1d      	ldr	r2, [pc, #116]	@ (80045b0 <_free_r+0x90>)
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	b933      	cbnz	r3, 800454c <_free_r+0x2c>
 800453e:	6063      	str	r3, [r4, #4]
 8004540:	6014      	str	r4, [r2, #0]
 8004542:	4628      	mov	r0, r5
 8004544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004548:	f000 b8dc 	b.w	8004704 <__malloc_unlock>
 800454c:	42a3      	cmp	r3, r4
 800454e:	d908      	bls.n	8004562 <_free_r+0x42>
 8004550:	6820      	ldr	r0, [r4, #0]
 8004552:	1821      	adds	r1, r4, r0
 8004554:	428b      	cmp	r3, r1
 8004556:	bf01      	itttt	eq
 8004558:	6819      	ldreq	r1, [r3, #0]
 800455a:	685b      	ldreq	r3, [r3, #4]
 800455c:	1809      	addeq	r1, r1, r0
 800455e:	6021      	streq	r1, [r4, #0]
 8004560:	e7ed      	b.n	800453e <_free_r+0x1e>
 8004562:	461a      	mov	r2, r3
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	b10b      	cbz	r3, 800456c <_free_r+0x4c>
 8004568:	42a3      	cmp	r3, r4
 800456a:	d9fa      	bls.n	8004562 <_free_r+0x42>
 800456c:	6811      	ldr	r1, [r2, #0]
 800456e:	1850      	adds	r0, r2, r1
 8004570:	42a0      	cmp	r0, r4
 8004572:	d10b      	bne.n	800458c <_free_r+0x6c>
 8004574:	6820      	ldr	r0, [r4, #0]
 8004576:	4401      	add	r1, r0
 8004578:	1850      	adds	r0, r2, r1
 800457a:	4283      	cmp	r3, r0
 800457c:	6011      	str	r1, [r2, #0]
 800457e:	d1e0      	bne.n	8004542 <_free_r+0x22>
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	6053      	str	r3, [r2, #4]
 8004586:	4408      	add	r0, r1
 8004588:	6010      	str	r0, [r2, #0]
 800458a:	e7da      	b.n	8004542 <_free_r+0x22>
 800458c:	d902      	bls.n	8004594 <_free_r+0x74>
 800458e:	230c      	movs	r3, #12
 8004590:	602b      	str	r3, [r5, #0]
 8004592:	e7d6      	b.n	8004542 <_free_r+0x22>
 8004594:	6820      	ldr	r0, [r4, #0]
 8004596:	1821      	adds	r1, r4, r0
 8004598:	428b      	cmp	r3, r1
 800459a:	bf04      	itt	eq
 800459c:	6819      	ldreq	r1, [r3, #0]
 800459e:	685b      	ldreq	r3, [r3, #4]
 80045a0:	6063      	str	r3, [r4, #4]
 80045a2:	bf04      	itt	eq
 80045a4:	1809      	addeq	r1, r1, r0
 80045a6:	6021      	streq	r1, [r4, #0]
 80045a8:	6054      	str	r4, [r2, #4]
 80045aa:	e7ca      	b.n	8004542 <_free_r+0x22>
 80045ac:	bd38      	pop	{r3, r4, r5, pc}
 80045ae:	bf00      	nop
 80045b0:	200002f4 	.word	0x200002f4

080045b4 <sbrk_aligned>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	4e0f      	ldr	r6, [pc, #60]	@ (80045f4 <sbrk_aligned+0x40>)
 80045b8:	460c      	mov	r4, r1
 80045ba:	6831      	ldr	r1, [r6, #0]
 80045bc:	4605      	mov	r5, r0
 80045be:	b911      	cbnz	r1, 80045c6 <sbrk_aligned+0x12>
 80045c0:	f000 fba4 	bl	8004d0c <_sbrk_r>
 80045c4:	6030      	str	r0, [r6, #0]
 80045c6:	4621      	mov	r1, r4
 80045c8:	4628      	mov	r0, r5
 80045ca:	f000 fb9f 	bl	8004d0c <_sbrk_r>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d103      	bne.n	80045da <sbrk_aligned+0x26>
 80045d2:	f04f 34ff 	mov.w	r4, #4294967295
 80045d6:	4620      	mov	r0, r4
 80045d8:	bd70      	pop	{r4, r5, r6, pc}
 80045da:	1cc4      	adds	r4, r0, #3
 80045dc:	f024 0403 	bic.w	r4, r4, #3
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d0f8      	beq.n	80045d6 <sbrk_aligned+0x22>
 80045e4:	1a21      	subs	r1, r4, r0
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 fb90 	bl	8004d0c <_sbrk_r>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d1f2      	bne.n	80045d6 <sbrk_aligned+0x22>
 80045f0:	e7ef      	b.n	80045d2 <sbrk_aligned+0x1e>
 80045f2:	bf00      	nop
 80045f4:	200002f0 	.word	0x200002f0

080045f8 <_malloc_r>:
 80045f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045fc:	1ccd      	adds	r5, r1, #3
 80045fe:	f025 0503 	bic.w	r5, r5, #3
 8004602:	3508      	adds	r5, #8
 8004604:	2d0c      	cmp	r5, #12
 8004606:	bf38      	it	cc
 8004608:	250c      	movcc	r5, #12
 800460a:	2d00      	cmp	r5, #0
 800460c:	4606      	mov	r6, r0
 800460e:	db01      	blt.n	8004614 <_malloc_r+0x1c>
 8004610:	42a9      	cmp	r1, r5
 8004612:	d904      	bls.n	800461e <_malloc_r+0x26>
 8004614:	230c      	movs	r3, #12
 8004616:	6033      	str	r3, [r6, #0]
 8004618:	2000      	movs	r0, #0
 800461a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800461e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046f4 <_malloc_r+0xfc>
 8004622:	f000 f869 	bl	80046f8 <__malloc_lock>
 8004626:	f8d8 3000 	ldr.w	r3, [r8]
 800462a:	461c      	mov	r4, r3
 800462c:	bb44      	cbnz	r4, 8004680 <_malloc_r+0x88>
 800462e:	4629      	mov	r1, r5
 8004630:	4630      	mov	r0, r6
 8004632:	f7ff ffbf 	bl	80045b4 <sbrk_aligned>
 8004636:	1c43      	adds	r3, r0, #1
 8004638:	4604      	mov	r4, r0
 800463a:	d158      	bne.n	80046ee <_malloc_r+0xf6>
 800463c:	f8d8 4000 	ldr.w	r4, [r8]
 8004640:	4627      	mov	r7, r4
 8004642:	2f00      	cmp	r7, #0
 8004644:	d143      	bne.n	80046ce <_malloc_r+0xd6>
 8004646:	2c00      	cmp	r4, #0
 8004648:	d04b      	beq.n	80046e2 <_malloc_r+0xea>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	4639      	mov	r1, r7
 800464e:	4630      	mov	r0, r6
 8004650:	eb04 0903 	add.w	r9, r4, r3
 8004654:	f000 fb5a 	bl	8004d0c <_sbrk_r>
 8004658:	4581      	cmp	r9, r0
 800465a:	d142      	bne.n	80046e2 <_malloc_r+0xea>
 800465c:	6821      	ldr	r1, [r4, #0]
 800465e:	1a6d      	subs	r5, r5, r1
 8004660:	4629      	mov	r1, r5
 8004662:	4630      	mov	r0, r6
 8004664:	f7ff ffa6 	bl	80045b4 <sbrk_aligned>
 8004668:	3001      	adds	r0, #1
 800466a:	d03a      	beq.n	80046e2 <_malloc_r+0xea>
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	442b      	add	r3, r5
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	f8d8 3000 	ldr.w	r3, [r8]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	bb62      	cbnz	r2, 80046d4 <_malloc_r+0xdc>
 800467a:	f8c8 7000 	str.w	r7, [r8]
 800467e:	e00f      	b.n	80046a0 <_malloc_r+0xa8>
 8004680:	6822      	ldr	r2, [r4, #0]
 8004682:	1b52      	subs	r2, r2, r5
 8004684:	d420      	bmi.n	80046c8 <_malloc_r+0xd0>
 8004686:	2a0b      	cmp	r2, #11
 8004688:	d917      	bls.n	80046ba <_malloc_r+0xc2>
 800468a:	1961      	adds	r1, r4, r5
 800468c:	42a3      	cmp	r3, r4
 800468e:	6025      	str	r5, [r4, #0]
 8004690:	bf18      	it	ne
 8004692:	6059      	strne	r1, [r3, #4]
 8004694:	6863      	ldr	r3, [r4, #4]
 8004696:	bf08      	it	eq
 8004698:	f8c8 1000 	streq.w	r1, [r8]
 800469c:	5162      	str	r2, [r4, r5]
 800469e:	604b      	str	r3, [r1, #4]
 80046a0:	4630      	mov	r0, r6
 80046a2:	f000 f82f 	bl	8004704 <__malloc_unlock>
 80046a6:	f104 000b 	add.w	r0, r4, #11
 80046aa:	1d23      	adds	r3, r4, #4
 80046ac:	f020 0007 	bic.w	r0, r0, #7
 80046b0:	1ac2      	subs	r2, r0, r3
 80046b2:	bf1c      	itt	ne
 80046b4:	1a1b      	subne	r3, r3, r0
 80046b6:	50a3      	strne	r3, [r4, r2]
 80046b8:	e7af      	b.n	800461a <_malloc_r+0x22>
 80046ba:	6862      	ldr	r2, [r4, #4]
 80046bc:	42a3      	cmp	r3, r4
 80046be:	bf0c      	ite	eq
 80046c0:	f8c8 2000 	streq.w	r2, [r8]
 80046c4:	605a      	strne	r2, [r3, #4]
 80046c6:	e7eb      	b.n	80046a0 <_malloc_r+0xa8>
 80046c8:	4623      	mov	r3, r4
 80046ca:	6864      	ldr	r4, [r4, #4]
 80046cc:	e7ae      	b.n	800462c <_malloc_r+0x34>
 80046ce:	463c      	mov	r4, r7
 80046d0:	687f      	ldr	r7, [r7, #4]
 80046d2:	e7b6      	b.n	8004642 <_malloc_r+0x4a>
 80046d4:	461a      	mov	r2, r3
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	42a3      	cmp	r3, r4
 80046da:	d1fb      	bne.n	80046d4 <_malloc_r+0xdc>
 80046dc:	2300      	movs	r3, #0
 80046de:	6053      	str	r3, [r2, #4]
 80046e0:	e7de      	b.n	80046a0 <_malloc_r+0xa8>
 80046e2:	230c      	movs	r3, #12
 80046e4:	6033      	str	r3, [r6, #0]
 80046e6:	4630      	mov	r0, r6
 80046e8:	f000 f80c 	bl	8004704 <__malloc_unlock>
 80046ec:	e794      	b.n	8004618 <_malloc_r+0x20>
 80046ee:	6005      	str	r5, [r0, #0]
 80046f0:	e7d6      	b.n	80046a0 <_malloc_r+0xa8>
 80046f2:	bf00      	nop
 80046f4:	200002f4 	.word	0x200002f4

080046f8 <__malloc_lock>:
 80046f8:	4801      	ldr	r0, [pc, #4]	@ (8004700 <__malloc_lock+0x8>)
 80046fa:	f7ff bf0f 	b.w	800451c <__retarget_lock_acquire_recursive>
 80046fe:	bf00      	nop
 8004700:	200002ec 	.word	0x200002ec

08004704 <__malloc_unlock>:
 8004704:	4801      	ldr	r0, [pc, #4]	@ (800470c <__malloc_unlock+0x8>)
 8004706:	f7ff bf0a 	b.w	800451e <__retarget_lock_release_recursive>
 800470a:	bf00      	nop
 800470c:	200002ec 	.word	0x200002ec

08004710 <__ssputs_r>:
 8004710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004714:	688e      	ldr	r6, [r1, #8]
 8004716:	461f      	mov	r7, r3
 8004718:	42be      	cmp	r6, r7
 800471a:	680b      	ldr	r3, [r1, #0]
 800471c:	4682      	mov	sl, r0
 800471e:	460c      	mov	r4, r1
 8004720:	4690      	mov	r8, r2
 8004722:	d82d      	bhi.n	8004780 <__ssputs_r+0x70>
 8004724:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004728:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800472c:	d026      	beq.n	800477c <__ssputs_r+0x6c>
 800472e:	6965      	ldr	r5, [r4, #20]
 8004730:	6909      	ldr	r1, [r1, #16]
 8004732:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004736:	eba3 0901 	sub.w	r9, r3, r1
 800473a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800473e:	1c7b      	adds	r3, r7, #1
 8004740:	444b      	add	r3, r9
 8004742:	106d      	asrs	r5, r5, #1
 8004744:	429d      	cmp	r5, r3
 8004746:	bf38      	it	cc
 8004748:	461d      	movcc	r5, r3
 800474a:	0553      	lsls	r3, r2, #21
 800474c:	d527      	bpl.n	800479e <__ssputs_r+0x8e>
 800474e:	4629      	mov	r1, r5
 8004750:	f7ff ff52 	bl	80045f8 <_malloc_r>
 8004754:	4606      	mov	r6, r0
 8004756:	b360      	cbz	r0, 80047b2 <__ssputs_r+0xa2>
 8004758:	6921      	ldr	r1, [r4, #16]
 800475a:	464a      	mov	r2, r9
 800475c:	f000 fae6 	bl	8004d2c <memcpy>
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476a:	81a3      	strh	r3, [r4, #12]
 800476c:	6126      	str	r6, [r4, #16]
 800476e:	6165      	str	r5, [r4, #20]
 8004770:	444e      	add	r6, r9
 8004772:	eba5 0509 	sub.w	r5, r5, r9
 8004776:	6026      	str	r6, [r4, #0]
 8004778:	60a5      	str	r5, [r4, #8]
 800477a:	463e      	mov	r6, r7
 800477c:	42be      	cmp	r6, r7
 800477e:	d900      	bls.n	8004782 <__ssputs_r+0x72>
 8004780:	463e      	mov	r6, r7
 8004782:	6820      	ldr	r0, [r4, #0]
 8004784:	4632      	mov	r2, r6
 8004786:	4641      	mov	r1, r8
 8004788:	f000 faa6 	bl	8004cd8 <memmove>
 800478c:	68a3      	ldr	r3, [r4, #8]
 800478e:	1b9b      	subs	r3, r3, r6
 8004790:	60a3      	str	r3, [r4, #8]
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	4433      	add	r3, r6
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	2000      	movs	r0, #0
 800479a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800479e:	462a      	mov	r2, r5
 80047a0:	f000 fad2 	bl	8004d48 <_realloc_r>
 80047a4:	4606      	mov	r6, r0
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d1e0      	bne.n	800476c <__ssputs_r+0x5c>
 80047aa:	6921      	ldr	r1, [r4, #16]
 80047ac:	4650      	mov	r0, sl
 80047ae:	f7ff feb7 	bl	8004520 <_free_r>
 80047b2:	230c      	movs	r3, #12
 80047b4:	f8ca 3000 	str.w	r3, [sl]
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047be:	81a3      	strh	r3, [r4, #12]
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	e7e9      	b.n	800479a <__ssputs_r+0x8a>
	...

080047c8 <_svfiprintf_r>:
 80047c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047cc:	4698      	mov	r8, r3
 80047ce:	898b      	ldrh	r3, [r1, #12]
 80047d0:	061b      	lsls	r3, r3, #24
 80047d2:	b09d      	sub	sp, #116	@ 0x74
 80047d4:	4607      	mov	r7, r0
 80047d6:	460d      	mov	r5, r1
 80047d8:	4614      	mov	r4, r2
 80047da:	d510      	bpl.n	80047fe <_svfiprintf_r+0x36>
 80047dc:	690b      	ldr	r3, [r1, #16]
 80047de:	b973      	cbnz	r3, 80047fe <_svfiprintf_r+0x36>
 80047e0:	2140      	movs	r1, #64	@ 0x40
 80047e2:	f7ff ff09 	bl	80045f8 <_malloc_r>
 80047e6:	6028      	str	r0, [r5, #0]
 80047e8:	6128      	str	r0, [r5, #16]
 80047ea:	b930      	cbnz	r0, 80047fa <_svfiprintf_r+0x32>
 80047ec:	230c      	movs	r3, #12
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	b01d      	add	sp, #116	@ 0x74
 80047f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047fa:	2340      	movs	r3, #64	@ 0x40
 80047fc:	616b      	str	r3, [r5, #20]
 80047fe:	2300      	movs	r3, #0
 8004800:	9309      	str	r3, [sp, #36]	@ 0x24
 8004802:	2320      	movs	r3, #32
 8004804:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004808:	f8cd 800c 	str.w	r8, [sp, #12]
 800480c:	2330      	movs	r3, #48	@ 0x30
 800480e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80049ac <_svfiprintf_r+0x1e4>
 8004812:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004816:	f04f 0901 	mov.w	r9, #1
 800481a:	4623      	mov	r3, r4
 800481c:	469a      	mov	sl, r3
 800481e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004822:	b10a      	cbz	r2, 8004828 <_svfiprintf_r+0x60>
 8004824:	2a25      	cmp	r2, #37	@ 0x25
 8004826:	d1f9      	bne.n	800481c <_svfiprintf_r+0x54>
 8004828:	ebba 0b04 	subs.w	fp, sl, r4
 800482c:	d00b      	beq.n	8004846 <_svfiprintf_r+0x7e>
 800482e:	465b      	mov	r3, fp
 8004830:	4622      	mov	r2, r4
 8004832:	4629      	mov	r1, r5
 8004834:	4638      	mov	r0, r7
 8004836:	f7ff ff6b 	bl	8004710 <__ssputs_r>
 800483a:	3001      	adds	r0, #1
 800483c:	f000 80a7 	beq.w	800498e <_svfiprintf_r+0x1c6>
 8004840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004842:	445a      	add	r2, fp
 8004844:	9209      	str	r2, [sp, #36]	@ 0x24
 8004846:	f89a 3000 	ldrb.w	r3, [sl]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 809f 	beq.w	800498e <_svfiprintf_r+0x1c6>
 8004850:	2300      	movs	r3, #0
 8004852:	f04f 32ff 	mov.w	r2, #4294967295
 8004856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800485a:	f10a 0a01 	add.w	sl, sl, #1
 800485e:	9304      	str	r3, [sp, #16]
 8004860:	9307      	str	r3, [sp, #28]
 8004862:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004866:	931a      	str	r3, [sp, #104]	@ 0x68
 8004868:	4654      	mov	r4, sl
 800486a:	2205      	movs	r2, #5
 800486c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004870:	484e      	ldr	r0, [pc, #312]	@ (80049ac <_svfiprintf_r+0x1e4>)
 8004872:	f7fb fcb5 	bl	80001e0 <memchr>
 8004876:	9a04      	ldr	r2, [sp, #16]
 8004878:	b9d8      	cbnz	r0, 80048b2 <_svfiprintf_r+0xea>
 800487a:	06d0      	lsls	r0, r2, #27
 800487c:	bf44      	itt	mi
 800487e:	2320      	movmi	r3, #32
 8004880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004884:	0711      	lsls	r1, r2, #28
 8004886:	bf44      	itt	mi
 8004888:	232b      	movmi	r3, #43	@ 0x2b
 800488a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800488e:	f89a 3000 	ldrb.w	r3, [sl]
 8004892:	2b2a      	cmp	r3, #42	@ 0x2a
 8004894:	d015      	beq.n	80048c2 <_svfiprintf_r+0xfa>
 8004896:	9a07      	ldr	r2, [sp, #28]
 8004898:	4654      	mov	r4, sl
 800489a:	2000      	movs	r0, #0
 800489c:	f04f 0c0a 	mov.w	ip, #10
 80048a0:	4621      	mov	r1, r4
 80048a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048a6:	3b30      	subs	r3, #48	@ 0x30
 80048a8:	2b09      	cmp	r3, #9
 80048aa:	d94b      	bls.n	8004944 <_svfiprintf_r+0x17c>
 80048ac:	b1b0      	cbz	r0, 80048dc <_svfiprintf_r+0x114>
 80048ae:	9207      	str	r2, [sp, #28]
 80048b0:	e014      	b.n	80048dc <_svfiprintf_r+0x114>
 80048b2:	eba0 0308 	sub.w	r3, r0, r8
 80048b6:	fa09 f303 	lsl.w	r3, r9, r3
 80048ba:	4313      	orrs	r3, r2
 80048bc:	9304      	str	r3, [sp, #16]
 80048be:	46a2      	mov	sl, r4
 80048c0:	e7d2      	b.n	8004868 <_svfiprintf_r+0xa0>
 80048c2:	9b03      	ldr	r3, [sp, #12]
 80048c4:	1d19      	adds	r1, r3, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	9103      	str	r1, [sp, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bfbb      	ittet	lt
 80048ce:	425b      	neglt	r3, r3
 80048d0:	f042 0202 	orrlt.w	r2, r2, #2
 80048d4:	9307      	strge	r3, [sp, #28]
 80048d6:	9307      	strlt	r3, [sp, #28]
 80048d8:	bfb8      	it	lt
 80048da:	9204      	strlt	r2, [sp, #16]
 80048dc:	7823      	ldrb	r3, [r4, #0]
 80048de:	2b2e      	cmp	r3, #46	@ 0x2e
 80048e0:	d10a      	bne.n	80048f8 <_svfiprintf_r+0x130>
 80048e2:	7863      	ldrb	r3, [r4, #1]
 80048e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80048e6:	d132      	bne.n	800494e <_svfiprintf_r+0x186>
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	1d1a      	adds	r2, r3, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	9203      	str	r2, [sp, #12]
 80048f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048f4:	3402      	adds	r4, #2
 80048f6:	9305      	str	r3, [sp, #20]
 80048f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80049bc <_svfiprintf_r+0x1f4>
 80048fc:	7821      	ldrb	r1, [r4, #0]
 80048fe:	2203      	movs	r2, #3
 8004900:	4650      	mov	r0, sl
 8004902:	f7fb fc6d 	bl	80001e0 <memchr>
 8004906:	b138      	cbz	r0, 8004918 <_svfiprintf_r+0x150>
 8004908:	9b04      	ldr	r3, [sp, #16]
 800490a:	eba0 000a 	sub.w	r0, r0, sl
 800490e:	2240      	movs	r2, #64	@ 0x40
 8004910:	4082      	lsls	r2, r0
 8004912:	4313      	orrs	r3, r2
 8004914:	3401      	adds	r4, #1
 8004916:	9304      	str	r3, [sp, #16]
 8004918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800491c:	4824      	ldr	r0, [pc, #144]	@ (80049b0 <_svfiprintf_r+0x1e8>)
 800491e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004922:	2206      	movs	r2, #6
 8004924:	f7fb fc5c 	bl	80001e0 <memchr>
 8004928:	2800      	cmp	r0, #0
 800492a:	d036      	beq.n	800499a <_svfiprintf_r+0x1d2>
 800492c:	4b21      	ldr	r3, [pc, #132]	@ (80049b4 <_svfiprintf_r+0x1ec>)
 800492e:	bb1b      	cbnz	r3, 8004978 <_svfiprintf_r+0x1b0>
 8004930:	9b03      	ldr	r3, [sp, #12]
 8004932:	3307      	adds	r3, #7
 8004934:	f023 0307 	bic.w	r3, r3, #7
 8004938:	3308      	adds	r3, #8
 800493a:	9303      	str	r3, [sp, #12]
 800493c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800493e:	4433      	add	r3, r6
 8004940:	9309      	str	r3, [sp, #36]	@ 0x24
 8004942:	e76a      	b.n	800481a <_svfiprintf_r+0x52>
 8004944:	fb0c 3202 	mla	r2, ip, r2, r3
 8004948:	460c      	mov	r4, r1
 800494a:	2001      	movs	r0, #1
 800494c:	e7a8      	b.n	80048a0 <_svfiprintf_r+0xd8>
 800494e:	2300      	movs	r3, #0
 8004950:	3401      	adds	r4, #1
 8004952:	9305      	str	r3, [sp, #20]
 8004954:	4619      	mov	r1, r3
 8004956:	f04f 0c0a 	mov.w	ip, #10
 800495a:	4620      	mov	r0, r4
 800495c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004960:	3a30      	subs	r2, #48	@ 0x30
 8004962:	2a09      	cmp	r2, #9
 8004964:	d903      	bls.n	800496e <_svfiprintf_r+0x1a6>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0c6      	beq.n	80048f8 <_svfiprintf_r+0x130>
 800496a:	9105      	str	r1, [sp, #20]
 800496c:	e7c4      	b.n	80048f8 <_svfiprintf_r+0x130>
 800496e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004972:	4604      	mov	r4, r0
 8004974:	2301      	movs	r3, #1
 8004976:	e7f0      	b.n	800495a <_svfiprintf_r+0x192>
 8004978:	ab03      	add	r3, sp, #12
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	462a      	mov	r2, r5
 800497e:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <_svfiprintf_r+0x1f0>)
 8004980:	a904      	add	r1, sp, #16
 8004982:	4638      	mov	r0, r7
 8004984:	f3af 8000 	nop.w
 8004988:	1c42      	adds	r2, r0, #1
 800498a:	4606      	mov	r6, r0
 800498c:	d1d6      	bne.n	800493c <_svfiprintf_r+0x174>
 800498e:	89ab      	ldrh	r3, [r5, #12]
 8004990:	065b      	lsls	r3, r3, #25
 8004992:	f53f af2d 	bmi.w	80047f0 <_svfiprintf_r+0x28>
 8004996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004998:	e72c      	b.n	80047f4 <_svfiprintf_r+0x2c>
 800499a:	ab03      	add	r3, sp, #12
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	462a      	mov	r2, r5
 80049a0:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <_svfiprintf_r+0x1f0>)
 80049a2:	a904      	add	r1, sp, #16
 80049a4:	4638      	mov	r0, r7
 80049a6:	f000 f879 	bl	8004a9c <_printf_i>
 80049aa:	e7ed      	b.n	8004988 <_svfiprintf_r+0x1c0>
 80049ac:	08004e60 	.word	0x08004e60
 80049b0:	08004e6a 	.word	0x08004e6a
 80049b4:	00000000 	.word	0x00000000
 80049b8:	08004711 	.word	0x08004711
 80049bc:	08004e66 	.word	0x08004e66

080049c0 <_printf_common>:
 80049c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	4616      	mov	r6, r2
 80049c6:	4698      	mov	r8, r3
 80049c8:	688a      	ldr	r2, [r1, #8]
 80049ca:	690b      	ldr	r3, [r1, #16]
 80049cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bfb8      	it	lt
 80049d4:	4613      	movlt	r3, r2
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049dc:	4607      	mov	r7, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	b10a      	cbz	r2, 80049e6 <_printf_common+0x26>
 80049e2:	3301      	adds	r3, #1
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	0699      	lsls	r1, r3, #26
 80049ea:	bf42      	ittt	mi
 80049ec:	6833      	ldrmi	r3, [r6, #0]
 80049ee:	3302      	addmi	r3, #2
 80049f0:	6033      	strmi	r3, [r6, #0]
 80049f2:	6825      	ldr	r5, [r4, #0]
 80049f4:	f015 0506 	ands.w	r5, r5, #6
 80049f8:	d106      	bne.n	8004a08 <_printf_common+0x48>
 80049fa:	f104 0a19 	add.w	sl, r4, #25
 80049fe:	68e3      	ldr	r3, [r4, #12]
 8004a00:	6832      	ldr	r2, [r6, #0]
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	dc26      	bgt.n	8004a56 <_printf_common+0x96>
 8004a08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a0c:	6822      	ldr	r2, [r4, #0]
 8004a0e:	3b00      	subs	r3, #0
 8004a10:	bf18      	it	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	0692      	lsls	r2, r2, #26
 8004a16:	d42b      	bmi.n	8004a70 <_printf_common+0xb0>
 8004a18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a1c:	4641      	mov	r1, r8
 8004a1e:	4638      	mov	r0, r7
 8004a20:	47c8      	blx	r9
 8004a22:	3001      	adds	r0, #1
 8004a24:	d01e      	beq.n	8004a64 <_printf_common+0xa4>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	6922      	ldr	r2, [r4, #16]
 8004a2a:	f003 0306 	and.w	r3, r3, #6
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	bf02      	ittt	eq
 8004a32:	68e5      	ldreq	r5, [r4, #12]
 8004a34:	6833      	ldreq	r3, [r6, #0]
 8004a36:	1aed      	subeq	r5, r5, r3
 8004a38:	68a3      	ldr	r3, [r4, #8]
 8004a3a:	bf0c      	ite	eq
 8004a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a40:	2500      	movne	r5, #0
 8004a42:	4293      	cmp	r3, r2
 8004a44:	bfc4      	itt	gt
 8004a46:	1a9b      	subgt	r3, r3, r2
 8004a48:	18ed      	addgt	r5, r5, r3
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	341a      	adds	r4, #26
 8004a4e:	42b5      	cmp	r5, r6
 8004a50:	d11a      	bne.n	8004a88 <_printf_common+0xc8>
 8004a52:	2000      	movs	r0, #0
 8004a54:	e008      	b.n	8004a68 <_printf_common+0xa8>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4652      	mov	r2, sl
 8004a5a:	4641      	mov	r1, r8
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	47c8      	blx	r9
 8004a60:	3001      	adds	r0, #1
 8004a62:	d103      	bne.n	8004a6c <_printf_common+0xac>
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6c:	3501      	adds	r5, #1
 8004a6e:	e7c6      	b.n	80049fe <_printf_common+0x3e>
 8004a70:	18e1      	adds	r1, r4, r3
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	2030      	movs	r0, #48	@ 0x30
 8004a76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a7a:	4422      	add	r2, r4
 8004a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a84:	3302      	adds	r3, #2
 8004a86:	e7c7      	b.n	8004a18 <_printf_common+0x58>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	4641      	mov	r1, r8
 8004a8e:	4638      	mov	r0, r7
 8004a90:	47c8      	blx	r9
 8004a92:	3001      	adds	r0, #1
 8004a94:	d0e6      	beq.n	8004a64 <_printf_common+0xa4>
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7d9      	b.n	8004a4e <_printf_common+0x8e>
	...

08004a9c <_printf_i>:
 8004a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	7e0f      	ldrb	r7, [r1, #24]
 8004aa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004aa4:	2f78      	cmp	r7, #120	@ 0x78
 8004aa6:	4691      	mov	r9, r2
 8004aa8:	4680      	mov	r8, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	469a      	mov	sl, r3
 8004aae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ab2:	d807      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ab4:	2f62      	cmp	r7, #98	@ 0x62
 8004ab6:	d80a      	bhi.n	8004ace <_printf_i+0x32>
 8004ab8:	2f00      	cmp	r7, #0
 8004aba:	f000 80d1 	beq.w	8004c60 <_printf_i+0x1c4>
 8004abe:	2f58      	cmp	r7, #88	@ 0x58
 8004ac0:	f000 80b8 	beq.w	8004c34 <_printf_i+0x198>
 8004ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ac8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004acc:	e03a      	b.n	8004b44 <_printf_i+0xa8>
 8004ace:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ad2:	2b15      	cmp	r3, #21
 8004ad4:	d8f6      	bhi.n	8004ac4 <_printf_i+0x28>
 8004ad6:	a101      	add	r1, pc, #4	@ (adr r1, 8004adc <_printf_i+0x40>)
 8004ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004adc:	08004b35 	.word	0x08004b35
 8004ae0:	08004b49 	.word	0x08004b49
 8004ae4:	08004ac5 	.word	0x08004ac5
 8004ae8:	08004ac5 	.word	0x08004ac5
 8004aec:	08004ac5 	.word	0x08004ac5
 8004af0:	08004ac5 	.word	0x08004ac5
 8004af4:	08004b49 	.word	0x08004b49
 8004af8:	08004ac5 	.word	0x08004ac5
 8004afc:	08004ac5 	.word	0x08004ac5
 8004b00:	08004ac5 	.word	0x08004ac5
 8004b04:	08004ac5 	.word	0x08004ac5
 8004b08:	08004c47 	.word	0x08004c47
 8004b0c:	08004b73 	.word	0x08004b73
 8004b10:	08004c01 	.word	0x08004c01
 8004b14:	08004ac5 	.word	0x08004ac5
 8004b18:	08004ac5 	.word	0x08004ac5
 8004b1c:	08004c69 	.word	0x08004c69
 8004b20:	08004ac5 	.word	0x08004ac5
 8004b24:	08004b73 	.word	0x08004b73
 8004b28:	08004ac5 	.word	0x08004ac5
 8004b2c:	08004ac5 	.word	0x08004ac5
 8004b30:	08004c09 	.word	0x08004c09
 8004b34:	6833      	ldr	r3, [r6, #0]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6032      	str	r2, [r6, #0]
 8004b3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b44:	2301      	movs	r3, #1
 8004b46:	e09c      	b.n	8004c82 <_printf_i+0x1e6>
 8004b48:	6833      	ldr	r3, [r6, #0]
 8004b4a:	6820      	ldr	r0, [r4, #0]
 8004b4c:	1d19      	adds	r1, r3, #4
 8004b4e:	6031      	str	r1, [r6, #0]
 8004b50:	0606      	lsls	r6, r0, #24
 8004b52:	d501      	bpl.n	8004b58 <_printf_i+0xbc>
 8004b54:	681d      	ldr	r5, [r3, #0]
 8004b56:	e003      	b.n	8004b60 <_printf_i+0xc4>
 8004b58:	0645      	lsls	r5, r0, #25
 8004b5a:	d5fb      	bpl.n	8004b54 <_printf_i+0xb8>
 8004b5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	da03      	bge.n	8004b6c <_printf_i+0xd0>
 8004b64:	232d      	movs	r3, #45	@ 0x2d
 8004b66:	426d      	negs	r5, r5
 8004b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b6c:	4858      	ldr	r0, [pc, #352]	@ (8004cd0 <_printf_i+0x234>)
 8004b6e:	230a      	movs	r3, #10
 8004b70:	e011      	b.n	8004b96 <_printf_i+0xfa>
 8004b72:	6821      	ldr	r1, [r4, #0]
 8004b74:	6833      	ldr	r3, [r6, #0]
 8004b76:	0608      	lsls	r0, r1, #24
 8004b78:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b7c:	d402      	bmi.n	8004b84 <_printf_i+0xe8>
 8004b7e:	0649      	lsls	r1, r1, #25
 8004b80:	bf48      	it	mi
 8004b82:	b2ad      	uxthmi	r5, r5
 8004b84:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b86:	4852      	ldr	r0, [pc, #328]	@ (8004cd0 <_printf_i+0x234>)
 8004b88:	6033      	str	r3, [r6, #0]
 8004b8a:	bf14      	ite	ne
 8004b8c:	230a      	movne	r3, #10
 8004b8e:	2308      	moveq	r3, #8
 8004b90:	2100      	movs	r1, #0
 8004b92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b96:	6866      	ldr	r6, [r4, #4]
 8004b98:	60a6      	str	r6, [r4, #8]
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	db05      	blt.n	8004baa <_printf_i+0x10e>
 8004b9e:	6821      	ldr	r1, [r4, #0]
 8004ba0:	432e      	orrs	r6, r5
 8004ba2:	f021 0104 	bic.w	r1, r1, #4
 8004ba6:	6021      	str	r1, [r4, #0]
 8004ba8:	d04b      	beq.n	8004c42 <_printf_i+0x1a6>
 8004baa:	4616      	mov	r6, r2
 8004bac:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bb0:	fb03 5711 	mls	r7, r3, r1, r5
 8004bb4:	5dc7      	ldrb	r7, [r0, r7]
 8004bb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bba:	462f      	mov	r7, r5
 8004bbc:	42bb      	cmp	r3, r7
 8004bbe:	460d      	mov	r5, r1
 8004bc0:	d9f4      	bls.n	8004bac <_printf_i+0x110>
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d10b      	bne.n	8004bde <_printf_i+0x142>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	07df      	lsls	r7, r3, #31
 8004bca:	d508      	bpl.n	8004bde <_printf_i+0x142>
 8004bcc:	6923      	ldr	r3, [r4, #16]
 8004bce:	6861      	ldr	r1, [r4, #4]
 8004bd0:	4299      	cmp	r1, r3
 8004bd2:	bfde      	ittt	le
 8004bd4:	2330      	movle	r3, #48	@ 0x30
 8004bd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bde:	1b92      	subs	r2, r2, r6
 8004be0:	6122      	str	r2, [r4, #16]
 8004be2:	f8cd a000 	str.w	sl, [sp]
 8004be6:	464b      	mov	r3, r9
 8004be8:	aa03      	add	r2, sp, #12
 8004bea:	4621      	mov	r1, r4
 8004bec:	4640      	mov	r0, r8
 8004bee:	f7ff fee7 	bl	80049c0 <_printf_common>
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d14a      	bne.n	8004c8c <_printf_i+0x1f0>
 8004bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfa:	b004      	add	sp, #16
 8004bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	f043 0320 	orr.w	r3, r3, #32
 8004c06:	6023      	str	r3, [r4, #0]
 8004c08:	4832      	ldr	r0, [pc, #200]	@ (8004cd4 <_printf_i+0x238>)
 8004c0a:	2778      	movs	r7, #120	@ 0x78
 8004c0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	6831      	ldr	r1, [r6, #0]
 8004c14:	061f      	lsls	r7, r3, #24
 8004c16:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c1a:	d402      	bmi.n	8004c22 <_printf_i+0x186>
 8004c1c:	065f      	lsls	r7, r3, #25
 8004c1e:	bf48      	it	mi
 8004c20:	b2ad      	uxthmi	r5, r5
 8004c22:	6031      	str	r1, [r6, #0]
 8004c24:	07d9      	lsls	r1, r3, #31
 8004c26:	bf44      	itt	mi
 8004c28:	f043 0320 	orrmi.w	r3, r3, #32
 8004c2c:	6023      	strmi	r3, [r4, #0]
 8004c2e:	b11d      	cbz	r5, 8004c38 <_printf_i+0x19c>
 8004c30:	2310      	movs	r3, #16
 8004c32:	e7ad      	b.n	8004b90 <_printf_i+0xf4>
 8004c34:	4826      	ldr	r0, [pc, #152]	@ (8004cd0 <_printf_i+0x234>)
 8004c36:	e7e9      	b.n	8004c0c <_printf_i+0x170>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	f023 0320 	bic.w	r3, r3, #32
 8004c3e:	6023      	str	r3, [r4, #0]
 8004c40:	e7f6      	b.n	8004c30 <_printf_i+0x194>
 8004c42:	4616      	mov	r6, r2
 8004c44:	e7bd      	b.n	8004bc2 <_printf_i+0x126>
 8004c46:	6833      	ldr	r3, [r6, #0]
 8004c48:	6825      	ldr	r5, [r4, #0]
 8004c4a:	6961      	ldr	r1, [r4, #20]
 8004c4c:	1d18      	adds	r0, r3, #4
 8004c4e:	6030      	str	r0, [r6, #0]
 8004c50:	062e      	lsls	r6, r5, #24
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	d501      	bpl.n	8004c5a <_printf_i+0x1be>
 8004c56:	6019      	str	r1, [r3, #0]
 8004c58:	e002      	b.n	8004c60 <_printf_i+0x1c4>
 8004c5a:	0668      	lsls	r0, r5, #25
 8004c5c:	d5fb      	bpl.n	8004c56 <_printf_i+0x1ba>
 8004c5e:	8019      	strh	r1, [r3, #0]
 8004c60:	2300      	movs	r3, #0
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	4616      	mov	r6, r2
 8004c66:	e7bc      	b.n	8004be2 <_printf_i+0x146>
 8004c68:	6833      	ldr	r3, [r6, #0]
 8004c6a:	1d1a      	adds	r2, r3, #4
 8004c6c:	6032      	str	r2, [r6, #0]
 8004c6e:	681e      	ldr	r6, [r3, #0]
 8004c70:	6862      	ldr	r2, [r4, #4]
 8004c72:	2100      	movs	r1, #0
 8004c74:	4630      	mov	r0, r6
 8004c76:	f7fb fab3 	bl	80001e0 <memchr>
 8004c7a:	b108      	cbz	r0, 8004c80 <_printf_i+0x1e4>
 8004c7c:	1b80      	subs	r0, r0, r6
 8004c7e:	6060      	str	r0, [r4, #4]
 8004c80:	6863      	ldr	r3, [r4, #4]
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	2300      	movs	r3, #0
 8004c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c8a:	e7aa      	b.n	8004be2 <_printf_i+0x146>
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	4632      	mov	r2, r6
 8004c90:	4649      	mov	r1, r9
 8004c92:	4640      	mov	r0, r8
 8004c94:	47d0      	blx	sl
 8004c96:	3001      	adds	r0, #1
 8004c98:	d0ad      	beq.n	8004bf6 <_printf_i+0x15a>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	079b      	lsls	r3, r3, #30
 8004c9e:	d413      	bmi.n	8004cc8 <_printf_i+0x22c>
 8004ca0:	68e0      	ldr	r0, [r4, #12]
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	4298      	cmp	r0, r3
 8004ca6:	bfb8      	it	lt
 8004ca8:	4618      	movlt	r0, r3
 8004caa:	e7a6      	b.n	8004bfa <_printf_i+0x15e>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4632      	mov	r2, r6
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	47d0      	blx	sl
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	d09d      	beq.n	8004bf6 <_printf_i+0x15a>
 8004cba:	3501      	adds	r5, #1
 8004cbc:	68e3      	ldr	r3, [r4, #12]
 8004cbe:	9903      	ldr	r1, [sp, #12]
 8004cc0:	1a5b      	subs	r3, r3, r1
 8004cc2:	42ab      	cmp	r3, r5
 8004cc4:	dcf2      	bgt.n	8004cac <_printf_i+0x210>
 8004cc6:	e7eb      	b.n	8004ca0 <_printf_i+0x204>
 8004cc8:	2500      	movs	r5, #0
 8004cca:	f104 0619 	add.w	r6, r4, #25
 8004cce:	e7f5      	b.n	8004cbc <_printf_i+0x220>
 8004cd0:	08004e71 	.word	0x08004e71
 8004cd4:	08004e82 	.word	0x08004e82

08004cd8 <memmove>:
 8004cd8:	4288      	cmp	r0, r1
 8004cda:	b510      	push	{r4, lr}
 8004cdc:	eb01 0402 	add.w	r4, r1, r2
 8004ce0:	d902      	bls.n	8004ce8 <memmove+0x10>
 8004ce2:	4284      	cmp	r4, r0
 8004ce4:	4623      	mov	r3, r4
 8004ce6:	d807      	bhi.n	8004cf8 <memmove+0x20>
 8004ce8:	1e43      	subs	r3, r0, #1
 8004cea:	42a1      	cmp	r1, r4
 8004cec:	d008      	beq.n	8004d00 <memmove+0x28>
 8004cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cf6:	e7f8      	b.n	8004cea <memmove+0x12>
 8004cf8:	4402      	add	r2, r0
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	428a      	cmp	r2, r1
 8004cfe:	d100      	bne.n	8004d02 <memmove+0x2a>
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d0a:	e7f7      	b.n	8004cfc <memmove+0x24>

08004d0c <_sbrk_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	4d06      	ldr	r5, [pc, #24]	@ (8004d28 <_sbrk_r+0x1c>)
 8004d10:	2300      	movs	r3, #0
 8004d12:	4604      	mov	r4, r0
 8004d14:	4608      	mov	r0, r1
 8004d16:	602b      	str	r3, [r5, #0]
 8004d18:	f7fb fffa 	bl	8000d10 <_sbrk>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d102      	bne.n	8004d26 <_sbrk_r+0x1a>
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	b103      	cbz	r3, 8004d26 <_sbrk_r+0x1a>
 8004d24:	6023      	str	r3, [r4, #0]
 8004d26:	bd38      	pop	{r3, r4, r5, pc}
 8004d28:	200002e8 	.word	0x200002e8

08004d2c <memcpy>:
 8004d2c:	440a      	add	r2, r1
 8004d2e:	4291      	cmp	r1, r2
 8004d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d34:	d100      	bne.n	8004d38 <memcpy+0xc>
 8004d36:	4770      	bx	lr
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d42:	4291      	cmp	r1, r2
 8004d44:	d1f9      	bne.n	8004d3a <memcpy+0xe>
 8004d46:	bd10      	pop	{r4, pc}

08004d48 <_realloc_r>:
 8004d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4c:	4607      	mov	r7, r0
 8004d4e:	4614      	mov	r4, r2
 8004d50:	460d      	mov	r5, r1
 8004d52:	b921      	cbnz	r1, 8004d5e <_realloc_r+0x16>
 8004d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d58:	4611      	mov	r1, r2
 8004d5a:	f7ff bc4d 	b.w	80045f8 <_malloc_r>
 8004d5e:	b92a      	cbnz	r2, 8004d6c <_realloc_r+0x24>
 8004d60:	f7ff fbde 	bl	8004520 <_free_r>
 8004d64:	4625      	mov	r5, r4
 8004d66:	4628      	mov	r0, r5
 8004d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d6c:	f000 f81a 	bl	8004da4 <_malloc_usable_size_r>
 8004d70:	4284      	cmp	r4, r0
 8004d72:	4606      	mov	r6, r0
 8004d74:	d802      	bhi.n	8004d7c <_realloc_r+0x34>
 8004d76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d7a:	d8f4      	bhi.n	8004d66 <_realloc_r+0x1e>
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4638      	mov	r0, r7
 8004d80:	f7ff fc3a 	bl	80045f8 <_malloc_r>
 8004d84:	4680      	mov	r8, r0
 8004d86:	b908      	cbnz	r0, 8004d8c <_realloc_r+0x44>
 8004d88:	4645      	mov	r5, r8
 8004d8a:	e7ec      	b.n	8004d66 <_realloc_r+0x1e>
 8004d8c:	42b4      	cmp	r4, r6
 8004d8e:	4622      	mov	r2, r4
 8004d90:	4629      	mov	r1, r5
 8004d92:	bf28      	it	cs
 8004d94:	4632      	movcs	r2, r6
 8004d96:	f7ff ffc9 	bl	8004d2c <memcpy>
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	4638      	mov	r0, r7
 8004d9e:	f7ff fbbf 	bl	8004520 <_free_r>
 8004da2:	e7f1      	b.n	8004d88 <_realloc_r+0x40>

08004da4 <_malloc_usable_size_r>:
 8004da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004da8:	1f18      	subs	r0, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	bfbc      	itt	lt
 8004dae:	580b      	ldrlt	r3, [r1, r0]
 8004db0:	18c0      	addlt	r0, r0, r3
 8004db2:	4770      	bx	lr

08004db4 <_init>:
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	bf00      	nop
 8004db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dba:	bc08      	pop	{r3}
 8004dbc:	469e      	mov	lr, r3
 8004dbe:	4770      	bx	lr

08004dc0 <_fini>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	bf00      	nop
 8004dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	469e      	mov	lr, r3
 8004dca:	4770      	bx	lr
