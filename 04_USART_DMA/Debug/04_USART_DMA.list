
04_USART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003d58  08003d58  00004d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003da0  08003da0  00005020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003da0  08003da0  00004da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da8  08003da8  00005020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da8  08003da8  00004da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dac  08003dac  00004dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08003db0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000020  08003dd0  00005020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003dd0  00005160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aeb6  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a40  00000000  00000000  0000ff06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  00011948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000723  00000000  00000000  00012298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e24  00000000  00000000  000129bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b085  00000000  00000000  000377df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3efc  00000000  00000000  00042864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126760  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002538  00000000  00000000  001267a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  00128cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d40 	.word	0x08003d40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08003d40 	.word	0x08003d40

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Callback for DMA transmit complete
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a05      	ldr	r2, [pc, #20]	@ (8000518 <HAL_UART_TxCpltCallback+0x24>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d104      	bne.n	8000510 <HAL_UART_TxCpltCallback+0x1c>
    {
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Toggle LED on TX complete
 8000506:	2120      	movs	r1, #32
 8000508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050c:	f000 fffe 	bl	800150c <HAL_GPIO_TogglePin>
    }
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40004400 	.word	0x40004400

0800051c <HAL_UART_RxCpltCallback>:

// Callback for DMA receive complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a09      	ldr	r2, [pc, #36]	@ (8000550 <HAL_UART_RxCpltCallback+0x34>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d10b      	bne.n	8000546 <HAL_UART_RxCpltCallback+0x2a>
    {
        HAL_UART_Transmit(&huart2, rx_buf, sizeof(rx_buf), HAL_MAX_DELAY); // Echo received data
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	2205      	movs	r2, #5
 8000534:	4907      	ldr	r1, [pc, #28]	@ (8000554 <HAL_UART_RxCpltCallback+0x38>)
 8000536:	4808      	ldr	r0, [pc, #32]	@ (8000558 <HAL_UART_RxCpltCallback+0x3c>)
 8000538:	f002 fb70 	bl	8002c1c <HAL_UART_Transmit>
        HAL_UART_Receive_DMA(&huart2, rx_buf, sizeof(rx_buf)); // Restart DMA reception
 800053c:	2205      	movs	r2, #5
 800053e:	4905      	ldr	r1, [pc, #20]	@ (8000554 <HAL_UART_RxCpltCallback+0x38>)
 8000540:	4805      	ldr	r0, [pc, #20]	@ (8000558 <HAL_UART_RxCpltCallback+0x3c>)
 8000542:	f002 fc71 	bl	8002e28 <HAL_UART_Receive_DMA>
    }
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40004400 	.word	0x40004400
 8000554:	2000003c 	.word	0x2000003c
 8000558:	20000044 	.word	0x20000044

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000560:	f000 fa8c 	bl	8000a7c <HAL_Init>
  SystemClock_Config();
 8000564:	f000 f818 	bl	8000598 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f8be 	bl	80006e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800056c:	f000 f896 	bl	800069c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000570:	f000 f864 	bl	800063c <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  // Start DMA-based UART transmit and receive
  HAL_UART_Transmit_DMA(&huart2, tx_data, sizeof(tx_data)-1); // Transmit message
 8000574:	2212      	movs	r2, #18
 8000576:	4905      	ldr	r1, [pc, #20]	@ (800058c <main+0x30>)
 8000578:	4805      	ldr	r0, [pc, #20]	@ (8000590 <main+0x34>)
 800057a:	f002 fbd9 	bl	8002d30 <HAL_UART_Transmit_DMA>
  HAL_UART_Receive_DMA(&huart2, rx_buf, sizeof(rx_buf));      // Start reception
 800057e:	2205      	movs	r2, #5
 8000580:	4904      	ldr	r1, [pc, #16]	@ (8000594 <main+0x38>)
 8000582:	4803      	ldr	r0, [pc, #12]	@ (8000590 <main+0x34>)
 8000584:	f002 fc50 	bl	8002e28 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <main+0x2c>
 800058c:	20000000 	.word	0x20000000
 8000590:	20000044 	.word	0x20000044
 8000594:	2000003c 	.word	0x2000003c

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	@ 0x58
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2244      	movs	r2, #68	@ 0x44
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f003 fb9d 	bl	8003ce6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) Error_Handler();
 80005ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005be:	f000 ffcd 	bl	800155c <HAL_PWREx_ControlVoltageScaling>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x34>
 80005c8:	f000 f8f4 	bl	80007b4 <Error_Handler>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2310      	movs	r3, #16
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005e6:	230a      	movs	r3, #10
 80005e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) Error_Handler();
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f804 	bl	8001608 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x72>
 8000606:	f000 f8d5 	bl	80007b4 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2303      	movs	r3, #3
 8000610:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) Error_Handler();
 800061e:	463b      	mov	r3, r7
 8000620:	2104      	movs	r1, #4
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fbcc 	bl	8001dc0 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x9a>
 800062e:	f000 f8c1 	bl	80007b4 <Error_Handler>
}
 8000632:	bf00      	nop
 8000634:	3758      	adds	r7, #88	@ 0x58
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000640:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000642:	4a15      	ldr	r2, [pc, #84]	@ (8000698 <MX_USART2_UART_Init+0x5c>)
 8000644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000648:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800064c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000662:	220c      	movs	r2, #12
 8000664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK) Error_Handler();
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_USART2_UART_Init+0x58>)
 8000680:	f002 fa7e 	bl	8002b80 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x52>
 800068a:	f000 f893 	bl	80007b4 <Error_Handler>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000044 	.word	0x20000044
 8000698:	40004400 	.word	0x40004400

0800069c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_DMA_Init+0x48>)
 80006a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006a6:	4a0f      	ldr	r2, [pc, #60]	@ (80006e4 <MX_DMA_Init+0x48>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_DMA_Init+0x48>)
 80006b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  // NVIC configuration for DMA
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2010      	movs	r0, #16
 80006c0:	f000 fb33 	bl	8000d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006c4:	2010      	movs	r0, #16
 80006c6:	f000 fb4c 	bl	8000d62 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2011      	movs	r0, #17
 80006d0:	f000 fb2b 	bl	8000d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006d4:	2011      	movs	r0, #17
 80006d6:	f000 fb44 	bl	8000d62 <HAL_NVIC_EnableIRQ>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_GPIO_Init>:

/**
  * @brief GPIO Initialization Function
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	@ 0x28
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b2b      	ldr	r3, [pc, #172]	@ (80007ac <MX_GPIO_Init+0xc4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	4a2a      	ldr	r2, [pc, #168]	@ (80007ac <MX_GPIO_Init+0xc4>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070a:	4b28      	ldr	r3, [pc, #160]	@ (80007ac <MX_GPIO_Init+0xc4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	4b25      	ldr	r3, [pc, #148]	@ (80007ac <MX_GPIO_Init+0xc4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	4a24      	ldr	r2, [pc, #144]	@ (80007ac <MX_GPIO_Init+0xc4>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000722:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <MX_GPIO_Init+0xc4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <MX_GPIO_Init+0xc4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	4a1e      	ldr	r2, [pc, #120]	@ (80007ac <MX_GPIO_Init+0xc4>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <MX_GPIO_Init+0xc4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <MX_GPIO_Init+0xc4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	4a18      	ldr	r2, [pc, #96]	@ (80007ac <MX_GPIO_Init+0xc4>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000752:	4b16      	ldr	r3, [pc, #88]	@ (80007ac <MX_GPIO_Init+0xc4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2120      	movs	r1, #32
 8000762:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000766:	f000 feb9 	bl	80014dc <HAL_GPIO_WritePin>

  // Button B1
  GPIO_InitStruct.Pin = B1_Pin;
 800076a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000770:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <MX_GPIO_Init+0xc8>)
 8000782:	f000 fd01 	bl	8001188 <HAL_GPIO_Init>

  // LED LD2
  GPIO_InitStruct.Pin = LD2_Pin;
 8000786:	2320      	movs	r3, #32
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a0:	f000 fcf2 	bl	8001188 <HAL_GPIO_Init>
}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	@ 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000800 	.word	0x48000800

080007b4 <Error_Handler>:

/**
  * @brief  Error Handler
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	bf00      	nop
  __disable_irq();
  while (1) {}
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <Error_Handler+0x8>

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <HAL_MspInit+0x44>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <HAL_MspInit+0x44>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e2:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <HAL_MspInit+0x44>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_MspInit+0x44>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b0ac      	sub	sp, #176	@ 0xb0
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2288      	movs	r2, #136	@ 0x88
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f003 fa5c 	bl	8003ce6 <memset>
  if(huart->Instance==USART2)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a4c      	ldr	r2, [pc, #304]	@ (8000964 <HAL_UART_MspInit+0x15c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	f040 8090 	bne.w	800095a <HAL_UART_MspInit+0x152>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800083a:	2302      	movs	r3, #2
 800083c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800083e:	2300      	movs	r3, #0
 8000840:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fcde 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000852:	f7ff ffaf 	bl	80007b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000856:	4b44      	ldr	r3, [pc, #272]	@ (8000968 <HAL_UART_MspInit+0x160>)
 8000858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085a:	4a43      	ldr	r2, [pc, #268]	@ (8000968 <HAL_UART_MspInit+0x160>)
 800085c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000860:	6593      	str	r3, [r2, #88]	@ 0x58
 8000862:	4b41      	ldr	r3, [pc, #260]	@ (8000968 <HAL_UART_MspInit+0x160>)
 8000864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b3e      	ldr	r3, [pc, #248]	@ (8000968 <HAL_UART_MspInit+0x160>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	4a3d      	ldr	r2, [pc, #244]	@ (8000968 <HAL_UART_MspInit+0x160>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800087a:	4b3b      	ldr	r3, [pc, #236]	@ (8000968 <HAL_UART_MspInit+0x160>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000886:	230c      	movs	r3, #12
 8000888:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089e:	2307      	movs	r3, #7
 80008a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008a8:	4619      	mov	r1, r3
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ae:	f000 fc6b 	bl	8001188 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80008b2:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008b4:	4a2e      	ldr	r2, [pc, #184]	@ (8000970 <HAL_UART_MspInit+0x168>)
 80008b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80008b8:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008be:	4b2b      	ldr	r3, [pc, #172]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008c0:	2210      	movs	r2, #16
 80008c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008ca:	4b28      	ldr	r3, [pc, #160]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d6:	4b25      	ldr	r3, [pc, #148]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008dc:	4b23      	ldr	r3, [pc, #140]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008e2:	4b22      	ldr	r3, [pc, #136]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008e4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008ea:	4820      	ldr	r0, [pc, #128]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008ec:	f000 fa54 	bl	8000d98 <HAL_DMA_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80008f6:	f7ff ff5d 	bl	80007b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <HAL_UART_MspInit+0x164>)
 80008fe:	671a      	str	r2, [r3, #112]	@ 0x70
 8000900:	4a1a      	ldr	r2, [pc, #104]	@ (800096c <HAL_UART_MspInit+0x164>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000906:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 8000908:	4a1b      	ldr	r2, [pc, #108]	@ (8000978 <HAL_UART_MspInit+0x170>)
 800090a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800090c:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 800090e:	2202      	movs	r2, #2
 8000910:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000912:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000918:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 8000920:	2280      	movs	r2, #128	@ 0x80
 8000922:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000924:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092a:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000930:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 8000932:	2220      	movs	r2, #32
 8000934:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 8000938:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800093c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 8000940:	f000 fa2a 	bl	8000d98 <HAL_DMA_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 800094a:	f7ff ff33 	bl	80007b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 8000952:	675a      	str	r2, [r3, #116]	@ 0x74
 8000954:	4a07      	ldr	r2, [pc, #28]	@ (8000974 <HAL_UART_MspInit+0x16c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800095a:	bf00      	nop
 800095c:	37b0      	adds	r7, #176	@ 0xb0
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40004400 	.word	0x40004400
 8000968:	40021000 	.word	0x40021000
 800096c:	200000cc 	.word	0x200000cc
 8000970:	40020080 	.word	0x40020080
 8000974:	20000114 	.word	0x20000114
 8000978:	4002006c 	.word	0x4002006c

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d2:	f000 f8af 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <DMA1_Channel6_IRQHandler+0x10>)
 80009e2:	f000 faf1 	bl	8000fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000114 	.word	0x20000114

080009f0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <DMA1_Channel7_IRQHandler+0x10>)
 80009f6:	f000 fae7 	bl	8000fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000cc 	.word	0x200000cc

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a60 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a2c:	f7ff ffea 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	@ (8000a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <LoopForever+0xe>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	@ (8000a74 <LoopForever+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a56:	f003 f94f 	bl	8003cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5a:	f7ff fd7f 	bl	800055c <main>

08000a5e <LoopForever>:

LoopForever:
    b LoopForever
 8000a5e:	e7fe      	b.n	8000a5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000a6c:	08003db0 	.word	0x08003db0
  ldr r2, =_sbss
 8000a70:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000a74:	20000160 	.word	0x20000160

08000a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC1_2_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <HAL_Init+0x3c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab8 <HAL_Init+0x3c>)
 8000a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a90:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a92:	2003      	movs	r0, #3
 8000a94:	f000 f93e 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 f80f 	bl	8000abc <HAL_InitTick>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d002      	beq.n	8000aaa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	71fb      	strb	r3, [r7, #7]
 8000aa8:	e001      	b.n	8000aae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aaa:	f7ff fe89 	bl	80007c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <HAL_InitTick+0x6c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d023      	beq.n	8000b18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <HAL_InitTick+0x70>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <HAL_InitTick+0x6c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f949 	bl	8000d7e <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10f      	bne.n	8000b12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d809      	bhi.n	8000b0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 f913 	bl	8000d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b04:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <HAL_InitTick+0x74>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e007      	b.n	8000b1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	e004      	b.n	8000b1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
 8000b16:	e001      	b.n	8000b1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000001c 	.word	0x2000001c
 8000b2c:	20000014 	.word	0x20000014
 8000b30:	20000018 	.word	0x20000018

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	@ (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2000001c 	.word	0x2000001c
 8000b58:	2000015c 	.word	0x2000015c

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000015c 	.word	0x2000015c

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4907      	ldr	r1, [pc, #28]	@ (8000c10 <__NVIC_EnableIRQ+0x38>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	@ (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	@ 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	@ 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f7ff ff8e 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	@ (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff29 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff3e 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff8e 	bl	8000c68 <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5d 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff31 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffa2 	bl	8000cd0 <SysTick_Config>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e098      	b.n	8000edc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4b4d      	ldr	r3, [pc, #308]	@ (8000ee8 <HAL_DMA_Init+0x150>)
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d80f      	bhi.n	8000dd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8000eec <HAL_DMA_Init+0x154>)
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8000ef0 <HAL_DMA_Init+0x158>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	009a      	lsls	r2, r3, #2
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a48      	ldr	r2, [pc, #288]	@ (8000ef4 <HAL_DMA_Init+0x15c>)
 8000dd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dd4:	e00e      	b.n	8000df4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b46      	ldr	r3, [pc, #280]	@ (8000ef8 <HAL_DMA_Init+0x160>)
 8000dde:	4413      	add	r3, r2
 8000de0:	4a43      	ldr	r2, [pc, #268]	@ (8000ef0 <HAL_DMA_Init+0x158>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	009a      	lsls	r2, r3, #2
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a42      	ldr	r2, [pc, #264]	@ (8000efc <HAL_DMA_Init+0x164>)
 8000df2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2202      	movs	r2, #2
 8000df8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e4e:	d039      	beq.n	8000ec4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	4a27      	ldr	r2, [pc, #156]	@ (8000ef4 <HAL_DMA_Init+0x15c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d11a      	bne.n	8000e90 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e5a:	4b29      	ldr	r3, [pc, #164]	@ (8000f00 <HAL_DMA_Init+0x168>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e62:	f003 031c 	and.w	r3, r3, #28
 8000e66:	210f      	movs	r1, #15
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4924      	ldr	r1, [pc, #144]	@ (8000f00 <HAL_DMA_Init+0x168>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <HAL_DMA_Init+0x168>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6859      	ldr	r1, [r3, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e80:	f003 031c 	and.w	r3, r3, #28
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	491d      	ldr	r1, [pc, #116]	@ (8000f00 <HAL_DMA_Init+0x168>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
 8000e8e:	e019      	b.n	8000ec4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <HAL_DMA_Init+0x16c>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e98:	f003 031c 	and.w	r3, r3, #28
 8000e9c:	210f      	movs	r1, #15
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4917      	ldr	r1, [pc, #92]	@ (8000f04 <HAL_DMA_Init+0x16c>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000eaa:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <HAL_DMA_Init+0x16c>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6859      	ldr	r1, [r3, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f003 031c 	and.w	r3, r3, #28
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	4911      	ldr	r1, [pc, #68]	@ (8000f04 <HAL_DMA_Init+0x16c>)
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	40020407 	.word	0x40020407
 8000eec:	bffdfff8 	.word	0xbffdfff8
 8000ef0:	cccccccd 	.word	0xcccccccd
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	bffdfbf8 	.word	0xbffdfbf8
 8000efc:	40020400 	.word	0x40020400
 8000f00:	400200a8 	.word	0x400200a8
 8000f04:	400204a8 	.word	0x400204a8

08000f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d101      	bne.n	8000f28 <HAL_DMA_Start_IT+0x20>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e04b      	b.n	8000fc0 <HAL_DMA_Start_IT+0xb8>
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d13a      	bne.n	8000fb2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2202      	movs	r2, #2
 8000f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2200      	movs	r2, #0
 8000f48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 f8e0 	bl	8001126 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f042 020e 	orr.w	r2, r2, #14
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	e00f      	b.n	8000fa0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0204 	bic.w	r2, r2, #4
 8000f8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 020a 	orr.w	r2, r2, #10
 8000f9e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e005      	b.n	8000fbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe4:	f003 031c 	and.w	r3, r3, #28
 8000fe8:	2204      	movs	r2, #4
 8000fea:	409a      	lsls	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d026      	beq.n	8001042 <HAL_DMA_IRQHandler+0x7a>
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d021      	beq.n	8001042 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0320 	and.w	r3, r3, #32
 8001008:	2b00      	cmp	r3, #0
 800100a:	d107      	bne.n	800101c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0204 	bic.w	r2, r2, #4
 800101a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001020:	f003 021c 	and.w	r2, r3, #28
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	2104      	movs	r1, #4
 800102a:	fa01 f202 	lsl.w	r2, r1, r2
 800102e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001034:	2b00      	cmp	r3, #0
 8001036:	d071      	beq.n	800111c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001040:	e06c      	b.n	800111c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	f003 031c 	and.w	r3, r3, #28
 800104a:	2202      	movs	r2, #2
 800104c:	409a      	lsls	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d02e      	beq.n	80010b4 <HAL_DMA_IRQHandler+0xec>
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d029      	beq.n	80010b4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10b      	bne.n	8001086 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 020a 	bic.w	r2, r2, #10
 800107c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108a:	f003 021c 	and.w	r2, r3, #28
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	2102      	movs	r1, #2
 8001094:	fa01 f202 	lsl.w	r2, r1, r2
 8001098:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d038      	beq.n	800111c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80010b2:	e033      	b.n	800111c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b8:	f003 031c 	and.w	r3, r3, #28
 80010bc:	2208      	movs	r2, #8
 80010be:	409a      	lsls	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d02a      	beq.n	800111e <HAL_DMA_IRQHandler+0x156>
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d025      	beq.n	800111e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 020e 	bic.w	r2, r2, #14
 80010e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	f003 021c 	and.w	r2, r3, #28
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800111c:	bf00      	nop
 800111e:	bf00      	nop
}
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001138:	f003 021c 	and.w	r2, r3, #28
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	2101      	movs	r1, #1
 8001142:	fa01 f202 	lsl.w	r2, r1, r2
 8001146:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b10      	cmp	r3, #16
 8001156:	d108      	bne.n	800116a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001168:	e007      	b.n	800117a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	60da      	str	r2, [r3, #12]
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001196:	e17f      	b.n	8001498 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8171 	beq.w	8001492 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d005      	beq.n	80011c8 <HAL_GPIO_Init+0x40>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d130      	bne.n	800122a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fe:	2201      	movs	r2, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 0201 	and.w	r2, r3, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b03      	cmp	r3, #3
 8001234:	d118      	bne.n	8001268 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800123c:	2201      	movs	r2, #1
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	08db      	lsrs	r3, r3, #3
 8001252:	f003 0201 	and.w	r2, r3, #1
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b03      	cmp	r3, #3
 8001272:	d017      	beq.n	80012a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d123      	bne.n	80012f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	08da      	lsrs	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3208      	adds	r2, #8
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	08da      	lsrs	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3208      	adds	r2, #8
 80012f2:	6939      	ldr	r1, [r7, #16]
 80012f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	2203      	movs	r2, #3
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80ac 	beq.w	8001492 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b5f      	ldr	r3, [pc, #380]	@ (80014b8 <HAL_GPIO_Init+0x330>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800133e:	4a5e      	ldr	r2, [pc, #376]	@ (80014b8 <HAL_GPIO_Init+0x330>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6613      	str	r3, [r2, #96]	@ 0x60
 8001346:	4b5c      	ldr	r3, [pc, #368]	@ (80014b8 <HAL_GPIO_Init+0x330>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001352:	4a5a      	ldr	r2, [pc, #360]	@ (80014bc <HAL_GPIO_Init+0x334>)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800137c:	d025      	beq.n	80013ca <HAL_GPIO_Init+0x242>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4f      	ldr	r2, [pc, #316]	@ (80014c0 <HAL_GPIO_Init+0x338>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d01f      	beq.n	80013c6 <HAL_GPIO_Init+0x23e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4e      	ldr	r2, [pc, #312]	@ (80014c4 <HAL_GPIO_Init+0x33c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d019      	beq.n	80013c2 <HAL_GPIO_Init+0x23a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4d      	ldr	r2, [pc, #308]	@ (80014c8 <HAL_GPIO_Init+0x340>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x236>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4c      	ldr	r2, [pc, #304]	@ (80014cc <HAL_GPIO_Init+0x344>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x232>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4b      	ldr	r2, [pc, #300]	@ (80014d0 <HAL_GPIO_Init+0x348>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x22e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4a      	ldr	r2, [pc, #296]	@ (80014d4 <HAL_GPIO_Init+0x34c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x22a>
 80013ae:	2306      	movs	r3, #6
 80013b0:	e00c      	b.n	80013cc <HAL_GPIO_Init+0x244>
 80013b2:	2307      	movs	r3, #7
 80013b4:	e00a      	b.n	80013cc <HAL_GPIO_Init+0x244>
 80013b6:	2305      	movs	r3, #5
 80013b8:	e008      	b.n	80013cc <HAL_GPIO_Init+0x244>
 80013ba:	2304      	movs	r3, #4
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x244>
 80013be:	2303      	movs	r3, #3
 80013c0:	e004      	b.n	80013cc <HAL_GPIO_Init+0x244>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x244>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x244>
 80013ca:	2300      	movs	r3, #0
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	f002 0203 	and.w	r2, r2, #3
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4093      	lsls	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013dc:	4937      	ldr	r1, [pc, #220]	@ (80014bc <HAL_GPIO_Init+0x334>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ea:	4b3b      	ldr	r3, [pc, #236]	@ (80014d8 <HAL_GPIO_Init+0x350>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800140e:	4a32      	ldr	r2, [pc, #200]	@ (80014d8 <HAL_GPIO_Init+0x350>)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001414:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <HAL_GPIO_Init+0x350>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001438:	4a27      	ldr	r2, [pc, #156]	@ (80014d8 <HAL_GPIO_Init+0x350>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800143e:	4b26      	ldr	r3, [pc, #152]	@ (80014d8 <HAL_GPIO_Init+0x350>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001462:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <HAL_GPIO_Init+0x350>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_GPIO_Init+0x350>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800148c:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <HAL_GPIO_Init+0x350>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f47f ae78 	bne.w	8001198 <HAL_GPIO_Init+0x10>
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	371c      	adds	r7, #28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000
 80014c0:	48000400 	.word	0x48000400
 80014c4:	48000800 	.word	0x48000800
 80014c8:	48000c00 	.word	0x48000c00
 80014cc:	48001000 	.word	0x48001000
 80014d0:	48001400 	.word	0x48001400
 80014d4:	48001800 	.word	0x48001800
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f8:	e002      	b.n	8001500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43d9      	mvns	r1, r3
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	400b      	ands	r3, r1
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <HAL_PWREx_GetVoltageRange+0x18>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40007000 	.word	0x40007000

0800155c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800156a:	d130      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800156c:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001578:	d038      	beq.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001582:	4a1e      	ldr	r2, [pc, #120]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001588:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2232      	movs	r2, #50	@ 0x32
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	0c9b      	lsrs	r3, r3, #18
 800159c:	3301      	adds	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a0:	e002      	b.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b4:	d102      	bne.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f2      	bne.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015c8:	d110      	bne.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e00f      	b.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015da:	d007      	beq.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015e4:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40007000 	.word	0x40007000
 8001600:	20000014 	.word	0x20000014
 8001604:	431bde83 	.word	0x431bde83

08001608 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e3ca      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161a:	4b97      	ldr	r3, [pc, #604]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001624:	4b94      	ldr	r3, [pc, #592]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 80e4 	beq.w	8001804 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <HAL_RCC_OscConfig+0x4a>
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	f040 808b 	bne.w	8001760 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b01      	cmp	r3, #1
 800164e:	f040 8087 	bne.w	8001760 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001652:	4b89      	ldr	r3, [pc, #548]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x62>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e3a2      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1a      	ldr	r2, [r3, #32]
 800166e:	4b82      	ldr	r3, [pc, #520]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <HAL_RCC_OscConfig+0x7c>
 800167a:	4b7f      	ldr	r3, [pc, #508]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001682:	e005      	b.n	8001690 <HAL_RCC_OscConfig+0x88>
 8001684:	4b7c      	ldr	r3, [pc, #496]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001690:	4293      	cmp	r3, r2
 8001692:	d223      	bcs.n	80016dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fd55 	bl	8002148 <RCC_SetFlashLatencyFromMSIRange>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e383      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a8:	4b73      	ldr	r3, [pc, #460]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a72      	ldr	r2, [pc, #456]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b70      	ldr	r3, [pc, #448]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	496d      	ldr	r1, [pc, #436]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	4968      	ldr	r1, [pc, #416]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
 80016da:	e025      	b.n	8001728 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016dc:	4b66      	ldr	r3, [pc, #408]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a65      	ldr	r2, [pc, #404]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b63      	ldr	r3, [pc, #396]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4960      	ldr	r1, [pc, #384]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	495b      	ldr	r1, [pc, #364]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fd15 	bl	8002148 <RCC_SetFlashLatencyFromMSIRange>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e343      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001728:	f000 fc4a 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800172c:	4602      	mov	r2, r0
 800172e:	4b52      	ldr	r3, [pc, #328]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	4950      	ldr	r1, [pc, #320]	@ (800187c <HAL_RCC_OscConfig+0x274>)
 800173a:	5ccb      	ldrb	r3, [r1, r3]
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	4a4e      	ldr	r2, [pc, #312]	@ (8001880 <HAL_RCC_OscConfig+0x278>)
 8001746:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001748:	4b4e      	ldr	r3, [pc, #312]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff f9b5 	bl	8000abc <HAL_InitTick>
 8001752:	4603      	mov	r3, r0
 8001754:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d052      	beq.n	8001802 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	e327      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d032      	beq.n	80017ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001768:	4b43      	ldr	r3, [pc, #268]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a42      	ldr	r2, [pc, #264]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001774:	f7ff f9f2 	bl	8000b5c <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800177c:	f7ff f9ee 	bl	8000b5c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e310      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800178e:	4b3a      	ldr	r3, [pc, #232]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179a:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a36      	ldr	r2, [pc, #216]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b34      	ldr	r3, [pc, #208]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4931      	ldr	r1, [pc, #196]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	492c      	ldr	r1, [pc, #176]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e01a      	b.n	8001804 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a29      	ldr	r2, [pc, #164]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017da:	f7ff f9bf 	bl	8000b5c <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e2:	f7ff f9bb 	bl	8000b5c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e2dd      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x1da>
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001802:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d074      	beq.n	80018fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b08      	cmp	r3, #8
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x21a>
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d10e      	bne.n	800183a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d10b      	bne.n	800183a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d064      	beq.n	80018f8 <HAL_RCC_OscConfig+0x2f0>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d160      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e2ba      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x24a>
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0b      	ldr	r2, [pc, #44]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e026      	b.n	80018a0 <HAL_RCC_OscConfig+0x298>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800185a:	d115      	bne.n	8001888 <HAL_RCC_OscConfig+0x280>
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001862:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a02      	ldr	r2, [pc, #8]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x298>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	08003d58 	.word	0x08003d58
 8001880:	20000014 	.word	0x20000014
 8001884:	20000018 	.word	0x20000018
 8001888:	4ba0      	ldr	r3, [pc, #640]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a9f      	ldr	r2, [pc, #636]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 800188e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b9d      	ldr	r3, [pc, #628]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a9c      	ldr	r2, [pc, #624]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800189e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff f958 	bl	8000b5c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff f954 	bl	8000b5c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	@ 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e276      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c2:	4b92      	ldr	r3, [pc, #584]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2a8>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff f944 	bl	8000b5c <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff f940 	bl	8000b5c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	@ 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e262      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ea:	4b88      	ldr	r3, [pc, #544]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2d0>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d060      	beq.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x310>
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d119      	bne.n	8001946 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d116      	bne.n	8001946 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001918:	4b7c      	ldr	r3, [pc, #496]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_OscConfig+0x328>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e23f      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b76      	ldr	r3, [pc, #472]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	4973      	ldr	r1, [pc, #460]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001944:	e040      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d023      	beq.n	8001996 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6e      	ldr	r2, [pc, #440]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff f8ff 	bl	8000b5c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff f8fb 	bl	8000b5c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e21d      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001974:	4b65      	ldr	r3, [pc, #404]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b62      	ldr	r3, [pc, #392]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	495f      	ldr	r1, [pc, #380]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
 8001994:	e018      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b5d      	ldr	r3, [pc, #372]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a5c      	ldr	r2, [pc, #368]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 800199c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff f8db 	bl	8000b5c <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff f8d7 	bl	8000b5c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e1f9      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019bc:	4b53      	ldr	r3, [pc, #332]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d01c      	beq.n	8001a16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019dc:	4b4b      	ldr	r3, [pc, #300]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e2:	4a4a      	ldr	r2, [pc, #296]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ec:	f7ff f8b6 	bl	8000b5c <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f4:	f7ff f8b2 	bl	8000b5c <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e1d4      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a06:	4b41      	ldr	r3, [pc, #260]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ef      	beq.n	80019f4 <HAL_RCC_OscConfig+0x3ec>
 8001a14:	e01b      	b.n	8001a4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a16:	4b3d      	ldr	r3, [pc, #244]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff f899 	bl	8000b5c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2e:	f7ff f895 	bl	8000b5c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e1b7      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a40:	4b32      	ldr	r3, [pc, #200]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ef      	bne.n	8001a2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80a6 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a60:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10d      	bne.n	8001a88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	4a26      	ldr	r2, [pc, #152]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a78:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a84:	2301      	movs	r3, #1
 8001a86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a88:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d118      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a94:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1d      	ldr	r2, [pc, #116]	@ (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff f85c 	bl	8000b5c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa8:	f7ff f858 	bl	8000b5c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e17a      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4d8>
 8001ace:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ade:	e029      	b.n	8001b34 <HAL_RCC_OscConfig+0x52c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d115      	bne.n	8001b14 <HAL_RCC_OscConfig+0x50c>
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aee:	4a07      	ldr	r2, [pc, #28]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afe:	4a03      	ldr	r2, [pc, #12]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b08:	e014      	b.n	8001b34 <HAL_RCC_OscConfig+0x52c>
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40007000 	.word	0x40007000
 8001b14:	4b9c      	ldr	r3, [pc, #624]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b1a:	4a9b      	ldr	r2, [pc, #620]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b24:	4b98      	ldr	r3, [pc, #608]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2a:	4a97      	ldr	r2, [pc, #604]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d016      	beq.n	8001b6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f80e 	bl	8000b5c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f80a 	bl	8000b5c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e12a      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ed      	beq.n	8001b44 <HAL_RCC_OscConfig+0x53c>
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7fe fff7 	bl	8000b5c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7fe fff3 	bl	8000b5c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e113      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b88:	4b7f      	ldr	r3, [pc, #508]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ed      	bne.n	8001b72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b96:	7ffb      	ldrb	r3, [r7, #31]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b7a      	ldr	r3, [pc, #488]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba0:	4a79      	ldr	r2, [pc, #484]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80fe 	beq.w	8001dae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	f040 80d0 	bne.w	8001d5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bbc:	4b72      	ldr	r3, [pc, #456]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d130      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d127      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11f      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bfc:	2a07      	cmp	r2, #7
 8001bfe:	bf14      	ite	ne
 8001c00:	2201      	movne	r2, #1
 8001c02:	2200      	moveq	r2, #0
 8001c04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d113      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	3b01      	subs	r3, #1
 8001c18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d109      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d06e      	beq.n	8001d10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b0c      	cmp	r3, #12
 8001c36:	d069      	beq.n	8001d0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c38:	4b53      	ldr	r3, [pc, #332]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c44:	4b50      	ldr	r3, [pc, #320]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0ad      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c54:	4b4c      	ldr	r3, [pc, #304]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a4b      	ldr	r2, [pc, #300]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c60:	f7fe ff7c 	bl	8000b5c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c68:	f7fe ff78 	bl	8000b5c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e09a      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7a:	4b43      	ldr	r3, [pc, #268]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c86:	4b40      	ldr	r3, [pc, #256]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	4b40      	ldr	r3, [pc, #256]	@ (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c96:	3a01      	subs	r2, #1
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ca0:	0212      	lsls	r2, r2, #8
 8001ca2:	4311      	orrs	r1, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ca8:	0852      	lsrs	r2, r2, #1
 8001caa:	3a01      	subs	r2, #1
 8001cac:	0552      	lsls	r2, r2, #21
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cb4:	0852      	lsrs	r2, r2, #1
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	0652      	lsls	r2, r2, #25
 8001cba:	4311      	orrs	r1, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cc0:	0912      	lsrs	r2, r2, #4
 8001cc2:	0452      	lsls	r2, r2, #17
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	4930      	ldr	r1, [pc, #192]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ce4:	f7fe ff3a 	bl	8000b5c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe ff36 	bl	8000b5c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e058      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0a:	e050      	b.n	8001dae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e04f      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d10:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d148      	bne.n	8001dae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4a16      	ldr	r2, [pc, #88]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d34:	f7fe ff12 	bl	8000b5c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7fe ff0e 	bl	8000b5c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e030      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x734>
 8001d5a:	e028      	b.n	8001dae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d023      	beq.n	8001daa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a08      	ldr	r2, [pc, #32]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fef5 	bl	8000b5c <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d74:	e00c      	b.n	8001d90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7fe fef1 	bl	8000b5c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d905      	bls.n	8001d90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e013      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_RCC_OscConfig+0x7b0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ec      	bne.n	8001d76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_RCC_OscConfig+0x7b0>)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4905      	ldr	r1, [pc, #20]	@ (8001db8 <HAL_RCC_OscConfig+0x7b0>)
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_RCC_OscConfig+0x7b4>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
 8001da8:	e001      	b.n	8001dae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	feeefffc 	.word	0xfeeefffc

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0e7      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b75      	ldr	r3, [pc, #468]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d910      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b72      	ldr	r3, [pc, #456]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 0207 	bic.w	r2, r3, #7
 8001dea:	4970      	ldr	r1, [pc, #448]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b6e      	ldr	r3, [pc, #440]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0cf      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d010      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b66      	ldr	r3, [pc, #408]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d908      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b63      	ldr	r3, [pc, #396]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4960      	ldr	r1, [pc, #384]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d04c      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d121      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0a6      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	4b54      	ldr	r3, [pc, #336]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e09a      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e76:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e08e      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e86:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e086      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b46      	ldr	r3, [pc, #280]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4943      	ldr	r1, [pc, #268]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea8:	f7fe fe58 	bl	8000b5c <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7fe fe54 	bl	8000b5c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e06e      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4b31      	ldr	r3, [pc, #196]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d208      	bcs.n	8001f06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	492b      	ldr	r1, [pc, #172]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f06:	4b29      	ldr	r3, [pc, #164]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d210      	bcs.n	8001f36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f14:	4b25      	ldr	r3, [pc, #148]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0207 	bic.w	r2, r3, #7
 8001f1c:	4923      	ldr	r1, [pc, #140]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f24:	4b21      	ldr	r3, [pc, #132]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e036      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f42:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4918      	ldr	r1, [pc, #96]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f60:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4910      	ldr	r1, [pc, #64]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f74:	f000 f824 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	490b      	ldr	r1, [pc, #44]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	4a09      	ldr	r2, [pc, #36]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_RCC_ClockConfig+0x1fc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fd8f 	bl	8000abc <HAL_InitTick>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08003d58 	.word	0x08003d58
 8001fb8:	20000014 	.word	0x20000014
 8001fbc:	20000018 	.word	0x20000018

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fce:	4b3e      	ldr	r3, [pc, #248]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d121      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d11e      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ff4:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002000:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	e005      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002010:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800201c:	4a2b      	ldr	r2, [pc, #172]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d102      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002038:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	e004      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d101      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002044:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002046:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d134      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800204e:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d003      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0xa6>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d003      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0xac>
 8002064:	e005      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002068:	617b      	str	r3, [r7, #20]
      break;
 800206a:	e005      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800206c:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800206e:	617b      	str	r3, [r7, #20]
      break;
 8002070:	e002      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	617b      	str	r3, [r7, #20]
      break;
 8002076:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	3301      	adds	r3, #1
 8002084:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	fb03 f202 	mul.w	r2, r3, r2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	0e5b      	lsrs	r3, r3, #25
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	3301      	adds	r3, #1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020b8:	69bb      	ldr	r3, [r7, #24]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	@ 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08003d70 	.word	0x08003d70
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000014 	.word	0x20000014

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4904      	ldr	r1, [pc, #16]	@ (8002118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	08003d68 	.word	0x08003d68

0800211c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002120:	f7ff ffda 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0adb      	lsrs	r3, r3, #11
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4904      	ldr	r1, [pc, #16]	@ (8002144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08003d68 	.word	0x08003d68

08002148 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002154:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002160:	f7ff f9ee 	bl	8001540 <HAL_PWREx_GetVoltageRange>
 8002164:	6178      	str	r0, [r7, #20]
 8002166:	e014      	b.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216c:	4a24      	ldr	r2, [pc, #144]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002172:	6593      	str	r3, [r2, #88]	@ 0x58
 8002174:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002180:	f7ff f9de 	bl	8001540 <HAL_PWREx_GetVoltageRange>
 8002184:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002190:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002198:	d10b      	bne.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b80      	cmp	r3, #128	@ 0x80
 800219e:	d919      	bls.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80021a4:	d902      	bls.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021a6:	2302      	movs	r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e013      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021ac:	2301      	movs	r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e010      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b80      	cmp	r3, #128	@ 0x80
 80021b6:	d902      	bls.n	80021be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021b8:	2303      	movs	r3, #3
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e00a      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b80      	cmp	r3, #128	@ 0x80
 80021c2:	d102      	bne.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c4:	2302      	movs	r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	e004      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b70      	cmp	r3, #112	@ 0x70
 80021ce:	d101      	bne.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d0:	2301      	movs	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 0207 	bic.w	r2, r3, #7
 80021dc:	4909      	ldr	r1, [pc, #36]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021e4:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002210:	2300      	movs	r3, #0
 8002212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002214:	2300      	movs	r3, #0
 8002216:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002220:	2b00      	cmp	r3, #0
 8002222:	d041      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002228:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800222c:	d02a      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800222e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002232:	d824      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002234:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002238:	d008      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800223a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800223e:	d81e      	bhi.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002244:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002248:	d010      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800224a:	e018      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800224c:	4b86      	ldr	r3, [pc, #536]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a85      	ldr	r2, [pc, #532]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002256:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002258:	e015      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fabb 	bl	80027dc <RCCEx_PLLSAI1_Config>
 8002266:	4603      	mov	r3, r0
 8002268:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800226a:	e00c      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3320      	adds	r3, #32
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fba6 	bl	80029c4 <RCCEx_PLLSAI2_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800227c:	e003      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	74fb      	strb	r3, [r7, #19]
      break;
 8002282:	e000      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800228c:	4b76      	ldr	r3, [pc, #472]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002292:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800229a:	4973      	ldr	r1, [pc, #460]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022a2:	e001      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a4:	7cfb      	ldrb	r3, [r7, #19]
 80022a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d041      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022bc:	d02a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022c2:	d824      	bhi.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022c8:	d008      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022ce:	d81e      	bhi.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d8:	d010      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022da:	e018      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022dc:	4b62      	ldr	r3, [pc, #392]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a61      	ldr	r2, [pc, #388]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e8:	e015      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fa73 	bl	80027dc <RCCEx_PLLSAI1_Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022fa:	e00c      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3320      	adds	r3, #32
 8002300:	2100      	movs	r1, #0
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fb5e 	bl	80029c4 <RCCEx_PLLSAI2_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800230c:	e003      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	74fb      	strb	r3, [r7, #19]
      break;
 8002312:	e000      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800231c:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800232a:	494f      	ldr	r1, [pc, #316]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002332:	e001      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80a0 	beq.w	8002486 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002364:	4a40      	ldr	r2, [pc, #256]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800236a:	6593      	str	r3, [r2, #88]	@ 0x58
 800236c:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002378:	2301      	movs	r3, #1
 800237a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800237c:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a3a      	ldr	r2, [pc, #232]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002386:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002388:	f7fe fbe8 	bl	8000b5c <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800238e:	e009      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7fe fbe4 	bl	8000b5c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d902      	bls.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	74fb      	strb	r3, [r7, #19]
        break;
 80023a2:	e005      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023a4:	4b31      	ldr	r3, [pc, #196]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ef      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d15c      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01f      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d019      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023d4:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023e0:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e6:	4a20      	ldr	r2, [pc, #128]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002400:	4a19      	ldr	r2, [pc, #100]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fba3 	bl	8000b5c <HAL_GetTick>
 8002416:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002418:	e00b      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe fb9f 	bl	8000b5c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d902      	bls.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	74fb      	strb	r3, [r7, #19]
            break;
 8002430:	e006      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0ec      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002446:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002456:	4904      	ldr	r1, [pc, #16]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800245e:	e009      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
 8002464:	e006      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002474:	7c7b      	ldrb	r3, [r7, #17]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4b9e      	ldr	r3, [pc, #632]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247e:	4a9d      	ldr	r2, [pc, #628]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002484:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002492:	4b98      	ldr	r3, [pc, #608]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002498:	f023 0203 	bic.w	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a0:	4994      	ldr	r1, [pc, #592]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024b4:	4b8f      	ldr	r3, [pc, #572]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ba:	f023 020c 	bic.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024c2:	498c      	ldr	r1, [pc, #560]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024d6:	4b87      	ldr	r3, [pc, #540]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	4983      	ldr	r1, [pc, #524]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024f8:	4b7e      	ldr	r3, [pc, #504]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	497b      	ldr	r1, [pc, #492]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800251a:	4b76      	ldr	r3, [pc, #472]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002520:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002528:	4972      	ldr	r1, [pc, #456]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800253c:	4b6d      	ldr	r3, [pc, #436]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	496a      	ldr	r1, [pc, #424]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800255e:	4b65      	ldr	r3, [pc, #404]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002564:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	4961      	ldr	r1, [pc, #388]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002580:	4b5c      	ldr	r3, [pc, #368]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002586:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800258e:	4959      	ldr	r1, [pc, #356]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025a2:	4b54      	ldr	r3, [pc, #336]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b0:	4950      	ldr	r1, [pc, #320]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025c4:	4b4b      	ldr	r3, [pc, #300]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d2:	4948      	ldr	r1, [pc, #288]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e6:	4b43      	ldr	r3, [pc, #268]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	493f      	ldr	r1, [pc, #252]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d028      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002608:	4b3a      	ldr	r3, [pc, #232]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002616:	4937      	ldr	r1, [pc, #220]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002626:	d106      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002628:	4b32      	ldr	r3, [pc, #200]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4a31      	ldr	r2, [pc, #196]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002632:	60d3      	str	r3, [r2, #12]
 8002634:	e011      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800263a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800263e:	d10c      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f8c8 	bl	80027dc <RCCEx_PLLSAI1_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d028      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002666:	4b23      	ldr	r3, [pc, #140]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002674:	491f      	ldr	r1, [pc, #124]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002684:	d106      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002686:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4a1a      	ldr	r2, [pc, #104]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002690:	60d3      	str	r3, [r2, #12]
 8002692:	e011      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f899 	bl	80027dc <RCCEx_PLLSAI1_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02b      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d2:	4908      	ldr	r1, [pc, #32]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026e2:	d109      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e4:	4b03      	ldr	r3, [pc, #12]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a02      	ldr	r2, [pc, #8]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026ee:	60d3      	str	r3, [r2, #12]
 80026f0:	e014      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002700:	d10c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f867 	bl	80027dc <RCCEx_PLLSAI1_Config>
 800270e:	4603      	mov	r3, r0
 8002710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d02f      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002728:	4b2b      	ldr	r3, [pc, #172]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002736:	4928      	ldr	r1, [pc, #160]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002746:	d10d      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	2102      	movs	r1, #2
 800274e:	4618      	mov	r0, r3
 8002750:	f000 f844 	bl	80027dc <RCCEx_PLLSAI1_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d014      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	74bb      	strb	r3, [r7, #18]
 8002762:	e011      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800276c:	d10c      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3320      	adds	r3, #32
 8002772:	2102      	movs	r1, #2
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f925 	bl	80029c4 <RCCEx_PLLSAI2_Config>
 800277a:	4603      	mov	r3, r0
 800277c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002794:	4b10      	ldr	r3, [pc, #64]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027a2:	490d      	ldr	r1, [pc, #52]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027b6:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027c6:	4904      	ldr	r1, [pc, #16]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000

080027dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ea:	4b75      	ldr	r3, [pc, #468]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d018      	beq.n	8002828 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027f6:	4b72      	ldr	r3, [pc, #456]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0203 	and.w	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d10d      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
       ||
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800280e:	4b6c      	ldr	r3, [pc, #432]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	091b      	lsrs	r3, r3, #4
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
       ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d047      	beq.n	80028b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e044      	b.n	80028b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d018      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0x86>
 8002830:	2b03      	cmp	r3, #3
 8002832:	d825      	bhi.n	8002880 <RCCEx_PLLSAI1_Config+0xa4>
 8002834:	2b01      	cmp	r3, #1
 8002836:	d002      	beq.n	800283e <RCCEx_PLLSAI1_Config+0x62>
 8002838:	2b02      	cmp	r3, #2
 800283a:	d009      	beq.n	8002850 <RCCEx_PLLSAI1_Config+0x74>
 800283c:	e020      	b.n	8002880 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800283e:	4b60      	ldr	r3, [pc, #384]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d11d      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284e:	e01a      	b.n	8002886 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002850:	4b5b      	ldr	r3, [pc, #364]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002858:	2b00      	cmp	r3, #0
 800285a:	d116      	bne.n	800288a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002860:	e013      	b.n	800288a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002862:	4b57      	ldr	r3, [pc, #348]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800286e:	4b54      	ldr	r3, [pc, #336]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800287e:	e006      	b.n	800288e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e004      	b.n	8002890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002886:	bf00      	nop
 8002888:	e002      	b.n	8002890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800288e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002896:	4b4a      	ldr	r3, [pc, #296]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6819      	ldr	r1, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	430b      	orrs	r3, r1
 80028ac:	4944      	ldr	r1, [pc, #272]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d17d      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028b8:	4b41      	ldr	r3, [pc, #260]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a40      	ldr	r2, [pc, #256]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fe f94a 	bl	8000b5c <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028ca:	e009      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028cc:	f7fe f946 	bl	8000b5c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d902      	bls.n	80028e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	73fb      	strb	r3, [r7, #15]
        break;
 80028de:	e005      	b.n	80028ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028e0:	4b37      	ldr	r3, [pc, #220]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ef      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d160      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d111      	bne.n	800291c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f8:	4b31      	ldr	r3, [pc, #196]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6892      	ldr	r2, [r2, #8]
 8002908:	0211      	lsls	r1, r2, #8
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68d2      	ldr	r2, [r2, #12]
 800290e:	0912      	lsrs	r2, r2, #4
 8002910:	0452      	lsls	r2, r2, #17
 8002912:	430a      	orrs	r2, r1
 8002914:	492a      	ldr	r1, [pc, #168]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002916:	4313      	orrs	r3, r2
 8002918:	610b      	str	r3, [r1, #16]
 800291a:	e027      	b.n	800296c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d112      	bne.n	8002948 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002922:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800292a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6892      	ldr	r2, [r2, #8]
 8002932:	0211      	lsls	r1, r2, #8
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6912      	ldr	r2, [r2, #16]
 8002938:	0852      	lsrs	r2, r2, #1
 800293a:	3a01      	subs	r2, #1
 800293c:	0552      	lsls	r2, r2, #21
 800293e:	430a      	orrs	r2, r1
 8002940:	491f      	ldr	r1, [pc, #124]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	610b      	str	r3, [r1, #16]
 8002946:	e011      	b.n	800296c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002950:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6892      	ldr	r2, [r2, #8]
 8002958:	0211      	lsls	r1, r2, #8
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6952      	ldr	r2, [r2, #20]
 800295e:	0852      	lsrs	r2, r2, #1
 8002960:	3a01      	subs	r2, #1
 8002962:	0652      	lsls	r2, r2, #25
 8002964:	430a      	orrs	r2, r1
 8002966:	4916      	ldr	r1, [pc, #88]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800296c:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a13      	ldr	r2, [pc, #76]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002972:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002976:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7fe f8f0 	bl	8000b5c <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800297e:	e009      	b.n	8002994 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002980:	f7fe f8ec 	bl	8000b5c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d902      	bls.n	8002994 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	73fb      	strb	r3, [r7, #15]
          break;
 8002992:	e005      	b.n	80029a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002994:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ef      	beq.n	8002980 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	4904      	ldr	r1, [pc, #16]	@ (80029c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000

080029c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029d2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d018      	beq.n	8002a10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029de:	4b67      	ldr	r3, [pc, #412]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 0203 	and.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d10d      	bne.n	8002a0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
       ||
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029f6:	4b61      	ldr	r3, [pc, #388]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	091b      	lsrs	r3, r3, #4
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
       ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d047      	beq.n	8002a9a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	e044      	b.n	8002a9a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d018      	beq.n	8002a4a <RCCEx_PLLSAI2_Config+0x86>
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d825      	bhi.n	8002a68 <RCCEx_PLLSAI2_Config+0xa4>
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d002      	beq.n	8002a26 <RCCEx_PLLSAI2_Config+0x62>
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d009      	beq.n	8002a38 <RCCEx_PLLSAI2_Config+0x74>
 8002a24:	e020      	b.n	8002a68 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a26:	4b55      	ldr	r3, [pc, #340]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11d      	bne.n	8002a6e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a36:	e01a      	b.n	8002a6e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a38:	4b50      	ldr	r3, [pc, #320]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d116      	bne.n	8002a72 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e013      	b.n	8002a72 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10f      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a56:	4b49      	ldr	r3, [pc, #292]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a66:	e006      	b.n	8002a76 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e004      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e002      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a72:	bf00      	nop
 8002a74:	e000      	b.n	8002a78 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a76:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10d      	bne.n	8002a9a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6819      	ldr	r1, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	430b      	orrs	r3, r1
 8002a94:	4939      	ldr	r1, [pc, #228]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d167      	bne.n	8002b70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002aa0:	4b36      	ldr	r3, [pc, #216]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a35      	ldr	r2, [pc, #212]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aac:	f7fe f856 	bl	8000b5c <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ab2:	e009      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ab4:	f7fe f852 	bl	8000b5c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d902      	bls.n	8002ac8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ac6:	e005      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ef      	bne.n	8002ab4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d14a      	bne.n	8002b70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d111      	bne.n	8002b04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ae0:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6892      	ldr	r2, [r2, #8]
 8002af0:	0211      	lsls	r1, r2, #8
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	68d2      	ldr	r2, [r2, #12]
 8002af6:	0912      	lsrs	r2, r2, #4
 8002af8:	0452      	lsls	r2, r2, #17
 8002afa:	430a      	orrs	r2, r1
 8002afc:	491f      	ldr	r1, [pc, #124]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	614b      	str	r3, [r1, #20]
 8002b02:	e011      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b04:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6892      	ldr	r2, [r2, #8]
 8002b14:	0211      	lsls	r1, r2, #8
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6912      	ldr	r2, [r2, #16]
 8002b1a:	0852      	lsrs	r2, r2, #1
 8002b1c:	3a01      	subs	r2, #1
 8002b1e:	0652      	lsls	r2, r2, #25
 8002b20:	430a      	orrs	r2, r1
 8002b22:	4916      	ldr	r1, [pc, #88]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a13      	ldr	r2, [pc, #76]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe f812 	bl	8000b5c <HAL_GetTick>
 8002b38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b3a:	e009      	b.n	8002b50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b3c:	f7fe f80e 	bl	8000b5c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d902      	bls.n	8002b50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002b4e:	e005      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b50:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ef      	beq.n	8002b3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4904      	ldr	r1, [pc, #16]	@ (8002b7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000

08002b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e040      	b.n	8002c14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd fe30 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2224      	movs	r2, #36	@ 0x24
 8002bac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fc5c 	bl	8003484 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f9a1 	bl	8002f14 <UART_SetConfig>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e01b      	b.n	8002c14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fcdb 	bl	80035c8 <UART_CheckIdleState>
 8002c12:	4603      	mov	r3, r0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	@ 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d177      	bne.n	8002d24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_UART_Transmit+0x24>
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e070      	b.n	8002d26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2221      	movs	r2, #33	@ 0x21
 8002c50:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c52:	f7fd ff83 	bl	8000b5c <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c70:	d108      	bne.n	8002c84 <HAL_UART_Transmit+0x68>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	e003      	b.n	8002c8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c8c:	e02f      	b.n	8002cee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2200      	movs	r2, #0
 8002c96:	2180      	movs	r1, #128	@ 0x80
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fd3d 	bl	8003718 <UART_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d004      	beq.n	8002cae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e03b      	b.n	8002d26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	881a      	ldrh	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc0:	b292      	uxth	r2, r2
 8002cc2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	61bb      	str	r3, [r7, #24]
 8002cca:	e007      	b.n	8002cdc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1c9      	bne.n	8002c8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2140      	movs	r1, #64	@ 0x40
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 fd07 	bl	8003718 <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d004      	beq.n	8002d1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e005      	b.n	8002d26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e000      	b.n	8002d26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d24:	2302      	movs	r3, #2
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	@ 0x28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d165      	bne.n	8002e12 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_UART_Transmit_DMA+0x22>
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e05e      	b.n	8002e14 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	88fa      	ldrh	r2, [r7, #6]
 8002d60:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2221      	movs	r2, #33	@ 0x21
 8002d78:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d027      	beq.n	8002dd2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	4a25      	ldr	r2, [pc, #148]	@ (8002e1c <HAL_UART_Transmit_DMA+0xec>)
 8002d88:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8e:	4a24      	ldr	r2, [pc, #144]	@ (8002e20 <HAL_UART_Transmit_DMA+0xf0>)
 8002d90:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	4a23      	ldr	r2, [pc, #140]	@ (8002e24 <HAL_UART_Transmit_DMA+0xf4>)
 8002d98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	2200      	movs	r2, #0
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	4619      	mov	r1, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3328      	adds	r3, #40	@ 0x28
 8002db2:	461a      	mov	r2, r3
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	f7fe f8a7 	bl	8000f08 <HAL_DMA_Start_IT>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e020      	b.n	8002e14 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2240      	movs	r2, #64	@ 0x40
 8002dd8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3308      	adds	r3, #8
 8002de0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	613b      	str	r3, [r7, #16]
   return(result);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002df0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3308      	adds	r3, #8
 8002df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfa:	623a      	str	r2, [r7, #32]
 8002dfc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	69f9      	ldr	r1, [r7, #28]
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e5      	bne.n	8002dda <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	e000      	b.n	8002e14 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002e12:	2302      	movs	r3, #2
  }
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3728      	adds	r7, #40	@ 0x28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	08003a49 	.word	0x08003a49
 8002e20:	08003ae3 	.word	0x08003ae3
 8002e24:	08003c69 	.word	0x08003c69

08002e28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08a      	sub	sp, #40	@ 0x28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d137      	bne.n	8002eb0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_UART_Receive_DMA+0x24>
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e030      	b.n	8002eb2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a18      	ldr	r2, [pc, #96]	@ (8002ebc <HAL_UART_Receive_DMA+0x94>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d01f      	beq.n	8002ea0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d018      	beq.n	8002ea0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	69f9      	ldr	r1, [r7, #28]
 8002e92:	6a3a      	ldr	r2, [r7, #32]
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e6      	bne.n	8002e6e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fca4 	bl	80037f4 <UART_Start_Receive_DMA>
 8002eac:	4603      	mov	r3, r0
 8002eae:	e000      	b.n	8002eb2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
  }
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3728      	adds	r7, #40	@ 0x28
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40008000 	.word	0x40008000

08002ec0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f18:	b08a      	sub	sp, #40	@ 0x28
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4ba4      	ldr	r3, [pc, #656]	@ (80031d4 <UART_SetConfig+0x2c0>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a99      	ldr	r2, [pc, #612]	@ (80031d8 <UART_SetConfig+0x2c4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d004      	beq.n	8002f80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a90      	ldr	r2, [pc, #576]	@ (80031dc <UART_SetConfig+0x2c8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d126      	bne.n	8002fec <UART_SetConfig+0xd8>
 8002f9e:	4b90      	ldr	r3, [pc, #576]	@ (80031e0 <UART_SetConfig+0x2cc>)
 8002fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d81b      	bhi.n	8002fe4 <UART_SetConfig+0xd0>
 8002fac:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb4 <UART_SetConfig+0xa0>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fc5 	.word	0x08002fc5
 8002fb8:	08002fd5 	.word	0x08002fd5
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	08002fdd 	.word	0x08002fdd
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fca:	e116      	b.n	80031fa <UART_SetConfig+0x2e6>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd2:	e112      	b.n	80031fa <UART_SetConfig+0x2e6>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fda:	e10e      	b.n	80031fa <UART_SetConfig+0x2e6>
 8002fdc:	2308      	movs	r3, #8
 8002fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fe2:	e10a      	b.n	80031fa <UART_SetConfig+0x2e6>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fea:	e106      	b.n	80031fa <UART_SetConfig+0x2e6>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a7c      	ldr	r2, [pc, #496]	@ (80031e4 <UART_SetConfig+0x2d0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d138      	bne.n	8003068 <UART_SetConfig+0x154>
 8002ff6:	4b7a      	ldr	r3, [pc, #488]	@ (80031e0 <UART_SetConfig+0x2cc>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d82d      	bhi.n	8003060 <UART_SetConfig+0x14c>
 8003004:	a201      	add	r2, pc, #4	@ (adr r2, 800300c <UART_SetConfig+0xf8>)
 8003006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300a:	bf00      	nop
 800300c:	08003041 	.word	0x08003041
 8003010:	08003061 	.word	0x08003061
 8003014:	08003061 	.word	0x08003061
 8003018:	08003061 	.word	0x08003061
 800301c:	08003051 	.word	0x08003051
 8003020:	08003061 	.word	0x08003061
 8003024:	08003061 	.word	0x08003061
 8003028:	08003061 	.word	0x08003061
 800302c:	08003049 	.word	0x08003049
 8003030:	08003061 	.word	0x08003061
 8003034:	08003061 	.word	0x08003061
 8003038:	08003061 	.word	0x08003061
 800303c:	08003059 	.word	0x08003059
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003046:	e0d8      	b.n	80031fa <UART_SetConfig+0x2e6>
 8003048:	2302      	movs	r3, #2
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800304e:	e0d4      	b.n	80031fa <UART_SetConfig+0x2e6>
 8003050:	2304      	movs	r3, #4
 8003052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003056:	e0d0      	b.n	80031fa <UART_SetConfig+0x2e6>
 8003058:	2308      	movs	r3, #8
 800305a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305e:	e0cc      	b.n	80031fa <UART_SetConfig+0x2e6>
 8003060:	2310      	movs	r3, #16
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003066:	e0c8      	b.n	80031fa <UART_SetConfig+0x2e6>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a5e      	ldr	r2, [pc, #376]	@ (80031e8 <UART_SetConfig+0x2d4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d125      	bne.n	80030be <UART_SetConfig+0x1aa>
 8003072:	4b5b      	ldr	r3, [pc, #364]	@ (80031e0 <UART_SetConfig+0x2cc>)
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003078:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800307c:	2b30      	cmp	r3, #48	@ 0x30
 800307e:	d016      	beq.n	80030ae <UART_SetConfig+0x19a>
 8003080:	2b30      	cmp	r3, #48	@ 0x30
 8003082:	d818      	bhi.n	80030b6 <UART_SetConfig+0x1a2>
 8003084:	2b20      	cmp	r3, #32
 8003086:	d00a      	beq.n	800309e <UART_SetConfig+0x18a>
 8003088:	2b20      	cmp	r3, #32
 800308a:	d814      	bhi.n	80030b6 <UART_SetConfig+0x1a2>
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <UART_SetConfig+0x182>
 8003090:	2b10      	cmp	r3, #16
 8003092:	d008      	beq.n	80030a6 <UART_SetConfig+0x192>
 8003094:	e00f      	b.n	80030b6 <UART_SetConfig+0x1a2>
 8003096:	2300      	movs	r3, #0
 8003098:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309c:	e0ad      	b.n	80031fa <UART_SetConfig+0x2e6>
 800309e:	2302      	movs	r3, #2
 80030a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030a4:	e0a9      	b.n	80031fa <UART_SetConfig+0x2e6>
 80030a6:	2304      	movs	r3, #4
 80030a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ac:	e0a5      	b.n	80031fa <UART_SetConfig+0x2e6>
 80030ae:	2308      	movs	r3, #8
 80030b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030b4:	e0a1      	b.n	80031fa <UART_SetConfig+0x2e6>
 80030b6:	2310      	movs	r3, #16
 80030b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030bc:	e09d      	b.n	80031fa <UART_SetConfig+0x2e6>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a4a      	ldr	r2, [pc, #296]	@ (80031ec <UART_SetConfig+0x2d8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d125      	bne.n	8003114 <UART_SetConfig+0x200>
 80030c8:	4b45      	ldr	r3, [pc, #276]	@ (80031e0 <UART_SetConfig+0x2cc>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80030d4:	d016      	beq.n	8003104 <UART_SetConfig+0x1f0>
 80030d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80030d8:	d818      	bhi.n	800310c <UART_SetConfig+0x1f8>
 80030da:	2b80      	cmp	r3, #128	@ 0x80
 80030dc:	d00a      	beq.n	80030f4 <UART_SetConfig+0x1e0>
 80030de:	2b80      	cmp	r3, #128	@ 0x80
 80030e0:	d814      	bhi.n	800310c <UART_SetConfig+0x1f8>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <UART_SetConfig+0x1d8>
 80030e6:	2b40      	cmp	r3, #64	@ 0x40
 80030e8:	d008      	beq.n	80030fc <UART_SetConfig+0x1e8>
 80030ea:	e00f      	b.n	800310c <UART_SetConfig+0x1f8>
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f2:	e082      	b.n	80031fa <UART_SetConfig+0x2e6>
 80030f4:	2302      	movs	r3, #2
 80030f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fa:	e07e      	b.n	80031fa <UART_SetConfig+0x2e6>
 80030fc:	2304      	movs	r3, #4
 80030fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003102:	e07a      	b.n	80031fa <UART_SetConfig+0x2e6>
 8003104:	2308      	movs	r3, #8
 8003106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310a:	e076      	b.n	80031fa <UART_SetConfig+0x2e6>
 800310c:	2310      	movs	r3, #16
 800310e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003112:	e072      	b.n	80031fa <UART_SetConfig+0x2e6>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a35      	ldr	r2, [pc, #212]	@ (80031f0 <UART_SetConfig+0x2dc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d12a      	bne.n	8003174 <UART_SetConfig+0x260>
 800311e:	4b30      	ldr	r3, [pc, #192]	@ (80031e0 <UART_SetConfig+0x2cc>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003124:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003128:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800312c:	d01a      	beq.n	8003164 <UART_SetConfig+0x250>
 800312e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003132:	d81b      	bhi.n	800316c <UART_SetConfig+0x258>
 8003134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003138:	d00c      	beq.n	8003154 <UART_SetConfig+0x240>
 800313a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800313e:	d815      	bhi.n	800316c <UART_SetConfig+0x258>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <UART_SetConfig+0x238>
 8003144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003148:	d008      	beq.n	800315c <UART_SetConfig+0x248>
 800314a:	e00f      	b.n	800316c <UART_SetConfig+0x258>
 800314c:	2300      	movs	r3, #0
 800314e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003152:	e052      	b.n	80031fa <UART_SetConfig+0x2e6>
 8003154:	2302      	movs	r3, #2
 8003156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800315a:	e04e      	b.n	80031fa <UART_SetConfig+0x2e6>
 800315c:	2304      	movs	r3, #4
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003162:	e04a      	b.n	80031fa <UART_SetConfig+0x2e6>
 8003164:	2308      	movs	r3, #8
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316a:	e046      	b.n	80031fa <UART_SetConfig+0x2e6>
 800316c:	2310      	movs	r3, #16
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003172:	e042      	b.n	80031fa <UART_SetConfig+0x2e6>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a17      	ldr	r2, [pc, #92]	@ (80031d8 <UART_SetConfig+0x2c4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d13a      	bne.n	80031f4 <UART_SetConfig+0x2e0>
 800317e:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <UART_SetConfig+0x2cc>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003184:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003188:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800318c:	d01a      	beq.n	80031c4 <UART_SetConfig+0x2b0>
 800318e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003192:	d81b      	bhi.n	80031cc <UART_SetConfig+0x2b8>
 8003194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003198:	d00c      	beq.n	80031b4 <UART_SetConfig+0x2a0>
 800319a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800319e:	d815      	bhi.n	80031cc <UART_SetConfig+0x2b8>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <UART_SetConfig+0x298>
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a8:	d008      	beq.n	80031bc <UART_SetConfig+0x2a8>
 80031aa:	e00f      	b.n	80031cc <UART_SetConfig+0x2b8>
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031b2:	e022      	b.n	80031fa <UART_SetConfig+0x2e6>
 80031b4:	2302      	movs	r3, #2
 80031b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ba:	e01e      	b.n	80031fa <UART_SetConfig+0x2e6>
 80031bc:	2304      	movs	r3, #4
 80031be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c2:	e01a      	b.n	80031fa <UART_SetConfig+0x2e6>
 80031c4:	2308      	movs	r3, #8
 80031c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ca:	e016      	b.n	80031fa <UART_SetConfig+0x2e6>
 80031cc:	2310      	movs	r3, #16
 80031ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d2:	e012      	b.n	80031fa <UART_SetConfig+0x2e6>
 80031d4:	efff69f3 	.word	0xefff69f3
 80031d8:	40008000 	.word	0x40008000
 80031dc:	40013800 	.word	0x40013800
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40004400 	.word	0x40004400
 80031e8:	40004800 	.word	0x40004800
 80031ec:	40004c00 	.word	0x40004c00
 80031f0:	40005000 	.word	0x40005000
 80031f4:	2310      	movs	r3, #16
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a9f      	ldr	r2, [pc, #636]	@ (800347c <UART_SetConfig+0x568>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d17a      	bne.n	80032fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003204:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003208:	2b08      	cmp	r3, #8
 800320a:	d824      	bhi.n	8003256 <UART_SetConfig+0x342>
 800320c:	a201      	add	r2, pc, #4	@ (adr r2, 8003214 <UART_SetConfig+0x300>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003239 	.word	0x08003239
 8003218:	08003257 	.word	0x08003257
 800321c:	08003241 	.word	0x08003241
 8003220:	08003257 	.word	0x08003257
 8003224:	08003247 	.word	0x08003247
 8003228:	08003257 	.word	0x08003257
 800322c:	08003257 	.word	0x08003257
 8003230:	08003257 	.word	0x08003257
 8003234:	0800324f 	.word	0x0800324f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003238:	f7fe ff5a 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 800323c:	61f8      	str	r0, [r7, #28]
        break;
 800323e:	e010      	b.n	8003262 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003240:	4b8f      	ldr	r3, [pc, #572]	@ (8003480 <UART_SetConfig+0x56c>)
 8003242:	61fb      	str	r3, [r7, #28]
        break;
 8003244:	e00d      	b.n	8003262 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003246:	f7fe febb 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800324a:	61f8      	str	r0, [r7, #28]
        break;
 800324c:	e009      	b.n	8003262 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003252:	61fb      	str	r3, [r7, #28]
        break;
 8003254:	e005      	b.n	8003262 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003260:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80fb 	beq.w	8003460 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	429a      	cmp	r2, r3
 8003278:	d305      	bcc.n	8003286 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	429a      	cmp	r2, r3
 8003284:	d903      	bls.n	800328e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800328c:	e0e8      	b.n	8003460 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2200      	movs	r2, #0
 8003292:	461c      	mov	r4, r3
 8003294:	4615      	mov	r5, r2
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	022b      	lsls	r3, r5, #8
 80032a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032a4:	0222      	lsls	r2, r4, #8
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	6849      	ldr	r1, [r1, #4]
 80032aa:	0849      	lsrs	r1, r1, #1
 80032ac:	2000      	movs	r0, #0
 80032ae:	4688      	mov	r8, r1
 80032b0:	4681      	mov	r9, r0
 80032b2:	eb12 0a08 	adds.w	sl, r2, r8
 80032b6:	eb43 0b09 	adc.w	fp, r3, r9
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032c8:	4650      	mov	r0, sl
 80032ca:	4659      	mov	r1, fp
 80032cc:	f7fc ff7c 	bl	80001c8 <__aeabi_uldivmod>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4613      	mov	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032de:	d308      	bcc.n	80032f2 <UART_SetConfig+0x3de>
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032e6:	d204      	bcs.n	80032f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	60da      	str	r2, [r3, #12]
 80032f0:	e0b6      	b.n	8003460 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032f8:	e0b2      	b.n	8003460 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003302:	d15e      	bne.n	80033c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003304:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003308:	2b08      	cmp	r3, #8
 800330a:	d828      	bhi.n	800335e <UART_SetConfig+0x44a>
 800330c:	a201      	add	r2, pc, #4	@ (adr r2, 8003314 <UART_SetConfig+0x400>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003339 	.word	0x08003339
 8003318:	08003341 	.word	0x08003341
 800331c:	08003349 	.word	0x08003349
 8003320:	0800335f 	.word	0x0800335f
 8003324:	0800334f 	.word	0x0800334f
 8003328:	0800335f 	.word	0x0800335f
 800332c:	0800335f 	.word	0x0800335f
 8003330:	0800335f 	.word	0x0800335f
 8003334:	08003357 	.word	0x08003357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003338:	f7fe feda 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 800333c:	61f8      	str	r0, [r7, #28]
        break;
 800333e:	e014      	b.n	800336a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003340:	f7fe feec 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 8003344:	61f8      	str	r0, [r7, #28]
        break;
 8003346:	e010      	b.n	800336a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003348:	4b4d      	ldr	r3, [pc, #308]	@ (8003480 <UART_SetConfig+0x56c>)
 800334a:	61fb      	str	r3, [r7, #28]
        break;
 800334c:	e00d      	b.n	800336a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800334e:	f7fe fe37 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8003352:	61f8      	str	r0, [r7, #28]
        break;
 8003354:	e009      	b.n	800336a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003356:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800335a:	61fb      	str	r3, [r7, #28]
        break;
 800335c:	e005      	b.n	800336a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003368:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d077      	beq.n	8003460 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005a      	lsls	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	441a      	add	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b0f      	cmp	r3, #15
 800338a:	d916      	bls.n	80033ba <UART_SetConfig+0x4a6>
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003392:	d212      	bcs.n	80033ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f023 030f 	bic.w	r3, r3, #15
 800339c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	8afb      	ldrh	r3, [r7, #22]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	8afa      	ldrh	r2, [r7, #22]
 80033b6:	60da      	str	r2, [r3, #12]
 80033b8:	e052      	b.n	8003460 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033c0:	e04e      	b.n	8003460 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d827      	bhi.n	800341a <UART_SetConfig+0x506>
 80033ca:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <UART_SetConfig+0x4bc>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080033fd 	.word	0x080033fd
 80033d8:	08003405 	.word	0x08003405
 80033dc:	0800341b 	.word	0x0800341b
 80033e0:	0800340b 	.word	0x0800340b
 80033e4:	0800341b 	.word	0x0800341b
 80033e8:	0800341b 	.word	0x0800341b
 80033ec:	0800341b 	.word	0x0800341b
 80033f0:	08003413 	.word	0x08003413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7fe fe7c 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80033f8:	61f8      	str	r0, [r7, #28]
        break;
 80033fa:	e014      	b.n	8003426 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033fc:	f7fe fe8e 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 8003400:	61f8      	str	r0, [r7, #28]
        break;
 8003402:	e010      	b.n	8003426 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003404:	4b1e      	ldr	r3, [pc, #120]	@ (8003480 <UART_SetConfig+0x56c>)
 8003406:	61fb      	str	r3, [r7, #28]
        break;
 8003408:	e00d      	b.n	8003426 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800340a:	f7fe fdd9 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800340e:	61f8      	str	r0, [r7, #28]
        break;
 8003410:	e009      	b.n	8003426 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003416:	61fb      	str	r3, [r7, #28]
        break;
 8003418:	e005      	b.n	8003426 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003424:	bf00      	nop
    }

    if (pclk != 0U)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d019      	beq.n	8003460 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	085a      	lsrs	r2, r3, #1
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	d909      	bls.n	800345a <UART_SetConfig+0x546>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800344c:	d205      	bcs.n	800345a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60da      	str	r2, [r3, #12]
 8003458:	e002      	b.n	8003460 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800346c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003470:	4618      	mov	r0, r3
 8003472:	3728      	adds	r7, #40	@ 0x28
 8003474:	46bd      	mov	sp, r7
 8003476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347a:	bf00      	nop
 800347c:	40008000 	.word	0x40008000
 8003480:	00f42400 	.word	0x00f42400

08003484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01a      	beq.n	800359a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003582:	d10a      	bne.n	800359a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
  }
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b098      	sub	sp, #96	@ 0x60
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035d8:	f7fd fac0 	bl	8000b5c <HAL_GetTick>
 80035dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d12e      	bne.n	800364a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035f4:	2200      	movs	r2, #0
 80035f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f88c 	bl	8003718 <UART_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d021      	beq.n	800364a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800361a:	653b      	str	r3, [r7, #80]	@ 0x50
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003624:	647b      	str	r3, [r7, #68]	@ 0x44
 8003626:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800362a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e6      	bne.n	8003606 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e062      	b.n	8003710 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d149      	bne.n	80036ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f856 	bl	8003718 <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d03c      	beq.n	80036ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	623b      	str	r3, [r7, #32]
   return(result);
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003690:	633b      	str	r3, [r7, #48]	@ 0x30
 8003692:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800369e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e6      	bne.n	8003672 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3308      	adds	r3, #8
 80036aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0301 	bic.w	r3, r3, #1
 80036ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3308      	adds	r3, #8
 80036c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036c4:	61fa      	str	r2, [r7, #28]
 80036c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	69b9      	ldr	r1, [r7, #24]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	617b      	str	r3, [r7, #20]
   return(result);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e5      	bne.n	80036a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e011      	b.n	8003710 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3758      	adds	r7, #88	@ 0x58
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003728:	e04f      	b.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d04b      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003732:	f7fd fa13 	bl	8000b5c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	429a      	cmp	r2, r3
 8003740:	d302      	bcc.n	8003748 <UART_WaitOnFlagUntilTimeout+0x30>
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e04e      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d037      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b80      	cmp	r3, #128	@ 0x80
 800375e:	d034      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b40      	cmp	r3, #64	@ 0x40
 8003764:	d031      	beq.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b08      	cmp	r3, #8
 8003772:	d110      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2208      	movs	r2, #8
 800377a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f8ff 	bl	8003980 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2208      	movs	r2, #8
 8003786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e029      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a4:	d111      	bne.n	80037ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f8e5 	bl	8003980 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e00f      	b.n	80037ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4013      	ands	r3, r2
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	bf0c      	ite	eq
 80037da:	2301      	moveq	r3, #1
 80037dc:	2300      	movne	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d0a0      	beq.n	800372a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b096      	sub	sp, #88	@ 0x58
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2222      	movs	r2, #34	@ 0x22
 800381c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003824:	2b00      	cmp	r3, #0
 8003826:	d028      	beq.n	800387a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382c:	4a3e      	ldr	r2, [pc, #248]	@ (8003928 <UART_Start_Receive_DMA+0x134>)
 800382e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003834:	4a3d      	ldr	r2, [pc, #244]	@ (800392c <UART_Start_Receive_DMA+0x138>)
 8003836:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800383c:	4a3c      	ldr	r2, [pc, #240]	@ (8003930 <UART_Start_Receive_DMA+0x13c>)
 800383e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003844:	2200      	movs	r2, #0
 8003846:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3324      	adds	r3, #36	@ 0x24
 8003852:	4619      	mov	r1, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003858:	461a      	mov	r2, r3
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	f7fd fb54 	bl	8000f08 <HAL_DMA_Start_IT>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d009      	beq.n	800387a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2210      	movs	r2, #16
 800386a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e051      	b.n	800391e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d018      	beq.n	80038b4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003892:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003896:	657b      	str	r3, [r7, #84]	@ 0x54
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038a2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80038a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80038ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e6      	bne.n	8003882 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3308      	adds	r3, #8
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3308      	adds	r3, #8
 80038d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80038d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80038d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038dc:	e841 2300 	strex	r3, r2, [r1]
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80038e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e5      	bne.n	80038b4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3308      	adds	r3, #8
 80038ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	613b      	str	r3, [r7, #16]
   return(result);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3308      	adds	r3, #8
 8003906:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003908:	623a      	str	r2, [r7, #32]
 800390a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	69f9      	ldr	r1, [r7, #28]
 800390e:	6a3a      	ldr	r2, [r7, #32]
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	61bb      	str	r3, [r7, #24]
   return(result);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e5      	bne.n	80038e8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3758      	adds	r7, #88	@ 0x58
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	08003aff 	.word	0x08003aff
 800392c:	08003c2b 	.word	0x08003c2b
 8003930:	08003c69 	.word	0x08003c69

08003934 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b089      	sub	sp, #36	@ 0x24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	60bb      	str	r3, [r7, #8]
   return(result);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	6979      	ldr	r1, [r7, #20]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	e841 2300 	strex	r3, r2, [r1]
 8003966:	613b      	str	r3, [r7, #16]
   return(result);
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e6      	bne.n	800393c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8003974:	bf00      	nop
 8003976:	3724      	adds	r7, #36	@ 0x24
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003980:	b480      	push	{r7}
 8003982:	b095      	sub	sp, #84	@ 0x54
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800399c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80039a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e6      	bne.n	8003988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3308      	adds	r3, #8
 80039c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3308      	adds	r3, #8
 80039d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e5      	bne.n	80039ba <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d118      	bne.n	8003a28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f023 0310 	bic.w	r3, r3, #16
 8003a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	6979      	ldr	r1, [r7, #20]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	613b      	str	r3, [r7, #16]
   return(result);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e6      	bne.n	80039f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a3c:	bf00      	nop
 8003a3e:	3754      	adds	r7, #84	@ 0x54
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b090      	sub	sp, #64	@ 0x40
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a54:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d137      	bne.n	8003ad4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8003a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3308      	adds	r3, #8
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3308      	adds	r3, #8
 8003a8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e5      	bne.n	8003a6c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	617b      	str	r3, [r7, #20]
   return(result);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e6      	bne.n	8003aa0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ad2:	e002      	b.n	8003ada <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003ad4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003ad6:	f7fc fd0d 	bl	80004f4 <HAL_UART_TxCpltCallback>
}
 8003ada:	bf00      	nop
 8003adc:	3740      	adds	r7, #64	@ 0x40
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7ff f9e5 	bl	8002ec0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b09c      	sub	sp, #112	@ 0x70
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d171      	bne.n	8003bfe <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8003b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b42:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e6      	bne.n	8003b22 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3308      	adds	r3, #8
 8003b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b5e:	e853 3f00 	ldrex	r3, [r3]
 8003b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3308      	adds	r3, #8
 8003b72:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003b74:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b76:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b7c:	e841 2300 	strex	r3, r2, [r1]
 8003b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e5      	bne.n	8003b54 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	623b      	str	r3, [r7, #32]
   return(result);
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ba8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb0:	e841 2300 	strex	r3, r2, [r1]
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e5      	bne.n	8003b88 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d118      	bne.n	8003bfe <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f023 0310 	bic.w	r3, r3, #16
 8003be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	69b9      	ldr	r1, [r7, #24]
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	617b      	str	r3, [r7, #20]
   return(result);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e6      	bne.n	8003bcc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c00:	2200      	movs	r2, #0
 8003c02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d107      	bne.n	8003c1c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c12:	4619      	mov	r1, r3
 8003c14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c16:	f7ff f971 	bl	8002efc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c1a:	e002      	b.n	8003c22 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c1e:	f7fc fc7d 	bl	800051c <HAL_UART_RxCpltCallback>
}
 8003c22:	bf00      	nop
 8003c24:	3770      	adds	r7, #112	@ 0x70
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d109      	bne.n	8003c5a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff f952 	bl	8002efc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c58:	e002      	b.n	8003c60 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7ff f93a 	bl	8002ed4 <HAL_UART_RxHalfCpltCallback>
}
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c74:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c7a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	2b80      	cmp	r3, #128	@ 0x80
 8003c90:	d109      	bne.n	8003ca6 <UART_DMAError+0x3e>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b21      	cmp	r3, #33	@ 0x21
 8003c96:	d106      	bne.n	8003ca6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8003ca0:	6978      	ldr	r0, [r7, #20]
 8003ca2:	f7ff fe47 	bl	8003934 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb0:	2b40      	cmp	r3, #64	@ 0x40
 8003cb2:	d109      	bne.n	8003cc8 <UART_DMAError+0x60>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b22      	cmp	r3, #34	@ 0x22
 8003cb8:	d106      	bne.n	8003cc8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff fe5c 	bl	8003980 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cce:	f043 0210 	orr.w	r2, r3, #16
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cd8:	6978      	ldr	r0, [r7, #20]
 8003cda:	f7ff f905 	bl	8002ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cde:	bf00      	nop
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <memset>:
 8003ce6:	4402      	add	r2, r0
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d100      	bne.n	8003cf0 <memset+0xa>
 8003cee:	4770      	bx	lr
 8003cf0:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf4:	e7f9      	b.n	8003cea <memset+0x4>
	...

08003cf8 <__libc_init_array>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8003d30 <__libc_init_array+0x38>)
 8003cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8003d34 <__libc_init_array+0x3c>)
 8003cfe:	1b64      	subs	r4, r4, r5
 8003d00:	10a4      	asrs	r4, r4, #2
 8003d02:	2600      	movs	r6, #0
 8003d04:	42a6      	cmp	r6, r4
 8003d06:	d109      	bne.n	8003d1c <__libc_init_array+0x24>
 8003d08:	4d0b      	ldr	r5, [pc, #44]	@ (8003d38 <__libc_init_array+0x40>)
 8003d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d3c <__libc_init_array+0x44>)
 8003d0c:	f000 f818 	bl	8003d40 <_init>
 8003d10:	1b64      	subs	r4, r4, r5
 8003d12:	10a4      	asrs	r4, r4, #2
 8003d14:	2600      	movs	r6, #0
 8003d16:	42a6      	cmp	r6, r4
 8003d18:	d105      	bne.n	8003d26 <__libc_init_array+0x2e>
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d20:	4798      	blx	r3
 8003d22:	3601      	adds	r6, #1
 8003d24:	e7ee      	b.n	8003d04 <__libc_init_array+0xc>
 8003d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d2a:	4798      	blx	r3
 8003d2c:	3601      	adds	r6, #1
 8003d2e:	e7f2      	b.n	8003d16 <__libc_init_array+0x1e>
 8003d30:	08003da8 	.word	0x08003da8
 8003d34:	08003da8 	.word	0x08003da8
 8003d38:	08003da8 	.word	0x08003da8
 8003d3c:	08003dac 	.word	0x08003dac

08003d40 <_init>:
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d42:	bf00      	nop
 8003d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d46:	bc08      	pop	{r3}
 8003d48:	469e      	mov	lr, r3
 8003d4a:	4770      	bx	lr

08003d4c <_fini>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	bf00      	nop
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr
